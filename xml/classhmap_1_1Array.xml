<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classhmap_1_1Array" kind="class" language="C++" prot="public">
    <compoundname>hmap::Array</compoundname>
    <derivedcompoundref refid="classhmap_1_1Tile" prot="public" virt="non-virtual">hmap::Tile</derivedcompoundref>
    <includes refid="array_8hpp" local="no">array.hpp</includes>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classhmap_1_1Array_1a3cf6ada373f8af1affcbbed22db1194f" prot="public" static="no" mutable="no">
        <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
        <definition>Vec2&lt;int&gt; hmap::Array::shape</definition>
        <argsstring></argsstring>
        <name>shape</name>
        <qualifiedname>hmap::Array::shape</qualifiedname>
        <briefdescription>
<para>The shape of the array {ni, nj}. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="38" column="8" bodyfile="HighMap/include/highmap/array.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhmap_1_1Array_1af586ddce153ac93df48a6d26609d7264" prot="public" static="no" mutable="no">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt;float&gt; hmap::Array::vector</definition>
        <argsstring></argsstring>
        <name>vector</name>
        <qualifiedname>hmap::Array::vector</qualifiedname>
        <briefdescription>
<para>The underlying data storage, a vector of size shape.x * shape.y. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="44" column="15" bodyfile="HighMap/include/highmap/array.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classhmap_1_1Array_1a96b9bd19d1212e61b4ac4eb21931b298" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hmap::Array::Array</definition>
        <argsstring>()</argsstring>
        <name>Array</name>
        <qualifiedname>hmap::Array::Array</qualifiedname>
        <briefdescription>
<para>Constructs a new <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The shape of the array {ni, nj}. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The initial value to fill the array with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example #1</bold> <programlisting filename="ex_array.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><ref refid="classhmap_1_1Array_1a3cf6ada373f8af1affcbbed22db1194f" kindref="member">shape</ref><sp/>=<sp/>{6,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="classhmap_1_1Array_1a3cf6ada373f8af1affcbbed22db1194f" kindref="member">shape</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>1.f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>a.<ref refid="classhmap_1_1Array_1a3cf6ada373f8af1affcbbed22db1194f" kindref="member">shape</ref>.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>a.<ref refid="classhmap_1_1Array_1a3cf6ada373f8af1affcbbed22db1194f" kindref="member">shape</ref>.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>;<sp/>j++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>a(i,<sp/>j)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Example #2</bold> <programlisting filename="ex_to_png.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/><ref refid="classhmap_1_1Array_1a3cf6ada373f8af1affcbbed22db1194f" kindref="member">shape</ref><sp/>=<sp/>{512,<sp/>512};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>png</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array_1a3cf6ada373f8af1affcbbed22db1194f" kindref="member">shape</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z1.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;out_rgb.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z1.<ref refid="classhmap_1_1Array_1ad7018857827d8e8d263516bbbd77630f" kindref="member">to_png_grayscale</ref>(</highlight><highlight class="stringliteral">&quot;out_8bit.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z1.<ref refid="classhmap_1_1Array_1ad7018857827d8e8d263516bbbd77630f" kindref="member">to_png_grayscale</ref>(</highlight><highlight class="stringliteral">&quot;out_16bit.png&quot;</highlight><highlight class="normal">,<sp/>CV_16U);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>Array<sp/>from<sp/>png</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(</highlight><highlight class="stringliteral">&quot;out_8bit.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z3<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(</highlight><highlight class="stringliteral">&quot;out_16bit.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z1.<ref refid="classhmap_1_1Array_1abc72128c4c460e993d877cab54e17454" kindref="member">to_raw_16bit</ref>(</highlight><highlight class="stringliteral">&quot;out.raw&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_to_png.png&quot;</highlight><highlight class="normal">,<sp/>{z1,<sp/>z2,<sp/>z3},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="59" column="3" bodyfile="HighMap/src/array/array.cpp" bodystart="15" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a01be0e18bcfd224e61740d49929e8023" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hmap::Array::Array</definition>
        <argsstring>(Vec2&lt; int &gt; shape)</argsstring>
        <name>Array</name>
        <qualifiedname>hmap::Array::Array</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="61" column="3" bodyfile="HighMap/src/array/array.cpp" bodystart="19" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a885b4f45f50f0e7d9c32e316ecb9884b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hmap::Array::Array</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float value)</argsstring>
        <name>Array</name>
        <qualifiedname>hmap::Array::Array</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="63" column="3" bodyfile="HighMap/src/array/array.cpp" bodystart="24" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1aad62b698ef12cfd06b3fb09e8cce7635" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hmap::Array::Array</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>Array</name>
        <qualifiedname>hmap::Array::Array</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="65" column="3" bodyfile="HighMap/src/array/array.cpp" bodystart="30" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a263037d82c46689a6575719b0054f10a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
        <definition>Array &amp; hmap::Array::operator=</definition>
        <argsstring>(const float value)</argsstring>
        <name>operator=</name>
        <qualifiedname>hmap::Array::operator=</qualifiedname>
        <param>
          <type>const float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Overloads the assignment operator for scalar assignment. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar value to assign. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref>&amp; Reference to the current <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="77" column="9" bodyfile="HighMap/src/array/array.cpp" bodystart="51" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a412b5d0f678c59a3cde14395bbc83a3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
        <definition>Array &amp; hmap::Array::operator*=</definition>
        <argsstring>(const float value)</argsstring>
        <name>operator*=</name>
        <qualifiedname>hmap::Array::operator*=</qualifiedname>
        <param>
          <type>const float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Overloads the multiplication-assignment operator for scalar multiplication. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar value to multiply. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref>&amp; Reference to the current <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="86" column="9" bodyfile="HighMap/src/array/array.cpp" bodystart="57" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1ad631aba3c1ded924c1cd3fe6abe4c45f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
        <definition>Array &amp; hmap::Array::operator*=</definition>
        <argsstring>(const Array &amp;array)</argsstring>
        <name>operator*=</name>
        <qualifiedname>hmap::Array::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="88" column="9" bodyfile="HighMap/src/array/array.cpp" bodystart="66" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1ac1c2d200c6d5ba12f172615313706e66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
        <definition>Array &amp; hmap::Array::operator/=</definition>
        <argsstring>(const float value)</argsstring>
        <name>operator/=</name>
        <qualifiedname>hmap::Array::operator/=</qualifiedname>
        <param>
          <type>const float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Overloads the division-assignment operator for scalar division. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar value to divide by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref>&amp; Reference to the current <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="96" column="9" bodyfile="HighMap/src/array/array.cpp" bodystart="76" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a0360b4113ba5284ab2579984e62a86c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
        <definition>Array &amp; hmap::Array::operator/=</definition>
        <argsstring>(const Array &amp;array)</argsstring>
        <name>operator/=</name>
        <qualifiedname>hmap::Array::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="98" column="9" bodyfile="HighMap/src/array/array.cpp" bodystart="85" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a4bc8f7bde72fd387cf660124feb33d25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
        <definition>Array &amp; hmap::Array::operator+=</definition>
        <argsstring>(const float value)</argsstring>
        <name>operator+=</name>
        <qualifiedname>hmap::Array::operator+=</qualifiedname>
        <param>
          <type>const float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Overloads the addition-assignment operator for scalar addition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar value to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref>&amp; Reference to the current <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="106" column="9" bodyfile="HighMap/src/array/array.cpp" bodystart="95" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1af351b6eadd085e0821ace4b8f5196a6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
        <definition>Array &amp; hmap::Array::operator+=</definition>
        <argsstring>(const Array &amp;array)</argsstring>
        <name>operator+=</name>
        <qualifiedname>hmap::Array::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="108" column="9" bodyfile="HighMap/src/array/array.cpp" bodystart="104" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1aa6cdd9afcbe503938b7e9138b5064fb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
        <definition>Array &amp; hmap::Array::operator-=</definition>
        <argsstring>(const float value)</argsstring>
        <name>operator-=</name>
        <qualifiedname>hmap::Array::operator-=</qualifiedname>
        <param>
          <type>const float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Overloads the subtraction-assignment operator for scalar subtraction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar value to subtract. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref>&amp; Reference to the current <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="117" column="9" bodyfile="HighMap/src/array/array.cpp" bodystart="114" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a6300da3f7c4b50be908858787b00cc80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
        <definition>Array &amp; hmap::Array::operator-=</definition>
        <argsstring>(const Array &amp;array)</argsstring>
        <name>operator-=</name>
        <qualifiedname>hmap::Array::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="119" column="9" bodyfile="HighMap/src/array/array.cpp" bodystart="123" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1ad4b29fb20bdd0e1f9b76817f75e93347" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::Array::operator*</definition>
        <argsstring>(const float value) const</argsstring>
        <name>operator*</name>
        <qualifiedname>hmap::Array::operator*</qualifiedname>
        <param>
          <type>const float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Overloads the multiplication operator for scalar multiplication. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar value to multiply. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The resulting <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> after multiplication. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="127" column="9" bodyfile="HighMap/src/array/array.cpp" bodystart="133" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1ae6ede66a645d489770813dd75c62c01e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::Array::operator*</definition>
        <argsstring>(const Array &amp;array) const</argsstring>
        <name>operator*</name>
        <qualifiedname>hmap::Array::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Overloads the multiplication operator for element-wise multiplication with another array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> to multiply with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The resulting <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> after element-wise multiplication. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="136" column="9" bodyfile="HighMap/src/array/array.cpp" bodystart="144" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1ad1fc9b139538bac40998f9fcb44be678" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::Array::operator/</definition>
        <argsstring>(const float value) const</argsstring>
        <name>operator/</name>
        <qualifiedname>hmap::Array::operator/</qualifiedname>
        <param>
          <type>const float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Overloads the division operator for scalar division. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar value to divide by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The resulting <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> after division. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="153" column="9" bodyfile="HighMap/src/array/array.cpp" bodystart="167" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a2371b22e560a6146b4b3248dde54beef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::Array::operator/</definition>
        <argsstring>(const Array &amp;array) const</argsstring>
        <name>operator/</name>
        <qualifiedname>hmap::Array::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Overloads the division operator for element-wise division by another array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> to divide by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The resulting <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> after element-wise division. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="162" column="9" bodyfile="HighMap/src/array/array.cpp" bodystart="178" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a39a5f5334f2ced39ac8bf82085c04400" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::Array::operator+</definition>
        <argsstring>(const float value) const</argsstring>
        <name>operator+</name>
        <qualifiedname>hmap::Array::operator+</qualifiedname>
        <param>
          <type>const float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Overloads the addition operator for scalar addition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar value to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The resulting <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> after addition. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="179" column="9" bodyfile="HighMap/src/array/array.cpp" bodystart="201" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a818d037ead344885d52de41e03fb6ce2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::Array::operator+</definition>
        <argsstring>(const Array &amp;array) const</argsstring>
        <name>operator+</name>
        <qualifiedname>hmap::Array::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Overloads the addition operator for element-wise addition with another array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The resulting <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> after element-wise addition. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="188" column="9" bodyfile="HighMap/src/array/array.cpp" bodystart="212" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a641951bf572b4f4122354b4249d24a53" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::Array::operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <qualifiedname>hmap::Array::operator-</qualifiedname>
        <briefdescription>
<para>Overloads the unary minus operator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The resulting <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> after applying the unary minus. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="204" column="9" bodyfile="HighMap/src/array/array.cpp" bodystart="235" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a799dfad6efda5d1ca9183164a54e5e1a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::Array::operator-</definition>
        <argsstring>(const float value) const</argsstring>
        <name>operator-</name>
        <qualifiedname>hmap::Array::operator-</qualifiedname>
        <param>
          <type>const float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Overloads the subtraction operator for scalar subtraction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar value to subtract. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The resulting <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> after subtraction. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="212" column="9" bodyfile="HighMap/src/array/array.cpp" bodystart="246" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a5f94f3bb00f0d5ac33a7e82d80366cc4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::Array::operator-</definition>
        <argsstring>(const Array &amp;array) const</argsstring>
        <name>operator-</name>
        <qualifiedname>hmap::Array::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Overloads the subtraction operator for element-wise subtraction with another array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> to subtract. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The resulting <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> after element-wise subtraction. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="221" column="9" bodyfile="HighMap/src/array/array.cpp" bodystart="257" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1ad8a812fa8efe5590cf0f1c619909eafe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float &amp;</type>
        <definition>float &amp; hmap::Array::operator()</definition>
        <argsstring>(int i, int j)</argsstring>
        <name>operator()</name>
        <qualifiedname>hmap::Array::operator()</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Overloads the function call operator to access the array value at index (i, j). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The row index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>The column index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float&amp; Reference to the array value at index (i, j). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="240" column="9" bodyfile="HighMap/include/highmap/array.hpp" bodystart="240" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a4befd40052e9d7390eb7499e592769e5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const float &amp;</type>
        <definition>const float &amp; hmap::Array::operator()</definition>
        <argsstring>(int i, int j) const</argsstring>
        <name>operator()</name>
        <qualifiedname>hmap::Array::operator()</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Overloads the function call operator to access the array value at index (i, j) (const version). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The row index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>The column index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const float&amp; Reference to the array value at index (i, j). &lt;This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="253" column="15" bodyfile="HighMap/include/highmap/array.hpp" bodystart="253" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a832a302b58fa7b346df04675a14ad59c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt; float &gt; hmap::Array::col_to_vector</definition>
        <argsstring>(int j)</argsstring>
        <name>col_to_vector</name>
        <qualifiedname>hmap::Array::col_to_vector</qualifiedname>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Extracts a column &apos;j&apos; as a std::vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>The column index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;float&gt; The column values as a vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="268" column="15" bodyfile="HighMap/src/array/methods.cpp" bodystart="22" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a11949e2b41c869b364bc76129b4efeb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hmap::Array::count_non_zero</definition>
        <argsstring>()</argsstring>
        <name>count_non_zero</name>
        <qualifiedname>hmap::Array::count_non_zero</qualifiedname>
        <briefdescription>
<para>Return the number of non-zero elements in the array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int The number of non-zero elements. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="275" column="7" bodyfile="HighMap/src/array/methods.cpp" bodystart="30" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1aec532fdab57a1b7571a0e273a567537c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::Array::depose_amount_bilinear_at</definition>
        <argsstring>(int i, int j, float u, float v, float amount)</argsstring>
        <name>depose_amount_bilinear_at</name>
        <qualifiedname>hmap::Array::depose_amount_bilinear_at</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>float</type>
          <declname>u</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amount</declname>
        </param>
        <briefdescription>
<para>Distribute a value &apos;amount&apos; around the four cells (i, j), (i + 1, j), (i, j + 1), (i + 1, j + 1) by &quot;reversing&quot; the bilinear interpolation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>Index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>&apos;u&apos; interpolation parameter, expected to be in [0, 1[. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>&apos;v&apos; interpolation parameter, expected to be in [0, 1[. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount to be deposited. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="287" column="8" bodyfile="HighMap/src/array/methods.cpp" bodystart="38" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a8bc07abfedb22639797124b951331ddf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::Array::depose_amount_kernel_bilinear_at</definition>
        <argsstring>(int i, int j, float u, float v, int ir, float amount)</argsstring>
        <name>depose_amount_kernel_bilinear_at</name>
        <qualifiedname>hmap::Array::depose_amount_kernel_bilinear_at</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>float</type>
          <declname>u</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="289" column="8" bodyfile="HighMap/src/array/methods.cpp" bodystart="50" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a8c78b70cb181e3e43169b2b4e8d28e55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::Array::depose_amount_kernel_at</definition>
        <argsstring>(int i, int j, const Array &amp;kernel, float amount)</argsstring>
        <name>depose_amount_kernel_at</name>
        <qualifiedname>hmap::Array::depose_amount_kernel_at</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amount</declname>
        </param>
        <briefdescription>
<para>Distributes a specified amount of value around the cell located at (i, j) using a 1D deposition kernel applied in both horizontal and vertical directions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the cell in the array where the deposition starts. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the cell in the array where the deposition starts. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel</parametername>
</parameternamelist>
<parameterdescription>
<para>1D deposition kernel to be used for distribution. The kernel must contain an odd number of elements. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount of value to be distributed around the cell. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="307" column="8" bodyfile="HighMap/src/array/methods.cpp" bodystart="76" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a00b8f7462c1e22b1da8a67ec62d4c8c8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::Array::dump</definition>
        <argsstring>(const std::string &amp;fname=&quot;out.png&quot;) const</argsstring>
        <name>dump</name>
        <qualifiedname>hmap::Array::dump</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
          <defval>&quot;out.png&quot;</defval>
        </param>
        <briefdescription>
<para>Debug tool, dump some infos and generate an output file (16bits grayscale) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="313" column="8" bodyfile="HighMap/src/array/methods.cpp" bodystart="93" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a57be73f56189959dd25a0b760d971bf7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::Array::extract_slice</definition>
        <argsstring>(Vec4&lt; int &gt; idx) const</argsstring>
        <name>extract_slice</name>
        <qualifiedname>hmap::Array::extract_slice</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; int &gt;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Extracts a subarray defined by the slice indices {i1, i2, j1, j2} from the original array, creating a new array. Note that i2 and j2 are excluded from the slice. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>A Vec4&lt;int&gt; containing the slice extent indices {i1, i2, j1, j2}. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The extracted subarray. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="324" column="9" bodyfile="HighMap/src/array/methods.cpp" bodystart="100" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a7d552a649bcc47445b11d2e42d193492" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::Array::extract_slice</definition>
        <argsstring>(int i1, int i2, int j1, int j2) const</argsstring>
        <name>extract_slice</name>
        <qualifiedname>hmap::Array::extract_slice</qualifiedname>
        <param>
          <type>int</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j2</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="325" column="9" bodyfile="HighMap/src/array/methods.cpp" bodystart="111" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a000acd474d036adfa4e5e334139788ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::Array::from_file</definition>
        <argsstring>(const std::string &amp;fname)</argsstring>
        <name>from_file</name>
        <qualifiedname>hmap::Array::from_file</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
<para>Import array data from a raw binary file. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function loads the array data from a binary file specified by
</verbatim> <computeroutput>fname</computeroutput>. The file should contain raw binary data that corresponds to the internal representation of the array. The array&apos;s size and data type must match the expected format in the file.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the file to import data from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="337" column="8" bodyfile="HighMap/src/array/io.cpp" bodystart="18" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a61b4eb10e50548b12cfd0cb2f9eddde1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::Array::from_numpy</definition>
        <argsstring>(const std::string &amp;fname)</argsstring>
        <name>from_numpy</name>
        <qualifiedname>hmap::Array::from_numpy</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
<para>Import array data from a numpy binary file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the file to import data from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_from_numpy.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/><ref refid="classhmap_1_1Array_1a3cf6ada373f8af1affcbbed22db1194f" kindref="member">shape</ref><sp/>=<sp/>{512,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/><ref refid="classhmap_1_1Array_1a3cf6ada373f8af1affcbbed22db1194f" kindref="member">shape</ref>,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z1.<ref refid="classhmap_1_1Array_1a35ce8d4088ce4ae21003df18c204b7c6" kindref="member">to_numpy</ref>(</highlight><highlight class="stringliteral">&quot;out.npy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z2.<ref refid="classhmap_1_1Array_1a61b4eb10e50548b12cfd0cb2f9eddde1" kindref="member">from_numpy</ref>(</highlight><highlight class="stringliteral">&quot;out.npy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_from_numpy.png&quot;</highlight><highlight class="normal">,<sp/>{z1,<sp/>z2},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="347" column="8" bodyfile="HighMap/src/array/io.cpp" bodystart="29" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a1bc074aa8ae60f52c105702637631e62" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::Array::get_gradient_x_at</definition>
        <argsstring>(int i, int j) const</argsstring>
        <name>get_gradient_x_at</name>
        <qualifiedname>hmap::Array::get_gradient_x_at</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Calculates the gradient in the &apos;x&apos; (or &apos;i&apos;) direction at a specified index (i, j) using a 2nd order central difference scheme. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function computes the gradient in the x-direction, which
</verbatim> measures the rate of change along the x-axis. Note that this function cannot be used at the borders of the data, as the central difference scheme requires values from both sides of the point of interest.</para>
<para><simplesect kind="warning"><para>The gradient cannot be computed at the borders of the data array. Specifically, the function is not defined for i = 0, j = 0, i = shape.x - 1, or j = shape.y - 1.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Index along the x-direction, expected to be in the range [1, shape.x - 2]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>Index along the y-direction, expected to be in the range [1, shape.y - 2]. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float The computed gradient value in the x-direction at the specified index. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="369" column="9" bodyfile="HighMap/src/array/methods.cpp" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1acbe5c386af495d4648cdfa140f098398" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::Array::get_gradient_y_at</definition>
        <argsstring>(int i, int j) const</argsstring>
        <name>get_gradient_y_at</name>
        <qualifiedname>hmap::Array::get_gradient_y_at</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Calculates the gradient in the &apos;y&apos; (or &apos;j&apos;) direction at a specified index (i, j) using a 2nd order central difference scheme. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function computes the gradient in the y-direction, which
</verbatim> measures the rate of change along the y-axis. Note that this function cannot be used at the borders of the data, as the central difference scheme requires values from both sides of the point of interest.</para>
<para><simplesect kind="warning"><para>The gradient cannot be computed at the borders of the data array. Specifically, the function is not defined for i = 0, j = 0, i = shape.x - 1, or j = shape.y - 1.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Index along the x-direction, expected to be in the range [1, shape.x - 2]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>Index along the y-direction, expected to be in the range [1, shape.y - 2]. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float The computed gradient value in the y-direction at the specified index. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="391" column="9" bodyfile="HighMap/src/array/methods.cpp" bodystart="122" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a80c3088214a250b00d9e9649266e30d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::Array::get_gradient_x_bilinear_at</definition>
        <argsstring>(int i, int j, float u, float v) const</argsstring>
        <name>get_gradient_x_bilinear_at</name>
        <qualifiedname>hmap::Array::get_gradient_x_bilinear_at</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>float</type>
          <declname>u</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Calculates the gradient in the &apos;x&apos; (or &apos;i&apos;) direction at a location (x, y) near the index (i, j) using bilinear interpolation. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function uses bilinear interpolation to estimate the gradient
</verbatim> in the x-direction at a point within the cell defined by (i, j). The gradient is based on a 2nd order central difference scheme but interpolated to a finer resolution.</para>
<para><simplesect kind="warning"><para>The gradient cannot be computed at the borders of the data array. Specifically, the function is not defined for i = 0, j = 0, i = shape.x - 1, or j = shape.y - 1.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Index along the x-direction, expected to be in the range [1, shape.x - 2]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>Index along the y-direction, expected to be in the range [1, shape.y - 2]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>&apos;u&apos; interpolation parameter, expected to be in the range [0, 1[. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>&apos;v&apos; interpolation parameter, expected to be in the range [0, 1[. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float The interpolated gradient value in the x-direction at the specified location. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="415" column="9" bodyfile="HighMap/src/array/methods.cpp" bodystart="127" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a5f8056879200c2cfa85a757e8c87bb3d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::Array::get_gradient_y_bilinear_at</definition>
        <argsstring>(int i, int j, float u, float v) const</argsstring>
        <name>get_gradient_y_bilinear_at</name>
        <qualifiedname>hmap::Array::get_gradient_y_bilinear_at</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>float</type>
          <declname>u</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Calculates the gradient in the &apos;y&apos; (or &apos;j&apos;) direction at a location (x, y) near the index (i, j) using bilinear interpolation. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function uses bilinear interpolation to estimate the gradient
</verbatim> in the y-direction at a point within the cell defined by (i, j). The gradient is based on a 2nd order central difference scheme but interpolated to a finer resolution.</para>
<para><simplesect kind="warning"><para>The gradient cannot be computed at the borders of the data array. Specifically, the function is not defined for i = 0, j = 0, i = shape.x - 1, or j = shape.y - 1.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Index along the x-direction, expected to be in the range [1, shape.x - 2]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>Index along the y-direction, expected to be in the range [1, shape.y - 2]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>&apos;u&apos; interpolation parameter, expected to be in the range [0, 1[. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>&apos;v&apos; interpolation parameter, expected to be in the range [0, 1[. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float The interpolated gradient value in the y-direction at the specified location. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="439" column="9" bodyfile="HighMap/src/array/methods.cpp" bodystart="141" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a0e69d113a5b86b59e2bbf956262a2331" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structhmap_1_1Vec3" kindref="compound">Vec3</ref>&lt; float &gt;</type>
        <definition>Vec3&lt; float &gt; hmap::Array::get_normal_at</definition>
        <argsstring>(int i, int j) const</argsstring>
        <name>get_normal_at</name>
        <qualifiedname>hmap::Array::get_normal_at</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Calculates the surface normal vector at the index (i, j). </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function computes the surface normal at the specified index (i,
</verbatim> j) in the data array. The normal vector is a three-dimensional vector (x, y, z) that is perpendicular to the surface at that point.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Index along the x-direction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>Index along the y-direction. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vec3&lt;float&gt; The normal vector at the specified index (i, j). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="452" column="8" bodyfile="HighMap/src/array/methods.cpp" bodystart="155" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1ad1496c702975e9425113eb4a1dd0e49c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
        <definition>Vec2&lt; int &gt; hmap::Array::get_shape</definition>
        <argsstring>()</argsstring>
        <name>get_shape</name>
        <qualifiedname>hmap::Array::get_shape</qualifiedname>
        <briefdescription>
<para>Retrieves the shape of the array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2&lt;int&gt;</ref> The shape {ni, nj}. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="459" column="8" bodyfile="HighMap/src/array/array.cpp" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a7ef7005c4ca95be75c82bded5165634c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t hmap::Array::get_sizeof</definition>
        <argsstring>() const</argsstring>
        <name>get_sizeof</name>
        <qualifiedname>hmap::Array::get_sizeof</qualifiedname>
        <briefdescription>
<para>Retrieves the number of bytes occupied by the array data. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function returns the total size in bytes of the underlying
</verbatim> storage vector that holds the array data. This can be useful for memory management or debugging purposes.</para>
<para><simplesect kind="return"><para>size_t The size of the array data in bytes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="470" column="10" bodyfile="HighMap/src/array/methods.cpp" bodystart="169" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1ae47cb152f3e887d17160519afd589ee2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::Array::get_value_bicubic_at</definition>
        <argsstring>(int i, int j, float u, float v) const</argsstring>
        <name>get_value_bicubic_at</name>
        <qualifiedname>hmap::Array::get_value_bicubic_at</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>float</type>
          <declname>u</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Retrieves the array value at the location (x, y) near the index (i, j) using bicubic interpolation. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function uses bicubic interpolation to estimate the value at a
</verbatim> point within the cell defined by (i, j). Bicubic interpolation provides a smoother result compared to bilinear interpolation by taking into account the values of the surrounding 4x4 grid of points, resulting in better accuracy when interpolating in areas with gradients or curves.</para>
<para><simplesect kind="warning"><para>This function cannot be used at the upper borders of the array, specifically for i = shape.x - 2 or j = shape.y - 2, as bicubic interpolation requires surrounding data points from a 4x4 neighborhood.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Index along the x-direction, expected to be in the range [1, shape.x - 3]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>Index along the y-direction, expected to be in the range [1, shape.y - 3]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>&apos;u&apos; interpolation parameter, expected to be in the range [0, 1[. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>&apos;v&apos; interpolation parameter, expected to be in the range [0, 1[. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float The interpolated value at the specified location (x, y). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="494" column="9" bodyfile="HighMap/src/array/methods.cpp" bodystart="186" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a12eb51c18154e3e452afe9743636085f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::Array::get_value_bilinear_at</definition>
        <argsstring>(int i, int j, float u, float v) const</argsstring>
        <name>get_value_bilinear_at</name>
        <qualifiedname>hmap::Array::get_value_bilinear_at</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>float</type>
          <declname>u</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Retrieves the array value at the location (x, y) near the index (i, j) using bilinear interpolation. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function uses bilinear interpolation to estimate the value at a
</verbatim> point within the cell defined by (i, j). Bilinear interpolation is applied based on the surrounding values to approximate the value at the specified (x, y) location.</para>
<para><simplesect kind="warning"><para>This function cannot be used at the upper borders of the array, specifically for i = shape.x - 1 or j = shape.y - 1, as bilinear interpolation requires surrounding data points.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Index along the x-direction, expected to be in the range [0, shape.x - 2]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>Index along the y-direction, expected to be in the range [0, shape.y - 2]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>&apos;u&apos; interpolation parameter, expected to be in the range [0, 1[. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>&apos;v&apos; interpolation parameter, expected to be in the range [0, 1[. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float The interpolated value at the specified location (x, y). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="517" column="9" bodyfile="HighMap/src/array/methods.cpp" bodystart="208" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a9dd25996fe72213935f736f9fdb2c4d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::Array::get_value_nearest</definition>
        <argsstring>(float x, float y, Vec4&lt; float &gt; bbox)</argsstring>
        <name>get_value_nearest</name>
        <qualifiedname>hmap::Array::get_value_nearest</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
        </param>
        <briefdescription>
<para>Retrieves the nearest value at the location (x, y) within a bounded domain. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function retrieves the nearest value to the specified (x, y)
</verbatim> coordinates from the array, assuming the array covers a domain defined by the bounding box <computeroutput>bbox</computeroutput>. If the coordinates (x, y) are outside the domain, they are clamped to the nearest valid position within the bounding box.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Coordinate along the x-axis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Coordinate along the y-axis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Bounding box defining the domain of the array. It is expected to be in the form of {xmin, xmax, ymin, ymax}. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float The nearest value at the clamped location (x, y). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="534" column="9" bodyfile="HighMap/src/array/methods.cpp" bodystart="230" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a65336e3091ee64a91b3ecce8c01c837b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt; float &gt; hmap::Array::get_vector</definition>
        <argsstring>() const</argsstring>
        <name>get_vector</name>
        <qualifiedname>hmap::Array::get_vector</qualifiedname>
        <briefdescription>
<para>Retrieves the underlying data vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::vector&lt;float&gt; The vector containing the array&apos;s data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="541" column="15" bodyfile="HighMap/src/array/array.cpp" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a3517b483a468873cefa73f7773a893ec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::Array::infos</definition>
        <argsstring>(std::string msg=&quot;&quot;) const</argsstring>
        <name>infos</name>
        <qualifiedname>hmap::Array::infos</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>msg</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Display various information about the array. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function outputs details about the array, such as its
</verbatim> dimensions, data type, and any other relevant information. The optional <computeroutput>msg</computeroutput> parameter can be used to include a custom message in the output.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional message to include in the output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="552" column="8" bodyfile="HighMap/src/array/io.cpp" bodystart="58" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a296cad1c7a3fd75b30a39a628bc7bcbe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hmap::Array::linear_index</definition>
        <argsstring>(int i, int j) const</argsstring>
        <name>linear_index</name>
        <qualifiedname>hmap::Array::linear_index</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Return the linear index corresponding to the (i, j) cell in a 2D array. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function calculates the linear index for a cell specified by
</verbatim> the (i, j) coordinates in a 2D array. The linear index is useful for accessing elements in a flattened or 1D representation of the array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The &apos;i&apos; index (row index). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>The &apos;j&apos; index (column index). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int The linear index corresponding to the (i, j) cell. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="566" column="7" bodyfile="HighMap/src/array/methods.cpp" bodystart="239" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a1d9dda44818ef1fbd4228f42267cc305" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
        <definition>Vec2&lt; int &gt; hmap::Array::linear_index_reverse</definition>
        <argsstring>(int k) const</argsstring>
        <name>linear_index_reverse</name>
        <qualifiedname>hmap::Array::linear_index_reverse</qualifiedname>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Convert a linear index to its corresponding (i, j) cell coordinates. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function calculates the 2D cell coordinates (i, j) in the array
</verbatim> from a given linear index <computeroutput>k</computeroutput>. This is useful for mapping between the 1D and 2D representations of the array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>The linear index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2&lt;int&gt;</ref> The (i, j) coordinates corresponding to the linear index <computeroutput>k</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="579" column="8" bodyfile="HighMap/src/array/methods.cpp" bodystart="244" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a68aac609ccba8f581da1cdf5cee671b9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::Array::max</definition>
        <argsstring>() const</argsstring>
        <name>max</name>
        <qualifiedname>hmap::Array::max</qualifiedname>
        <briefdescription>
<para>Return the value of the greatest element in the array. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function computes the maximum value present in the array. If
</verbatim> the array is empty, the behavior of this function is undefined.</para>
<para><simplesect kind="return"><para>float The maximum value in the array. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="589" column="9" bodyfile="HighMap/src/array/methods.cpp" bodystart="252" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a1d0c6960def9d61ed748ee6a787421a5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::Array::mean</definition>
        <argsstring>() const</argsstring>
        <name>mean</name>
        <qualifiedname>hmap::Array::mean</qualifiedname>
        <briefdescription>
<para>Return the mean value of the elements in the array. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function calculates the average value of all elements in the
</verbatim> array. If the array is empty, the behavior of this function is undefined.</para>
<para><simplesect kind="return"><para>float The mean value of the elements in the array. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="599" column="9" bodyfile="HighMap/src/array/methods.cpp" bodystart="257" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a56c77f78e4864f5c6f2cbd6de8100556" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::Array::min</definition>
        <argsstring>() const</argsstring>
        <name>min</name>
        <qualifiedname>hmap::Array::min</qualifiedname>
        <briefdescription>
<para>Return the value of the smallest element in the array. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function computes the minimum value present in the array. If
</verbatim> the array is empty, the behavior of this function is undefined.</para>
<para><simplesect kind="return"><para>float The minimum value in the array. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="609" column="9" bodyfile="HighMap/src/array/methods.cpp" bodystart="262" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1ab55ee6021288a467f7d782b09e888f25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::Array::normalize</definition>
        <argsstring>()</argsstring>
        <name>normalize</name>
        <qualifiedname>hmap::Array::normalize</qualifiedname>
        <briefdescription>
<para>Normalize array values so that the sum of all elements is equal to 1. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function adjusts the values in the array so that their total
</verbatim> sum is normalized to 1. This is often used in scenarios where the array represents a probability distribution. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="619" column="8" bodyfile="HighMap/src/array/methods.cpp" bodystart="267" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a7bf76abbc7ad183514f41f2b54a0ad2e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
        <definition>Vec2&lt; float &gt; hmap::Array::normalization_coeff</definition>
        <argsstring>(float vmin=0.f, float vmax=1.f) const</argsstring>
        <name>normalization_coeff</name>
        <qualifiedname>hmap::Array::normalization_coeff</qualifiedname>
        <param>
          <type>float</type>
          <declname>vmin</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>vmax</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Computes normalization coefficients (a, b) such that a * array + b maps the values to the range [vmin, vmax]. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function calculates the coefficients used to normalize the
</verbatim> array values so that they fit within the specified range [vmin, vmax]. The normalization is performed using the linear transformation: <computeroutput>a * array + b</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vmin</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower bound of the desired range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmax</parametername>
</parameternamelist>
<parameterdescription>
<para>Upper bound of the desired range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2&lt;float&gt;</ref> Normalization coefficients (a, b) where <computeroutput>a</computeroutput> scales the values and <computeroutput>b</computeroutput> shifts them. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="635" column="8" bodyfile="HighMap/src/array/methods.cpp" bodystart="174" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a7ce20e5537ab2729aac320d0b27b7fa5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::Array::print</definition>
        <argsstring>() const</argsstring>
        <name>print</name>
        <qualifiedname>hmap::Array::print</qualifiedname>
        <briefdescription>
<para>Print the array values to the standard output (stdout). </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function prints the contents of the array in a human-readable
</verbatim> format to the standard output. This can be useful for debugging or inspecting the values of the array. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="644" column="8" bodyfile="HighMap/src/array/io.cpp" bodystart="72" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1ac33557899eb50bcf964b2e5a2ad8ddcb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::Array::ptp</definition>
        <argsstring>() const</argsstring>
        <name>ptp</name>
        <qualifiedname>hmap::Array::ptp</qualifiedname>
        <briefdescription>
<para>Return the peak-to-peak amplitude (i.e., the difference between the maximum and minimum values) of the array values. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function calculates the peak-to-peak amplitude of the array,
</verbatim> which is the difference between the maximum and minimum values in the array.</para>
<para><simplesect kind="return"><para>float The peak-to-peak amplitude of the array values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="656" column="9" bodyfile="HighMap/src/array/methods.cpp" bodystart="277" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a1c242d119f67209442a0054601939412" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::Array::resample_to_shape</definition>
        <argsstring>(Vec2&lt; int &gt; new_shape) const</argsstring>
        <name>resample_to_shape</name>
        <qualifiedname>hmap::Array::resample_to_shape</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>new_shape</declname>
        </param>
        <briefdescription>
<para>Return a resampled array of shape <computeroutput>new_shape</computeroutput> using bilinear interpolation. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function resamples the array to a new shape `new_shape` using
</verbatim> bilinear interpolation. The resampling changes the dimensions of the array while preserving the data&apos;s spatial relationships.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The target shape for the resampled array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The resampled array with the specified <computeroutput>new_shape</computeroutput>.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_resample_to_shape.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/><ref refid="classhmap_1_1Array_1a3cf6ada373f8af1affcbbed22db1194f" kindref="member">shape</ref><sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/><ref refid="classhmap_1_1Array_1a3cf6ada373f8af1affcbbed22db1194f" kindref="member">shape</ref>,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zr<sp/>=<sp/>z.<ref refid="classhmap_1_1Array_1a1c242d119f67209442a0054601939412" kindref="member">resample_to_shape</ref>({32,<sp/>32});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>zr.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_resample_to_shape.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_resample_to_shape.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="675" column="9" bodyfile="HighMap/src/array/methods.cpp" bodystart="282" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1af36ac8e4689795d2e33b827a7f7b439c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::Array::resample_to_shape_bicubic</definition>
        <argsstring>(Vec2&lt; int &gt; new_shape) const</argsstring>
        <name>resample_to_shape_bicubic</name>
        <qualifiedname>hmap::Array::resample_to_shape_bicubic</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>new_shape</declname>
        </param>
        <briefdescription>
<para>Return a resampled array of shape <computeroutput>new_shape</computeroutput> using bicubic interpolation. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function resamples the array to a new shape `new_shape` using
</verbatim> bicubic interpolation. The resampling changes the dimensions of the array while preserving the data&apos;s spatial relationships with a higher degree of smoothness compared to bilinear interpolation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The target shape for the resampled array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The resampled array with the specified <computeroutput>new_shape</computeroutput>.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_array_interp.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/><ref refid="classhmap_1_1Array_1a3cf6ada373f8af1affcbbed22db1194f" kindref="member">shape</ref><sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z0<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/><ref refid="classhmap_1_1Array_1a3cf6ada373f8af1affcbbed22db1194f" kindref="member">shape</ref>,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>new_shape<sp/>=<sp/>{1024,<sp/>1024};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/>z0.<ref refid="classhmap_1_1Array_1a1c242d119f67209442a0054601939412" kindref="member">resample_to_shape</ref>(new_shape);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z1<sp/>=<sp/>z1.<ref refid="classhmap_1_1Array_1a1c242d119f67209442a0054601939412" kindref="member">resample_to_shape</ref>(<ref refid="classhmap_1_1Array_1a3cf6ada373f8af1affcbbed22db1194f" kindref="member">shape</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/>z0.<ref refid="classhmap_1_1Array_1af36ac8e4689795d2e33b827a7f7b439c" kindref="member">resample_to_shape_bicubic</ref>(new_shape);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z2.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;out.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z2<sp/>=<sp/>z2.<ref refid="classhmap_1_1Array_1a1c242d119f67209442a0054601939412" kindref="member">resample_to_shape</ref>(<ref refid="classhmap_1_1Array_1a3cf6ada373f8af1affcbbed22db1194f" kindref="member">shape</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_array_interp.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z0,<sp/>z1,<sp/>z2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a744ead0b170889e33126895264f1af2c" kindref="member">hmap::Cmap::MAGMA</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_array_interp.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="695" column="9" bodyfile="HighMap/src/array/methods.cpp" bodystart="287" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a6f2b1f8bbe8f6e28ebc0cc8616934601" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::Array::resample_to_shape_bilinear</definition>
        <argsstring>(Vec2&lt; int &gt; new_shape) const</argsstring>
        <name>resample_to_shape_bilinear</name>
        <qualifiedname>hmap::Array::resample_to_shape_bilinear</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>new_shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="697" column="9" bodyfile="HighMap/src/array/methods.cpp" bodystart="295" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1ad438554fd7c3a7d705271e99f91d480c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::Array::resample_to_shape_nearest</definition>
        <argsstring>(Vec2&lt; int &gt; new_shape) const</argsstring>
        <name>resample_to_shape_nearest</name>
        <qualifiedname>hmap::Array::resample_to_shape_nearest</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>new_shape</declname>
        </param>
        <briefdescription>
<para>Return a resampled array of shape <computeroutput>new_shape</computeroutput> using nearest neighbor interpolation. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function resamples the array to a new shape `new_shape` using
</verbatim> nearest neighbor interpolation. This method selects the value from the nearest neighbor in the original array, which can be faster but may produce blocky artifacts compared to other interpolation methods.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The target shape for the resampled array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The resampled array with the specified <computeroutput>new_shape</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="711" column="9" bodyfile="HighMap/src/array/methods.cpp" bodystart="303" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a82d3cc92545cb9ee442d47b4d672750c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt; float &gt; hmap::Array::row_to_vector</definition>
        <argsstring>(int i)</argsstring>
        <name>row_to_vector</name>
        <qualifiedname>hmap::Array::row_to_vector</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Return a row <computeroutput>i</computeroutput> as a <computeroutput>std::vector&lt;float&gt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function extracts the specified row `i` from the array and
</verbatim> returns it as a <computeroutput>std::vector&lt;float&gt;</computeroutput>. This is useful for operations where you need to work with individual rows outside of the array structure.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Row index to extract. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;float&gt; The values of the specified row as a vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="723" column="15" bodyfile="HighMap/src/array/methods.cpp" bodystart="311" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a8f2e167d01f42e3f953f6ad554c2b49d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::Array::set_shape</definition>
        <argsstring>(Vec2&lt; int &gt; new_shape)</argsstring>
        <name>set_shape</name>
        <qualifiedname>hmap::Array::set_shape</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>new_shape</declname>
        </param>
        <briefdescription>
<para>Sets a new shape for the array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The new shape of the array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="730" column="8" bodyfile="HighMap/src/array/array.cpp" bodystart="45" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a11f0e0817bbb740e3350adaca187743e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::Array::set_slice</definition>
        <argsstring>(Vec4&lt; int &gt; idx, float value)</argsstring>
        <name>set_slice</name>
        <qualifiedname>hmap::Array::set_slice</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; int &gt;</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the value of a slice defined by indices {i1, i2, j1, j2} to a new value. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function updates all elements within the specified slice of the
</verbatim> array to the given <computeroutput>value</computeroutput>. The slice is defined by the extents {i1, i2, j1, j2}, where <computeroutput>i1</computeroutput> and <computeroutput>i2</computeroutput> specify the range for the rows, and <computeroutput>j1</computeroutput> and <computeroutput>j2</computeroutput> specify the range for the columns.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Slice extent indices: {i1, i2, j1, j2}. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The new value to set for the specified slice. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="744" column="8" bodyfile="HighMap/src/array/methods.cpp" bodystart="319" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a362927ee451f7546cfd37f0850982ed3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::Array::set_slice</definition>
        <argsstring>(Vec4&lt; int &gt; idx, const Array &amp;array)</argsstring>
        <name>set_slice</name>
        <qualifiedname>hmap::Array::set_slice</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; int &gt;</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="746" column="8" bodyfile="HighMap/src/array/methods.cpp" bodystart="326" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a16e6671dbf3202dbc86f5eccb0fcb1ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hmap::Array::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>hmap::Array::size</qualifiedname>
        <briefdescription>
<para>Return the total number of elements in the array. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function returns the size of the array, which is the total
</verbatim> number of elements it contains. This can be useful for iterating over the array or for checking its dimensions.</para>
<para><simplesect kind="return"><para>int The total number of elements in the array. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="757" column="7" bodyfile="HighMap/src/array/methods.cpp" bodystart="333" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1aa913be411b57b6a46b45dd3d5ddefcfd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::Array::std</definition>
        <argsstring>() const</argsstring>
        <name>std</name>
        <qualifiedname>hmap::Array::std</qualifiedname>
        <briefdescription>
<para>Return the standard deviation of all array values. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>float The standard deviation of all elements in the array. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="763" column="9" bodyfile="HighMap/src/array/methods.cpp" bodystart="338" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a7ee63fb7135276ed8d6643d082f06892" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::Array::sum</definition>
        <argsstring>() const</argsstring>
        <name>sum</name>
        <qualifiedname>hmap::Array::sum</qualifiedname>
        <briefdescription>
<para>Return the sum of all array values. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function calculates and returns the sum of all elements in the
</verbatim> array. It can be used to obtain aggregate values or to check the overall magnitude of the array&apos;s contents.</para>
<para><simplesect kind="return"><para>float The sum of all elements in the array. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="774" column="9" bodyfile="HighMap/src/array/methods.cpp" bodystart="346" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1abc4875ad6cfe16bd03004ba52f94587c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cv::Mat</type>
        <definition>cv::Mat hmap::Array::to_cv_mat</definition>
        <argsstring>()</argsstring>
        <name>to_cv_mat</name>
        <qualifiedname>hmap::Array::to_cv_mat</qualifiedname>
        <briefdescription>
<para>Converts a 2D <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> to an OpenCV <computeroutput>cv::Mat</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function converts a 2D <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> object into an OpenCV <computeroutput>cv::Mat</computeroutput>. The conversion process does not involve copying the data; instead, it uses pointers to the original data in the <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput>. As a result, any modifications to the <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> will directly affect the corresponding <computeroutput>cv::Mat</computeroutput> and vice versa.</para>
<para><simplesect kind="note"><para>Since this function relies on pointers to the original data, it is crucial for the user to ensure that the <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> object remains in scope and valid for the entire lifetime of the <computeroutput>cv::Mat</computeroutput>. If the <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> is destroyed or goes out of scope, the <computeroutput>cv::Mat</computeroutput> will reference invalid memory, which can lead to undefined behavior.</para>
</simplesect>
<simplesect kind="return"><para>A <computeroutput>cv::Mat</computeroutput> object that shares the data with the input <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput>.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_to_cv_mat.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;opencv2/opencv.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/><ref refid="classhmap_1_1Array_1a3cf6ada373f8af1affcbbed22db1194f" kindref="member">shape</ref><sp/>=<sp/>{512,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/><ref refid="classhmap_1_1Array_1a3cf6ada373f8af1affcbbed22db1194f" kindref="member">shape</ref>,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z,<sp/>0.f,<sp/>1.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;out.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a3517b483a468873cefa73f7773a893ec" kindref="member">infos</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cv::Mat<sp/>img<sp/>=<sp/>z.<ref refid="classhmap_1_1Array_1abc4875ad6cfe16bd03004ba52f94587c" kindref="member">to_cv_mat</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cv::cvtColor(img,<sp/>img,<sp/>cv::COLOR_GRAY2BGR);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>codec_params<sp/>=<sp/>{cv::IMWRITE_EXR_TYPE,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::IMWRITE_EXR_TYPE_FLOAT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::IMWRITE_EXR_COMPRESSION,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::IMWRITE_EXR_COMPRESSION_NO};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cv::imwrite(</highlight><highlight class="stringliteral">&quot;out.exr&quot;</highlight><highlight class="normal">,<sp/>img,<sp/>codec_params);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>compression<sp/>to<sp/>cv::IMWRITE_TIFF_COMPRESSION_LZW<sp/>(apparently</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>available<sp/>in<sp/>openCV<sp/>public<sp/>header?)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>codec_params<sp/>=<sp/>{cv::IMWRITE_TIFF_COMPRESSION,<sp/>5};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cv::imwrite(</highlight><highlight class="stringliteral">&quot;out.tiff&quot;</highlight><highlight class="normal">,<sp/>img,<sp/>codec_params);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>img.convertTo(img,<sp/>CV_16U,<sp/>65535);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cv::imwrite(</highlight><highlight class="stringliteral">&quot;out_cv.png&quot;</highlight><highlight class="normal">,<sp/>img);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cv::imshow(</highlight><highlight class="stringliteral">&quot;example&quot;</highlight><highlight class="normal">,<sp/>img);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cv::waitKey(0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="796" column="11" bodyfile="HighMap/src/array/opencv_wrapper.cpp" bodystart="12" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1aa681ff740560464d3830d5f7259282fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::Array::to_exr</definition>
        <argsstring>(const std::string &amp;fname) const</argsstring>
        <name>to_exr</name>
        <qualifiedname>hmap::Array::to_exr</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
<para>Export the array as an OpenEXR image file. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function saves the array data as an OpenEXR image file. OpenEXR
</verbatim> is a high dynamic range (HDR) image file format. The file will be created or overwritten with the name specified by <computeroutput>fname</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the OpenEXR file to be created or overwritten.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_to_exr.cpp"></programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="810" column="8" bodyfile="HighMap/src/array/io.cpp" bodystart="85" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a6cd8060670649c0934ddab573e378d3f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::Array::to_file</definition>
        <argsstring>(const std::string &amp;fname) const</argsstring>
        <name>to_file</name>
        <qualifiedname>hmap::Array::to_file</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
<para>Export the array to a raw binary file. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function writes the contents of the array to a file in raw
</verbatim> binary format. This can be useful for saving the array data to disk or for transferring it between programs. The file will be created or overwritten with the specified <computeroutput>fname</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the file to which the array data will be written. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="822" column="8" bodyfile="HighMap/src/array/io.cpp" bodystart="100" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a35ce8d4088ce4ae21003df18c204b7c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::Array::to_numpy</definition>
        <argsstring>(const std::string &amp;fname) const</argsstring>
        <name>to_numpy</name>
        <qualifiedname>hmap::Array::to_numpy</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
<para>Export the array to a numpy binary file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the file to which the array data will be written.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_to_numpy.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/><ref refid="classhmap_1_1Array_1a3cf6ada373f8af1affcbbed22db1194f" kindref="member">shape</ref><sp/>=<sp/>{512,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/><ref refid="classhmap_1_1Array_1a3cf6ada373f8af1affcbbed22db1194f" kindref="member">shape</ref>,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>z(10,<sp/>12)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a35ce8d4088ce4ae21003df18c204b7c6" kindref="member">to_numpy</ref>(</highlight><highlight class="stringliteral">&quot;out.npy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_to_numpy.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>python<sp/>script<sp/>to<sp/>check<sp/>this<sp/>provided<sp/>below<sp/>in<sp/>the<sp/>comments</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>import<sp/>matplotlib.pyplot<sp/>as<sp/>plt</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>import<sp/>numpy<sp/>as<sp/>np</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>z<sp/>=<sp/>np.load(&apos;out.npy&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>print(z.shape)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>print(z[10,<sp/>12])</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>plt.imshow(z,<sp/>cmap=&apos;jet&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>plt.show()</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="832" column="8" bodyfile="HighMap/src/array/io.cpp" bodystart="112" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::Array::to_png</definition>
        <argsstring>(const std::string &amp;fname, int cmap, bool hillshading=false, int depth=CV_8U) const</argsstring>
        <name>to_png</name>
        <qualifiedname>hmap::Array::to_png</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cmap</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>hillshading</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>int</type>
          <declname>depth</declname>
          <defval>CV_8U</defval>
        </param>
        <briefdescription>
<para>Export the array as a PNG image file with a specified colormap and hillshading. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function saves the array data as a PNG image file. The colors
</verbatim> of the image are determined by the specified colormap (<computeroutput>cmap</computeroutput>), and optional hillshading can be applied to enhance the visual representation of the data. The file will be created or overwritten with the name specified by <computeroutput>fname</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the PNG file to be created or overwritten. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmap</parametername>
</parameternamelist>
<parameterdescription>
<para>The colormap to be used for visualizing the data. Refer to <computeroutput>cmap</computeroutput> for available options. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hillshading</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean flag to enable or disable hillshading. If true, hillshading will be applied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_to_png.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/><ref refid="classhmap_1_1Array_1a3cf6ada373f8af1affcbbed22db1194f" kindref="member">shape</ref><sp/>=<sp/>{512,<sp/>512};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>png</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array_1a3cf6ada373f8af1affcbbed22db1194f" kindref="member">shape</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z1.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;out_rgb.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z1.<ref refid="classhmap_1_1Array_1ad7018857827d8e8d263516bbbd77630f" kindref="member">to_png_grayscale</ref>(</highlight><highlight class="stringliteral">&quot;out_8bit.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z1.<ref refid="classhmap_1_1Array_1ad7018857827d8e8d263516bbbd77630f" kindref="member">to_png_grayscale</ref>(</highlight><highlight class="stringliteral">&quot;out_16bit.png&quot;</highlight><highlight class="normal">,<sp/>CV_16U);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>Array<sp/>from<sp/>png</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(</highlight><highlight class="stringliteral">&quot;out_8bit.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z3<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(</highlight><highlight class="stringliteral">&quot;out_16bit.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z1.<ref refid="classhmap_1_1Array_1abc72128c4c460e993d877cab54e17454" kindref="member">to_raw_16bit</ref>(</highlight><highlight class="stringliteral">&quot;out.raw&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_to_png.png&quot;</highlight><highlight class="normal">,<sp/>{z1,<sp/>z2,<sp/>z3},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="853" column="8" bodyfile="HighMap/src/array/io.cpp" bodystart="122" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1ad7018857827d8e8d263516bbbd77630f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::Array::to_png_grayscale</definition>
        <argsstring>(const std::string &amp;fname, int depth=CV_8U) const</argsstring>
        <name>to_png_grayscale</name>
        <qualifiedname>hmap::Array::to_png_grayscale</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>int</type>
          <declname>depth</declname>
          <defval>CV_8U</defval>
        </param>
        <briefdescription>
<para>Export the array as a grayscale PNG image file with specified bit depth. </para>
        </briefdescription>
        <detaileddescription>
<para>This function saves the array data as a grayscale PNG image file. The bit depth of the image is determined by the <computeroutput>depth</computeroutput> parameter, allowing for either 8-bit (0-255) or 16-bit (0-65535) grayscale values. The resulting image will be created or overwritten with the name specified by <computeroutput>fname</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the PNG file to be created or overwritten. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depth</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit depth of the PNG image. Default is 8-bit (CV_8U). Use CV_16U for 16-bit depth if higher precision is needed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_to_png.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/><ref refid="classhmap_1_1Array_1a3cf6ada373f8af1affcbbed22db1194f" kindref="member">shape</ref><sp/>=<sp/>{512,<sp/>512};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>png</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array_1a3cf6ada373f8af1affcbbed22db1194f" kindref="member">shape</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z1.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;out_rgb.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z1.<ref refid="classhmap_1_1Array_1ad7018857827d8e8d263516bbbd77630f" kindref="member">to_png_grayscale</ref>(</highlight><highlight class="stringliteral">&quot;out_8bit.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z1.<ref refid="classhmap_1_1Array_1ad7018857827d8e8d263516bbbd77630f" kindref="member">to_png_grayscale</ref>(</highlight><highlight class="stringliteral">&quot;out_16bit.png&quot;</highlight><highlight class="normal">,<sp/>CV_16U);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>Array<sp/>from<sp/>png</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(</highlight><highlight class="stringliteral">&quot;out_8bit.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z3<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(</highlight><highlight class="stringliteral">&quot;out_16bit.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z1.<ref refid="classhmap_1_1Array_1abc72128c4c460e993d877cab54e17454" kindref="member">to_raw_16bit</ref>(</highlight><highlight class="stringliteral">&quot;out.raw&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_to_png.png&quot;</highlight><highlight class="normal">,<sp/>{z1,<sp/>z2,<sp/>z3},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="874" column="8" bodyfile="HighMap/src/array/io.cpp" bodystart="136" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1a75da0609f64b9410741d198330dde33b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::Array::to_tiff</definition>
        <argsstring>(const std::string &amp;fname) const</argsstring>
        <name>to_tiff</name>
        <qualifiedname>hmap::Array::to_tiff</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
<para>Export the array as a TIFF image file. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function saves the array data as a TIFF (Tagged Image File
</verbatim> Format) image file. The file will be created or overwritten with the name specified by <computeroutput>fname</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the TIFF file to be created or overwritten.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_to_tiff.cpp"></programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="888" column="8" bodyfile="HighMap/src/array/io.cpp" bodystart="153" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1abc72128c4c460e993d877cab54e17454" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::Array::to_raw_16bit</definition>
        <argsstring>(const std::string &amp;fname) const</argsstring>
        <name>to_raw_16bit</name>
        <qualifiedname>hmap::Array::to_raw_16bit</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
<para>Export the array as a 16-bit raw file for Unity terrain import. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function saves the array data as a raw binary file with 16-bit
</verbatim> depth. The resulting file is suitable for use with Unity terrain import formats. The file will be created or overwritten with the name specified by <computeroutput>fname</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the raw file to be created or overwritten.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_to_raw_16bit.cpp"></programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="903" column="8" bodyfile="HighMap/src/array/io.cpp" bodystart="148" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Array_1acc4ea8fbdc162b16a2b0c8de575ff569" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt; float &gt; hmap::Array::unique_values</definition>
        <argsstring>()</argsstring>
        <name>unique_values</name>
        <qualifiedname>hmap::Array::unique_values</qualifiedname>
        <briefdescription>
<para>Return the unique elements of the array. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function extracts and returns a vector containing all unique
</verbatim> values present in the array. The values are sorted in ascending order.</para>
<para><simplesect kind="return"><para>std::vector&lt;float&gt; A vector of unique values found in the array. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="913" column="15" bodyfile="HighMap/src/array/methods.cpp" bodystart="351" bodyend="356"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classhmap_1_1Array_1a58ffc99dbcc9c7e8c0dc186202635a4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array operator*</definition>
        <argsstring>(const float value, const Array &amp;array)</argsstring>
        <name>operator*</name>
        <qualifiedname>hmap::Array::operator*</qualifiedname>
        <param>
          <type>const float</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Overloads the multiplication operator for scalar multiplication. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar value to multiply. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> to multiply with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The resulting <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> after multiplication. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="145" column="16" bodyfile="HighMap/src/array/array.cpp" bodystart="156" bodyend="165"/>
      </memberdef>
      <memberdef kind="friend" id="classhmap_1_1Array_1aaf0bbf93f6dba016b681ac09274b5c66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array operator/</definition>
        <argsstring>(const float value, const Array &amp;array)</argsstring>
        <name>operator/</name>
        <qualifiedname>hmap::Array::operator/</qualifiedname>
        <param>
          <type>const float</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Overloads the division operator for scalar division. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar value to divide by. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> to divide by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The resulting <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> after division. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="171" column="16" bodyfile="HighMap/src/array/array.cpp" bodystart="190" bodyend="199"/>
      </memberdef>
      <memberdef kind="friend" id="classhmap_1_1Array_1a3286ad1492734bca2ad2412b833c65f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array operator+</definition>
        <argsstring>(const float value, const Array &amp;array)</argsstring>
        <name>operator+</name>
        <qualifiedname>hmap::Array::operator+</qualifiedname>
        <param>
          <type>const float</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Overloads the addition operator for scalar addition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar value to add. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The resulting <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> after addition. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="197" column="16" bodyfile="HighMap/src/array/array.cpp" bodystart="224" bodyend="233"/>
      </memberdef>
      <memberdef kind="friend" id="classhmap_1_1Array_1a3db4ef63385d15069d4ee57c80906d5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>const Array operator-</definition>
        <argsstring>(const float value, const Array &amp;array)</argsstring>
        <name>operator-</name>
        <qualifiedname>hmap::Array::operator-</qualifiedname>
        <param>
          <type>const float</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Overloads the subtraction operator for scalar subtraction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar value to subtract. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> to subtract from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The resulting <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> after subtraction. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/array.hpp" line="230" column="22" bodyfile="HighMap/src/array/array.cpp" bodystart="269" bodyend="278"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> class, helper to manipulate 2D float array with &quot;(i, j)&quot; indexing. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>hmap::Array</label>
        <link refid="classhmap_1_1Array"/>
      </node>
      <node id="2">
        <label>hmap::Tile</label>
        <link refid="classhmap_1_1Tile"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>hmap::Vec2&lt; int &gt;</label>
        <link refid="structhmap_1_1Vec2"/>
      </node>
      <node id="1">
        <label>hmap::Array</label>
        <link refid="classhmap_1_1Array"/>
        <childnode refid="2" relation="usage">
          <edgelabel>shape</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>vector</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>std::vector&lt; float &gt;</label>
      </node>
    </collaborationgraph>
    <location file="HighMap/include/highmap/array.hpp" line="31" column="1" bodyfile="HighMap/include/highmap/array.hpp" bodystart="32" bodyend="914"/>
    <listofallmembers>
      <member refid="classhmap_1_1Array_1a96b9bd19d1212e61b4ac4eb21931b298" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>Array</name></member>
      <member refid="classhmap_1_1Array_1a01be0e18bcfd224e61740d49929e8023" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>Array</name></member>
      <member refid="classhmap_1_1Array_1a885b4f45f50f0e7d9c32e316ecb9884b" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>Array</name></member>
      <member refid="classhmap_1_1Array_1aad62b698ef12cfd06b3fb09e8cce7635" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>Array</name></member>
      <member refid="classhmap_1_1Array_1a832a302b58fa7b346df04675a14ad59c" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>col_to_vector</name></member>
      <member refid="classhmap_1_1Array_1a11949e2b41c869b364bc76129b4efeb4" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>count_non_zero</name></member>
      <member refid="classhmap_1_1Array_1aec532fdab57a1b7571a0e273a567537c" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>depose_amount_bilinear_at</name></member>
      <member refid="classhmap_1_1Array_1a8c78b70cb181e3e43169b2b4e8d28e55" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>depose_amount_kernel_at</name></member>
      <member refid="classhmap_1_1Array_1a8bc07abfedb22639797124b951331ddf" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>depose_amount_kernel_bilinear_at</name></member>
      <member refid="classhmap_1_1Array_1a00b8f7462c1e22b1da8a67ec62d4c8c8" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>dump</name></member>
      <member refid="classhmap_1_1Array_1a57be73f56189959dd25a0b760d971bf7" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>extract_slice</name></member>
      <member refid="classhmap_1_1Array_1a7d552a649bcc47445b11d2e42d193492" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>extract_slice</name></member>
      <member refid="classhmap_1_1Array_1a000acd474d036adfa4e5e334139788ce" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>from_file</name></member>
      <member refid="classhmap_1_1Array_1a61b4eb10e50548b12cfd0cb2f9eddde1" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>from_numpy</name></member>
      <member refid="classhmap_1_1Array_1a1bc074aa8ae60f52c105702637631e62" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>get_gradient_x_at</name></member>
      <member refid="classhmap_1_1Array_1a80c3088214a250b00d9e9649266e30d2" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>get_gradient_x_bilinear_at</name></member>
      <member refid="classhmap_1_1Array_1acbe5c386af495d4648cdfa140f098398" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>get_gradient_y_at</name></member>
      <member refid="classhmap_1_1Array_1a5f8056879200c2cfa85a757e8c87bb3d" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>get_gradient_y_bilinear_at</name></member>
      <member refid="classhmap_1_1Array_1a0e69d113a5b86b59e2bbf956262a2331" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>get_normal_at</name></member>
      <member refid="classhmap_1_1Array_1ad1496c702975e9425113eb4a1dd0e49c" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>get_shape</name></member>
      <member refid="classhmap_1_1Array_1a7ef7005c4ca95be75c82bded5165634c" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>get_sizeof</name></member>
      <member refid="classhmap_1_1Array_1ae47cb152f3e887d17160519afd589ee2" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>get_value_bicubic_at</name></member>
      <member refid="classhmap_1_1Array_1a12eb51c18154e3e452afe9743636085f" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>get_value_bilinear_at</name></member>
      <member refid="classhmap_1_1Array_1a9dd25996fe72213935f736f9fdb2c4d4" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>get_value_nearest</name></member>
      <member refid="classhmap_1_1Array_1a65336e3091ee64a91b3ecce8c01c837b" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>get_vector</name></member>
      <member refid="classhmap_1_1Array_1a3517b483a468873cefa73f7773a893ec" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>infos</name></member>
      <member refid="classhmap_1_1Array_1a296cad1c7a3fd75b30a39a628bc7bcbe" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>linear_index</name></member>
      <member refid="classhmap_1_1Array_1a1d9dda44818ef1fbd4228f42267cc305" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>linear_index_reverse</name></member>
      <member refid="classhmap_1_1Array_1a68aac609ccba8f581da1cdf5cee671b9" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>max</name></member>
      <member refid="classhmap_1_1Array_1a1d0c6960def9d61ed748ee6a787421a5" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>mean</name></member>
      <member refid="classhmap_1_1Array_1a56c77f78e4864f5c6f2cbd6de8100556" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>min</name></member>
      <member refid="classhmap_1_1Array_1a7bf76abbc7ad183514f41f2b54a0ad2e" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>normalization_coeff</name></member>
      <member refid="classhmap_1_1Array_1ab55ee6021288a467f7d782b09e888f25" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>normalize</name></member>
      <member refid="classhmap_1_1Array_1ad8a812fa8efe5590cf0f1c619909eafe" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>operator()</name></member>
      <member refid="classhmap_1_1Array_1a4befd40052e9d7390eb7499e592769e5" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>operator()</name></member>
      <member refid="classhmap_1_1Array_1ad4b29fb20bdd0e1f9b76817f75e93347" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>operator*</name></member>
      <member refid="classhmap_1_1Array_1ae6ede66a645d489770813dd75c62c01e" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>operator*</name></member>
      <member refid="classhmap_1_1Array_1a58ffc99dbcc9c7e8c0dc186202635a4f" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>operator*</name></member>
      <member refid="classhmap_1_1Array_1a412b5d0f678c59a3cde14395bbc83a3c" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>operator*=</name></member>
      <member refid="classhmap_1_1Array_1ad631aba3c1ded924c1cd3fe6abe4c45f" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>operator*=</name></member>
      <member refid="classhmap_1_1Array_1a39a5f5334f2ced39ac8bf82085c04400" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>operator+</name></member>
      <member refid="classhmap_1_1Array_1a818d037ead344885d52de41e03fb6ce2" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>operator+</name></member>
      <member refid="classhmap_1_1Array_1a3286ad1492734bca2ad2412b833c65f1" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>operator+</name></member>
      <member refid="classhmap_1_1Array_1a4bc8f7bde72fd387cf660124feb33d25" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>operator+=</name></member>
      <member refid="classhmap_1_1Array_1af351b6eadd085e0821ace4b8f5196a6b" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>operator+=</name></member>
      <member refid="classhmap_1_1Array_1a641951bf572b4f4122354b4249d24a53" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>operator-</name></member>
      <member refid="classhmap_1_1Array_1a799dfad6efda5d1ca9183164a54e5e1a" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>operator-</name></member>
      <member refid="classhmap_1_1Array_1a5f94f3bb00f0d5ac33a7e82d80366cc4" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>operator-</name></member>
      <member refid="classhmap_1_1Array_1a3db4ef63385d15069d4ee57c80906d5d" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>operator-</name></member>
      <member refid="classhmap_1_1Array_1aa6cdd9afcbe503938b7e9138b5064fb5" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>operator-=</name></member>
      <member refid="classhmap_1_1Array_1a6300da3f7c4b50be908858787b00cc80" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>operator-=</name></member>
      <member refid="classhmap_1_1Array_1ad1fc9b139538bac40998f9fcb44be678" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>operator/</name></member>
      <member refid="classhmap_1_1Array_1a2371b22e560a6146b4b3248dde54beef" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>operator/</name></member>
      <member refid="classhmap_1_1Array_1aaf0bbf93f6dba016b681ac09274b5c66" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>operator/</name></member>
      <member refid="classhmap_1_1Array_1ac1c2d200c6d5ba12f172615313706e66" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>operator/=</name></member>
      <member refid="classhmap_1_1Array_1a0360b4113ba5284ab2579984e62a86c8" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>operator/=</name></member>
      <member refid="classhmap_1_1Array_1a263037d82c46689a6575719b0054f10a" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>operator=</name></member>
      <member refid="classhmap_1_1Array_1a7ce20e5537ab2729aac320d0b27b7fa5" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>print</name></member>
      <member refid="classhmap_1_1Array_1ac33557899eb50bcf964b2e5a2ad8ddcb" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>ptp</name></member>
      <member refid="classhmap_1_1Array_1a1c242d119f67209442a0054601939412" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>resample_to_shape</name></member>
      <member refid="classhmap_1_1Array_1af36ac8e4689795d2e33b827a7f7b439c" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>resample_to_shape_bicubic</name></member>
      <member refid="classhmap_1_1Array_1a6f2b1f8bbe8f6e28ebc0cc8616934601" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>resample_to_shape_bilinear</name></member>
      <member refid="classhmap_1_1Array_1ad438554fd7c3a7d705271e99f91d480c" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>resample_to_shape_nearest</name></member>
      <member refid="classhmap_1_1Array_1a82d3cc92545cb9ee442d47b4d672750c" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>row_to_vector</name></member>
      <member refid="classhmap_1_1Array_1a8f2e167d01f42e3f953f6ad554c2b49d" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>set_shape</name></member>
      <member refid="classhmap_1_1Array_1a11f0e0817bbb740e3350adaca187743e" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>set_slice</name></member>
      <member refid="classhmap_1_1Array_1a362927ee451f7546cfd37f0850982ed3" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>set_slice</name></member>
      <member refid="classhmap_1_1Array_1a3cf6ada373f8af1affcbbed22db1194f" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>shape</name></member>
      <member refid="classhmap_1_1Array_1a16e6671dbf3202dbc86f5eccb0fcb1ad" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>size</name></member>
      <member refid="classhmap_1_1Array_1aa913be411b57b6a46b45dd3d5ddefcfd" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>std</name></member>
      <member refid="classhmap_1_1Array_1a7ee63fb7135276ed8d6643d082f06892" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>sum</name></member>
      <member refid="classhmap_1_1Array_1abc4875ad6cfe16bd03004ba52f94587c" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>to_cv_mat</name></member>
      <member refid="classhmap_1_1Array_1aa681ff740560464d3830d5f7259282fd" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>to_exr</name></member>
      <member refid="classhmap_1_1Array_1a6cd8060670649c0934ddab573e378d3f" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>to_file</name></member>
      <member refid="classhmap_1_1Array_1a35ce8d4088ce4ae21003df18c204b7c6" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>to_numpy</name></member>
      <member refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>to_png</name></member>
      <member refid="classhmap_1_1Array_1ad7018857827d8e8d263516bbbd77630f" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>to_png_grayscale</name></member>
      <member refid="classhmap_1_1Array_1abc72128c4c460e993d877cab54e17454" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>to_raw_16bit</name></member>
      <member refid="classhmap_1_1Array_1a75da0609f64b9410741d198330dde33b" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>to_tiff</name></member>
      <member refid="classhmap_1_1Array_1acc4ea8fbdc162b16a2b0c8de575ff569" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>unique_values</name></member>
      <member refid="classhmap_1_1Array_1af586ddce153ac93df48a6d26609d7264" prot="public" virt="non-virtual"><scope>hmap::Array</scope><name>vector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
