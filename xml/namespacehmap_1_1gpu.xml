<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespacehmap_1_1gpu" kind="namespace" language="C++">
    <compoundname>hmap::gpu</compoundname>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a3a43696b1d6b8f0d966f9f05e5085edf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::blend_gradients</definition>
        <argsstring>(const Array &amp;array1, const Array &amp;array2, int ir=4)</argsstring>
        <name>blend_gradients</name>
        <qualifiedname>hmap::gpu::blend_gradients</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
          <defval>4</defval>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1af91a60a9fcbed7e38f53df57631a5298" kindref="member">hmap::blend_gradients</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/blending/blending_gpu.cpp" line="16" column="7" bodyfile="HighMap/src/blending/blending_gpu.cpp" bodystart="16" bodyend="28" declfile="HighMap/include/highmap/blending.hpp" declline="154" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a65a176508b404f80e5f5abd31456712e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::blend_poisson_bf</definition>
        <argsstring>(const Array &amp;array1, const Array &amp;array2, const int iterations=500, const Array *p_mask=nullptr)</argsstring>
        <name>blend_poisson_bf</name>
        <qualifiedname>hmap::gpu::blend_poisson_bf</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array2</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>iterations</declname>
          <defval>500</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Blends two arrays using Poisson blending with a brute-force solver. </para>
        </briefdescription>
        <detaileddescription>
<para>This function performs Poisson blending between <computeroutput>array1</computeroutput> and <computeroutput>array2</computeroutput> over a specified number of iterations. Optionally, a mask can be provided to control the blending regions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of iterations for the blending process (default: 500). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to an array defining the blending mask. If null, blending is applied globally. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The blended array resulting from the Poisson blending operation.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_blend_poisson_bf.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1_1gpu_1adb8336ed4d83c15500872185dee45d50" kindref="member">hmap::gpu::init_opencl</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>kw,<sp/>++seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/>0.5f<sp/>*<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a035bda7c8c2179b47b9a766531c2e89e" kindref="member">hmap::NoiseType::WORLEY</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.f<sp/>*<sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterations<sp/>=<sp/>5000;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z3<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1a65a176508b404f80e5f5abd31456712e" kindref="member">hmap::gpu::blend_poisson_bf</ref>(z1,<sp/>z2,<sp/>iterations);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_blend_poisson_bf.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z1,<sp/>z2,<sp/>z3},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_blend_poisson_bf.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/blending/blending_gpu.cpp" line="30" column="7" bodyfile="HighMap/src/blending/blending_gpu.cpp" bodystart="30" bodyend="54" declfile="HighMap/include/highmap/blending.hpp" declline="179" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1ad73cfd73fcd2e2744e8eb912eaf6f3bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::accumulation_curvature</definition>
        <argsstring>(const Array &amp;z, int ir)</argsstring>
        <name>accumulation_curvature</name>
        <qualifiedname>hmap::gpu::accumulation_curvature</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a4bc3d501e53aebe8e15428798656a3e4" kindref="member">hmap::accumulation_curvature</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/curvature/curvature_gpu.cpp" line="12" column="7" bodyfile="HighMap/src/curvature/curvature_gpu.cpp" bodystart="12" bodyend="21" declfile="HighMap/include/highmap/curvature.hpp" declline="271" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1afd24580b2b5fe7107bbff0ae2d3a1473" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::curvature_horizontal_cross_sectional</definition>
        <argsstring>(const Array &amp;z, int ir)</argsstring>
        <name>curvature_horizontal_cross_sectional</name>
        <qualifiedname>hmap::gpu::curvature_horizontal_cross_sectional</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1adfe8eddd79327602ea551c79524e0a21" kindref="member">hmap::curvature_horizontal_cross_sectional</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/curvature/curvature_gpu.cpp" line="23" column="7" bodyfile="HighMap/src/curvature/curvature_gpu.cpp" bodystart="23" bodyend="32" declfile="HighMap/include/highmap/curvature.hpp" declline="274" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a60a4aaece2c081b0a76e50404022934f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::curvature_horizontal_plan</definition>
        <argsstring>(const Array &amp;z, int ir)</argsstring>
        <name>curvature_horizontal_plan</name>
        <qualifiedname>hmap::gpu::curvature_horizontal_plan</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a1bf0dae54c5b8bd4e0aeb738c26644fc" kindref="member">hmap::curvature_horizontal_plan</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/curvature/curvature_gpu.cpp" line="34" column="7" bodyfile="HighMap/src/curvature/curvature_gpu.cpp" bodystart="34" bodyend="43" declfile="HighMap/include/highmap/curvature.hpp" declline="277" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a73a9ccd515e8907c142e001da179856b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::curvature_horizontal_tangential</definition>
        <argsstring>(const Array &amp;z, int ir)</argsstring>
        <name>curvature_horizontal_tangential</name>
        <qualifiedname>hmap::gpu::curvature_horizontal_tangential</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a6c28c3adca1bc50a9e769e3bacaf777b" kindref="member">hmap::curvature_horizontal_tangential</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/curvature/curvature_gpu.cpp" line="45" column="7" bodyfile="HighMap/src/curvature/curvature_gpu.cpp" bodystart="45" bodyend="54" declfile="HighMap/include/highmap/curvature.hpp" declline="280" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a8cc1e9e21a72aab7e29c563817df89b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::curvature_ring</definition>
        <argsstring>(const Array &amp;z, int ir)</argsstring>
        <name>curvature_ring</name>
        <qualifiedname>hmap::gpu::curvature_ring</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1ac60627713d4f7ff0c406182ac9941483" kindref="member">hmap::curvature_ring</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/curvature/curvature_gpu.cpp" line="56" column="7" bodyfile="HighMap/src/curvature/curvature_gpu.cpp" bodystart="56" bodyend="65" declfile="HighMap/include/highmap/curvature.hpp" declline="283" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a664f80c07e3609c285c98ed5f8bb2be3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::curvature_rotor</definition>
        <argsstring>(const Array &amp;z, int ir)</argsstring>
        <name>curvature_rotor</name>
        <qualifiedname>hmap::gpu::curvature_rotor</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1ab983266e7db85af59452a75364a6bad8" kindref="member">hmap::curvature_rotor</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/curvature/curvature_gpu.cpp" line="67" column="7" bodyfile="HighMap/src/curvature/curvature_gpu.cpp" bodystart="67" bodyend="76" declfile="HighMap/include/highmap/curvature.hpp" declline="286" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1aec95543aaf6a305eb2f7b85cd3dd54d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::curvature_vertical_longitudinal</definition>
        <argsstring>(const Array &amp;z, int ir)</argsstring>
        <name>curvature_vertical_longitudinal</name>
        <qualifiedname>hmap::gpu::curvature_vertical_longitudinal</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1ab2de0fa5e51719f4139d0fc0309a9f7f" kindref="member">hmap::curvature_vertical_longitudinal</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/curvature/curvature_gpu.cpp" line="78" column="7" bodyfile="HighMap/src/curvature/curvature_gpu.cpp" bodystart="78" bodyend="87" declfile="HighMap/include/highmap/curvature.hpp" declline="289" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1ad1529cdd1f7e79e385e138f1005c7e74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::curvature_vertical_profile</definition>
        <argsstring>(const Array &amp;z, int ir)</argsstring>
        <name>curvature_vertical_profile</name>
        <qualifiedname>hmap::gpu::curvature_vertical_profile</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1ac56ceece101a652bd52592149e031a41" kindref="member">hmap::curvature_vertical_profile</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/curvature/curvature_gpu.cpp" line="89" column="7" bodyfile="HighMap/src/curvature/curvature_gpu.cpp" bodystart="89" bodyend="98" declfile="HighMap/include/highmap/curvature.hpp" declline="292" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a5bec8dfa40b4c176d348698d9074a7e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::shape_index</definition>
        <argsstring>(const Array &amp;z, int ir)</argsstring>
        <name>shape_index</name>
        <qualifiedname>hmap::gpu::shape_index</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a4e9ebf2cab88b81e28538a5432abf68c" kindref="member">hmap::shape_index</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/curvature/curvature_gpu.cpp" line="100" column="7" bodyfile="HighMap/src/curvature/curvature_gpu.cpp" bodystart="100" bodyend="109" declfile="HighMap/include/highmap/curvature.hpp" declline="295" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a112db22b157fcb69d867e1e5ee3a1afd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::unsphericity</definition>
        <argsstring>(const Array &amp;z, int ir)</argsstring>
        <name>unsphericity</name>
        <qualifiedname>hmap::gpu::unsphericity</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a5dc8b3117305f025eb4d0da50bf3c674" kindref="member">hmap::unsphericity</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/curvature/curvature_gpu.cpp" line="111" column="7" bodyfile="HighMap/src/curvature/curvature_gpu.cpp" bodystart="111" bodyend="120" declfile="HighMap/include/highmap/curvature.hpp" declline="298" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a7bc17570e205e4eb84ed4d434998555e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::hydraulic_particle</definition>
        <argsstring>(Array &amp;z, int nparticles, int seed, Array *p_bedrock=nullptr, Array *p_moisture_map=nullptr, Array *p_erosion_map=nullptr, Array *p_deposition_map=nullptr, float c_capacity=10.f, float c_erosion=0.05f, float c_deposition=0.05f, float c_inertia=0.3f, float drag_rate=0.001f, float evap_rate=0.001f, bool post_filtering=false)</argsstring>
        <name>hydraulic_particle</name>
        <qualifiedname>hmap::gpu::hydraulic_particle</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nparticles</declname>
        </param>
        <param>
          <type>int</type>
          <declname>seed</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_bedrock</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_moisture_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_erosion_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_capacity</declname>
          <defval>10.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_erosion</declname>
          <defval>0.05<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_deposition</declname>
          <defval>0.05<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_inertia</declname>
          <defval>0.3<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>drag_rate</declname>
          <defval>0.001<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>evap_rate</declname>
          <defval>0.001<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>post_filtering</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a9571076da7c13d9bd3ab99f137ef8188" kindref="member">hmap::hydraulic_particle</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/erosion_gpu.cpp" line="12" column="6" bodyfile="HighMap/src/erosion/erosion_gpu.cpp" bodystart="12" bodyend="77" declfile="HighMap/include/highmap/erosion.hpp" declline="1126" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1aacdd29247e4f3e008be3bacced178b50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::hydraulic_particle</definition>
        <argsstring>(Array &amp;z, Array *p_mask, int nparticles, int seed, Array *p_bedrock=nullptr, Array *p_moisture_map=nullptr, Array *p_erosion_map=nullptr, Array *p_deposition_map=nullptr, float c_capacity=10.f, float c_erosion=0.05f, float c_deposition=0.05f, float c_inertia=0.3f, float drag_rate=0.001f, float evap_rate=0.001f, bool post_filtering=false)</argsstring>
        <name>hydraulic_particle</name>
        <qualifiedname>hmap::gpu::hydraulic_particle</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nparticles</declname>
        </param>
        <param>
          <type>int</type>
          <declname>seed</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_bedrock</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_moisture_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_erosion_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_capacity</declname>
          <defval>10.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_erosion</declname>
          <defval>0.05<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_deposition</declname>
          <defval>0.05<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_inertia</declname>
          <defval>0.3<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>drag_rate</declname>
          <defval>0.001<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>evap_rate</declname>
          <defval>0.001<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>post_filtering</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a9571076da7c13d9bd3ab99f137ef8188" kindref="member">hmap::hydraulic_particle</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/erosion_gpu.cpp" line="79" column="6" bodyfile="HighMap/src/erosion/erosion_gpu.cpp" bodystart="79" bodyend="129" declfile="HighMap/include/highmap/erosion.hpp" declline="1142" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a9749d24b9dd9bed8ee333910951db395" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::hydraulic_schott</definition>
        <argsstring>(Array &amp;z, int iterations, const Array &amp;talus, float c_erosion=1.f, float c_thermal=0.1f, float c_deposition=0.2f, float flow_acc_exponent=0.8f, float flow_acc_exponent_depo=0.8f, float flow_routing_exponent=1.3f, float thermal_weight=1.5f, float deposition_weight=2.5f, Array *p_flow=nullptr)</argsstring>
        <name>hydraulic_schott</name>
        <qualifiedname>hmap::gpu::hydraulic_schott</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>float</type>
          <declname>c_erosion</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_thermal</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_deposition</declname>
          <defval>0.2<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>flow_acc_exponent</declname>
          <defval>0.8<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>flow_acc_exponent_depo</declname>
          <defval>0.8<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>flow_routing_exponent</declname>
          <defval>1.3<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>thermal_weight</declname>
          <defval>1.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>deposition_weight</declname>
          <defval>2.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_flow</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Simulates hydraulic erosion and deposition on a heightmap using the Schott method. </para>
        </briefdescription>
        <detaileddescription>
<para>This function performs hydraulic erosion on the given heightmap <computeroutput>z</computeroutput> over a specified number of iterations. It includes parameters for controlling erosion, deposition, and flow routing. Optional flow accumulation can also be computed and stored in the <computeroutput>p_flow</computeroutput> array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">z</parametername>
</parameternamelist>
<parameterdescription>
<para>The heightmap array to be modified. Heights are updated in-place. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of iterations for the hydraulic erosion process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">talus</parametername>
</parameternamelist>
<parameterdescription>
<para>An array defining the slope threshold for erosion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">c_erosion</parametername>
</parameternamelist>
<parameterdescription>
<para>Erosion coefficient (default: 1.0f). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">c_thermal</parametername>
</parameternamelist>
<parameterdescription>
<para>Thermal erosion coefficient (default: 0.1f). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">c_deposition</parametername>
</parameternamelist>
<parameterdescription>
<para>Deposition coefficient (default: 0.2f). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flow_acc_exponent</parametername>
</parameternamelist>
<parameterdescription>
<para>Exponent controlling the influence of flow accumulation on erosion (default: 0.8f). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flow_acc_exponent_depo</parametername>
</parameternamelist>
<parameterdescription>
<para>Exponent controlling the influence of flow accumulation on deposition (default: 0.8f). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flow_routing_exponent</parametername>
</parameternamelist>
<parameterdescription>
<para>Exponent controlling flow routing behavior (default: 1.3f). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">thermal_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>Weight of thermal erosion effects (default: 1.5f). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">deposition_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>Weight of deposition effects (default: 2.5f). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">p_flow</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to an array for storing flow accumulation data. If null, flow data is not returned (default: nullptr).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Taken from <ulink url="https://hal.science/hal-04565030v1/document">https://hal.science/hal-04565030v1/document</ulink></para>
</simplesect>
<simplesect kind="note"><para>Only available if OpenCL is enabled.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_hydraulic_schott.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1_1gpu_1adb8336ed4d83c15500872185dee45d50" kindref="member">hmap::gpu::init_opencl</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>shape<sp/>=<sp/>{512,<sp/>512};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z0<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterations<sp/>=<sp/>400;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>talus(shape,<sp/>2.f<sp/>/<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>);<sp/></highlight><highlight class="comment">//<sp/>for<sp/>thermal</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1_1gpu_1a9749d24b9dd9bed8ee333910951db395" kindref="member">hmap::gpu::hydraulic_schott</ref>(z,<sp/>iterations,<sp/>talus);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_hydraulic_schott.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z0,<sp/>z},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_hydraulic_schott.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/hydraulic_schott_gpu.cpp" line="10" column="6" bodyfile="HighMap/src/erosion/hydraulic_schott_gpu.cpp" bodystart="10" bodyend="77" declfile="HighMap/include/highmap/erosion.hpp" declline="1204" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a54cd96bb811138a9c7f9768c4b0a8f98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::hydraulic_schott</definition>
        <argsstring>(Array &amp;z, int iterations, const Array &amp;talus, Array *p_mask, float c_erosion=1.f, float c_thermal=0.1f, float c_deposition=0.2f, float flow_acc_exponent=0.8f, float flow_acc_exponent_depo=0.8f, float flow_routing_exponent=1.3f, float thermal_weight=1.5f, float deposition_weight=2.5f, Array *p_flow=nullptr)</argsstring>
        <name>hydraulic_schott</name>
        <qualifiedname>hmap::gpu::hydraulic_schott</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>talus</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>float</type>
          <declname>c_erosion</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_thermal</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_deposition</declname>
          <defval>0.2<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>flow_acc_exponent</declname>
          <defval>0.8<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>flow_acc_exponent_depo</declname>
          <defval>0.8<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>flow_routing_exponent</declname>
          <defval>1.3<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>thermal_weight</declname>
          <defval>1.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>deposition_weight</declname>
          <defval>2.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_flow</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/hydraulic_schott_gpu.cpp" line="79" column="6" bodyfile="HighMap/src/erosion/hydraulic_schott_gpu.cpp" bodystart="79" bodyend="123" declfile="HighMap/include/highmap/erosion.hpp" declline="1217" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a7814928e0f3b995421d298677934d11d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::hydraulic_stream_log</definition>
        <argsstring>(Array &amp;z, float c_erosion, float talus_ref, int deposition_ir=32, float deposition_scale_ratio=1.f, float gradient_power=0.8f, float gradient_scaling_ratio=1.f, int gradient_prefilter_ir=16, float saturation_ratio=1.f, Array *p_bedrock=nullptr, Array *p_moisture_map=nullptr, Array *p_erosion_map=nullptr, Array *p_deposition_map=nullptr, Array *p_flow_map=nullptr)</argsstring>
        <name>hydraulic_stream_log</name>
        <qualifiedname>hmap::gpu::hydraulic_stream_log</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>c_erosion</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus_ref</declname>
        </param>
        <param>
          <type>int</type>
          <declname>deposition_ir</declname>
          <defval>32</defval>
        </param>
        <param>
          <type>float</type>
          <declname>deposition_scale_ratio</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>gradient_power</declname>
          <defval>0.8<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>gradient_scaling_ratio</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>gradient_prefilter_ir</declname>
          <defval>16</defval>
        </param>
        <param>
          <type>float</type>
          <declname>saturation_ratio</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_bedrock</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_moisture_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_erosion_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_flow_map</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a37caab05db1b9791bf8a8ca10852c0da" kindref="member">hmap::hydraulic_stream_log</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/hydraulic_stream_gpu.cpp" line="17" column="6" bodyfile="HighMap/src/erosion/hydraulic_stream_gpu.cpp" bodystart="17" bodyend="85" declfile="HighMap/include/highmap/erosion.hpp" declline="1232" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a1d7ddc82f911f49410104473949f386a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::hydraulic_stream_log</definition>
        <argsstring>(Array &amp;z, float c_erosion, float talus_ref, Array *p_mask, int deposition_ir=32, float deposition_scale_ratio=1.f, float gradient_power=0.8f, float gradient_scaling_ratio=1.f, int gradient_prefilter_ir=16, float saturation_ratio=1.f, Array *p_bedrock=nullptr, Array *p_moisture_map=nullptr, Array *p_erosion_map=nullptr, Array *p_deposition_map=nullptr, Array *p_flow_map=nullptr)</argsstring>
        <name>hydraulic_stream_log</name>
        <qualifiedname>hmap::gpu::hydraulic_stream_log</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>c_erosion</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus_ref</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>deposition_ir</declname>
          <defval>32</defval>
        </param>
        <param>
          <type>float</type>
          <declname>deposition_scale_ratio</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>gradient_power</declname>
          <defval>0.8<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>gradient_scaling_ratio</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>gradient_prefilter_ir</declname>
          <defval>16</defval>
        </param>
        <param>
          <type>float</type>
          <declname>saturation_ratio</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_bedrock</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_moisture_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_erosion_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_flow_map</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/hydraulic_stream_gpu.cpp" line="87" column="6" bodyfile="HighMap/src/erosion/hydraulic_stream_gpu.cpp" bodystart="87" bodyend="137" declfile="HighMap/include/highmap/erosion.hpp" declline="1247" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a2eb4bdf2d7dc4441e56865027764425e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::thermal</definition>
        <argsstring>(Array &amp;z, const Array &amp;talus, int iterations=10, Array *p_bedrock=nullptr, Array *p_deposition_map=nullptr)</argsstring>
        <name>thermal</name>
        <qualifiedname>hmap::gpu::thermal</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>10</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_bedrock</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1ab6221592aa07d117715b474afab7db1c" kindref="member">hmap::thermal</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/thermal_gpu.cpp" line="13" column="6" bodyfile="HighMap/src/erosion/thermal_gpu.cpp" bodystart="13" bodyend="68" declfile="HighMap/include/highmap/erosion.hpp" declline="1264" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a1be1d9c97f7da805703dadab064fb793" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::thermal</definition>
        <argsstring>(Array &amp;z, Array *p_mask, const Array &amp;talus, int iterations=10, Array *p_bedrock=nullptr, Array *p_deposition_map=nullptr)</argsstring>
        <name>thermal</name>
        <qualifiedname>hmap::gpu::thermal</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>10</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_bedrock</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1ab6221592aa07d117715b474afab7db1c" kindref="member">hmap::thermal</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/thermal_gpu.cpp" line="70" column="6" bodyfile="HighMap/src/erosion/thermal_gpu.cpp" bodystart="70" bodyend="85" declfile="HighMap/include/highmap/erosion.hpp" declline="1271" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1aac5f0e0045cf767611fb8d2def2c4cb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::thermal</definition>
        <argsstring>(Array &amp;z, float talus, int iterations=10, Array *p_bedrock=nullptr, Array *p_deposition_map=nullptr)</argsstring>
        <name>thermal</name>
        <qualifiedname>hmap::gpu::thermal</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>10</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_bedrock</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1ab6221592aa07d117715b474afab7db1c" kindref="member">hmap::thermal</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/thermal_gpu.cpp" line="87" column="6" bodyfile="HighMap/src/erosion/thermal_gpu.cpp" bodystart="87" bodyend="95" declfile="HighMap/include/highmap/erosion.hpp" declline="1279" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a36a2eba6d158e44d0ef917d9582987fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::thermal_auto_bedrock</definition>
        <argsstring>(Array &amp;z, const Array &amp;talus, int iterations=10, Array *p_deposition_map=nullptr)</argsstring>
        <name>thermal_auto_bedrock</name>
        <qualifiedname>hmap::gpu::thermal_auto_bedrock</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>10</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1acbd2a3c82ec3ce4eaf77dbc92d580321" kindref="member">hmap::thermal_auto_bedrock</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/thermal_gpu.cpp" line="97" column="6" bodyfile="HighMap/src/erosion/thermal_gpu.cpp" bodystart="97" bodyend="129" declfile="HighMap/include/highmap/erosion.hpp" declline="1286" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1ad5bd9a318918350b56ccc887139ca554" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::thermal_auto_bedrock</definition>
        <argsstring>(Array &amp;z, Array *p_mask, const Array &amp;talus, int iterations=10, Array *p_deposition_map=nullptr)</argsstring>
        <name>thermal_auto_bedrock</name>
        <qualifiedname>hmap::gpu::thermal_auto_bedrock</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>10</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1acbd2a3c82ec3ce4eaf77dbc92d580321" kindref="member">hmap::thermal_auto_bedrock</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/thermal_gpu.cpp" line="140" column="6" bodyfile="HighMap/src/erosion/thermal_gpu.cpp" bodystart="140" bodyend="154" declfile="HighMap/include/highmap/erosion.hpp" declline="1292" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1ac87a6d725bf0751510f6b1f426a8af27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::thermal_auto_bedrock</definition>
        <argsstring>(Array &amp;z, float, int iterations=10, Array *p_deposition_map=nullptr)</argsstring>
        <name>thermal_auto_bedrock</name>
        <qualifiedname>hmap::gpu::thermal_auto_bedrock</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>float</type>
          <defname>talus</defname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>10</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1acbd2a3c82ec3ce4eaf77dbc92d580321" kindref="member">hmap::thermal_auto_bedrock</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/thermal_gpu.cpp" line="131" column="6" bodyfile="HighMap/src/erosion/thermal_gpu.cpp" bodystart="131" bodyend="138" declfile="HighMap/include/highmap/erosion.hpp" declline="1299" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1ae57a1e9bd94f218d4be17c9d8be012c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::thermal_inflate</definition>
        <argsstring>(Array &amp;z, const Array &amp;talus, int iterations=10)</argsstring>
        <name>thermal_inflate</name>
        <qualifiedname>hmap::gpu::thermal_inflate</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
<para>Apply thermal weathering erosion to give a scree like effect. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Only available if OpenCL is enabled.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus</parametername>
</parameternamelist>
<parameterdescription>
<para>Talus limit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_deposition_map</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] Reference to the deposition map, provided as an output field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iterations.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="thermal_ridge.cpp"></programlisting></para>
<para><bold>Result</bold> <image type="html" name="thermal_ridge.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/thermal_gpu.cpp" line="156" column="6" bodyfile="HighMap/src/erosion/thermal_gpu.cpp" bodystart="156" bodyend="172" declfile="HighMap/include/highmap/erosion.hpp" declline="1321" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a72c9d220589d2724b4e48e9c37ff55ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::thermal_inflate</definition>
        <argsstring>(Array &amp;z, const Array *p_mask, const Array &amp;talus, int iterations=10)</argsstring>
        <name>thermal_inflate</name>
        <qualifiedname>hmap::gpu::thermal_inflate</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/thermal_gpu.cpp" line="174" column="6" bodyfile="HighMap/src/erosion/thermal_gpu.cpp" bodystart="174" bodyend="187" declfile="HighMap/include/highmap/erosion.hpp" declline="1323" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1afabf7cb3077839af03388c0d1236d912" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::thermal_rib</definition>
        <argsstring>(Array &amp;z, int iterations, Array *p_bedrock=nullptr)</argsstring>
        <name>thermal_rib</name>
        <qualifiedname>hmap::gpu::thermal_rib</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_bedrock</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a4ca4c918ef88ea4fc16e25c7017e15c9" kindref="member">hmap::thermal_rib</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/thermal_gpu.cpp" line="189" column="6" bodyfile="HighMap/src/erosion/thermal_gpu.cpp" bodystart="189" bodyend="205" declfile="HighMap/include/highmap/erosion.hpp" declline="1329" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a1489150d5e1af976a9f814b9911b3ea0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::thermal_ridge</definition>
        <argsstring>(Array &amp;z, const Array &amp;talus, int iterations=10, Array *p_deposition_map=nullptr)</argsstring>
        <name>thermal_ridge</name>
        <qualifiedname>hmap::gpu::thermal_ridge</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>10</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Apply thermal weathering erosion to give a ridge like effect. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Based on <ulink url="https://www.fractal-landscapes.co.uk/maths.html">https://www.fractal-landscapes.co.uk/maths.html</ulink></para>
</simplesect>
<simplesect kind="note"><para>Only available if OpenCL is enabled.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus</parametername>
</parameternamelist>
<parameterdescription>
<para>Talus limit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_deposition_map</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] Reference to the deposition map, provided as an output field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iterations.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="thermal_ridge.cpp"></programlisting></para>
<para><bold>Result</bold> <image type="html" name="thermal_ridge.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/thermal_gpu.cpp" line="207" column="6" bodyfile="HighMap/src/erosion/thermal_gpu.cpp" bodystart="207" bodyend="231" declfile="HighMap/include/highmap/erosion.hpp" declline="1350" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1ad0a05ed0beea669300d62197a0dadaf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::thermal_ridge</definition>
        <argsstring>(Array &amp;z, const Array *p_mask, const Array &amp;talus, int iterations=10, Array *p_deposition_map=nullptr)</argsstring>
        <name>thermal_ridge</name>
        <qualifiedname>hmap::gpu::thermal_ridge</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>10</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/thermal_gpu.cpp" line="233" column="6" bodyfile="HighMap/src/erosion/thermal_gpu.cpp" bodystart="233" bodyend="247" declfile="HighMap/include/highmap/erosion.hpp" declline="1355" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a87339ed12fc8a86b1f59e351b06e67e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::thermal_scree</definition>
        <argsstring>(Array &amp;z, const Array &amp;talus, const Array &amp;zmax, int iterations=10, bool talus_constraint=true, Array *p_deposition_map=nullptr)</argsstring>
        <name>thermal_scree</name>
        <qualifiedname>hmap::gpu::thermal_scree</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>zmax</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>talus_constraint</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Performs thermal scree erosion on a heightmap. </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies a thermal erosion process that redistributes material from steeper slopes to flatter areas, simulating talus formation. The process iterates a given number of times to achieve a more stable terrain profile.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">z</parametername>
</parameternamelist>
<parameterdescription>
<para>The heightmap to be modified in-place by the erosion process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">talus</parametername>
</parameternamelist>
<parameterdescription>
<para>The threshold slope angles that determine where material is moved. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">zmax</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum allowed elevation for erosion effects. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of erosion iterations to apply (default: 10). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">talus_constraint</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to enforce a constraint on the talus slope (default: true). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">p_deposition_map</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to an array that stores the deposited material per cell. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/thermal_gpu.cpp" line="249" column="6" bodyfile="HighMap/src/erosion/thermal_gpu.cpp" bodystart="249" bodyend="280" declfile="HighMap/include/highmap/erosion.hpp" declline="1382" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a112228c7b9ebff5463329da76d00fff1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::thermal_scree</definition>
        <argsstring>(Array &amp;z, const Array *p_mask, const Array &amp;talus, const Array &amp;zmax, int iterations=10, bool talus_constraint=true, Array *p_deposition_map=nullptr)</argsstring>
        <name>thermal_scree</name>
        <qualifiedname>hmap::gpu::thermal_scree</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>zmax</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>talus_constraint</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/thermal_gpu.cpp" line="282" column="6" bodyfile="HighMap/src/erosion/thermal_gpu.cpp" bodystart="282" bodyend="308" declfile="HighMap/include/highmap/erosion.hpp" declline="1389" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a022f5800d7e28f79f9e2d3abf687f490" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::local_median_deviation</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>local_median_deviation</name>
        <qualifiedname>hmap::gpu::local_median_deviation</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a9b6a1d2ca8ef58a4a0605d04bcbff038" kindref="member">hmap::local_median_deviation</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/features/features_gpu.cpp" line="12" column="7" bodyfile="HighMap/src/features/features_gpu.cpp" bodystart="12" bodyend="17" declfile="HighMap/include/highmap/features.hpp" declline="428" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1afed4e84e60dd0cdc453e7da72940ed27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::mean_local</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>mean_local</name>
        <qualifiedname>hmap::gpu::mean_local</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a39d52250df1825ecea1e63309d94d1fb" kindref="member">hmap::mean_local</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/features/features_gpu.cpp" line="19" column="7" bodyfile="HighMap/src/features/features_gpu.cpp" bodystart="19" bodyend="39" declfile="HighMap/include/highmap/features.hpp" declline="431" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a2dcbc7dac085b61f3c47e17256741a9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::relative_elevation</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>relative_elevation</name>
        <qualifiedname>hmap::gpu::relative_elevation</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a941d446cad19c166f4f6c4df857dba65" kindref="member">hmap::relative_elevation</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/features/features_gpu.cpp" line="41" column="7" bodyfile="HighMap/src/features/features_gpu.cpp" bodystart="41" bodyend="50" declfile="HighMap/include/highmap/features.hpp" declline="434" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a62292cc4bf9f6eb5c7b63b1e26f8cc88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::ruggedness</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>ruggedness</name>
        <qualifiedname>hmap::gpu::ruggedness</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1af4ec8b5be149e6749fdf09759daf1e9e" kindref="member">hmap::ruggedness</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/features/features_gpu.cpp" line="52" column="7" bodyfile="HighMap/src/features/features_gpu.cpp" bodystart="52" bodyend="70" declfile="HighMap/include/highmap/features.hpp" declline="437" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1aa5a3e087822525c41f057a51255e2bad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::rugosity</definition>
        <argsstring>(const Array &amp;z, int ir, bool convex=true)</argsstring>
        <name>rugosity</name>
        <qualifiedname>hmap::gpu::rugosity</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>convex</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a85e411c67e97deb8459f25d4440546c3" kindref="member">hmap::rugosity</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/features/features_gpu.cpp" line="72" column="7" bodyfile="HighMap/src/features/features_gpu.cpp" bodystart="72" bodyend="104" declfile="HighMap/include/highmap/features.hpp" declline="440" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1aa5f9b68baa2c17c23c8f21708e8fac9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::std_local</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>std_local</name>
        <qualifiedname>hmap::gpu::std_local</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a0157f72a2a70dae28d0767a13739f4b5" kindref="member">hmap::std_local</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/features/features_gpu.cpp" line="106" column="7" bodyfile="HighMap/src/features/features_gpu.cpp" bodystart="106" bodyend="119" declfile="HighMap/include/highmap/features.hpp" declline="443" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a802ae2cfde5f1a4124ebd0bd2f2dc6c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::z_score</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>z_score</name>
        <qualifiedname>hmap::gpu::z_score</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a732a83c92c4a2d232fc9f421f98c0c6b" kindref="member">hmap::z_score</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/features/features_gpu.cpp" line="121" column="7" bodyfile="HighMap/src/features/features_gpu.cpp" bodystart="121" bodyend="134" declfile="HighMap/include/highmap/features.hpp" declline="446" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a3638798808a7e69482de679ffbe86c95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::expand</definition>
        <argsstring>(Array &amp;array, int ir, int iterations=1)</argsstring>
        <name>expand</name>
        <qualifiedname>hmap::gpu::expand</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1ae00605c7af4addcb5092c90260e2d61b" kindref="member">hmap::expand</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters_gpu.cpp" line="15" column="6" bodyfile="HighMap/src/filters/filters_gpu.cpp" bodystart="15" bodyend="19" declfile="HighMap/include/highmap/filters.hpp" declline="2333" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a4078e5f2ad3a01d6aa282011662a3b5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::expand</definition>
        <argsstring>(Array &amp;array, int ir, const Array *p_mask, int iterations=1)</argsstring>
        <name>expand</name>
        <qualifiedname>hmap::gpu::expand</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters_gpu.cpp" line="21" column="6" bodyfile="HighMap/src/filters/filters_gpu.cpp" bodystart="21" bodyend="33" declfile="HighMap/include/highmap/filters.hpp" declline="2334" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a70fde21fb8301d39cc7a0ed919457917" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::expand</definition>
        <argsstring>(Array &amp;array, const Array &amp;kernel, int iterations=1)</argsstring>
        <name>expand</name>
        <qualifiedname>hmap::gpu::expand</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters_gpu.cpp" line="35" column="6" bodyfile="HighMap/src/filters/filters_gpu.cpp" bodystart="35" bodyend="57" declfile="HighMap/include/highmap/filters.hpp" declline="2338" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a722cef96155d5c26274e24c796dc3a1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::expand</definition>
        <argsstring>(Array &amp;array, const Array &amp;kernel, const Array *p_mask, int iterations=1)</argsstring>
        <name>expand</name>
        <qualifiedname>hmap::gpu::expand</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters_gpu.cpp" line="59" column="6" bodyfile="HighMap/src/filters/filters_gpu.cpp" bodystart="59" bodyend="92" declfile="HighMap/include/highmap/filters.hpp" declline="2341" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a76e0787fcca5220ec08b423349a475a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::gamma_correction_local</definition>
        <argsstring>(Array &amp;array, float gamma, int ir, float k=0.1f)</argsstring>
        <name>gamma_correction_local</name>
        <qualifiedname>hmap::gpu::gamma_correction_local</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1acf8c38e2bcaa9c116b607230dcc6cb0e" kindref="member">hmap::gamma_correction_local</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters_gpu.cpp" line="94" column="6" bodyfile="HighMap/src/filters/filters_gpu.cpp" bodystart="94" bodyend="125" declfile="HighMap/include/highmap/filters.hpp" declline="2347" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a7725963a18b9fca522dec1ae74ad8c2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::gamma_correction_local</definition>
        <argsstring>(Array &amp;array, float gamma, int ir, const Array *p_mask, float k=0.1f)</argsstring>
        <name>gamma_correction_local</name>
        <qualifiedname>hmap::gpu::gamma_correction_local</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters_gpu.cpp" line="127" column="6" bodyfile="HighMap/src/filters/filters_gpu.cpp" bodystart="127" bodyend="141" declfile="HighMap/include/highmap/filters.hpp" declline="2348" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a13625ec501979795138bac6499ac0f08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::laplace</definition>
        <argsstring>(Array &amp;array, float sigma=0.2f, int iterations=3)</argsstring>
        <name>laplace</name>
        <qualifiedname>hmap::gpu::laplace</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>sigma</declname>
          <defval>0.2<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1ae5dd839d799e31ea377dc4daff29b62d" kindref="member">hmap::laplace</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters_gpu.cpp" line="143" column="6" bodyfile="HighMap/src/filters/filters_gpu.cpp" bodystart="143" bodyend="156" declfile="HighMap/include/highmap/filters.hpp" declline="2355" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a65f49b330320b4c60d8ca5083eda8e86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::laplace</definition>
        <argsstring>(Array &amp;array, const Array *p_mask, float sigma=0.2f, int iterations=3)</argsstring>
        <name>laplace</name>
        <qualifiedname>hmap::gpu::laplace</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>float</type>
          <declname>sigma</declname>
          <defval>0.2<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters_gpu.cpp" line="158" column="6" bodyfile="HighMap/src/filters/filters_gpu.cpp" bodystart="158" bodyend="180" declfile="HighMap/include/highmap/filters.hpp" declline="2356" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a22bc7f003aeaf38ed8511676cd9c83fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::maximum_local</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>maximum_local</name>
        <qualifiedname>hmap::gpu::maximum_local</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a5437c715b7a187bc794b1bf66891bddf" kindref="member">hmap::maximum_local</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters_gpu.cpp" line="182" column="7" bodyfile="HighMap/src/filters/filters_gpu.cpp" bodystart="182" bodyend="203" declfile="HighMap/include/highmap/filters.hpp" declline="2362" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1ad937d25ce6177738acbac4ff89e478c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::maximum_local_disk</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>maximum_local_disk</name>
        <qualifiedname>hmap::gpu::maximum_local_disk</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a2470328dcc792f6563c5844a2cc163ee" kindref="member">hmap::maximum_local_disk</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters_gpu.cpp" line="205" column="7" bodyfile="HighMap/src/filters/filters_gpu.cpp" bodystart="205" bodyend="211" declfile="HighMap/include/highmap/filters.hpp" declline="2365" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a54dd015841925f624e6e2bed159f9d37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::mean_shift</definition>
        <argsstring>(const Array &amp;array, int ir, float talus, int iterations=1, bool talus_weighted=true)</argsstring>
        <name>mean_shift</name>
        <qualifiedname>hmap::gpu::mean_shift</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>talus_weighted</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a8ac4638525bb243024d50793d97bc9ee" kindref="member">hmap::mean_shift</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters_gpu.cpp" line="213" column="7" bodyfile="HighMap/src/filters/filters_gpu.cpp" bodystart="213" bodyend="244" declfile="HighMap/include/highmap/filters.hpp" declline="2368" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1ab2bb3f78e7b0943ad185213d52ab53b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::mean_shift</definition>
        <argsstring>(const Array &amp;array, int ir, float talus, const Array *p_mask, int iterations=1, bool talus_weighted=true)</argsstring>
        <name>mean_shift</name>
        <qualifiedname>hmap::gpu::mean_shift</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>talus_weighted</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters_gpu.cpp" line="246" column="7" bodyfile="HighMap/src/filters/filters_gpu.cpp" bodystart="246" bodyend="261" declfile="HighMap/include/highmap/filters.hpp" declline="2374" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1aeb2e79274db3110eaa716f2472399bff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::median_3x3</definition>
        <argsstring>(Array &amp;array)</argsstring>
        <name>median_3x3</name>
        <qualifiedname>hmap::gpu::median_3x3</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a8c9d91481a5908494b9f06c90c705b3a" kindref="member">hmap::median_3x3</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters_gpu.cpp" line="263" column="6" bodyfile="HighMap/src/filters/filters_gpu.cpp" bodystart="263" bodyend="274" declfile="HighMap/include/highmap/filters.hpp" declline="2382" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1ad412a65a4ada057f8b51b631f332ea67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::median_3x3</definition>
        <argsstring>(Array &amp;array, const Array *p_mask)</argsstring>
        <name>median_3x3</name>
        <qualifiedname>hmap::gpu::median_3x3</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters_gpu.cpp" line="276" column="6" bodyfile="HighMap/src/filters/filters_gpu.cpp" bodystart="276" bodyend="286" declfile="HighMap/include/highmap/filters.hpp" declline="2383" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a2e2bccfafc05679f1762ba039df58dbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::median_pseudo</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>median_pseudo</name>
        <qualifiedname>hmap::gpu::median_pseudo</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a14eb6b7d304484c8cbb231b672851491" kindref="member">hmap::median_pseudo</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters_gpu.cpp" line="288" column="7" bodyfile="HighMap/src/filters/filters_gpu.cpp" bodystart="288" bodyend="293" declfile="HighMap/include/highmap/filters.hpp" declline="2386" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1af9c065896a9d06e57b07e1e59a5f153f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::minimum_local</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>minimum_local</name>
        <qualifiedname>hmap::gpu::minimum_local</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1adf68a2f031297654f88252b7ce027b3d" kindref="member">hmap::minimum_local</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters_gpu.cpp" line="295" column="7" bodyfile="HighMap/src/filters/filters_gpu.cpp" bodystart="295" bodyend="298" declfile="HighMap/include/highmap/filters.hpp" declline="2389" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a047da8b8ee68b5e54b3bf42041e1d9d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::minimum_local_disk</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>minimum_local_disk</name>
        <qualifiedname>hmap::gpu::minimum_local_disk</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a2b174148b8c1f2e44b5ecff756e9a0f9" kindref="member">hmap::minimum_local_disk</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters_gpu.cpp" line="300" column="7" bodyfile="HighMap/src/filters/filters_gpu.cpp" bodystart="300" bodyend="306" declfile="HighMap/include/highmap/filters.hpp" declline="2392" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a9aa4af458740db48fdcd55cc90238ce2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::normal_displacement</definition>
        <argsstring>(Array &amp;array, float amount=0.1f, int ir=0, bool reverse=false)</argsstring>
        <name>normal_displacement</name>
        <qualifiedname>hmap::gpu::normal_displacement</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amount</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>reverse</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1aafd7a642dabfbcf2ab2981b229a30e15" kindref="member">hmap::normal_displacement</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters_gpu.cpp" line="308" column="6" bodyfile="HighMap/src/filters/filters_gpu.cpp" bodystart="308" bodyend="325" declfile="HighMap/include/highmap/filters.hpp" declline="2395" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a638d2358ff4ea4cb6a4f24106aa3c94d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::normal_displacement</definition>
        <argsstring>(Array &amp;array, const Array *p_mask, float amount=0.1f, int ir=0, bool reverse=false)</argsstring>
        <name>normal_displacement</name>
        <qualifiedname>hmap::gpu::normal_displacement</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amount</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>reverse</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters_gpu.cpp" line="327" column="6" bodyfile="HighMap/src/filters/filters_gpu.cpp" bodystart="327" bodyend="356" declfile="HighMap/include/highmap/filters.hpp" declline="2399" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1ae197a615380c768a5ce30df18397db52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::plateau</definition>
        <argsstring>(Array &amp;array, const Array *p_mask, int ir, float factor)</argsstring>
        <name>plateau</name>
        <qualifiedname>hmap::gpu::plateau</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>float</type>
          <declname>factor</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a558c273680de2328f37e5df7ee598813" kindref="member">hmap::plateau</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters_gpu.cpp" line="358" column="6" bodyfile="HighMap/src/filters/filters_gpu.cpp" bodystart="358" bodyend="384" declfile="HighMap/include/highmap/filters.hpp" declline="2406" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1aa1d48aaeafd42970a2b0c9b6795d73b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::plateau</definition>
        <argsstring>(Array &amp;array, int ir, float factor)</argsstring>
        <name>plateau</name>
        <qualifiedname>hmap::gpu::plateau</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>float</type>
          <declname>factor</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters_gpu.cpp" line="386" column="6" bodyfile="HighMap/src/filters/filters_gpu.cpp" bodystart="386" bodyend="389" declfile="HighMap/include/highmap/filters.hpp" declline="2407" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a5639aa9dbe4048e12f83ff5c5660db07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::shrink</definition>
        <argsstring>(Array &amp;array, int ir, int iterations=1)</argsstring>
        <name>shrink</name>
        <qualifiedname>hmap::gpu::shrink</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1acde2b4e7bac6ebfe2c2dcfe3f0a369f1" kindref="member">hmap::shrink</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters_gpu.cpp" line="391" column="6" bodyfile="HighMap/src/filters/filters_gpu.cpp" bodystart="391" bodyend="395" declfile="HighMap/include/highmap/filters.hpp" declline="2410" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a551b9d1203331ed95e472c57a6e439c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::shrink</definition>
        <argsstring>(Array &amp;array, int ir, const Array *p_mask, int iterations=1)</argsstring>
        <name>shrink</name>
        <qualifiedname>hmap::gpu::shrink</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters_gpu.cpp" line="397" column="6" bodyfile="HighMap/src/filters/filters_gpu.cpp" bodystart="397" bodyend="409" declfile="HighMap/include/highmap/filters.hpp" declline="2411" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a95377c44e7202205d867d42fe4cfa93d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::shrink</definition>
        <argsstring>(Array &amp;array, const Array &amp;kernel, int iterations=1)</argsstring>
        <name>shrink</name>
        <qualifiedname>hmap::gpu::shrink</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters_gpu.cpp" line="411" column="6" bodyfile="HighMap/src/filters/filters_gpu.cpp" bodystart="411" bodyend="441" declfile="HighMap/include/highmap/filters.hpp" declline="2415" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a11bc9aa25f858fb2587a8b6118570fa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::shrink</definition>
        <argsstring>(Array &amp;array, const Array &amp;kernel, const Array *p_mask, int iterations=1)</argsstring>
        <name>shrink</name>
        <qualifiedname>hmap::gpu::shrink</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters_gpu.cpp" line="443" column="6" bodyfile="HighMap/src/filters/filters_gpu.cpp" bodystart="443" bodyend="483" declfile="HighMap/include/highmap/filters.hpp" declline="2418" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a7d2aae253f1f67bbdbc718859f83ef0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::smooth_cpulse</definition>
        <argsstring>(Array &amp;array, int ir)</argsstring>
        <name>smooth_cpulse</name>
        <qualifiedname>hmap::gpu::smooth_cpulse</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a95c0f4c53278620f0812381ccaa7459e" kindref="member">hmap::smooth_cpulse</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters_gpu.cpp" line="485" column="6" bodyfile="HighMap/src/filters/filters_gpu.cpp" bodystart="485" bodyend="515" declfile="HighMap/include/highmap/filters.hpp" declline="2424" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1ad201432c26c75bbab156a22c52b7121a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::smooth_cpulse</definition>
        <argsstring>(Array &amp;array, int ir, const Array *p_mask)</argsstring>
        <name>smooth_cpulse</name>
        <qualifiedname>hmap::gpu::smooth_cpulse</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a95c0f4c53278620f0812381ccaa7459e" kindref="member">hmap::smooth_cpulse</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters_gpu.cpp" line="517" column="6" bodyfile="HighMap/src/filters/filters_gpu.cpp" bodystart="517" bodyend="555" declfile="HighMap/include/highmap/filters.hpp" declline="2427" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1ab10a6dc3d92519c7bd3244571bcd6429" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::smooth_fill</definition>
        <argsstring>(Array &amp;array, int ir, float k=0.1f, Array *p_deposition_map=nullptr)</argsstring>
        <name>smooth_fill</name>
        <qualifiedname>hmap::gpu::smooth_fill</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1ae9fece3e5896d3a5fe4a89d76d6b9dba" kindref="member">hmap::smooth_fill</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters_gpu.cpp" line="557" column="6" bodyfile="HighMap/src/filters/filters_gpu.cpp" bodystart="557" bodyend="565" declfile="HighMap/include/highmap/filters.hpp" declline="2430" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1adc6356d5b5690f553d33810380417805" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::smooth_fill</definition>
        <argsstring>(Array &amp;array, int ir, const Array *p_mask, float k=0.1f, Array *p_deposition_map=nullptr)</argsstring>
        <name>smooth_fill</name>
        <qualifiedname>hmap::gpu::smooth_fill</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters_gpu.cpp" line="567" column="6" bodyfile="HighMap/src/filters/filters_gpu.cpp" bodystart="567" bodyend="579" declfile="HighMap/include/highmap/filters.hpp" declline="2434" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a4d9bec907c550123aa7db34f4dadc3e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::smooth_fill_holes</definition>
        <argsstring>(Array &amp;array, int ir)</argsstring>
        <name>smooth_fill_holes</name>
        <qualifiedname>hmap::gpu::smooth_fill_holes</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a1be0dea3638a072678a860c798f4f271" kindref="member">hmap::smooth_fill_holes</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters_gpu.cpp" line="581" column="6" bodyfile="HighMap/src/filters/filters_gpu.cpp" bodystart="581" bodyend="595" declfile="HighMap/include/highmap/filters.hpp" declline="2441" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a249288f5956cedfaffefd7b0b8fba17d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::smooth_fill_holes</definition>
        <argsstring>(Array &amp;array, int ir, const Array *p_mask)</argsstring>
        <name>smooth_fill_holes</name>
        <qualifiedname>hmap::gpu::smooth_fill_holes</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters_gpu.cpp" line="597" column="6" bodyfile="HighMap/src/filters/filters_gpu.cpp" bodystart="597" bodyend="607" declfile="HighMap/include/highmap/filters.hpp" declline="2442" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a37f556d4d43005e2d618f0aa6c3527bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::smooth_fill_smear_peaks</definition>
        <argsstring>(Array &amp;array, int ir)</argsstring>
        <name>smooth_fill_smear_peaks</name>
        <qualifiedname>hmap::gpu::smooth_fill_smear_peaks</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1afa6f07541841c674663141d84ec4d000" kindref="member">hmap::smooth_fill_smear_peaks</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters_gpu.cpp" line="609" column="6" bodyfile="HighMap/src/filters/filters_gpu.cpp" bodystart="609" bodyend="623" declfile="HighMap/include/highmap/filters.hpp" declline="2447" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1acb80d6cda31177534d6e63c97675d46d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::smooth_fill_smear_peaks</definition>
        <argsstring>(Array &amp;array, int ir, const Array *p_mask)</argsstring>
        <name>smooth_fill_smear_peaks</name>
        <qualifiedname>hmap::gpu::smooth_fill_smear_peaks</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters_gpu.cpp" line="625" column="6" bodyfile="HighMap/src/filters/filters_gpu.cpp" bodystart="625" bodyend="635" declfile="HighMap/include/highmap/filters.hpp" declline="2448" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a1c5e49734e49973fe1b275b6988dba12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::gradient_norm</definition>
        <argsstring>(const Array &amp;array)</argsstring>
        <name>gradient_norm</name>
        <qualifiedname>hmap::gpu::gradient_norm</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a5f58c4149344b401d82f0be3c3807156" kindref="member">hmap::gradient_norm</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/gradient/gradient_gpu.cpp" line="9" column="7" bodyfile="HighMap/src/gradient/gradient_gpu.cpp" bodystart="9" bodyend="27" declfile="HighMap/include/highmap/gradient.hpp" declline="329" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1af794a4c54c3766ca86b7e4a06346ab91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::flow_direction_d8</definition>
        <argsstring>(const Array &amp;z)</argsstring>
        <name>flow_direction_d8</name>
        <qualifiedname>hmap::gpu::flow_direction_d8</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1af8f580c9d50a07585257569bd1160891" kindref="member">hmap::flow_direction_d8</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/hydrology/flow_accumulation_d8_gpu.cpp" line="10" column="7" bodyfile="HighMap/src/hydrology/flow_accumulation_d8_gpu.cpp" bodystart="10" bodyend="24" declfile="HighMap/include/highmap/hydrology.hpp" declline="268" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1ab4f1542d2d5dd7edc54d240dab777755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::generate_riverbed</definition>
        <argsstring>(const Path &amp;path, Vec2&lt; int &gt; shape, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f}, bool bezier_smoothing=false, float depth_start=0.01f, float depth_end=1.f, float slope_start=64.f, float slope_end=32.f, float shape_exponent_start=1.f, float shape_exponent_end=10.f, float k_smoothing=0.5f, int post_filter_ir=0, Array *p_noise_x=nullptr, Array *p_noise_y=nullptr, Array *p_noise_r=nullptr)</argsstring>
        <name>generate_riverbed</name>
        <qualifiedname>hmap::gpu::generate_riverbed</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Path" kindref="compound">Path</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>bezier_smoothing</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>float</type>
          <declname>depth_start</declname>
          <defval>0.01<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>depth_end</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>slope_start</declname>
          <defval>64.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>slope_end</declname>
          <defval>32.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>shape_exponent_start</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>shape_exponent_end</declname>
          <defval>10.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>k_smoothing</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>post_filter_ir</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_r</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a97ba5dfaa6625b654a8010ed7d2f3465" kindref="member">hmap::generate_riverbed</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/hydrology/generate_riverbed_gpu.cpp" line="16" column="7" bodyfile="HighMap/src/hydrology/generate_riverbed_gpu.cpp" bodystart="16" bodyend="86" declfile="HighMap/include/highmap/hydrology.hpp" declline="271" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a7fca2b47602e86cf0c65908230bdee55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::interpolate_array_bicubic</definition>
        <argsstring>(const Array &amp;source, Array &amp;target)</argsstring>
        <name>interpolate_array_bicubic</name>
        <qualifiedname>hmap::gpu::interpolate_array_bicubic</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/interpolate/interpolate_array_gpu.cpp" line="37" column="6" bodyfile="HighMap/src/interpolate/interpolate_array_gpu.cpp" bodystart="37" bodyend="59" declfile="HighMap/include/highmap/interpolate_array.hpp" declline="69" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a08d2a6e771f70513a5fdbc27783f5f55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::interpolate_array_bicubic</definition>
        <argsstring>(const Array &amp;source, Array &amp;target, const Vec4&lt; float &gt; &amp;bbox_source, const Vec4&lt; float &gt; &amp;bbox_target)</argsstring>
        <name>interpolate_array_bicubic</name>
        <qualifiedname>hmap::gpu::interpolate_array_bicubic</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const <ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt; &amp;</type>
          <declname>bbox_source</declname>
        </param>
        <param>
          <type>const <ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt; &amp;</type>
          <declname>bbox_target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/interpolate/interpolate_array_gpu.cpp" line="61" column="6" bodyfile="HighMap/src/interpolate/interpolate_array_gpu.cpp" bodystart="61" bodyend="87" declfile="HighMap/include/highmap/interpolate_array.hpp" declline="71" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a9c6bf942ee590b7a1b1fa7e5d87d890a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::interpolate_array_bilinear</definition>
        <argsstring>(const Array &amp;source, Array &amp;target)</argsstring>
        <name>interpolate_array_bilinear</name>
        <qualifiedname>hmap::gpu::interpolate_array_bilinear</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/interpolate/interpolate_array_gpu.cpp" line="89" column="6" bodyfile="HighMap/src/interpolate/interpolate_array_gpu.cpp" bodystart="89" bodyend="107" declfile="HighMap/include/highmap/interpolate_array.hpp" declline="76" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a7afd3be09339152030aed3d5ee28614c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::interpolate_array_bilinear</definition>
        <argsstring>(const Array &amp;source, Array &amp;target, const Vec4&lt; float &gt; &amp;bbox_source, const Vec4&lt; float &gt; &amp;bbox_target)</argsstring>
        <name>interpolate_array_bilinear</name>
        <qualifiedname>hmap::gpu::interpolate_array_bilinear</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const <ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt; &amp;</type>
          <declname>bbox_source</declname>
        </param>
        <param>
          <type>const <ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt; &amp;</type>
          <declname>bbox_target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/interpolate/interpolate_array_gpu.cpp" line="109" column="6" bodyfile="HighMap/src/interpolate/interpolate_array_gpu.cpp" bodystart="109" bodyend="131" declfile="HighMap/include/highmap/interpolate_array.hpp" declline="78" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1ac2dbdcbbe157f0a820f8eb07d4544471" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::interpolate_array_lagrange</definition>
        <argsstring>(const Array &amp;source, Array &amp;target, int order)</argsstring>
        <name>interpolate_array_lagrange</name>
        <qualifiedname>hmap::gpu::interpolate_array_lagrange</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>int</type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/interpolate/interpolate_array_gpu.cpp" line="133" column="6" bodyfile="HighMap/src/interpolate/interpolate_array_gpu.cpp" bodystart="133" bodyend="153" declfile="HighMap/include/highmap/interpolate_array.hpp" declline="83" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1aa345d48e3c7b1f25ae8823a58a17beef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::interpolate_array_nearest</definition>
        <argsstring>(const Array &amp;source, Array &amp;target)</argsstring>
        <name>interpolate_array_nearest</name>
        <qualifiedname>hmap::gpu::interpolate_array_nearest</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/interpolate/interpolate_array_gpu.cpp" line="155" column="6" bodyfile="HighMap/src/interpolate/interpolate_array_gpu.cpp" bodystart="155" bodyend="173" declfile="HighMap/include/highmap/interpolate_array.hpp" declline="85" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1aec291339e9356e2b2f57c5641d955a24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::interpolate_array_nearest</definition>
        <argsstring>(const Array &amp;source, Array &amp;target, const Vec4&lt; float &gt; &amp;bbox_source, const Vec4&lt; float &gt; &amp;bbox_target)</argsstring>
        <name>interpolate_array_nearest</name>
        <qualifiedname>hmap::gpu::interpolate_array_nearest</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const <ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt; &amp;</type>
          <declname>bbox_source</declname>
        </param>
        <param>
          <type>const <ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt; &amp;</type>
          <declname>bbox_target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/interpolate/interpolate_array_gpu.cpp" line="175" column="6" bodyfile="HighMap/src/interpolate/interpolate_array_gpu.cpp" bodystart="175" bodyend="197" declfile="HighMap/include/highmap/interpolate_array.hpp" declline="87" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a335e4629532ba64049e0721bdcb5f3ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::border</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>border</name>
        <qualifiedname>hmap::gpu::border</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1af80bcff234bf1482cf26896b9d21d270" kindref="member">hmap::border</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/morphology/morphology_gpu.cpp" line="12" column="7" bodyfile="HighMap/src/morphology/morphology_gpu.cpp" bodystart="12" bodyend="15" declfile="HighMap/include/highmap/morphology.hpp" declline="315" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a741099c8c3da0841caea9af72e731c78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::closing</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>closing</name>
        <qualifiedname>hmap::gpu::closing</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a889405ce11be91e33cc80ca4dbd192b0" kindref="member">hmap::closing</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/morphology/morphology_gpu.cpp" line="17" column="7" bodyfile="HighMap/src/morphology/morphology_gpu.cpp" bodystart="17" bodyend="20" declfile="HighMap/include/highmap/morphology.hpp" declline="318" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1aed49f777e8ad095bafc5dc014e548e6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::dilation</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>dilation</name>
        <qualifiedname>hmap::gpu::dilation</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1ac91a2dacd050d8588b4135f02dd8f2a5" kindref="member">hmap::dilation</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/morphology/morphology_gpu.cpp" line="22" column="7" bodyfile="HighMap/src/morphology/morphology_gpu.cpp" bodystart="22" bodyend="25" declfile="HighMap/include/highmap/morphology.hpp" declline="321" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1aed5416971461ddb7fb6427bdeb5cae86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::erosion</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>erosion</name>
        <qualifiedname>hmap::gpu::erosion</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a9cf7773f6141162bf60708a93acdfcee" kindref="member">hmap::erosion</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/morphology/morphology_gpu.cpp" line="27" column="7" bodyfile="HighMap/src/morphology/morphology_gpu.cpp" bodystart="27" bodyend="30" declfile="HighMap/include/highmap/morphology.hpp" declline="324" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a6f56082e163134e66b5b09f87d8016e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::morphological_black_hat</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>morphological_black_hat</name>
        <qualifiedname>hmap::gpu::morphological_black_hat</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a1cf22c68188d0e35aa74983f3a01c488" kindref="member">hmap::morphological_black_hat</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/morphology/morphology_gpu.cpp" line="32" column="7" bodyfile="HighMap/src/morphology/morphology_gpu.cpp" bodystart="32" bodyend="35" declfile="HighMap/include/highmap/morphology.hpp" declline="327" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1afd60fc3552953dcdbda7baeef6b2ccce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::morphological_gradient</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>morphological_gradient</name>
        <qualifiedname>hmap::gpu::morphological_gradient</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a01f3be1fd053428ea67030e3736d15ca" kindref="member">hmap::morphological_gradient</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/morphology/morphology_gpu.cpp" line="37" column="7" bodyfile="HighMap/src/morphology/morphology_gpu.cpp" bodystart="37" bodyend="40" declfile="HighMap/include/highmap/morphology.hpp" declline="330" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a60054a81f8c3aad5b83da8ce8d915d28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::morphological_top_hat</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>morphological_top_hat</name>
        <qualifiedname>hmap::gpu::morphological_top_hat</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a211108a73f7ebadb6ac87621c4e47301" kindref="member">hmap::morphological_top_hat</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/morphology/morphology_gpu.cpp" line="42" column="7" bodyfile="HighMap/src/morphology/morphology_gpu.cpp" bodystart="42" bodyend="45" declfile="HighMap/include/highmap/morphology.hpp" declline="333" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1adbfa7d94f6de438b8c0a410c101f3350" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::opening</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>opening</name>
        <qualifiedname>hmap::gpu::opening</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1abd3024b8233a70596ff2924607221637" kindref="member">hmap::opening</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/morphology/morphology_gpu.cpp" line="47" column="7" bodyfile="HighMap/src/morphology/morphology_gpu.cpp" bodystart="47" bodyend="50" declfile="HighMap/include/highmap/morphology.hpp" declline="336" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a5a96e5f24b80d47262daede2c0743ba6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::relative_distance_from_skeleton</definition>
        <argsstring>(const Array &amp;array, int ir_search, bool zero_at_borders=true, int ir_erosion=1)</argsstring>
        <name>relative_distance_from_skeleton</name>
        <qualifiedname>hmap::gpu::relative_distance_from_skeleton</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir_search</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>zero_at_borders</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>int</type>
          <declname>ir_erosion</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a7c7d934cc5a3a5e1a6f17c09a0e1e51f" kindref="member">hmap::relative_distance_from_skeleton</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/morphology/morphology_gpu.cpp" line="52" column="7" bodyfile="HighMap/src/morphology/morphology_gpu.cpp" bodystart="52" bodyend="77" declfile="HighMap/include/highmap/morphology.hpp" declline="339" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a5287e8c6a324fa91bea6c7bf98aacd68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::skeleton</definition>
        <argsstring>(const Array &amp;array, bool zero_at_borders=true)</argsstring>
        <name>skeleton</name>
        <qualifiedname>hmap::gpu::skeleton</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>zero_at_borders</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a11ddd5ab1aa625db9419d9b65c0eaa64" kindref="member">hmap::skeleton</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/morphology/morphology_gpu.cpp" line="79" column="7" bodyfile="HighMap/src/morphology/morphology_gpu.cpp" bodystart="79" bodyend="113" declfile="HighMap/include/highmap/morphology.hpp" declline="345" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1aae6131a978635eb515958f41584bcbfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::helper_bind_optional_buffer</definition>
        <argsstring>(clwrapper::Run &amp;run, const std::string &amp;id, const Array *p_array)</argsstring>
        <name>helper_bind_optional_buffer</name>
        <qualifiedname>hmap::gpu::helper_bind_optional_buffer</qualifiedname>
        <param>
          <type>clwrapper::Run &amp;</type>
          <declname>run</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/gpu_opencl/gpu_opencl.cpp" line="9" column="6" bodyfile="HighMap/src/gpu_opencl/gpu_opencl.cpp" bodystart="9" bodyend="22" declfile="HighMap/include/highmap/opencl/gpu_opencl.hpp" declline="23" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1adb8336ed4d83c15500872185dee45d50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hmap::gpu::init_opencl</definition>
        <argsstring>()</argsstring>
        <name>init_opencl</name>
        <qualifiedname>hmap::gpu::init_opencl</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/gpu_opencl/gpu_opencl.cpp" line="24" column="6" bodyfile="HighMap/src/gpu_opencl/gpu_opencl.cpp" bodystart="24" bodyend="80" declfile="HighMap/include/highmap/opencl/gpu_opencl.hpp" declline="27" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a06f0930402ba5e7a66eb73d9da9a09ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::basalt_field</definition>
        <argsstring>(Vec2&lt; int &gt; shape, Vec2&lt; float &gt; kw, uint seed, float warp_kw=4.f, float large_scale_warp_amp=0.2f, float large_scale_gain=6.f, float large_scale_amp=0.2f, float medium_scale_kw_ratio=3.f, float medium_scale_warp_amp=1.f, float medium_scale_gain=7.f, float medium_scale_amp=0.08f, float small_scale_kw_ratio=10.f, float small_scale_amp=0.1f, float small_scale_overlay_amp=0.002f, float rugosity_kw_ratio=1.f, float rugosity_amp=1.f, bool flatten_activate=true, float flatten_kw_ratio=1.f, float flatten_amp=0.f, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>basalt_field</name>
        <qualifiedname>hmap::gpu::basalt_field</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>kw</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>float</type>
          <declname>warp_kw</declname>
          <defval>4.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>large_scale_warp_amp</declname>
          <defval>0.2<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>large_scale_gain</declname>
          <defval>6.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>large_scale_amp</declname>
          <defval>0.2<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>medium_scale_kw_ratio</declname>
          <defval>3.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>medium_scale_warp_amp</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>medium_scale_gain</declname>
          <defval>7.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>medium_scale_amp</declname>
          <defval>0.08<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>small_scale_kw_ratio</declname>
          <defval>10.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>small_scale_amp</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>small_scale_overlay_amp</declname>
          <defval>0.002<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>rugosity_kw_ratio</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>rugosity_amp</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>flatten_activate</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>float</type>
          <declname>flatten_kw_ratio</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>flatten_amp</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Generates a synthetic procedural terrain resembling basaltic landforms. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a multi-scale procedural field combining large, medium, and small-scale Voronoi-based patterns, noise warping, and optional flattening, simulating the morphology of fractured basalt or volcanic terrains. The terrain is constructed using a combination of Voronoi diagrams (via <computeroutput>voronoi_fbm</computeroutput>) and fractal noise (<computeroutput>noise_fbm</computeroutput>), layered with frequency-domain manipulations and amplitude/gain controls at each scale.</para>
<para>The final output is a heightmap represented as an <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput>, normalized and composed of:<itemizedlist>
<listitem><para>Large-scale cellular patterns with smoothed Voronoi edge distances.</para>
</listitem><listitem><para>Medium and small-scale structures introducing finer surface variation.</para>
</listitem><listitem><para>Optional rugosity (fine detail) and flattening to simulate erosion or flow effects.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>Output resolution (width x height) of the field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>Base wave numbers (frequency) for the terrain features. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial seed used for deterministic random generation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>warp_kw</parametername>
</parameternamelist>
<parameterdescription>
<para>Frequency of the warping noise that displaces Voronoi positions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>large_scale_warp_amp</parametername>
</parameternamelist>
<parameterdescription>
<para>Amplitude of displacement for large-scale Voronoi warping. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>large_scale_gain</parametername>
</parameternamelist>
<parameterdescription>
<para>Gain adjustment applied to the large-scale features. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>large_scale_amp</parametername>
</parameternamelist>
<parameterdescription>
<para>Final amplitude of the large-scale height contribution. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>medium_scale_kw_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Scaling factor for the frequency of the medium-scale patterns. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>medium_scale_warp_amp</parametername>
</parameternamelist>
<parameterdescription>
<para>Amplitude of warping for the medium-scale displacement. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>medium_scale_gain</parametername>
</parameternamelist>
<parameterdescription>
<para>Gain control for medium-scale modulation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>medium_scale_amp</parametername>
</parameternamelist>
<parameterdescription>
<para>Amplitude of the medium-scale heightmap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>small_scale_kw_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Frequency ratio for small-scale details. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>small_scale_amp</parametername>
</parameternamelist>
<parameterdescription>
<para>Amplitude of small-scale pattern contribution. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>small_scale_overlay_amp</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional overlay strength for repeating the small-scale pattern. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rugosity_kw_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Frequency ratio for high-frequency noise applied as fine roughness. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rugosity_amp</parametername>
</parameternamelist>
<parameterdescription>
<para>Strength of the rugosity (high-frequency modulation). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flatten_activate</parametername>
</parameternamelist>
<parameterdescription>
<para>Enables or disables the final flattening operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flatten_kw_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Frequency scaling of the flattening noise field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flatten_amp</parametername>
</parameternamelist>
<parameterdescription>
<para>Amplitude control of the flattening operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to a noise field used to displace grid coordinates in X. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to a noise field used to displace grid coordinates in Y. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>The 2D bounding box ({xmin, xmax, ymin, ymax}) over which the terrain is generated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A procedurally generated <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> representing the synthetic basalt-like terrain field.</para>
</simplesect>
<simplesect kind="note"><para><itemizedlist>
<listitem><para>This function relies on OpenCL-based kernels via the <computeroutput>gpu::</computeroutput> namespace.</para>
</listitem><listitem><para>The returned field is normalized in amplitude but may require rescaling to match specific physical units.</para>
</listitem><listitem><para>Adjusting <computeroutput>seed</computeroutput>, <computeroutput>warp_kw</computeroutput>, and the gain/amplitude values can produce a wide variety of terrain features.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_basalt_field.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1_1gpu_1adb8336ed4d83c15500872185dee45d50" kindref="member">hmap::gpu::init_opencl</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1a06f0930402ba5e7a66eb73d9da9a09ee" kindref="member">hmap::gpu::basalt_field</ref>(shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_basalt_field.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_basalt_field.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/geo/basalt_field.cpp" line="13" column="7" bodyfile="HighMap/src/primitives/geo/basalt_field.cpp" bodystart="13" bodyend="279" declfile="HighMap/include/highmap/primitives.hpp" declline="1426" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a50db0e092d6e8d147a587b18ee7ea743" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::gabor_wave</definition>
        <argsstring>(Vec2&lt; int &gt; shape, Vec2&lt; float &gt; kw, uint seed, const Array &amp;angle, float angle_spread_ratio=1.f, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>gabor_wave</name>
        <qualifiedname>hmap::gpu::gabor_wave</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>kw</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle_spread_ratio</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Return an array filled with coherence Gabor noise. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>Noise wavenumbers {kx, ky} for each directions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Base orientation angle for the Gabor wavelets (in radians). Defaults to 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle_spread_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Ratio that controls the spread of wave orientations around the base angle. Defaults to 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Fractal noise.</para>
</simplesect>
<simplesect kind="note"><para>Taken from <ulink url="https://www.shadertoy.com/view/clGyWm">https://www.shadertoy.com/view/clGyWm</ulink></para>
</simplesect>
<simplesect kind="note"><para>Only available if OpenCL is enabled.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_gabor_wave.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1_1gpu_1adb8336ed4d83c15500872185dee45d50" kindref="member">hmap::gpu::init_opencl</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>base</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1a50db0e092d6e8d147a587b18ee7ea743" kindref="member">hmap::gpu::gabor_wave</ref>(shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z_fbm<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1a9a67e946fa8616f634c1e5f1cad6045b" kindref="member">hmap::gpu::gabor_wave_fbm</ref>(shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>angle<sp/>control</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref><sp/>=<sp/>45.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle_spread_ratio<sp/>=<sp/>0.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>za0<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1a50db0e092d6e8d147a587b18ee7ea743" kindref="member">hmap::gpu::gabor_wave</ref>(shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{16.f,<sp/>16.f},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle_spread_ratio);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>za1<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1a50db0e092d6e8d147a587b18ee7ea743" kindref="member">hmap::gpu::gabor_wave</ref>(shape,<sp/>{16.f,<sp/>16.f},<sp/>seed,<sp/>0.f,<sp/>0.5f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>za2<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1a9a67e946fa8616f634c1e5f1cad6045b" kindref="member">hmap::gpu::gabor_wave_fbm</ref>(shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{16.f,<sp/>16.f},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.f,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.1f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>local<sp/>angle</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>field<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>array_angle<sp/>=<sp/><ref refid="namespacehmap_1ae23a30f7964baacd6d0457c288fd3598" kindref="member">hmap::gradient_angle</ref>(field)<sp/>*<sp/>180.f<sp/>/<sp/>3.14159f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>angle_spread_ratio<sp/>=<sp/>0.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zr1<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1a50db0e092d6e8d147a587b18ee7ea743" kindref="member">hmap::gpu::gabor_wave</ref>(shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{16.f,<sp/>16.f},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_angle,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle_spread_ratio);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zr2<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1a9a67e946fa8616f634c1e5f1cad6045b" kindref="member">hmap::gpu::gabor_wave_fbm</ref>(shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{16.f,<sp/>16.f},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_angle,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle_spread_ratio);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_gabor_wave.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z_fbm,<sp/>za0,<sp/>za1,<sp/>za2,<sp/>zr1,<sp/>zr2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_gabor_wave.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/primitives_gpu.cpp" line="42" column="7" bodyfile="HighMap/src/primitives/primitives_gpu.cpp" bodystart="42" bodyend="69" declfile="HighMap/include/highmap/primitives.hpp" declline="1472" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1ae425e289a74c2fbce447004896ee7e77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::gabor_wave</definition>
        <argsstring>(Vec2&lt; int &gt; shape, Vec2&lt; float &gt; kw, uint seed, float angle=0.f, float angle_spread_ratio=1.f, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>gabor_wave</name>
        <qualifiedname>hmap::gpu::gabor_wave</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>kw</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>angle_spread_ratio</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/primitives_gpu.cpp" line="71" column="7" bodyfile="HighMap/src/primitives/primitives_gpu.cpp" bodystart="71" bodyend="84" declfile="HighMap/include/highmap/primitives.hpp" declline="1479" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a9a67e946fa8616f634c1e5f1cad6045b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::gabor_wave_fbm</definition>
        <argsstring>(Vec2&lt; int &gt; shape, Vec2&lt; float &gt; kw, uint seed, const Array &amp;angle, float angle_spread_ratio=1.f, int octaves=8, float weight=0.7f, float persistence=0.5f, float lacunarity=2.f, const Array *p_ctrl_param=nullptr, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>gabor_wave_fbm</name>
        <qualifiedname>hmap::gpu::gabor_wave_fbm</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>kw</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle_spread_ratio</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>octaves</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>float</type>
          <declname>weight</declname>
          <defval>0.7<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>persistence</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>lacunarity</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_ctrl_param</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Return an array filled with coherence Gabor noise. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>Noise wavenumbers {kx, ky} for each directions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Base orientation angle for the Gabor wavelets (in radians). Defaults to 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle_spread_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Ratio that controls the spread of wave orientations around the base angle. Defaults to 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>octaves</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of octaves. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weigth</parametername>
</parameternamelist>
<parameterdescription>
<para>Octave weighting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>persistence</parametername>
</parameternamelist>
<parameterdescription>
<para>Octave persistence. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lacunarity</parametername>
</parameternamelist>
<parameterdescription>
<para>Defines the wavenumber ratio between each octaves. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_ctrl_param</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the control parameter array (acts as a multiplier for the weight parameter). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input noise arrays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Fractal noise.</para>
</simplesect>
<simplesect kind="note"><para>Taken from <ulink url="https://www.shadertoy.com/view/clGyWm">https://www.shadertoy.com/view/clGyWm</ulink></para>
</simplesect>
<simplesect kind="note"><para>Only available if OpenCL is enabled.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_gabor_wave.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1_1gpu_1adb8336ed4d83c15500872185dee45d50" kindref="member">hmap::gpu::init_opencl</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>base</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1a50db0e092d6e8d147a587b18ee7ea743" kindref="member">hmap::gpu::gabor_wave</ref>(shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z_fbm<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1a9a67e946fa8616f634c1e5f1cad6045b" kindref="member">hmap::gpu::gabor_wave_fbm</ref>(shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>angle<sp/>control</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref><sp/>=<sp/>45.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle_spread_ratio<sp/>=<sp/>0.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>za0<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1a50db0e092d6e8d147a587b18ee7ea743" kindref="member">hmap::gpu::gabor_wave</ref>(shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{16.f,<sp/>16.f},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle_spread_ratio);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>za1<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1a50db0e092d6e8d147a587b18ee7ea743" kindref="member">hmap::gpu::gabor_wave</ref>(shape,<sp/>{16.f,<sp/>16.f},<sp/>seed,<sp/>0.f,<sp/>0.5f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>za2<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1a9a67e946fa8616f634c1e5f1cad6045b" kindref="member">hmap::gpu::gabor_wave_fbm</ref>(shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{16.f,<sp/>16.f},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.f,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.1f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>local<sp/>angle</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>field<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>array_angle<sp/>=<sp/><ref refid="namespacehmap_1ae23a30f7964baacd6d0457c288fd3598" kindref="member">hmap::gradient_angle</ref>(field)<sp/>*<sp/>180.f<sp/>/<sp/>3.14159f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>angle_spread_ratio<sp/>=<sp/>0.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zr1<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1a50db0e092d6e8d147a587b18ee7ea743" kindref="member">hmap::gpu::gabor_wave</ref>(shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{16.f,<sp/>16.f},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_angle,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle_spread_ratio);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zr2<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1a9a67e946fa8616f634c1e5f1cad6045b" kindref="member">hmap::gpu::gabor_wave_fbm</ref>(shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{16.f,<sp/>16.f},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_angle,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle_spread_ratio);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_gabor_wave.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z_fbm,<sp/>za0,<sp/>za1,<sp/>za2,<sp/>zr1,<sp/>zr2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_gabor_wave.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/primitives_gpu.cpp" line="86" column="7" bodyfile="HighMap/src/primitives/primitives_gpu.cpp" bodystart="86" bodyend="133" declfile="HighMap/include/highmap/primitives.hpp" declline="1518" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a8a8bb25256393cce723c6a1569beb143" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::gabor_wave_fbm</definition>
        <argsstring>(Vec2&lt; int &gt; shape, Vec2&lt; float &gt; kw, uint seed, float angle=0.f, float angle_spread_ratio=1.f, int octaves=8, float weight=0.7f, float persistence=0.5f, float lacunarity=2.f, const Array *p_ctrl_param=nullptr, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>gabor_wave_fbm</name>
        <qualifiedname>hmap::gpu::gabor_wave_fbm</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>kw</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>angle_spread_ratio</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>octaves</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>float</type>
          <declname>weight</declname>
          <defval>0.7<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>persistence</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>lacunarity</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_ctrl_param</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/primitives_gpu.cpp" line="135" column="7" bodyfile="HighMap/src/primitives/primitives_gpu.cpp" bodystart="135" bodyend="167" declfile="HighMap/include/highmap/primitives.hpp" declline="1532" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1adb0abb891026d60a261ae7b1e875aa1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::gavoronoise</definition>
        <argsstring>(Vec2&lt; int &gt; shape, Vec2&lt; float &gt; kw, uint seed, const Array &amp;angle, float amplitude=0.05f, float angle_spread_ratio=1.f, Vec2&lt; float &gt; kw_multiplier={4.f, 4.f}, float slope_strength=1.f, float branch_strength=2.f, float z_cut_min=0.2f, float z_cut_max=1.f, int octaves=8, float persistence=0.4f, float lacunarity=2.f, const Array *p_ctrl_param=nullptr, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>gavoronoise</name>
        <qualifiedname>hmap::gpu::gavoronoise</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>kw</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amplitude</declname>
          <defval>0.05<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>angle_spread_ratio</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>kw_multiplier</declname>
          <defval>{4.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 4.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type>float</type>
          <declname>slope_strength</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>branch_strength</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>z_cut_min</declname>
          <defval>0.2<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>z_cut_max</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>octaves</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>float</type>
          <declname>persistence</declname>
          <defval>0.4<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>lacunarity</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_ctrl_param</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Generates a 2D array using the GavoroNoise algorithm, which is a procedural noise technique for terrain generation and other applications. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimensions of the output array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>Wave number vector controlling the noise frequency. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Seed value for random number generation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amplitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Amplitude of the noise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw_multiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>Multiplier for wave numbers in the noise function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slope_strength</parametername>
</parameternamelist>
<parameterdescription>
<para>Strength of slope-based directional erosion in the noise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>branch_strength</parametername>
</parameternamelist>
<parameterdescription>
<para>Strength of branch-like structures in the generated noise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z_cut_min</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum cutoff for Z-value in the noise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z_cut_max</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum cutoff for Z-value in the noise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>octaves</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of octaves for fractal Brownian motion (fBm). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>persistence</parametername>
</parameternamelist>
<parameterdescription>
<para>Amplitude scaling factor between noise octaves. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lacunarity</parametername>
</parameternamelist>
<parameterdescription>
<para>Frequency scaling factor between noise octaves. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_ctrl_param</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional array for control parameters, can modify the Z cutoff dynamically. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional array for X-axis noise perturbation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional array for Y-axis noise perturbation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Bounding box for mapping grid coordinates to world space.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A 2D array containing the generated GavoroNoise values.</para>
</simplesect>
<simplesect kind="note"><para>Taken from <ulink url="https://www.shadertoy.com/view/MtGcWh">https://www.shadertoy.com/view/MtGcWh</ulink></para>
</simplesect>
<simplesect kind="note"><para>Only available if OpenCL is enabled.</para>
</simplesect>
This function leverages an OpenCL kernel to compute the GavoroNoise values on the GPU, allowing for efficient large-scale generation. The kernel applies a combination of fractal Brownian motion (fBm), directional erosion, and other procedural techniques to generate intricate noise patterns.</para>
<para>The optional <computeroutput>p_ctrl_param</computeroutput>, <computeroutput>p_noise_x</computeroutput>, and <computeroutput>p_noise_y</computeroutput> buffers provide additional flexibility for dynamically adjusting noise parameters and perturbations.</para>
<para><bold>Example</bold> <programlisting filename="ex_gavoronoise.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1_1gpu_1adb8336ed4d83c15500872185dee45d50" kindref="member">hmap::gpu::init_opencl</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>base<sp/>usage</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1adb0abb891026d60a261ae7b1e875aa1a" kindref="member">hmap::gpu::gavoronoise</ref>(shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amp<sp/>=<sp/>0.05f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref><sp/>=<sp/>45.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle_spread_ratio<sp/>=<sp/>0.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1adb0abb891026d60a261ae7b1e875aa1a" kindref="member">hmap::gpu::gavoronoise</ref>(shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amp,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle_spread_ratio);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>with<sp/>input<sp/>base<sp/>noise</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>octaves<sp/>=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>base<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>octaves);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>base<sp/>amplitude<sp/>amplitude<sp/>expected<sp/>to<sp/>be<sp/>in<sp/>[-1,<sp/>1]<sp/>(approx.)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(base,<sp/>-1.f,<sp/>1.f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z3<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1adb0abb891026d60a261ae7b1e875aa1a" kindref="member">hmap::gpu::gavoronoise</ref>(base,<sp/>kw,<sp/>seed,<sp/>amp);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>local<sp/>angle</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>field<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>array_angle<sp/>=<sp/><ref refid="namespacehmap_1ae23a30f7964baacd6d0457c288fd3598" kindref="member">hmap::gradient_angle</ref>(field)<sp/>*<sp/>180.f<sp/>/<sp/>3.14159f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>angle_spread_ratio<sp/>=<sp/>0.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z4<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1adb0abb891026d60a261ae7b1e875aa1a" kindref="member">hmap::gpu::gavoronoise</ref>(shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{8.f,<sp/>8.f},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_angle,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amp,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle_spread_ratio);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_gavoronoise.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z1,<sp/>z2,<sp/>z3,<sp/>z4},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_gavoronoise.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/primitives_gpu.cpp" line="169" column="7" bodyfile="HighMap/src/primitives/primitives_gpu.cpp" bodystart="169" bodyend="226" declfile="HighMap/include/highmap/primitives.hpp" declline="1593" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a83074193a517325f41a4278c069b47b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::gavoronoise</definition>
        <argsstring>(Vec2&lt; int &gt; shape, Vec2&lt; float &gt; kw, uint seed, float angle=0.f, float amplitude=0.05f, float angle_spread_ratio=1.f, Vec2&lt; float &gt; kw_multiplier={4.f, 4.f}, float slope_strength=1.f, float branch_strength=2.f, float z_cut_min=0.2f, float z_cut_max=1.f, int octaves=8, float persistence=0.4f, float lacunarity=2.f, const Array *p_ctrl_param=nullptr, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>gavoronoise</name>
        <qualifiedname>hmap::gpu::gavoronoise</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>kw</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>amplitude</declname>
          <defval>0.05<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>angle_spread_ratio</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>kw_multiplier</declname>
          <defval>{4.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 4.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type>float</type>
          <declname>slope_strength</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>branch_strength</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>z_cut_min</declname>
          <defval>0.2<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>z_cut_max</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>octaves</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>float</type>
          <declname>persistence</declname>
          <defval>0.4<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>lacunarity</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_ctrl_param</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/primitives_gpu.cpp" line="228" column="7" bodyfile="HighMap/src/primitives/primitives_gpu.cpp" bodystart="228" bodyend="270" declfile="HighMap/include/highmap/primitives.hpp" declline="1612" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a688f13a6de420fd318ccba616eafcf25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::gavoronoise</definition>
        <argsstring>(const Array &amp;base, Vec2&lt; float &gt; kw, uint seed, float amplitude=0.05f, Vec2&lt; float &gt; kw_multiplier={4.f, 4.f}, float slope_strength=1.f, float branch_strength=2.f, float z_cut_min=0.2f, float z_cut_max=1.f, int octaves=8, float persistence=0.4f, float lacunarity=2.f, const Array *p_ctrl_param=nullptr, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>gavoronoise</name>
        <qualifiedname>hmap::gpu::gavoronoise</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>kw</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amplitude</declname>
          <defval>0.05<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>kw_multiplier</declname>
          <defval>{4.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 4.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type>float</type>
          <declname>slope_strength</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>branch_strength</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>z_cut_min</declname>
          <defval>0.2<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>z_cut_max</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>octaves</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>float</type>
          <declname>persistence</declname>
          <defval>0.4<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>lacunarity</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_ctrl_param</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/primitives_gpu.cpp" line="272" column="7" bodyfile="HighMap/src/primitives/primitives_gpu.cpp" bodystart="272" bodyend="326" declfile="HighMap/include/highmap/primitives.hpp" declline="1631" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a50332f79ca9b2548089359f5ad4b8ffd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::mountain_range_radial</definition>
        <argsstring>(Vec2&lt; int &gt; shape, Vec2&lt; float &gt; kw, uint seed, float half_width=0.2f, float angle_spread_ratio=0.5f, float core_size_ratio=1.f, Vec2&lt; float &gt; center={0.5f, 0.5f}, int octaves=8, float weight=0.7f, float persistence=0.5f, float lacunarity=2.f, const Array *p_ctrl_param=nullptr, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, const Array *p_angle=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>mountain_range_radial</name>
        <qualifiedname>hmap::gpu::mountain_range_radial</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>kw</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>float</type>
          <declname>half_width</declname>
          <defval>0.2<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>angle_spread_ratio</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>core_size_ratio</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>center</declname>
          <defval>{0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type>int</type>
          <declname>octaves</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>float</type>
          <declname>weight</declname>
          <defval>0.7<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>persistence</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>lacunarity</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_ctrl_param</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_angle</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Generates a heightmap representing a radial mountain range. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a heightmap that simulates a mountain range emanating radially from a specified center. The mountain range is influenced by various noise parameters and control attributes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensions of the output heightmap as a 2D vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>The wave numbers (frequency components) as a 2D vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>The seed for random noise generation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>half_width</parametername>
</parameternamelist>
<parameterdescription>
<para>The half-width of the radial mountain range, controlling its spread. Default is 0.2f. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle_spread_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>The ratio controlling the angular spread of the mountain range. Default is 0.5f. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>The center point of the radial mountain range as normalized coordinates within [0, 1]. Default is {0.5f, 0.5f}. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>octaves</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of octaves for fractal noise generation. Default is 8. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight</parametername>
</parameternamelist>
<parameterdescription>
<para>The initial weight for noise contribution. Default is 0.7f. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>persistence</parametername>
</parameternamelist>
<parameterdescription>
<para>The amplitude scaling factor for subsequent noise octaves. Default is 0.5f. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lacunarity</parametername>
</parameternamelist>
<parameterdescription>
<para>The frequency scaling factor for subsequent noise octaves. Default is 2.0f. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_ctrl_param</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to an array of control parameters influencing the terrain generation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to a precomputed noise array for the X-axis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to a precomputed noise array for the Y-axis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to an array to output the angle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>The bounding box of the output heightmap in normalized coordinates [xmin, xmax, ymin, ymax]. Default is {0.0f, 1.0f, 0.0f, 1.0f}.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The generated heightmap representing the radial mountain range.</para>
</simplesect>
<simplesect kind="note"><para>Only available if OpenCL is enabled.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_mountain_range_radial.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1_1gpu_1adb8336ed4d83c15500872185dee45d50" kindref="member">hmap::gpu::init_opencl</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>shape<sp/>=<sp/>{1024,<sp/>1024};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{8.f,<sp/>8.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1a50332f79ca9b2548089359f5ad4b8ffd" kindref="member">hmap::gpu::mountain_range_radial</ref>(shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_mountain_range_radial.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z1},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_mountain_range_radial.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/primitives_gpu.cpp" line="328" column="7" bodyfile="HighMap/src/primitives/primitives_gpu.cpp" bodystart="328" bodyend="381" declfile="HighMap/include/highmap/primitives.hpp" declline="1697" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a450f5b26f42b6f06be3e1e131f6aaf86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::noise</definition>
        <argsstring>(NoiseType noise_type, Vec2&lt; int &gt; shape, Vec2&lt; float &gt; kw, uint seed, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, const Array *p_stretching=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>noise</name>
        <qualifiedname>hmap::gpu::noise</qualifiedname>
        <param>
          <type><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195" kindref="member">NoiseType</ref></type>
          <declname>noise_type</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>kw</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/primitives_gpu.cpp" line="383" column="7" bodyfile="HighMap/src/primitives/primitives_gpu.cpp" bodystart="383" bodyend="420" declfile="HighMap/include/highmap/primitives.hpp" declline="1715" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a322260e971f4dec19ec8bc270e7cc461" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::noise_fbm</definition>
        <argsstring>(NoiseType noise_type, Vec2&lt; int &gt; shape, Vec2&lt; float &gt; kw, uint seed, int octaves=8, float weight=0.7f, float persistence=0.5f, float lacunarity=2.f, const Array *p_ctrl_param=nullptr, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, const Array *p_stretching=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>noise_fbm</name>
        <qualifiedname>hmap::gpu::noise_fbm</qualifiedname>
        <param>
          <type><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195" kindref="member">NoiseType</ref></type>
          <declname>noise_type</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>kw</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>int</type>
          <declname>octaves</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>float</type>
          <declname>weight</declname>
          <defval>0.7<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>persistence</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>lacunarity</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_ctrl_param</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/primitives_gpu.cpp" line="422" column="7" bodyfile="HighMap/src/primitives/primitives_gpu.cpp" bodystart="422" bodyend="470" declfile="HighMap/include/highmap/primitives.hpp" declline="1725" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a85000763147ffd507d483ba9be27f38b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::vorolines</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float density, uint seed, float k_smoothing=0.f, float exp_sigma=0.f, float alpha=0.f, float alpha_span=M_PI, VoronoiReturnType return_type=VoronoiReturnType::F1_SQUARED, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f}, Vec4&lt; float &gt; bbox_points={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>vorolines</name>
        <qualifiedname>hmap::gpu::vorolines</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>density</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k_smoothing</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>exp_sigma</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>alpha_span</declname>
          <defval>M_PI</defval>
        </param>
        <param>
          <type><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2f" kindref="member">VoronoiReturnType</ref></type>
          <declname>return_type</declname>
          <defval><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fa3e5996ed4314058911435c50bc95e1c2" kindref="member">VoronoiReturnType::F1_SQUARED</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox_points</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Generates a Voronoi-based pattern where cells are defined by proximity to random lines. </para>
        </briefdescription>
        <detaileddescription>
<para>This function generates an OpenCL-accelerated Voronoi-like pattern based on the distance from each pixel to a set of randomly oriented lines. Each line is defined by a random point and a direction sampled from a uniform distribution around a given angle.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The resolution of the resulting 2D array (width, height). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>density</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of base points per unit area used to define lines. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Seed for the random number generator used to generate base points and directions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k_smoothing</parametername>
</parameternamelist>
<parameterdescription>
<para>Kernel smoothing factor; controls how sharp or soft the distance fields are. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exp_sigma</parametername>
</parameternamelist>
<parameterdescription>
<para>Exponential smoothing parameter applied to the computed distance field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Base angle (in radians) used to orient the generated lines. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha_span</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum angular deviation from <computeroutput>alpha</computeroutput>; controls line orientation variability. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>return_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of Voronoi output to return (e.g., F1, F2, edge distance, smoothed field, etc.). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to an input noise field applied to the X coordinates (can be nullptr). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to an input noise field applied to the Y coordinates (can be nullptr). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Bounding box in normalized coordinates (min_x, max_x, min_y, max_y) of the final array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox_points</parametername>
</parameternamelist>
<parameterdescription>
<para>Bounding box within which random base points are sampled.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A 2D array (of type <ref refid="classhmap_1_1Array" kindref="compound">Array</ref>) containing the computed distance field based on line proximity.</para>
</simplesect>
<simplesect kind="note"><para>Each line is defined from a point (x, y) to a direction offset using angle <computeroutput>theta = alpha + rand * alpha_span</computeroutput>. </para>
</simplesect>
<simplesect kind="note"><para>The OpenCL kernel &quot;vorolines&quot; must be defined and compiled beforehand.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_vorolines.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1_1gpu_1adb8336ed4d83c15500872185dee45d50" kindref="member">hmap::gpu::init_opencl</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>density<sp/>=<sp/>8.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_smoothing<sp/>=<sp/>0.005f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp_sigma<sp/>=<sp/>0.01f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha<sp/>=<sp/>0.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha_span<sp/>=<sp/>0.5f<sp/>*<sp/>M_PI;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::VoronoiReturnType&gt;<sp/>types<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fa3e5996ed4314058911435c50bc95e1c2" kindref="member">hmap::VoronoiReturnType::F1_SQUARED</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2faaf0f73f1150aae0a8affdab8b5f38eca" kindref="member">hmap::VoronoiReturnType::F2_SQUARED</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fab48ce3afc4f70a5130a1fb10541e2fa2" kindref="member">hmap::VoronoiReturnType::F1TF2_SQUARED</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fae4e408bd5c4ece5cd6bc7f3a439d87e3" kindref="member">hmap::VoronoiReturnType::F1DF2_SQUARED</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fac73478836b3a989e9325f861fe2059e2" kindref="member">hmap::VoronoiReturnType::F2MF1_SQUARED</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2faf044e64b09fbae8b02b6c44f2d69925f" kindref="member">hmap::VoronoiReturnType::EDGE_DISTANCE_EXP</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fa1d0f88509ad557940f07cd8c5d721820" kindref="member">hmap::VoronoiReturnType::EDGE_DISTANCE_SQUARED</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fab0d27777279264cbe2a77d4a241e6f55" kindref="member">hmap::VoronoiReturnType::CONSTANT</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fa85f252453c9797b7e00cc96cb7147537" kindref="member">hmap::VoronoiReturnType::CONSTANT_F2MF1_SQUARED</ref>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Array&gt;<sp/>zs<sp/>=<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type<sp/>:<sp/>types)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1a85000763147ffd507d483ba9be27f38b" kindref="member">hmap::gpu::vorolines</ref>(shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>density,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_smoothing,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp_sigma,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha_span,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a6b608e2826c1f9ba54a0e8922d5faa6b" kindref="member">sqrt</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>zs.push_back(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_vorolines.png&quot;</highlight><highlight class="normal">,<sp/>zs,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>FBM</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>zs<sp/>=<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type<sp/>:<sp/>types)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1ac2ad88df8eb3c863235f96f1678634e4" kindref="member">hmap::gpu::vorolines_fbm</ref>(shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>density,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_smoothing,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp_sigma,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha_span,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a6b608e2826c1f9ba54a0e8922d5faa6b" kindref="member">sqrt</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>zs.push_back(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_vorolines_fbm.png&quot;</highlight><highlight class="normal">,<sp/>zs,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_vorolines.png"></image>
 <image type="html" name="ex_vorolines_fbm.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/primitives_gpu.cpp" line="472" column="7" bodyfile="HighMap/src/primitives/primitives_gpu.cpp" bodystart="472" bodyend="549" declfile="HighMap/include/highmap/primitives.hpp" declline="1784" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1ac2ad88df8eb3c863235f96f1678634e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::vorolines_fbm</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float density, uint seed, float k_smoothing=0.f, float exp_sigma=0.f, float alpha=0.f, float alpha_span=M_PI, VoronoiReturnType return_type=VoronoiReturnType::F1_SQUARED, int octaves=8, float weight=0.7f, float persistence=0.5f, float lacunarity=2.f, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f}, Vec4&lt; float &gt; bbox_points={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>vorolines_fbm</name>
        <qualifiedname>hmap::gpu::vorolines_fbm</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>density</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k_smoothing</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>exp_sigma</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>alpha_span</declname>
          <defval>M_PI</defval>
        </param>
        <param>
          <type><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2f" kindref="member">VoronoiReturnType</ref></type>
          <declname>return_type</declname>
          <defval><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fa3e5996ed4314058911435c50bc95e1c2" kindref="member">VoronoiReturnType::F1_SQUARED</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>octaves</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>float</type>
          <declname>weight</declname>
          <defval>0.7<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>persistence</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>lacunarity</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox_points</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Generates a Voronoi-based pattern using distances to lines defined by random points and angles, with additional fractal Brownian motion (fBm) noise modulation. </para>
        </briefdescription>
        <detaileddescription>
<para>This function extends the standard <computeroutput>vorolines</computeroutput> generation by introducing fBm-based warping of the coordinate space, resulting in more organic and fractal-like structures. It creates a Voronoi distance field based on proximity to oriented line segments and distorts the result using multi-octave procedural noise.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>Output resolution of the 2D array (width, height). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>density</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of base points per unit area used to define lines. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Seed value for the random number generator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k_smoothing</parametername>
</parameternamelist>
<parameterdescription>
<para>Kernel smoothing coefficient to soften distance values (e.g., for blending). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exp_sigma</parametername>
</parameternamelist>
<parameterdescription>
<para>Sigma value for optional exponential smoothing on the final field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Base orientation angle (in radians) of lines generated from random points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha_span</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum angle deviation from <computeroutput>alpha</computeroutput>, determining directional randomness of lines. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>return_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of output to return (e.g., F1, F2, distance to edge, smoothed version). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>octaves</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of noise octaves used in the fBm modulation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight</parametername>
</parameternamelist>
<parameterdescription>
<para>Weight of each octave&apos;s contribution to the total noise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>persistence</parametername>
</parameternamelist>
<parameterdescription>
<para>Amplitude decay factor for each successive octave (commonly 0.5–0.8). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lacunarity</parametername>
</parameternamelist>
<parameterdescription>
<para>Frequency multiplier for each successive octave (commonly 2.0). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to an external noise field applied to X coordinates (can be nullptr). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to an external noise field applied to Y coordinates (can be nullptr). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Bounding box for the final image domain (min_x, max_x, min_y, max_y). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox_points</parametername>
</parameternamelist>
<parameterdescription>
<para>Bounding box from which the initial set of points are sampled.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A 2D <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> representing the Voronoi-fBm field, distorted by noise and influenced by distance to random lines.</para>
</simplesect>
<simplesect kind="note"><para>This version uses internally computed fBm noise unless external fields (<computeroutput>p_noise_x</computeroutput>, <computeroutput>p_noise_y</computeroutput>) are provided. </para>
</simplesect>
<simplesect kind="note"><para>This function requires an OpenCL kernel named &quot;vorolines_fbm&quot; to be compiled and accessible.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_vorolines.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1_1gpu_1adb8336ed4d83c15500872185dee45d50" kindref="member">hmap::gpu::init_opencl</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>density<sp/>=<sp/>8.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_smoothing<sp/>=<sp/>0.005f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp_sigma<sp/>=<sp/>0.01f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha<sp/>=<sp/>0.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha_span<sp/>=<sp/>0.5f<sp/>*<sp/>M_PI;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::VoronoiReturnType&gt;<sp/>types<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fa3e5996ed4314058911435c50bc95e1c2" kindref="member">hmap::VoronoiReturnType::F1_SQUARED</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2faaf0f73f1150aae0a8affdab8b5f38eca" kindref="member">hmap::VoronoiReturnType::F2_SQUARED</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fab48ce3afc4f70a5130a1fb10541e2fa2" kindref="member">hmap::VoronoiReturnType::F1TF2_SQUARED</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fae4e408bd5c4ece5cd6bc7f3a439d87e3" kindref="member">hmap::VoronoiReturnType::F1DF2_SQUARED</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fac73478836b3a989e9325f861fe2059e2" kindref="member">hmap::VoronoiReturnType::F2MF1_SQUARED</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2faf044e64b09fbae8b02b6c44f2d69925f" kindref="member">hmap::VoronoiReturnType::EDGE_DISTANCE_EXP</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fa1d0f88509ad557940f07cd8c5d721820" kindref="member">hmap::VoronoiReturnType::EDGE_DISTANCE_SQUARED</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fab0d27777279264cbe2a77d4a241e6f55" kindref="member">hmap::VoronoiReturnType::CONSTANT</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fa85f252453c9797b7e00cc96cb7147537" kindref="member">hmap::VoronoiReturnType::CONSTANT_F2MF1_SQUARED</ref>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Array&gt;<sp/>zs<sp/>=<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type<sp/>:<sp/>types)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1a85000763147ffd507d483ba9be27f38b" kindref="member">hmap::gpu::vorolines</ref>(shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>density,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_smoothing,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp_sigma,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha_span,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a6b608e2826c1f9ba54a0e8922d5faa6b" kindref="member">sqrt</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>zs.push_back(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_vorolines.png&quot;</highlight><highlight class="normal">,<sp/>zs,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>FBM</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>zs<sp/>=<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type<sp/>:<sp/>types)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1ac2ad88df8eb3c863235f96f1678634e4" kindref="member">hmap::gpu::vorolines_fbm</ref>(shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>density,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_smoothing,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp_sigma,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha_span,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a6b608e2826c1f9ba54a0e8922d5faa6b" kindref="member">sqrt</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>zs.push_back(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_vorolines_fbm.png&quot;</highlight><highlight class="normal">,<sp/>zs,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_vorolines.png"></image>
 <image type="html" name="ex_vorolines_fbm.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/primitives_gpu.cpp" line="551" column="7" bodyfile="HighMap/src/primitives/primitives_gpu.cpp" bodystart="551" bodyend="594" declfile="HighMap/include/highmap/primitives.hpp" declline="1852" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a0c9c2a528f344ede2aa320fdf2583790" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::voronoi</definition>
        <argsstring>(Vec2&lt; int &gt; shape, Vec2&lt; float &gt; kw, uint seed, Vec2&lt; float &gt; jitter={0.5f, 0.5f}, float k_smoothing=0.f, float exp_sigma=0.f, VoronoiReturnType return_type=VoronoiReturnType::F1_SQUARED, const Array *p_ctrl_param=nullptr, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>voronoi</name>
        <qualifiedname>hmap::gpu::voronoi</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>kw</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>jitter</declname>
          <defval>{0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type>float</type>
          <declname>k_smoothing</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>exp_sigma</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2f" kindref="member">VoronoiReturnType</ref></type>
          <declname>return_type</declname>
          <defval><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fa3e5996ed4314058911435c50bc95e1c2" kindref="member">VoronoiReturnType::F1_SQUARED</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_ctrl_param</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Generates a Voronoi diagram in a 2D array with configurable properties. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensions of the output array as a 2D vector of integers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>The frequency scale factors for the Voronoi cells, given as a 2D vector of floats. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>A seed value for random number generation, ensuring reproducibility. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>jitter</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional) The amount of random variation in the positions of Voronoi cell sites, given as a 2D vector of floats. Defaults to {0.5f, 0.5f}. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>return_type</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional) The type of value to compute for the Voronoi diagram. Defaults to <computeroutput><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fa3e5996ed4314058911435c50bc95e1c2" kindref="member">VoronoiReturnType::F1_SQUARED</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_ctrl_param</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional) A pointer to an <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> used to control the Voronoi computation. Used here as a multiplier for the jitter. If nullptr, no control is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional) A pointer to an <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> providing additional noise in the x-direction for cell positions. If nullptr, no x-noise is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional) A pointer to an <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> providing additional noise in the y-direction for cell positions. If nullptr, no y-noise is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional) The bounding box for the Voronoi computation, given as a 4D vector of floats representing {min_x, max_x, min_y, max_y}. Defaults to {0.f, 1.f, 0.f, 1.f}.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A 2D array representing the generated Voronoi diagram.</para>
</simplesect>
<simplesect kind="note"><para>Only available if OpenCL is enabled.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_voronoi.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1_1gpu_1adb8336ed4d83c15500872185dee45d50" kindref="member">hmap::gpu::init_opencl</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{8.f,<sp/>8.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>jitter<sp/>=<sp/>{1.f,<sp/>1.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_smoothing<sp/>=<sp/>0.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp_sigma<sp/>=<sp/>0.05f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::VoronoiReturnType&gt;<sp/>types<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fa3e5996ed4314058911435c50bc95e1c2" kindref="member">hmap::VoronoiReturnType::F1_SQUARED</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2faaf0f73f1150aae0a8affdab8b5f38eca" kindref="member">hmap::VoronoiReturnType::F2_SQUARED</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fab48ce3afc4f70a5130a1fb10541e2fa2" kindref="member">hmap::VoronoiReturnType::F1TF2_SQUARED</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fae4e408bd5c4ece5cd6bc7f3a439d87e3" kindref="member">hmap::VoronoiReturnType::F1DF2_SQUARED</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fac73478836b3a989e9325f861fe2059e2" kindref="member">hmap::VoronoiReturnType::F2MF1_SQUARED</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2faf044e64b09fbae8b02b6c44f2d69925f" kindref="member">hmap::VoronoiReturnType::EDGE_DISTANCE_EXP</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fa1d0f88509ad557940f07cd8c5d721820" kindref="member">hmap::VoronoiReturnType::EDGE_DISTANCE_SQUARED</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fab0d27777279264cbe2a77d4a241e6f55" kindref="member">hmap::VoronoiReturnType::CONSTANT</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fa85f252453c9797b7e00cc96cb7147537" kindref="member">hmap::VoronoiReturnType::CONSTANT_F2MF1_SQUARED</ref>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Array&gt;<sp/>zs<sp/>=<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type<sp/>:<sp/>types)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1a0c9c2a528f344ede2aa320fdf2583790" kindref="member">hmap::gpu::voronoi</ref>(shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jitter,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_smoothing,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp_sigma,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>zs.push_back(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type<sp/>:<sp/>types)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1aae4961b7c0f65d6904cc61022eb2642b" kindref="member">hmap::gpu::voronoi_fbm</ref>(shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jitter,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_smoothing,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp_sigma,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>zs.push_back(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_voronoi.png&quot;</highlight><highlight class="normal">,<sp/>zs,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_voronoi.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/primitives_gpu.cpp" line="596" column="7" bodyfile="HighMap/src/primitives/primitives_gpu.cpp" bodystart="596" bodyend="636" declfile="HighMap/include/highmap/primitives.hpp" declline="1909" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1aae4961b7c0f65d6904cc61022eb2642b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::voronoi_fbm</definition>
        <argsstring>(Vec2&lt; int &gt; shape, Vec2&lt; float &gt; kw, uint seed, Vec2&lt; float &gt; jitter={0.5f, 0.5f}, float k_smoothing=0.f, float exp_sigma=0.f, VoronoiReturnType return_type=VoronoiReturnType::F1_SQUARED, int octaves=8, float weight=0.7f, float persistence=0.5f, float lacunarity=2.f, const Array *p_ctrl_param=nullptr, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>voronoi_fbm</name>
        <qualifiedname>hmap::gpu::voronoi_fbm</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>kw</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>jitter</declname>
          <defval>{0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type>float</type>
          <declname>k_smoothing</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>exp_sigma</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2f" kindref="member">VoronoiReturnType</ref></type>
          <declname>return_type</declname>
          <defval><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fa3e5996ed4314058911435c50bc95e1c2" kindref="member">VoronoiReturnType::F1_SQUARED</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>octaves</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>float</type>
          <declname>weight</declname>
          <defval>0.7<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>persistence</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>lacunarity</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_ctrl_param</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Generates a Voronoi diagram in a 2D array with configurable properties. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensions of the output array as a 2D vector of integers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>The frequency scale factors for the base Voronoi cells, given as a 2D vector of floats. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>A seed value for random number generation, ensuring reproducibility. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>jitter</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional) The amount of random variation in the positions of Voronoi cell sites, given as a 2D vector of floats. Defaults to {0.5f, 0.5f}. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>return_type</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional) The type of value to compute for the Voronoi diagram. Defaults to <computeroutput><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fa3e5996ed4314058911435c50bc95e1c2" kindref="member">VoronoiReturnType::F1_SQUARED</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>octaves</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional) The number of layers (octaves) in the fractal Brownian motion. Defaults to 8. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional) The initial weight of the base layer in the FBM computation. Defaults to 0.7f. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>persistence</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional) The persistence factor that controls the amplitude reduction between octaves. Defaults to 0.5f. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lacunarity</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional) The lacunarity factor that controls the frequency increase between octaves. Defaults to 2.f. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_ctrl_param</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional) A pointer to an <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> used to control the Voronoi computation. If nullptr, no control is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional) A pointer to an <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> providing additional noise in the x-direction for cell positions. If nullptr, no x-noise is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional) A pointer to an <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> providing additional noise in the y-direction for cell positions. If nullptr, no y-noise is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional) The bounding box for the Voronoi computation, given as a 4D vector of floats representing {min_x, max_x, min_y, max_y}. Defaults to {0.f, 1.f, 0.f, 1.f}.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A 2D array representing the generated Voronoi diagram.</para>
</simplesect>
<simplesect kind="note"><para>Only available if OpenCL is enabled.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_voronoi.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1_1gpu_1adb8336ed4d83c15500872185dee45d50" kindref="member">hmap::gpu::init_opencl</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{8.f,<sp/>8.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>jitter<sp/>=<sp/>{1.f,<sp/>1.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_smoothing<sp/>=<sp/>0.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp_sigma<sp/>=<sp/>0.05f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::VoronoiReturnType&gt;<sp/>types<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fa3e5996ed4314058911435c50bc95e1c2" kindref="member">hmap::VoronoiReturnType::F1_SQUARED</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2faaf0f73f1150aae0a8affdab8b5f38eca" kindref="member">hmap::VoronoiReturnType::F2_SQUARED</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fab48ce3afc4f70a5130a1fb10541e2fa2" kindref="member">hmap::VoronoiReturnType::F1TF2_SQUARED</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fae4e408bd5c4ece5cd6bc7f3a439d87e3" kindref="member">hmap::VoronoiReturnType::F1DF2_SQUARED</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fac73478836b3a989e9325f861fe2059e2" kindref="member">hmap::VoronoiReturnType::F2MF1_SQUARED</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2faf044e64b09fbae8b02b6c44f2d69925f" kindref="member">hmap::VoronoiReturnType::EDGE_DISTANCE_EXP</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fa1d0f88509ad557940f07cd8c5d721820" kindref="member">hmap::VoronoiReturnType::EDGE_DISTANCE_SQUARED</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fab0d27777279264cbe2a77d4a241e6f55" kindref="member">hmap::VoronoiReturnType::CONSTANT</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fa85f252453c9797b7e00cc96cb7147537" kindref="member">hmap::VoronoiReturnType::CONSTANT_F2MF1_SQUARED</ref>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Array&gt;<sp/>zs<sp/>=<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type<sp/>:<sp/>types)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1a0c9c2a528f344ede2aa320fdf2583790" kindref="member">hmap::gpu::voronoi</ref>(shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jitter,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_smoothing,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp_sigma,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>zs.push_back(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type<sp/>:<sp/>types)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1aae4961b7c0f65d6904cc61022eb2642b" kindref="member">hmap::gpu::voronoi_fbm</ref>(shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jitter,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_smoothing,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp_sigma,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>zs.push_back(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_voronoi.png&quot;</highlight><highlight class="normal">,<sp/>zs,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_voronoi.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/primitives_gpu.cpp" line="638" column="7" bodyfile="HighMap/src/primitives/primitives_gpu.cpp" bodystart="638" bodyend="686" declfile="HighMap/include/highmap/primitives.hpp" declline="1967" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1aaee46739a429168aa45ff1e5d55041ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::voronoi_edge_distance</definition>
        <argsstring>(Vec2&lt; int &gt; shape, Vec2&lt; float &gt; kw, uint seed, Vec2&lt; float &gt; jitter={0.5f, 0.5f}, const Array *p_ctrl_param=nullptr, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>voronoi_edge_distance</name>
        <qualifiedname>hmap::gpu::voronoi_edge_distance</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>kw</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>jitter</declname>
          <defval>{0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_ctrl_param</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Computes the Voronoi edge distance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The shape of the grid as a 2D vector (width, height). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>The weights for the Voronoi kernel as a 2D vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>The random seed used for generating Voronoi points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>jitter</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter for controlling jitter in Voronoi point placement (default is {0.5f, 0.5f}). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_ctrl_param</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to an <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> specifying control parameters for Voronoi grid jitter (default is nullptr). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input noise arrays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>The bounding box for the Voronoi diagram as {x_min, x_max, y_min, y_max} (default is {0.f, 1.f, 0.f, 1.f}).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Taken from <ulink url="https://www.shadertoy.com/view/llG3zy">https://www.shadertoy.com/view/llG3zy</ulink></para>
</simplesect>
<simplesect kind="note"><para>Only available if OpenCL is enabled.</para>
</simplesect>
<simplesect kind="note"><para>The resulting <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> has the same dimensions as the input shape. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/primitives_gpu.cpp" line="769" column="7" bodyfile="HighMap/src/primitives/primitives_gpu.cpp" bodystart="769" bodyend="803" declfile="HighMap/include/highmap/primitives.hpp" declline="2009" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a29cc1b0843f7447eb19b6cef27772cdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::voronoise</definition>
        <argsstring>(Vec2&lt; int &gt; shape, Vec2&lt; float &gt; kw, float u_param, float v_param, uint seed, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>voronoise</name>
        <qualifiedname>hmap::gpu::voronoise</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>kw</declname>
        </param>
        <param>
          <type>float</type>
          <declname>u_param</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v_param</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Generates a 2D Voronoi noise array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes a Voronoi noise pattern based on the input parameters and returns it as a 2D array. The noise is calculated in the OpenCL kernel <computeroutput>noise_voronoise</computeroutput>, which uses a combination of hashing and smoothstep functions to generate a weighted Voronoi noise field.</para>
<para><simplesect kind="note"><para>Taken from <ulink url="https://www.shadertoy.com/view/Xd23Dh">https://www.shadertoy.com/view/Xd23Dh</ulink></para>
</simplesect>
<simplesect kind="note"><para>Only available if OpenCL is enabled.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensions of the 2D output array as a vector (width and height). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>Wave numbers for scaling the noise pattern, represented as a 2D vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u_param</parametername>
</parameternamelist>
<parameterdescription>
<para>A control parameter for the noise, adjusting the contribution of random offsets. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v_param</parametername>
</parameternamelist>
<parameterdescription>
<para>A control parameter for the noise, affecting the smoothness of the pattern. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_ctrl_param</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to an <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> specifying control parameters for Voronoi grid jitter (default is nullptr). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input noise arrays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>A seed value for random number generation, ensuring reproducibility.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> object containing the generated 2D Voronoi noise values.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_voronoise.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1_1gpu_1adb8336ed4d83c15500872185dee45d50" kindref="member">hmap::gpu::init_opencl</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z00<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1a29cc1b0843f7447eb19b6cef27772cdd" kindref="member">hmap::gpu::voronoise</ref>(shape,<sp/>kw,<sp/>0.f,<sp/>0.f,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z10<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1a29cc1b0843f7447eb19b6cef27772cdd" kindref="member">hmap::gpu::voronoise</ref>(shape,<sp/>kw,<sp/>1.f,<sp/>0.f,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z01<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1a29cc1b0843f7447eb19b6cef27772cdd" kindref="member">hmap::gpu::voronoise</ref>(shape,<sp/>kw,<sp/>0.f,<sp/>1.f,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z11<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1a29cc1b0843f7447eb19b6cef27772cdd" kindref="member">hmap::gpu::voronoise</ref>(shape,<sp/>kw,<sp/>1.f,<sp/>1.f,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zfbm<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1a26d6f87858e400f7b6c8cecb1e12bb8c" kindref="member">hmap::gpu::voronoise_fbm</ref>(shape,<sp/>kw,<sp/>1.f,<sp/>0.3f,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>zfbm.<ref refid="classhmap_1_1Array_1a3517b483a468873cefa73f7773a893ec" kindref="member">infos</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_voronoise.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z00,<sp/>z10,<sp/>z01,<sp/>z11,<sp/>zfbm},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_voronoise.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/primitives_gpu.cpp" line="688" column="7" bodyfile="HighMap/src/primitives/primitives_gpu.cpp" bodystart="688" bodyend="721" declfile="HighMap/include/highmap/primitives.hpp" declline="2054" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a26d6f87858e400f7b6c8cecb1e12bb8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::voronoise_fbm</definition>
        <argsstring>(Vec2&lt; int &gt; shape, Vec2&lt; float &gt; kw, float u_param, float v_param, uint seed, int octaves=8, float weight=0.7f, float persistence=0.5f, float lacunarity=2.f, const Array *p_ctrl_param=nullptr, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>voronoise_fbm</name>
        <qualifiedname>hmap::gpu::voronoise_fbm</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>kw</declname>
        </param>
        <param>
          <type>float</type>
          <declname>u_param</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v_param</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>int</type>
          <declname>octaves</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>float</type>
          <declname>weight</declname>
          <defval>0.7<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>persistence</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>lacunarity</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_ctrl_param</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Return an array filled with coherence Voronoise. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>Noise wavenumbers {kx, ky} for each directions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>octaves</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of octaves. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weigth</parametername>
</parameternamelist>
<parameterdescription>
<para>Octave weighting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>persistence</parametername>
</parameternamelist>
<parameterdescription>
<para>Octave persistence. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lacunarity</parametername>
</parameternamelist>
<parameterdescription>
<para>Defines the wavenumber ratio between each octaves. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_ctrl_param</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the control parameter array (acts as a multiplier for the weight parameter). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input noise arrays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Fractal noise.</para>
</simplesect>
<simplesect kind="note"><para>Taken from <ulink url="https://www.shadertoy.com/view/clGyWm">https://www.shadertoy.com/view/clGyWm</ulink></para>
</simplesect>
<simplesect kind="note"><para>Only available if OpenCL is enabled.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_voronoise.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1_1gpu_1adb8336ed4d83c15500872185dee45d50" kindref="member">hmap::gpu::init_opencl</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z00<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1a29cc1b0843f7447eb19b6cef27772cdd" kindref="member">hmap::gpu::voronoise</ref>(shape,<sp/>kw,<sp/>0.f,<sp/>0.f,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z10<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1a29cc1b0843f7447eb19b6cef27772cdd" kindref="member">hmap::gpu::voronoise</ref>(shape,<sp/>kw,<sp/>1.f,<sp/>0.f,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z01<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1a29cc1b0843f7447eb19b6cef27772cdd" kindref="member">hmap::gpu::voronoise</ref>(shape,<sp/>kw,<sp/>0.f,<sp/>1.f,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z11<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1a29cc1b0843f7447eb19b6cef27772cdd" kindref="member">hmap::gpu::voronoise</ref>(shape,<sp/>kw,<sp/>1.f,<sp/>1.f,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zfbm<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1a26d6f87858e400f7b6c8cecb1e12bb8c" kindref="member">hmap::gpu::voronoise_fbm</ref>(shape,<sp/>kw,<sp/>1.f,<sp/>0.3f,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>zfbm.<ref refid="classhmap_1_1Array_1a3517b483a468873cefa73f7773a893ec" kindref="member">infos</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_voronoise.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z00,<sp/>z10,<sp/>z01,<sp/>z11,<sp/>zfbm},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_voronoise.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/primitives_gpu.cpp" line="723" column="7" bodyfile="HighMap/src/primitives/primitives_gpu.cpp" bodystart="723" bodyend="767" declfile="HighMap/include/highmap/primitives.hpp" declline="2090" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1ad25e08146acf2dc7101ec18dbfaa0d2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::vororand</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float density, float variability, uint seed, float k_smoothing=0.f, float exp_sigma=0.f, VoronoiReturnType return_type=VoronoiReturnType::F1_SQUARED, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f}, Vec4&lt; float &gt; bbox_points={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>vororand</name>
        <qualifiedname>hmap::gpu::vororand</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>density</declname>
        </param>
        <param>
          <type>float</type>
          <declname>variability</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k_smoothing</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>exp_sigma</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2f" kindref="member">VoronoiReturnType</ref></type>
          <declname>return_type</declname>
          <defval><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fa3e5996ed4314058911435c50bc95e1c2" kindref="member">VoronoiReturnType::F1_SQUARED</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox_points</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Generates a 2D Voronoi-based scalar field using OpenCL. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes a Voronoi diagram or derived metric (such as F1, F2, or edge distances) on a grid of given shape. A set of random points is generated within an extended bounding box, based on the desired density and variability, to reduce edge artifacts. Optionally, per-pixel displacement can be applied through noise fields.</para>
<para>The result is stored in an <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> object representing a 2D scalar field.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimensions of the output array (width x height). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>density</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of random points per unit area for Voronoi diagram. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>variability</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of randomness added to the point generation bounding box. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Seed for random number generation used in point sampling. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k_smoothing</parametername>
</parameternamelist>
<parameterdescription>
<para>Smoothing factor used in soft minimum/maximum Voronoi distance computations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exp_sigma</parametername>
</parameternamelist>
<parameterdescription>
<para>Standard deviation used in exponential falloff for edge distance computation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>return_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of Voronoi computation to perform (e.g., F1, F2, F2-F1, edge distance). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to a noise field applied to X coordinates of grid points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to a noise field applied to Y coordinates of grid points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Bounding box of the domain in which the field is computed: {xmin, xmax, ymin, ymax}. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox_points</parametername>
</parameternamelist>
<parameterdescription>
<para>Bounding box for point generation, usually larger than <computeroutput>bbox</computeroutput> to avoid edge effects.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> object containing the computed scalar field.</para>
</simplesect>
<simplesect kind="note"><para><itemizedlist>
<listitem><para>The kernel <computeroutput>&quot;vororand&quot;</computeroutput> must be compiled and available in the OpenCL context.</para>
</listitem><listitem><para>If <computeroutput>p_noise_x</computeroutput> or <computeroutput>p_noise_y</computeroutput> are provided, they must match the shape of the output array.</para>
</listitem><listitem><para>The generated point cloud will be larger than <computeroutput>bbox</computeroutput> to reduce border artifacts.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_vororand.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1_1gpu_1adb8336ed4d83c15500872185dee45d50" kindref="member">hmap::gpu::init_opencl</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>density<sp/>=<sp/>8.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variability<sp/>=<sp/>4.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_smoothing<sp/>=<sp/>0.05f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp_sigma<sp/>=<sp/>0.01f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::VoronoiReturnType&gt;<sp/>types<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fa3e5996ed4314058911435c50bc95e1c2" kindref="member">hmap::VoronoiReturnType::F1_SQUARED</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2faaf0f73f1150aae0a8affdab8b5f38eca" kindref="member">hmap::VoronoiReturnType::F2_SQUARED</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fab48ce3afc4f70a5130a1fb10541e2fa2" kindref="member">hmap::VoronoiReturnType::F1TF2_SQUARED</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fae4e408bd5c4ece5cd6bc7f3a439d87e3" kindref="member">hmap::VoronoiReturnType::F1DF2_SQUARED</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fac73478836b3a989e9325f861fe2059e2" kindref="member">hmap::VoronoiReturnType::F2MF1_SQUARED</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2faf044e64b09fbae8b02b6c44f2d69925f" kindref="member">hmap::VoronoiReturnType::EDGE_DISTANCE_EXP</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fa1d0f88509ad557940f07cd8c5d721820" kindref="member">hmap::VoronoiReturnType::EDGE_DISTANCE_SQUARED</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fab0d27777279264cbe2a77d4a241e6f55" kindref="member">hmap::VoronoiReturnType::CONSTANT</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fa85f252453c9797b7e00cc96cb7147537" kindref="member">hmap::VoronoiReturnType::CONSTANT_F2MF1_SQUARED</ref>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Array&gt;<sp/>zs<sp/>=<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type<sp/>:<sp/>types)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1ad25e08146acf2dc7101ec18dbfaa0d2b" kindref="member">hmap::gpu::vororand</ref>(shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>density,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variability,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_smoothing,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp_sigma,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>zs.push_back(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_vororand.png&quot;</highlight><highlight class="normal">,<sp/>zs,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_vororand.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/primitives_gpu.cpp" line="805" column="7" bodyfile="HighMap/src/primitives/primitives_gpu.cpp" bodystart="805" bodyend="849" declfile="HighMap/include/highmap/primitives.hpp" declline="2152" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a2a14aa1a12ce7308b7cb553ea89b836d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::vororand</definition>
        <argsstring>(Vec2&lt; int &gt; shape, const std::vector&lt; float &gt; &amp;xp, const std::vector&lt; float &gt; &amp;yp, float k_smoothing=0.f, float exp_sigma=0.f, VoronoiReturnType return_type=VoronoiReturnType::F1_SQUARED, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>vororand</name>
        <qualifiedname>hmap::gpu::vororand</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>xp</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>yp</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k_smoothing</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>exp_sigma</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2f" kindref="member">VoronoiReturnType</ref></type>
          <declname>return_type</declname>
          <defval><ref refid="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fa3e5996ed4314058911435c50bc95e1c2" kindref="member">VoronoiReturnType::F1_SQUARED</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/primitives_gpu.cpp" line="851" column="7" bodyfile="HighMap/src/primitives/primitives_gpu.cpp" bodystart="851" bodyend="895" declfile="HighMap/include/highmap/primitives.hpp" declline="2164" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a9a3f272d7c8294ab3418be67e3c9b3eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::maximum_smooth</definition>
        <argsstring>(const Array &amp;array1, const Array &amp;array2, float k=0.2f)</argsstring>
        <name>maximum_smooth</name>
        <qualifiedname>hmap::gpu::maximum_smooth</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k</declname>
          <defval>0.2<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a9e903d1c88db888832bea8cbafb19246" kindref="member">hmap::maximum_smooth</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/range/range_cpu.cpp" line="9" column="7" bodyfile="HighMap/src/range/range_cpu.cpp" bodystart="9" bodyend="27" declfile="HighMap/include/highmap/range.hpp" declline="392" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a84e8cfef31aeb4ba10d4f7cbe04cb96d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::minimum_smooth</definition>
        <argsstring>(const Array &amp;array1, const Array &amp;array2, float k=0.2f)</argsstring>
        <name>minimum_smooth</name>
        <qualifiedname>hmap::gpu::minimum_smooth</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k</declname>
          <defval>0.2<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a453090213e0cf160406d6af6c129d872" kindref="member">hmap::minimum_smooth</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/range/range_cpu.cpp" line="29" column="7" bodyfile="HighMap/src/range/range_cpu.cpp" bodystart="29" bodyend="47" declfile="HighMap/include/highmap/range.hpp" declline="395" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a6a106eafab89fcdee4764c21b7406f3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::sdf_2d_polyline</definition>
        <argsstring>(const Path &amp;path, Vec2&lt; int &gt; shape, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f}, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr)</argsstring>
        <name>sdf_2d_polyline</name>
        <qualifiedname>hmap::gpu::sdf_2d_polyline</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Path" kindref="compound">Path</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a7bacc45412ea1599907ac3f9b0e9e282" kindref="member">hmap::sdf_2d_polyline</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/sdf/sdf_2d_polyline_gpu.cpp" line="15" column="7" bodyfile="HighMap/src/sdf/sdf_2d_polyline_gpu.cpp" bodystart="15" bodyend="57" declfile="HighMap/include/highmap/sdf.hpp" declline="67" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a30410bfd596eaa78f33396b1f963e743" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::sdf_2d_polyline_bezier</definition>
        <argsstring>(const Path &amp;path, Vec2&lt; int &gt; shape, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f}, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr)</argsstring>
        <name>sdf_2d_polyline_bezier</name>
        <qualifiedname>hmap::gpu::sdf_2d_polyline_bezier</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Path" kindref="compound">Path</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a5368ab0d5bb8708001a55d216332918b" kindref="member">hmap::sdf_2d_polyline_bezier</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/sdf/sdf_2d_polyline_gpu.cpp" line="59" column="7" bodyfile="HighMap/src/sdf/sdf_2d_polyline_gpu.cpp" bodystart="59" bodyend="127" declfile="HighMap/include/highmap/sdf.hpp" declline="74" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1af91ed08d142ffe71069e00475654d786" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gpu::select_valley</definition>
        <argsstring>(const Array &amp;z, int ir, bool zero_at_borders=true, bool ridge_select=false)</argsstring>
        <name>select_valley</name>
        <qualifiedname>hmap::gpu::select_valley</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>zero_at_borders</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>ridge_select</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a701106cd57412e72a5d3ee41b46ab4e8" kindref="member">hmap::select_valley</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/selector/selector_gpu.cpp" line="12" column="7" bodyfile="HighMap/src/selector/selector_gpu.cpp" bodystart="12" bodyend="27" declfile="HighMap/include/highmap/selector.hpp" declline="431" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1aab128e15988875b5d350d6f156612aa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::rotate</definition>
        <argsstring>(Array &amp;array, float angle, bool zoom_in=true)</argsstring>
        <name>rotate</name>
        <qualifiedname>hmap::gpu::rotate</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>zoom_in</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a888dcfe5adb36448366400f04efcde04" kindref="member">hmap::rotate</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/transform/transform_gpu.cpp" line="9" column="6" bodyfile="HighMap/src/transform/transform_gpu.cpp" bodystart="9" bodyend="21" declfile="HighMap/include/highmap/transform.hpp" declline="369" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a99659d06f84b0e92e6731f28ca28937c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::warp</definition>
        <argsstring>(Array &amp;array, const Array *p_dx, const Array *p_dy)</argsstring>
        <name>warp</name>
        <qualifiedname>hmap::gpu::warp</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_dx</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_dy</declname>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a19148ad2a95f7ad5b05161e9a0f0f732" kindref="member">hmap::warp</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/transform/warp_gpu.cpp" line="9" column="6" bodyfile="HighMap/src/transform/warp_gpu.cpp" bodystart="9" bodyend="54" declfile="HighMap/include/highmap/transform.hpp" declline="372" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1ada313c7ac68787e41c2979c2975568eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
        <definition>Vec4&lt; float &gt; hmap::gpu::helper_transform_bbox</definition>
        <argsstring>(const Vec4&lt; float &gt; &amp;bbox_source, const Vec4&lt; float &gt; &amp;bbox_target)</argsstring>
        <name>helper_transform_bbox</name>
        <qualifiedname>hmap::gpu::helper_transform_bbox</qualifiedname>
        <param>
          <type>const <ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt; &amp;</type>
          <declname>bbox_source</declname>
        </param>
        <param>
          <type>const <ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt; &amp;</type>
          <declname>bbox_target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/interpolate/interpolate_array_gpu.cpp" line="14" column="6" bodyfile="HighMap/src/interpolate/interpolate_array_gpu.cpp" bodystart="14" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1_1gpu_1a27b70c333fc5550bcca1b96dcb0116fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gpu::helper_bind_optional_buffers</definition>
        <argsstring>(clwrapper::Run &amp;run, const Array *p_noise_x, const Array *p_noise_y)</argsstring>
        <name>helper_bind_optional_buffers</name>
        <qualifiedname>hmap::gpu::helper_bind_optional_buffers</qualifiedname>
        <param>
          <type>clwrapper::Run &amp;</type>
          <declname>run</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/primitives_gpu.cpp" line="17" column="6" bodyfile="HighMap/src/primitives/primitives_gpu.cpp" bodystart="17" bodyend="38"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="HighMap/include/highmap/blending.hpp" line="150" column="1"/>
  </compounddef>
</doxygen>
