<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classhmap_1_1Heightmap" kind="class" language="C++" prot="public">
    <compoundname>hmap::Heightmap</compoundname>
    <includes refid="heightmap_8hpp" local="no">heightmap.hpp</includes>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classhmap_1_1Heightmap_1a88f20f7b64d0a3c5575fb29d047cf8de" prot="public" static="no" mutable="no">
        <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
        <definition>Vec2&lt;int&gt; hmap::Heightmap::shape</definition>
        <argsstring></argsstring>
        <name>shape</name>
        <qualifiedname>hmap::Heightmap::shape</qualifiedname>
        <briefdescription>
<para><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> global shape. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="155" column="8" bodyfile="HighMap/include/highmap/heightmap.hpp" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhmap_1_1Heightmap_1a0449acf3cd11bf117babc80ae54e23b4" prot="public" static="no" mutable="no">
        <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
        <definition>Vec2&lt;int&gt; hmap::Heightmap::tiling</definition>
        <argsstring></argsstring>
        <name>tiling</name>
        <qualifiedname>hmap::Heightmap::tiling</qualifiedname>
        <initializer>= {1, 1}</initializer>
        <briefdescription>
<para>Tiling setup (number of tiles in each direction). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="160" column="8" bodyfile="HighMap/include/highmap/heightmap.hpp" bodystart="160" bodyend="160"/>
      </memberdef>
      <memberdef kind="variable" id="classhmap_1_1Heightmap_1a8298ec219210890eec720792cffdb598" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float hmap::Heightmap::overlap</definition>
        <argsstring></argsstring>
        <name>overlap</name>
        <qualifiedname>hmap::Heightmap::overlap</qualifiedname>
        <initializer>= 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></initializer>
        <briefdescription>
<para><ref refid="classhmap_1_1Tile" kindref="compound">Tile</ref> overlapping, in [0, 1[. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="165" column="9" bodyfile="HighMap/include/highmap/heightmap.hpp" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhmap_1_1Heightmap_1a1c464dcd079e78751edc88fccc7dd4b5" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classhmap_1_1Tile" kindref="compound">Tile</ref> &gt;</type>
        <definition>std::vector&lt;Tile&gt; hmap::Heightmap::tiles</definition>
        <argsstring></argsstring>
        <name>tiles</name>
        <qualifiedname>hmap::Heightmap::tiles</qualifiedname>
        <initializer>= {}</initializer>
        <briefdescription>
<para><ref refid="classhmap_1_1Tile" kindref="compound">Tile</ref> storage. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="170" column="15" bodyfile="HighMap/include/highmap/heightmap.hpp" bodystart="170" bodyend="170"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classhmap_1_1Heightmap_1ae2c00388213fc4aad8dd29617b4f71a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hmap::Heightmap::Heightmap</definition>
        <argsstring>(Vec2&lt; int &gt; shape, Vec2&lt; int &gt; tiling, float overlap)</argsstring>
        <name>Heightmap</name>
        <qualifiedname>hmap::Heightmap::Heightmap</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>tiling</declname>
        </param>
        <param>
          <type>float</type>
          <declname>overlap</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="172" column="3" bodyfile="HighMap/src/heightmap/heightmap_base.cpp" bodystart="20" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Heightmap_1a15580b39a3489f19a32dd52d234601a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hmap::Heightmap::Heightmap</definition>
        <argsstring>(Vec2&lt; int &gt; shape, Vec2&lt; int &gt; tiling, float overlap, float fill_value)</argsstring>
        <name>Heightmap</name>
        <qualifiedname>hmap::Heightmap::Heightmap</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>tiling</declname>
        </param>
        <param>
          <type>float</type>
          <declname>overlap</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fill_value</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="175" column="3" bodyfile="HighMap/src/heightmap/heightmap_base.cpp" bodystart="26" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Heightmap_1ad2a302ea6666fb5f2c2ffe5ddeb90451" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hmap::Heightmap::Heightmap</definition>
        <argsstring>(Vec2&lt; int &gt; shape, Vec2&lt; int &gt; tiling)</argsstring>
        <name>Heightmap</name>
        <qualifiedname>hmap::Heightmap::Heightmap</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>tiling</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="180" column="3" bodyfile="HighMap/src/heightmap/heightmap_base.cpp" bodystart="46" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Heightmap_1a1b72b37e0244f481471c965b86288504" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hmap::Heightmap::Heightmap</definition>
        <argsstring>(Vec2&lt; int &gt; shape)</argsstring>
        <name>Heightmap</name>
        <qualifiedname>hmap::Heightmap::Heightmap</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="182" column="3" bodyfile="HighMap/src/heightmap/heightmap_base.cpp" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Heightmap_1aac582367b38b2ccdb5a53f2bd002cac5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hmap::Heightmap::Heightmap</definition>
        <argsstring>()</argsstring>
        <name>Heightmap</name>
        <qualifiedname>hmap::Heightmap::Heightmap</qualifiedname>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="184" column="3" bodyfile="HighMap/src/heightmap/heightmap_base.cpp" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Heightmap_1a51cf765f4ffe966ebe3e9f7c933ecf69" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t hmap::Heightmap::get_ntiles</definition>
        <argsstring>() const</argsstring>
        <name>get_ntiles</name>
        <qualifiedname>hmap::Heightmap::get_ntiles</qualifiedname>
        <briefdescription>
<para>Get the number of tiles. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size_t Number of tiles. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="199" column="10" bodyfile="HighMap/src/heightmap/heightmap_base.cpp" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Heightmap_1a92216a319cfae7fb7380ea78ba7c1485" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hmap::Heightmap::get_tile_index</definition>
        <argsstring>(int i, int j) const</argsstring>
        <name>get_tile_index</name>
        <qualifiedname>hmap::Heightmap::get_tile_index</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Get the tile linear index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Tile" kindref="compound">Tile</ref> i index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Tile" kindref="compound">Tile</ref> j index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int Linear index. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="208" column="7" bodyfile="HighMap/src/heightmap/heightmap_base.cpp" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Heightmap_1a33052feab03d0ee8bb4f89a9c8ea3111" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::Heightmap::get_value_bilinear</definition>
        <argsstring>(float x, float y) const</argsstring>
        <name>get_value_bilinear</name>
        <qualifiedname>hmap::Heightmap::get_value_bilinear</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="210" column="9" bodyfile="HighMap/src/heightmap/heightmap_base.cpp" bodystart="148" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Heightmap_1ad622aa51772286c4c2b6088e16558012" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::Heightmap::get_value_nearest</definition>
        <argsstring>(float x, float y) const</argsstring>
        <name>get_value_nearest</name>
        <qualifiedname>hmap::Heightmap::get_value_nearest</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="212" column="9" bodyfile="HighMap/src/heightmap/heightmap_base.cpp" bodystart="186" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Heightmap_1a82f4c09a6555cc278a52e85536f04224" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::Heightmap::set_overlap</definition>
        <argsstring>(float new_overlap)</argsstring>
        <name>set_overlap</name>
        <qualifiedname>hmap::Heightmap::set_overlap</qualifiedname>
        <param>
          <type>float</type>
          <declname>new_overlap</declname>
        </param>
        <briefdescription>
<para>Set the tile overlapping. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_overlap</parametername>
</parameternamelist>
<parameterdescription>
<para>New overlap. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="219" column="8" bodyfile="HighMap/src/heightmap/heightmap_base.cpp" bodystart="72" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Heightmap_1a5fd80cb8814b56637b2e466c0af9b0d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::Heightmap::set_shape</definition>
        <argsstring>(Vec2&lt; int &gt; new_shape)</argsstring>
        <name>set_shape</name>
        <qualifiedname>hmap::Heightmap::set_shape</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>new_shape</declname>
        </param>
        <briefdescription>
<para>Set the heightmap shape. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_shape</parametername>
</parameternamelist>
<parameterdescription>
<para>New shape. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="226" column="8" bodyfile="HighMap/src/heightmap/heightmap_base.cpp" bodystart="78" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Heightmap_1a1788a169993965e3aaed7a2040fe6591" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::Heightmap::set_sto</definition>
        <argsstring>(Vec2&lt; int &gt; new_shape, Vec2&lt; int &gt; new_tiling, float new_overlap)</argsstring>
        <name>set_sto</name>
        <qualifiedname>hmap::Heightmap::set_sto</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>new_shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>new_tiling</declname>
        </param>
        <param>
          <type>float</type>
          <declname>new_overlap</declname>
        </param>
        <briefdescription>
<para>Set the shape / tiling / overlap in one pass. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_shape</parametername>
</parameternamelist>
<parameterdescription>
<para>New shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_tiling</parametername>
</parameternamelist>
<parameterdescription>
<para>New tiling. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_overlap</parametername>
</parameternamelist>
<parameterdescription>
<para>New overlap. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="235" column="8" bodyfile="HighMap/src/heightmap/heightmap_base.cpp" bodystart="84" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Heightmap_1adf7d0c37562ffdc3463efd8938f5dd62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::Heightmap::set_tiling</definition>
        <argsstring>(Vec2&lt; int &gt; new_tiling)</argsstring>
        <name>set_tiling</name>
        <qualifiedname>hmap::Heightmap::set_tiling</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>new_tiling</declname>
        </param>
        <briefdescription>
<para>Set the tiling setup. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_tiling</parametername>
</parameternamelist>
<parameterdescription>
<para>New tiling. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="242" column="8" bodyfile="HighMap/src/heightmap/heightmap_base.cpp" bodystart="98" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Heightmap_1a912a9da1b07157e05787a135737a118c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::Heightmap::from_array_interp</definition>
        <argsstring>(Array &amp;array)</argsstring>
        <name>from_array_interp</name>
        <qualifiedname>hmap::Heightmap::from_array_interp</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Fill tile values by interpolating (bilinear) values from another array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_heightmap_from_array.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/><ref refid="classhmap_1_1Heightmap_1a88f20f7b64d0a3c5575fb29d047cf8de" kindref="member">shape</ref><sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/><ref refid="classhmap_1_1Heightmap_1a0449acf3cd11bf117babc80ae54e23b4" kindref="member">tiling</ref><sp/>=<sp/>{4,<sp/>2};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Heightmap_1a8298ec219210890eec720792cffdb598" kindref="member">overlap</ref><sp/>=<sp/>0.25;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(64,<sp/>64),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Heightmap" kindref="compound">hmap::Heightmap</ref><sp/>h<sp/>=<sp/><ref refid="classhmap_1_1Heightmap" kindref="compound">hmap::Heightmap</ref>(<ref refid="classhmap_1_1Heightmap_1a88f20f7b64d0a3c5575fb29d047cf8de" kindref="member">shape</ref>,<sp/><ref refid="classhmap_1_1Heightmap_1a0449acf3cd11bf117babc80ae54e23b4" kindref="member">tiling</ref>,<sp/><ref refid="classhmap_1_1Heightmap_1a8298ec219210890eec720792cffdb598" kindref="member">overlap</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>h.<ref refid="classhmap_1_1Heightmap_1ad11c364899cc7efe5435b0bbb452a53f" kindref="member">from_array_interp_bicubic</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_heightmap_from_array0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>h.<ref refid="classhmap_1_1Heightmap_1a03097c67e4ea2448e202ee1f43b77961" kindref="member">to_array</ref>().<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_heightmap_from_array1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_heightmap_from_array0.png"></image>
 <image type="html" name="ex_heightmap_from_array1.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="257" column="8" bodyfile="HighMap/src/heightmap/heightmap_base.cpp" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Heightmap_1ad11c364899cc7efe5435b0bbb452a53f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::Heightmap::from_array_interp_bicubic</definition>
        <argsstring>(Array &amp;array)</argsstring>
        <name>from_array_interp_bicubic</name>
        <qualifiedname>hmap::Heightmap::from_array_interp_bicubic</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Fill tile values by interpolating (bicubic) values from another array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="265" column="8" bodyfile="HighMap/src/heightmap/heightmap_base.cpp" bodystart="109" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Heightmap_1ad3ae824068b1c390f5e2c41d9065ff1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::Heightmap::from_array_interp_bilinear</definition>
        <argsstring>(Array &amp;array)</argsstring>
        <name>from_array_interp_bilinear</name>
        <qualifiedname>hmap::Heightmap::from_array_interp_bilinear</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Fill tile values by interpolating (bilinear) values from another array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="273" column="8" bodyfile="HighMap/src/heightmap/heightmap_base.cpp" bodystart="122" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Heightmap_1aff6ab20163da2db6c9e54d55238c6fa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::Heightmap::from_array_interp_nearest</definition>
        <argsstring>(Array &amp;array)</argsstring>
        <name>from_array_interp_nearest</name>
        <qualifiedname>hmap::Heightmap::from_array_interp_nearest</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Fill tile values by interpolating (nearest neighbor) values from another array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="281" column="8" bodyfile="HighMap/src/heightmap/heightmap_base.cpp" bodystart="135" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Heightmap_1aa2564ec4ee33447cf53c01e9fc143419" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::Heightmap::infos</definition>
        <argsstring>()</argsstring>
        <name>infos</name>
        <qualifiedname>hmap::Heightmap::infos</qualifiedname>
        <briefdescription>
<para>Print some informations about the object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="286" column="8" bodyfile="HighMap/src/heightmap/heightmap_base.cpp" bodystart="208" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Heightmap_1a83a804689020e229b4428e691eee5b74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::Heightmap::inverse</definition>
        <argsstring>()</argsstring>
        <name>inverse</name>
        <qualifiedname>hmap::Heightmap::inverse</qualifiedname>
        <briefdescription>
<para>Inverse the heightmap values (max - values). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="291" column="8" bodyfile="HighMap/src/heightmap/heightmap_base.cpp" bodystart="223" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Heightmap_1a1d7484a3e217925b3602119a032179f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::Heightmap::max</definition>
        <argsstring>()</argsstring>
        <name>max</name>
        <qualifiedname>hmap::Heightmap::max</qualifiedname>
        <briefdescription>
<para>Return the value of the greatest element in the heightmap data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>float </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="298" column="9" bodyfile="HighMap/src/heightmap/heightmap_base.cpp" bodystart="240" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Heightmap_1a2c77598d7fbf9853ecb15bee3e057d3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::Heightmap::mean</definition>
        <argsstring>()</argsstring>
        <name>mean</name>
        <qualifiedname>hmap::Heightmap::mean</qualifiedname>
        <briefdescription>
<para>Return the mean of the heightmap data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>float </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="305" column="9" bodyfile="HighMap/src/heightmap/heightmap_base.cpp" bodystart="310" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Heightmap_1ae24bd69e7adfb7ea06ed7809c46dc6c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::Heightmap::min</definition>
        <argsstring>()</argsstring>
        <name>min</name>
        <qualifiedname>hmap::Heightmap::min</qualifiedname>
        <briefdescription>
<para>Return the value of the smallest element in the heightmap data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>float </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="312" column="9" bodyfile="HighMap/src/heightmap/heightmap_base.cpp" bodystart="296" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Heightmap_1adfc18a86337d8283576ae1fa601433c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::Heightmap::remap</definition>
        <argsstring>(float vmin=0.f, float vmax=1.f)</argsstring>
        <name>remap</name>
        <qualifiedname>hmap::Heightmap::remap</qualifiedname>
        <param>
          <type>float</type>
          <declname>vmin</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>vmax</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Remap heightmap elements from a starting range to a target range. </para>
        </briefdescription>
        <detaileddescription>
<para>By default the starting range is taken to be [<ref refid="classhmap_1_1Heightmap_1ae24bd69e7adfb7ea06ed7809c46dc6c7" kindref="member">min()</ref>, <ref refid="classhmap_1_1Heightmap_1a1d7484a3e217925b3602119a032179f2" kindref="member">max()</ref>] of the input array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmin</parametername>
</parameternamelist>
<parameterdescription>
<para>The lower bound of the range to remap to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmax</parametername>
</parameternamelist>
<parameterdescription>
<para>The lower bound of the range to remap to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>from_min</parametername>
</parameternamelist>
<parameterdescription>
<para>The lower bound of the range to remap from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>from_max</parametername>
</parameternamelist>
<parameterdescription>
<para>The upper bound of the range to remap from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="326" column="8" bodyfile="HighMap/src/heightmap/heightmap_base.cpp" bodystart="316" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Heightmap_1ab8aadcca8aa81e221ddd50437b692ffb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::Heightmap::remap</definition>
        <argsstring>(float vmin, float vmax, float from_min, float from_max)</argsstring>
        <name>remap</name>
        <qualifiedname>hmap::Heightmap::remap</qualifiedname>
        <param>
          <type>float</type>
          <declname>vmin</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vmax</declname>
        </param>
        <param>
          <type>float</type>
          <declname>from_min</declname>
        </param>
        <param>
          <type>float</type>
          <declname>from_max</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="328" column="8" bodyfile="HighMap/src/heightmap/heightmap_base.cpp" bodystart="333" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Heightmap_1adc1c2a7a9af9062bfb0124a208882b24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::Heightmap::smooth_overlap_buffers</definition>
        <argsstring>()</argsstring>
        <name>smooth_overlap_buffers</name>
        <qualifiedname>hmap::Heightmap::smooth_overlap_buffers</qualifiedname>
        <briefdescription>
<para>Smooth the transitions between each tiles (when overlap &gt; 0). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="336" column="8" bodyfile="HighMap/src/heightmap/heightmap_base.cpp" bodystart="254" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Heightmap_1a655ef5409be462ce32f37f203ad78c27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::Heightmap::sum</definition>
        <argsstring>()</argsstring>
        <name>sum</name>
        <qualifiedname>hmap::Heightmap::sum</qualifiedname>
        <briefdescription>
<para>Return the sum of the heightmap data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>float </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="343" column="9" bodyfile="HighMap/src/heightmap/heightmap_base.cpp" bodystart="347" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Heightmap_1a03097c67e4ea2448e202ee1f43b77961" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::Heightmap::to_array</definition>
        <argsstring>(Vec2&lt; int &gt; shape_export)</argsstring>
        <name>to_array</name>
        <qualifiedname>hmap::Heightmap::to_array</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape_export</declname>
        </param>
        <briefdescription>
<para>Return the heightmap as an array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape_export</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Resulting array. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="351" column="9" bodyfile="HighMap/src/heightmap/heightmap_base.cpp" bodystart="386" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Heightmap_1a0bb7e5c6b9b2e6bb680ac57913f68080" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::Heightmap::to_array</definition>
        <argsstring>()</argsstring>
        <name>to_array</name>
        <qualifiedname>hmap::Heightmap::to_array</qualifiedname>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="353" column="9" bodyfile="HighMap/src/heightmap/heightmap_base.cpp" bodystart="365" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Heightmap_1ad133d0b58d12221384e024c02f6a916b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint16_t &gt;</type>
        <definition>std::vector&lt; uint16_t &gt; hmap::Heightmap::to_grayscale_image_16bit</definition>
        <argsstring>()</argsstring>
        <name>to_grayscale_image_16bit</name>
        <qualifiedname>hmap::Heightmap::to_grayscale_image_16bit</qualifiedname>
        <briefdescription>
<para>Converts the heightmap to a 16-bit grayscale representation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A <computeroutput>std::vector&lt;uint16_t&gt;</computeroutput> containing the 16-bit grayscale image data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="361" column="15" bodyfile="HighMap/src/heightmap/heightmap_base.cpp" bodystart="443" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Heightmap_1ae094aadc9d5ffef0f1bfc812612e1340" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint16_t &gt;</type>
        <definition>std::vector&lt; uint16_t &gt; hmap::Heightmap::to_grayscale_image_16bit_multithread</definition>
        <argsstring>()</argsstring>
        <name>to_grayscale_image_16bit_multithread</name>
        <qualifiedname>hmap::Heightmap::to_grayscale_image_16bit_multithread</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="363" column="15" bodyfile="HighMap/src/heightmap/heightmap_base.cpp" bodystart="480" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Heightmap_1a14f24a37b572ca2e51ed03d9b69bff25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint8_t &gt;</type>
        <definition>std::vector&lt; uint8_t &gt; hmap::Heightmap::to_grayscale_image_8bit</definition>
        <argsstring>()</argsstring>
        <name>to_grayscale_image_8bit</name>
        <qualifiedname>hmap::Heightmap::to_grayscale_image_8bit</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="365" column="15" bodyfile="HighMap/src/heightmap/heightmap_base.cpp" bodystart="406" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Heightmap_1aad0014b044807456d80479f50c96395c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt; float &gt; hmap::Heightmap::unique_values</definition>
        <argsstring>()</argsstring>
        <name>unique_values</name>
        <qualifiedname>hmap::Heightmap::unique_values</qualifiedname>
        <briefdescription>
<para>Returns the unique elements of the heightmap. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::vector&lt;float&gt; Unique values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="372" column="15" bodyfile="HighMap/src/heightmap/heightmap_base.cpp" bodystart="574" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="classhmap_1_1Heightmap_1a7efe2f6a3e1deccc86772797eacf89c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::Heightmap::update_tile_parameters</definition>
        <argsstring>()</argsstring>
        <name>update_tile_parameters</name>
        <qualifiedname>hmap::Heightmap::update_tile_parameters</qualifiedname>
        <briefdescription>
<para>Update tile parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="377" column="8" bodyfile="HighMap/src/heightmap/heightmap_base.cpp" bodystart="527" bodyend="572"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>HeightMap class, to manipulate heightmap (with contextual informations). </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="7">
        <label>hmap::Vec2&lt; float &gt;</label>
        <link refid="structhmap_1_1Vec2"/>
      </node>
      <node id="2">
        <label>hmap::Vec2&lt; int &gt;</label>
        <link refid="structhmap_1_1Vec2"/>
      </node>
      <node id="8">
        <label>hmap::Vec4&lt; float &gt;</label>
        <link refid="structhmap_1_1Vec4"/>
      </node>
      <node id="5">
        <label>hmap::Array</label>
        <link refid="classhmap_1_1Array"/>
        <childnode refid="2" relation="usage">
          <edgelabel>shape</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>vector</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>hmap::Heightmap</label>
        <link refid="classhmap_1_1Heightmap"/>
        <childnode refid="2" relation="usage">
          <edgelabel>shape</edgelabel>
          <edgelabel>tiling</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>tiles</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>hmap::Tile</label>
        <link refid="classhmap_1_1Tile"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>scale</edgelabel>
          <edgelabel>shift</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>bbox</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>std::vector&lt; float &gt;</label>
      </node>
      <node id="3">
        <label>std::vector&lt; hmap::Tile &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="HighMap/include/highmap/heightmap.hpp" line="149" column="1" bodyfile="HighMap/include/highmap/heightmap.hpp" bodystart="150" bodyend="378"/>
    <listofallmembers>
      <member refid="classhmap_1_1Heightmap_1a912a9da1b07157e05787a135737a118c" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>from_array_interp</name></member>
      <member refid="classhmap_1_1Heightmap_1ad11c364899cc7efe5435b0bbb452a53f" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>from_array_interp_bicubic</name></member>
      <member refid="classhmap_1_1Heightmap_1ad3ae824068b1c390f5e2c41d9065ff1e" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>from_array_interp_bilinear</name></member>
      <member refid="classhmap_1_1Heightmap_1aff6ab20163da2db6c9e54d55238c6fa8" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>from_array_interp_nearest</name></member>
      <member refid="classhmap_1_1Heightmap_1a51cf765f4ffe966ebe3e9f7c933ecf69" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>get_ntiles</name></member>
      <member refid="classhmap_1_1Heightmap_1a92216a319cfae7fb7380ea78ba7c1485" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>get_tile_index</name></member>
      <member refid="classhmap_1_1Heightmap_1a33052feab03d0ee8bb4f89a9c8ea3111" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>get_value_bilinear</name></member>
      <member refid="classhmap_1_1Heightmap_1ad622aa51772286c4c2b6088e16558012" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>get_value_nearest</name></member>
      <member refid="classhmap_1_1Heightmap_1ae2c00388213fc4aad8dd29617b4f71a1" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>Heightmap</name></member>
      <member refid="classhmap_1_1Heightmap_1a15580b39a3489f19a32dd52d234601a7" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>Heightmap</name></member>
      <member refid="classhmap_1_1Heightmap_1ad2a302ea6666fb5f2c2ffe5ddeb90451" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>Heightmap</name></member>
      <member refid="classhmap_1_1Heightmap_1a1b72b37e0244f481471c965b86288504" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>Heightmap</name></member>
      <member refid="classhmap_1_1Heightmap_1aac582367b38b2ccdb5a53f2bd002cac5" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>Heightmap</name></member>
      <member refid="classhmap_1_1Heightmap_1aa2564ec4ee33447cf53c01e9fc143419" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>infos</name></member>
      <member refid="classhmap_1_1Heightmap_1a83a804689020e229b4428e691eee5b74" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>inverse</name></member>
      <member refid="classhmap_1_1Heightmap_1a1d7484a3e217925b3602119a032179f2" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>max</name></member>
      <member refid="classhmap_1_1Heightmap_1a2c77598d7fbf9853ecb15bee3e057d3f" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>mean</name></member>
      <member refid="classhmap_1_1Heightmap_1ae24bd69e7adfb7ea06ed7809c46dc6c7" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>min</name></member>
      <member refid="classhmap_1_1Heightmap_1a8298ec219210890eec720792cffdb598" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>overlap</name></member>
      <member refid="classhmap_1_1Heightmap_1adfc18a86337d8283576ae1fa601433c9" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>remap</name></member>
      <member refid="classhmap_1_1Heightmap_1ab8aadcca8aa81e221ddd50437b692ffb" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>remap</name></member>
      <member refid="classhmap_1_1Heightmap_1a82f4c09a6555cc278a52e85536f04224" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>set_overlap</name></member>
      <member refid="classhmap_1_1Heightmap_1a5fd80cb8814b56637b2e466c0af9b0d3" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>set_shape</name></member>
      <member refid="classhmap_1_1Heightmap_1a1788a169993965e3aaed7a2040fe6591" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>set_sto</name></member>
      <member refid="classhmap_1_1Heightmap_1adf7d0c37562ffdc3463efd8938f5dd62" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>set_tiling</name></member>
      <member refid="classhmap_1_1Heightmap_1a88f20f7b64d0a3c5575fb29d047cf8de" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>shape</name></member>
      <member refid="classhmap_1_1Heightmap_1adc1c2a7a9af9062bfb0124a208882b24" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>smooth_overlap_buffers</name></member>
      <member refid="classhmap_1_1Heightmap_1a655ef5409be462ce32f37f203ad78c27" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>sum</name></member>
      <member refid="classhmap_1_1Heightmap_1a1c464dcd079e78751edc88fccc7dd4b5" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>tiles</name></member>
      <member refid="classhmap_1_1Heightmap_1a0449acf3cd11bf117babc80ae54e23b4" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>tiling</name></member>
      <member refid="classhmap_1_1Heightmap_1a03097c67e4ea2448e202ee1f43b77961" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>to_array</name></member>
      <member refid="classhmap_1_1Heightmap_1a0bb7e5c6b9b2e6bb680ac57913f68080" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>to_array</name></member>
      <member refid="classhmap_1_1Heightmap_1ad133d0b58d12221384e024c02f6a916b" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>to_grayscale_image_16bit</name></member>
      <member refid="classhmap_1_1Heightmap_1ae094aadc9d5ffef0f1bfc812612e1340" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>to_grayscale_image_16bit_multithread</name></member>
      <member refid="classhmap_1_1Heightmap_1a14f24a37b572ca2e51ed03d9b69bff25" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>to_grayscale_image_8bit</name></member>
      <member refid="classhmap_1_1Heightmap_1aad0014b044807456d80479f50c96395c" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>unique_values</name></member>
      <member refid="classhmap_1_1Heightmap_1a7efe2f6a3e1deccc86772797eacf89c4" prot="public" virt="non-virtual"><scope>hmap::Heightmap</scope><name>update_tile_parameters</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
