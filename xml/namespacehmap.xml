<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespacehmap" kind="namespace" language="C++">
    <compoundname>hmap</compoundname>
    <innerclass refid="classhmap_1_1Array" prot="public">hmap::Array</innerclass>
    <innerclass refid="classhmap_1_1ArrayControlFunction" prot="public">hmap::ArrayControlFunction</innerclass>
    <innerclass refid="classhmap_1_1ArrayFunction" prot="public">hmap::ArrayFunction</innerclass>
    <innerclass refid="structhmap_1_1AssertResults" prot="public">hmap::AssertResults</innerclass>
    <innerclass refid="classhmap_1_1BiquadFunction" prot="public">hmap::BiquadFunction</innerclass>
    <innerclass refid="classhmap_1_1BumpFunction" prot="public">hmap::BumpFunction</innerclass>
    <innerclass refid="classhmap_1_1Cloud" prot="public">hmap::Cloud</innerclass>
    <innerclass refid="classhmap_1_1CoordFrame" prot="public">hmap::CoordFrame</innerclass>
    <innerclass refid="classhmap_1_1CraterFunction" prot="public">hmap::CraterFunction</innerclass>
    <innerclass refid="classhmap_1_1DiskFunction" prot="public">hmap::DiskFunction</innerclass>
    <innerclass refid="classhmap_1_1Edge" prot="public">hmap::Edge</innerclass>
    <innerclass refid="classhmap_1_1FbmFunction" prot="public">hmap::FbmFunction</innerclass>
    <innerclass refid="classhmap_1_1FbmIqFunction" prot="public">hmap::FbmIqFunction</innerclass>
    <innerclass refid="classhmap_1_1FbmJordanFunction" prot="public">hmap::FbmJordanFunction</innerclass>
    <innerclass refid="classhmap_1_1FbmPingpongFunction" prot="public">hmap::FbmPingpongFunction</innerclass>
    <innerclass refid="classhmap_1_1FbmRidgedFunction" prot="public">hmap::FbmRidgedFunction</innerclass>
    <innerclass refid="classhmap_1_1FbmSwissFunction" prot="public">hmap::FbmSwissFunction</innerclass>
    <innerclass refid="classhmap_1_1FieldFunction" prot="public">hmap::FieldFunction</innerclass>
    <innerclass refid="classhmap_1_1Function" prot="public">hmap::Function</innerclass>
    <innerclass refid="classhmap_1_1GaussianPulseFunction" prot="public">hmap::GaussianPulseFunction</innerclass>
    <innerclass refid="classhmap_1_1GenericFractalFunction" prot="public">hmap::GenericFractalFunction</innerclass>
    <innerclass refid="classhmap_1_1Graph" prot="public">hmap::Graph</innerclass>
    <innerclass refid="classhmap_1_1Heightmap" prot="public">hmap::Heightmap</innerclass>
    <innerclass refid="structhmap_1_1HeightmapRGB" prot="public">hmap::HeightmapRGB</innerclass>
    <innerclass refid="structhmap_1_1HeightmapRGBA" prot="public">hmap::HeightmapRGBA</innerclass>
    <innerclass refid="classhmap_1_1Interpolator1D" prot="public">hmap::Interpolator1D</innerclass>
    <innerclass refid="classhmap_1_1InterpolatorCurve" prot="public">hmap::InterpolatorCurve</innerclass>
    <innerclass refid="structhmap_1_1Mat" prot="public">hmap::Mat</innerclass>
    <innerclass refid="classhmap_1_1NoiseFunction" prot="public">hmap::NoiseFunction</innerclass>
    <innerclass refid="classhmap_1_1ParberryFunction" prot="public">hmap::ParberryFunction</innerclass>
    <innerclass refid="structhmap_1_1Particle" prot="public">hmap::Particle</innerclass>
    <innerclass refid="classhmap_1_1Path" prot="public">hmap::Path</innerclass>
    <innerclass refid="classhmap_1_1PerlinBillowFunction" prot="public">hmap::PerlinBillowFunction</innerclass>
    <innerclass refid="classhmap_1_1PerlinFunction" prot="public">hmap::PerlinFunction</innerclass>
    <innerclass refid="classhmap_1_1PerlinHalfFunction" prot="public">hmap::PerlinHalfFunction</innerclass>
    <innerclass refid="classhmap_1_1PerlinMixFunction" prot="public">hmap::PerlinMixFunction</innerclass>
    <innerclass refid="classhmap_1_1Point" prot="public">hmap::Point</innerclass>
    <innerclass refid="structhmap_1_1Pos" prot="public">hmap::Pos</innerclass>
    <innerclass refid="classhmap_1_1PyramidDecomposition" prot="public">hmap::PyramidDecomposition</innerclass>
    <innerclass refid="structhmap_1_1Recorder" prot="public">hmap::Recorder</innerclass>
    <innerclass refid="classhmap_1_1RectangleFunction" prot="public">hmap::RectangleFunction</innerclass>
    <innerclass refid="classhmap_1_1RiftFunction" prot="public">hmap::RiftFunction</innerclass>
    <innerclass refid="classhmap_1_1Simplex2Function" prot="public">hmap::Simplex2Function</innerclass>
    <innerclass refid="classhmap_1_1Simplex2SFunction" prot="public">hmap::Simplex2SFunction</innerclass>
    <innerclass refid="classhmap_1_1SlopeFunction" prot="public">hmap::SlopeFunction</innerclass>
    <innerclass refid="classhmap_1_1StepFunction" prot="public">hmap::StepFunction</innerclass>
    <innerclass refid="classhmap_1_1Tensor" prot="public">hmap::Tensor</innerclass>
    <innerclass refid="classhmap_1_1Tile" prot="public">hmap::Tile</innerclass>
    <innerclass refid="classhmap_1_1Timer" prot="public">hmap::Timer</innerclass>
    <innerclass refid="classhmap_1_1ValueCubicNoiseFunction" prot="public">hmap::ValueCubicNoiseFunction</innerclass>
    <innerclass refid="classhmap_1_1ValueDelaunayNoiseFunction" prot="public">hmap::ValueDelaunayNoiseFunction</innerclass>
    <innerclass refid="classhmap_1_1ValueLinearNoiseFunction" prot="public">hmap::ValueLinearNoiseFunction</innerclass>
    <innerclass refid="classhmap_1_1ValueNoiseFunction" prot="public">hmap::ValueNoiseFunction</innerclass>
    <innerclass refid="structhmap_1_1Vec2" prot="public">hmap::Vec2</innerclass>
    <innerclass refid="structhmap_1_1Vec3" prot="public">hmap::Vec3</innerclass>
    <innerclass refid="structhmap_1_1Vec4" prot="public">hmap::Vec4</innerclass>
    <innerclass refid="classhmap_1_1WaveDuneFunction" prot="public">hmap::WaveDuneFunction</innerclass>
    <innerclass refid="classhmap_1_1WaveSineFunction" prot="public">hmap::WaveSineFunction</innerclass>
    <innerclass refid="classhmap_1_1WaveSquareFunction" prot="public">hmap::WaveSquareFunction</innerclass>
    <innerclass refid="classhmap_1_1WaveTriangularFunction" prot="public">hmap::WaveTriangularFunction</innerclass>
    <innerclass refid="classhmap_1_1WorleyDoubleFunction" prot="public">hmap::WorleyDoubleFunction</innerclass>
    <innerclass refid="classhmap_1_1WorleyFunction" prot="public">hmap::WorleyFunction</innerclass>
    <innerclass refid="classhmap_1_1XyControlFunction" prot="public">hmap::XyControlFunction</innerclass>
    <innernamespace refid="namespacehmap_1_1gpu">hmap::gpu</innernamespace>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacehmap_1a5101273ec456f5267dddc3e22dae223b" prot="public" static="no" strong="no">
        <type>int</type>
        <name>StampingBlendMethod</name>
        <qualifiedname>hmap::StampingBlendMethod</qualifiedname>
        <enumvalue id="namespacehmap_1a5101273ec456f5267dddc3e22dae223ba8451872c36bde3f6418795fec1ed7228" prot="public">
          <name>ADD</name>
          <briefdescription>
<para>add </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a5101273ec456f5267dddc3e22dae223babafe4f4d1051eb7afe0eab09badd28ad" prot="public">
          <name>MAXIMUM</name>
          <briefdescription>
<para>maximum </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a5101273ec456f5267dddc3e22dae223ba8a23346695816302a39ed3a152c58762" prot="public">
          <name>MAXIMUM_SMOOTH</name>
          <briefdescription>
<para>maximum smooth </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a5101273ec456f5267dddc3e22dae223ba54138bd51fd9f34e739112106c249169" prot="public">
          <name>MINIMUM</name>
          <briefdescription>
<para>minimum </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a5101273ec456f5267dddc3e22dae223bab783b937b8da3552b0a4a5d6c88157ee" prot="public">
          <name>MINIMUM_SMOOTH</name>
          <briefdescription>
<para>minimum smooth </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a5101273ec456f5267dddc3e22dae223babadb712f0f7627d6892ea66c9743aec1" prot="public">
          <name>MULTIPLY</name>
          <briefdescription>
<para>multiply </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a5101273ec456f5267dddc3e22dae223ba2c10f19f935a5c6dd7fb0ac7bbb2c4ed" prot="public">
          <name>SUBSTRACT</name>
          <briefdescription>
<para>substract </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Blending method for the stamping operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/authoring.hpp" line="31" column="1" bodyfile="HighMap/include/highmap/authoring.hpp" bodystart="32" bodyend="40"/>
      </memberdef>
      <memberdef kind="enum" id="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369" prot="public" static="no" strong="no">
        <type>int</type>
        <name>Cmap</name>
        <qualifiedname>hmap::Cmap</qualifiedname>
        <enumvalue id="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a4eb53d94f58e93c3bdb554d8cca7f306" prot="public">
          <name>BONE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" prot="public">
          <name>GRAY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a320107cf3138d908a78d3c6d97705717" prot="public">
          <name>HOT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" prot="public">
          <name>INFERNO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" prot="public">
          <name>JET</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a744ead0b170889e33126895264f1af2c" prot="public">
          <name>MAGMA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369ae91cb25d4df330517ac69b5f0f2c3e0c" prot="public">
          <name>NIPY_SPECTRAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a33b23b52304fbaecc91bdc4090afbd20" prot="public">
          <name>SEISMIC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" prot="public">
          <name>TERRAIN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a555dbf2f8e5b83b9117850a8938e65f9" prot="public">
          <name>TURBO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" prot="public">
          <name>VIRIDIS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a3cd98c63d7e70c2bcc14d9c9911bdc55" prot="public">
          <name>WHITE_UNIFORM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumeration for different colormap types. </para>
        </briefdescription>
        <detaileddescription>
<para>Enumeration of colormap types for image processing.</para>
<para>This enumeration is defined in the highmap/colormap.hpp file and is used for selecting the colormap to be applied during colorization.</para>
<para>This enumeration defines various colormap options that can be used for visualizing data in image processing. Each colormap provides a different color mapping scheme, which can be applied to grayscale images or data to enhance visual interpretation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/colormaps.hpp" line="80" column="1" bodyfile="HighMap/include/highmap/colormaps.hpp" bodystart="81" bodyend="94"/>
      </memberdef>
      <memberdef kind="enum" id="namespacehmap_1a25a4e4775f3c0918ed75f0503f5ed0a6" prot="public" static="no" strong="no">
        <type>int</type>
        <name>ErosionProfile</name>
        <qualifiedname>hmap::ErosionProfile</qualifiedname>
        <enumvalue id="namespacehmap_1a25a4e4775f3c0918ed75f0503f5ed0a6af8c94bc76e5d0a80a0ea8a6cda58832e" prot="public">
          <name>COSINE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a25a4e4775f3c0918ed75f0503f5ed0a6aa7fce3ae63e2de0b582f1af344e798fd" prot="public">
          <name>SAW_SHARP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a25a4e4775f3c0918ed75f0503f5ed0a6a18fba3380d9dbcb57378fbbbc522965c" prot="public">
          <name>SAW_SMOOTH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a25a4e4775f3c0918ed75f0503f5ed0a6aeb684e263530f3a9ebfd94816e8bf60c" prot="public">
          <name>SHARP_VALLEYS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a25a4e4775f3c0918ed75f0503f5ed0a6a8aa5067161e7490dd7a989f1b33cf57d" prot="public">
          <name>SQUARE_SMOOTH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a25a4e4775f3c0918ed75f0503f5ed0a6a3b4b1fb15aaf3888333a9d6958eae76a" prot="public">
          <name>TRIANGLE_GRENIER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a25a4e4775f3c0918ed75f0503f5ed0a6ac6ec19319c947a3b6484c42b69007636" prot="public">
          <name>TRIANGLE_SHARP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a25a4e4775f3c0918ed75f0503f5ed0a6af078cf93214e8043479eb5906a456880" prot="public">
          <name>TRIANGLE_SMOOTH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Procedural erosion angular profile type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/erosion.hpp" line="41" column="1" bodyfile="HighMap/include/highmap/erosion.hpp" bodystart="42" bodyend="51"/>
      </memberdef>
      <memberdef kind="enum" id="namespacehmap_1ac81a92060b89699c4eb9826495d87250" prot="public" static="no" strong="no">
        <type>int</type>
        <name>MeshType</name>
        <qualifiedname>hmap::MeshType</qualifiedname>
        <enumvalue id="namespacehmap_1ac81a92060b89699c4eb9826495d87250a64d964458b2812e59ec68af2ee53a8ae" prot="public">
          <name>TRI_OPTIMIZED</name>
          <briefdescription>
<para>Triangles with optimized Delaunay triangulation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ac81a92060b89699c4eb9826495d87250a68dced9d7f19cbd741feae05ad17ca14" prot="public">
          <name>TRI</name>
          <briefdescription>
<para>Triangle elements. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumeration for different mesh types. </para>
        </briefdescription>
        <detaileddescription>
<para>This enum defines the various types of mesh representations available. Each type corresponds to a different way of constructing and representing mesh data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/export.hpp" line="38" column="1" bodyfile="HighMap/include/highmap/export.hpp" bodystart="39" bodyend="42"/>
      </memberdef>
      <memberdef kind="enum" id="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871b" prot="public" static="no" strong="no">
        <type>int</type>
        <name>AssetExportFormat</name>
        <qualifiedname>hmap::AssetExportFormat</qualifiedname>
        <enumvalue id="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871baf10b3b024fd2327370b4c8c45f6ae310" prot="public">
          <name>_3DS</name>
          <briefdescription>
<para>Autodesk 3DS (legacy) - *.3ds. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871ba2c204df8ef8fa0dc1eb38995cad3bc0f" prot="public">
          <name>_3MF</name>
          <briefdescription>
<para>The 3MF-File-Format - *.3mf. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871ba332f2a26193b501879c33538df5f62e1" prot="public">
          <name>ASSBIN</name>
          <briefdescription>
<para>Assimp Binary - *.assbin. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871bab090c9d0931d522e426c4c3e852ab725" prot="public">
          <name>ASSXML</name>
          <briefdescription>
<para>Assxml Document - *.assxml. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871bab8e641a60a539570cba93410908467ee" prot="public">
          <name>FXBA</name>
          <briefdescription>
<para>Autodesk FBX (ascii) - *.fbx. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871ba006b1f81b483f6b3e26dd4a4668ee6dc" prot="public">
          <name>FBX</name>
          <briefdescription>
<para>Autodesk FBX (binary) - *.fbx. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871ba83492c49190ded5f6cffeab29a42e77d" prot="public">
          <name>COLLADA</name>
          <briefdescription>
<para>COLLADA - Digital Asset Exchange Schema - *.dae. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871ba6e6f01ac3d64e1cfe9d5257fdf3093df" prot="public">
          <name>X3D</name>
          <briefdescription>
<para>Extensible 3D - *.x3d. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871bab9d58e353a90ade3e7bb101339d747bc" prot="public">
          <name>GLTF</name>
          <briefdescription>
<para>GL Transmission Format - *.gltf. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871baa7c7a874805813166a55e3d5b75b620c" prot="public">
          <name>GLB</name>
          <briefdescription>
<para>GL Transmission Format (binary) - *.glb. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871ba3efd2608af3057bde072badad31513ac" prot="public">
          <name>GTLF2</name>
          <briefdescription>
<para>GL Transmission Format v. 2 - *.gltf. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871ba0766d2c2cb91f6e1e9a1b4dfcbffd562" prot="public">
          <name>GLB2</name>
          <briefdescription>
<para>GL Transmission Format v. 2 (binary) - *.glb. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871ba01b4a6af39216cb5ba424ef1bd4f66f7" prot="public">
          <name>PLY</name>
          <briefdescription>
<para>Stanford Polygon Library - *.ply. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871bae0ce3a88364042b24f65140c351fb6e8" prot="public">
          <name>PLYB</name>
          <briefdescription>
<para>Stanford Polygon Library (binary) - *.ply. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871ba95e433ab6ec047421d332a80d727fd29" prot="public">
          <name>STP</name>
          <briefdescription>
<para>Step Files - *.stp. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871ba255d4f7c6ccaff8e1dbba731b721c118" prot="public">
          <name>STL</name>
          <briefdescription>
<para>Stereolithography - *.stl. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871bac692212c784096efd35f54c700a039f6" prot="public">
          <name>STLB</name>
          <briefdescription>
<para>Stereolithography (binary) - *.stl. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871bad7b6b74b201392410caefcc4933811e0" prot="public">
          <name>OBJ</name>
          <briefdescription>
<para>Wavefront OBJ format - *.obj. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871baf1ff28325bd7912ef3267a9ed0049efe" prot="public">
          <name>OBJNOMTL</name>
          <briefdescription>
<para>Wavefront OBJ format without material file - *.obj. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumeration for asset export formats supported by Assimp. </para>
        </briefdescription>
        <detaileddescription>
<para>This enum lists the various file formats supported for asset export, as recognized by the Assimp library. Each format is associated with a specific file extension and usage. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/export.hpp" line="63" column="1" bodyfile="HighMap/include/highmap/export.hpp" bodystart="64" bodyend="84"/>
      </memberdef>
      <memberdef kind="enum" id="namespacehmap_1a9d00db2263b4b7b05245531c41c1b592" prot="public" static="no" strong="no">
        <type>int</type>
        <name>neighborhood</name>
        <qualifiedname>hmap::neighborhood</qualifiedname>
        <enumvalue id="namespacehmap_1a9d00db2263b4b7b05245531c41c1b592af1e94018e1eb59b107f1adfa66a97929" prot="public">
          <name>MOORE</name>
          <briefdescription>
<para>Moore neighborhood: includes all eight surrounding cells. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a9d00db2263b4b7b05245531c41c1b592a5814c956cc15b9764d586bb86912c364" prot="public">
          <name>VON_NEUMANN</name>
          <briefdescription>
<para>Von Neumann neighborhood: includes only the four. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a9d00db2263b4b7b05245531c41c1b592a5a41d1fe35db5ea65c515f217e5df2af" prot="public">
          <name>CROSS</name>
          <briefdescription>
<para>neighbors (N, S, E, W). </para>
          </briefdescription>
          <detaileddescription>
<para>Cross-shaped neighborhood: includes only the diagonal </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum representing different types of neighborhood lattices. </para>
        </briefdescription>
        <detaileddescription>
<para>This enumeration defines the different types of neighborhoods that can be used in a lattice-based system. These neighborhoods determine how cells or nodes are connected to their immediate surroundings. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/filters.hpp" line="31" column="1" bodyfile="HighMap/include/highmap/filters.hpp" bodystart="32" bodyend="39"/>
      </memberdef>
      <memberdef kind="enum" id="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195" prot="public" static="no" strong="no">
        <type>int</type>
        <name>NoiseType</name>
        <qualifiedname>hmap::NoiseType</qualifiedname>
        <enumvalue id="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a2f37fabff52c2f1b6c2e7e6aad77adbd" prot="public">
          <name>PARBERRY</name>
          <briefdescription>
<para>Parberry (Perlin variant) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" prot="public">
          <name>PERLIN</name>
          <briefdescription>
<para>Perlin. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a2497d2d20bd2b0a346a71aa1ff5c0be7" prot="public">
          <name>PERLIN_BILLOW</name>
          <briefdescription>
<para>Perlin billow. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195acb1550fb6b10f55ed2d30b10e7ab65bb" prot="public">
          <name>PERLIN_HALF</name>
          <briefdescription>
<para>Perlin half. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195ac5113a637d69eb3c549e6d561da167ed" prot="public">
          <name>SIMPLEX2</name>
          <briefdescription>
<para>OpenSimplex2. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a03f4fca6bab010831c1e90a0cce9dd80" prot="public">
          <name>SIMPLEX2S</name>
          <briefdescription>
<para>OpenSimplex2S. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195add03c6de4abc2f9a84778572c433f4ca" prot="public">
          <name>VALUE</name>
          <briefdescription>
<para>Value. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195ad0d2c07cd30954b90b955e9432df0752" prot="public">
          <name>VALUE_CUBIC</name>
          <briefdescription>
<para>Value (cubic) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a21c0228de087e15358fc1a394892ba52" prot="public">
          <name>VALUE_DELAUNAY</name>
          <briefdescription>
<para>Value (delaunay) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195ad0c8bb2f0b3f1b4ace48bcd5b7d159ed" prot="public">
          <name>VALUE_LINEAR</name>
          <briefdescription>
<para>Value (linear) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a035bda7c8c2179b47b9a766531c2e89e" prot="public">
          <name>WORLEY</name>
          <briefdescription>
<para>Worley. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a1d1ba101960a8a8234df2d16ac305d45" prot="public">
          <name>WORLEY_DOUBLE</name>
          <briefdescription>
<para>Worley double. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a803cca1f65b9596dbde7c54039773a39" prot="public">
          <name>WORLEY_VALUE</name>
          <briefdescription>
<para>Worley (cell value return) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumeration of various noise types used for procedural generation. </para>
        </briefdescription>
        <detaileddescription>
<para>This enumeration defines different types of noise algorithms that can be used for procedural generation tasks such as terrain generation, texture synthesis, and other applications where pseudo-random patterns are required. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/functions.hpp" line="44" column="1" bodyfile="HighMap/include/highmap/functions.hpp" bodystart="45" bodyend="59"/>
      </memberdef>
      <memberdef kind="enum" id="namespacehmap_1abc952321c99ec11d60b4037e3d27db9b" prot="public" static="no" strong="no">
        <type>int</type>
        <name>NormalMapBlendingMethod</name>
        <qualifiedname>hmap::NormalMapBlendingMethod</qualifiedname>
        <enumvalue id="namespacehmap_1abc952321c99ec11d60b4037e3d27db9bac248af7dd230247485e3c09a663cedd0" prot="public">
          <name>NMAP_LINEAR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1abc952321c99ec11d60b4037e3d27db9ba97d5a1740991179c436482de8c1c1f34" prot="public">
          <name>NMAP_DERIVATIVE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1abc952321c99ec11d60b4037e3d27db9ba25b053ebbd8db9d348737e6f343c61bf" prot="public">
          <name>NMAP_UDN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1abc952321c99ec11d60b4037e3d27db9ba54fd5928677cd19616ec52d6d59d4c60" prot="public">
          <name>NMAP_UNITY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1abc952321c99ec11d60b4037e3d27db9ba6ba5e07d11326f7567d533f169321e37" prot="public">
          <name>NMAP_WHITEOUT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="24" column="1" bodyfile="HighMap/include/highmap/heightmap.hpp" bodystart="25" bodyend="31"/>
      </memberdef>
      <memberdef kind="enum" id="namespacehmap_1ab36df744301ada377d4a3f3a34bca77f" prot="public" static="no" strong="no">
        <type>int</type>
        <name>TransformMode</name>
        <qualifiedname>hmap::TransformMode</qualifiedname>
        <enumvalue id="namespacehmap_1ab36df744301ada377d4a3f3a34bca77fac40707c2538151422af1c84dfd46252b" prot="public">
          <name>DISTRIBUTED</name>
          <briefdescription>
<para>Distributed across multiple processors or threads. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ab36df744301ada377d4a3f3a34bca77fabd8181f845a88e68d0653323c26ac4ac" prot="public">
          <name>SEQUENTIAL</name>
          <briefdescription>
<para>Performed sequentially in a single thread. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ab36df744301ada377d4a3f3a34bca77fadb0544f4a0452ffb75e88eff0b39095d" prot="public">
          <name>SINGLE_ARRAY</name>
          <briefdescription>
<para>Transformation is applied to a single array of data. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="41" column="1" bodyfile="HighMap/include/highmap/heightmap.hpp" bodystart="42" bodyend="46"/>
      </memberdef>
      <memberdef kind="enum" id="namespacehmap_1a46291bb4766800deacc1ce9b45a9ea6b" prot="public" static="no" strong="no">
        <type>int</type>
        <name>InterpolationMethod1D</name>
        <qualifiedname>hmap::InterpolationMethod1D</qualifiedname>
        <enumvalue id="namespacehmap_1a46291bb4766800deacc1ce9b45a9ea6ba55d2df97f3e8f051fb84453093374c96" prot="public">
          <name>AKIMA</name>
          <briefdescription>
<para>Akima interpolation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a46291bb4766800deacc1ce9b45a9ea6bac3c354b92a241b06cbe768faa834b85e" prot="public">
          <name>AKIMA_PERIODIC</name>
          <briefdescription>
<para>Akima periodic interpolation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a46291bb4766800deacc1ce9b45a9ea6ba212e7c8d91a9697cccd7df7d006a5547" prot="public">
          <name>CUBIC</name>
          <briefdescription>
<para>Cubic spline interpolation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a46291bb4766800deacc1ce9b45a9ea6ba842713d3dc1b52f8b51bb2eaeb8bcf7e" prot="public">
          <name>CUBIC_PERIODIC</name>
          <briefdescription>
<para>Cubic spline periodic interpolation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a46291bb4766800deacc1ce9b45a9ea6ba26ec6481025765e03b9c750137bd9d84" prot="public">
          <name>LINEAR</name>
          <briefdescription>
<para>Linear interpolation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a46291bb4766800deacc1ce9b45a9ea6ba2c387e5d1f5342e28fa6a3132e9b461d" prot="public">
          <name>POLYNOMIAL</name>
          <briefdescription>
<para>Polynomial interpolation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a46291bb4766800deacc1ce9b45a9ea6ba9c7fc85c23ace48f52c365aae11b6e0b" prot="public">
          <name>STEFFEN</name>
          <briefdescription>
<para>Steffen interpolation (monotonic) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumeration of the available 1D interpolation methods. </para>
        </briefdescription>
        <detaileddescription>
<para>This enumeration defines the different types of interpolation methods that can be used with the <computeroutput><ref refid="classhmap_1_1Interpolator1D" kindref="compound">Interpolator1D</ref></computeroutput> class. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/interpolate1d.hpp" line="35" column="1" bodyfile="HighMap/include/highmap/interpolate1d.hpp" bodystart="36" bodyend="44"/>
      </memberdef>
      <memberdef kind="enum" id="namespacehmap_1a5bfab5d68e822294ff90fde21b85f581" prot="public" static="no" strong="no">
        <type>int</type>
        <name>InterpolationMethod2D</name>
        <qualifiedname>hmap::InterpolationMethod2D</qualifiedname>
        <enumvalue id="namespacehmap_1a5bfab5d68e822294ff90fde21b85f581a69ac444964e6a94c448c395c8f82b135" prot="public">
          <name>DELAUNAY</name>
          <briefdescription>
<para>Delaunay triangulation method for 2D interpolation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a5bfab5d68e822294ff90fde21b85f581a7ab263bff6c11b7d35a8c1f1caac8cc2" prot="public">
          <name>NEAREST</name>
          <briefdescription>
<para>Nearest point method for 2D interpolation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumeration of 2D interpolation methods. </para>
        </briefdescription>
        <detaileddescription>
<para>This enum defines the available methods for 2D interpolation, such as Delaunay triangulation and nearest point interpolation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/interpolate2d.hpp" line="33" column="1" bodyfile="HighMap/include/highmap/interpolate2d.hpp" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="enum" id="namespacehmap_1aa78bf111867e13c63d8bd2ec005ad6c8" prot="public" static="no" strong="no">
        <type>int</type>
        <name>InterpolationMethodCurve</name>
        <qualifiedname>hmap::InterpolationMethodCurve</qualifiedname>
        <enumvalue id="namespacehmap_1aa78bf111867e13c63d8bd2ec005ad6c8ac56fe3b521e08a04c926e75d7fba28f8" prot="public">
          <name>BEZIER</name>
          <briefdescription>
<para>Bezier curve interpolation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1aa78bf111867e13c63d8bd2ec005ad6c8a60f62532461a103e7680bba841871635" prot="public">
          <name>BSPLINE</name>
          <briefdescription>
<para>B-spline interpolation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1aa78bf111867e13c63d8bd2ec005ad6c8ade9a39922b4750c41f14969a3686fc29" prot="public">
          <name>CATMULLROM</name>
          <briefdescription>
<para>Catmull-Rom spline interpolation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1aa78bf111867e13c63d8bd2ec005ad6c8a29d7faf9b49a89c11c9bc3e3f2190e23" prot="public">
          <name>DECASTELJAU</name>
          <briefdescription>
<para>De Casteljau algorithm for Bézier curve computation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1aa78bf111867e13c63d8bd2ec005ad6c8a90555eaf70e5d0c043f8bc5bf16338df" prot="public">
          <name>POINTS_LERP</name>
          <briefdescription>
<para>Linear interpolation between points. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumeration for specifying the interpolation method for curves. </para>
        </briefdescription>
        <detaileddescription>
<para>Defines the available methods for curve interpolation:<itemizedlist>
<listitem><para><computeroutput>BEZIER</computeroutput>: Requires the number of points to be a multiple of 4 minus 1, like (4 * n - 1).</para>
</listitem><listitem><para><computeroutput>BSPLINE</computeroutput>: B-spline interpolation method.</para>
</listitem><listitem><para><computeroutput>CATMULLROM</computeroutput>: Catmull-Rom spline interpolation method.</para>
</listitem><listitem><para><computeroutput>DECASTELJAU</computeroutput>: Uses De Casteljau&apos;s algorithm to compute Bézier curves at a given parameter. This is an alternative to the standard Bézier curve method.</para>
</listitem><listitem><para><computeroutput>POINTS_LERP</computeroutput>: Linear interpolation between points. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/interpolate_curve.hpp" line="32" column="1" bodyfile="HighMap/include/highmap/interpolate_curve.hpp" bodystart="33" bodyend="39"/>
      </memberdef>
      <memberdef kind="enum" id="namespacehmap_1a4b6f135c6e81d313ca54ae1efac5f2c9" prot="public" static="no" strong="no">
        <type>int</type>
        <name>KernelType</name>
        <qualifiedname>hmap::KernelType</qualifiedname>
        <enumvalue id="namespacehmap_1a4b6f135c6e81d313ca54ae1efac5f2c9a77e92279e9a89de241e361bd74b8803a" prot="public">
          <name>BIWEIGHT</name>
          <briefdescription>
<para>Biweight kernel function. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a4b6f135c6e81d313ca54ae1efac5f2c9ac3a721c2d521e171c529d24f3b768803" prot="public">
          <name>CUBIC_PULSE</name>
          <briefdescription>
<para>Cubic pulse kernel function. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a4b6f135c6e81d313ca54ae1efac5f2c9af76c60e345bf176e74af026ed87eb030" prot="public">
          <name>CONE</name>
          <briefdescription>
<para>Cone kernel function. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a4b6f135c6e81d313ca54ae1efac5f2c9ac140897e531cacd604bec544a49f7ca2" prot="public">
          <name>CONE_SMOOTH</name>
          <briefdescription>
<para>Smooth cone kernel function. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a4b6f135c6e81d313ca54ae1efac5f2c9a52c31358178f16aaf1e9148aa9e1c4f6" prot="public">
          <name>DISK</name>
          <briefdescription>
<para>Disk kernel function. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a4b6f135c6e81d313ca54ae1efac5f2c9adca1c57725ab84b424723316de5ba3dc" prot="public">
          <name>LORENTZIAN</name>
          <briefdescription>
<para>Lorentzian (Cauchy) kernel function. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a4b6f135c6e81d313ca54ae1efac5f2c9a483c1cdf57c344c139e7aeeb826120b7" prot="public">
          <name>SMOOTH_COSINE</name>
          <briefdescription>
<para>Smooth cosine kernel function. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a4b6f135c6e81d313ca54ae1efac5f2c9aa90e813d22c88c29e9effe934ce6149d" prot="public">
          <name>SQUARE</name>
          <briefdescription>
<para>Square kernel function. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a4b6f135c6e81d313ca54ae1efac5f2c9abd845bef8f2959d8d9e7355aa9c44d86" prot="public">
          <name>TRICUBE</name>
          <briefdescription>
<para>Tricube kernel function. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumeration for different kernel functions used in various algorithms. </para>
        </briefdescription>
        <detaileddescription>
<para>This enumeration defines the types of kernel functions that can be used for smoothing, interpolation, and other operations requiring a kernel. Each kernel type represents a specific mathematical function used to weight data points based on their distance from a central point.</para>
<para>These kernels are used in algorithms that require weighting functions, such as kernel density estimation, interpolation, and data smoothing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/kernels.hpp" line="35" column="1" bodyfile="HighMap/include/highmap/kernels.hpp" bodystart="36" bodyend="46"/>
      </memberdef>
      <memberdef kind="enum" id="namespacehmap_1a670f50d6c08ecd639d42db9c75a5273a" prot="public" static="no" strong="no">
        <type>int</type>
        <name>DistanceFunction</name>
        <qualifiedname>hmap::DistanceFunction</qualifiedname>
        <enumvalue id="namespacehmap_1a670f50d6c08ecd639d42db9c75a5273aa2a9fc119d00df5ec5de1c13a006921f2" prot="public">
          <name>CHEBYSHEV</name>
          <briefdescription>
<para>Chebyshev. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a670f50d6c08ecd639d42db9c75a5273aab5937b3ae1efaa098f517fe7c761b781" prot="public">
          <name>EUCLIDIAN</name>
          <briefdescription>
<para>Euclidian. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a670f50d6c08ecd639d42db9c75a5273aa439184a2066b21b9ba0883b29efabfec" prot="public">
          <name>EUCLISHEV</name>
          <briefdescription>
<para>Euclidian and Chebyshev mix. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a670f50d6c08ecd639d42db9c75a5273aad250b63dea876f47d2b0dab1edf01b63" prot="public">
          <name>MANHATTAN</name>
          <briefdescription>
<para>Manhattan. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Distance function type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/math.hpp" line="42" column="1" bodyfile="HighMap/include/highmap/math.hpp" bodystart="43" bodyend="48"/>
      </memberdef>
      <memberdef kind="enum" id="namespacehmap_1a67d6620c147710ebb09b64f0f738241a" prot="public" static="no" strong="no">
        <type>int</type>
        <name>PhasorProfile</name>
        <qualifiedname>hmap::PhasorProfile</qualifiedname>
        <enumvalue id="namespacehmap_1a67d6620c147710ebb09b64f0f738241aad8f217eb3ab016f46b02f118cfaeadab" prot="public">
          <name>COSINE_BULKY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a67d6620c147710ebb09b64f0f738241aa2bfa021bd5f24ce3410477d209f3e588" prot="public">
          <name>COSINE_PEAKY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a67d6620c147710ebb09b64f0f738241aa096fe4956a67b70c9db140472af0b6b0" prot="public">
          <name>COSINE_SQUARE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a67d6620c147710ebb09b64f0f738241aa29de9f23976831ac056abef76c1f8d2e" prot="public">
          <name>COSINE_STD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a67d6620c147710ebb09b64f0f738241aa1ee22d304b9b93cd76da1fbc9d32a75a" prot="public">
          <name>TRIANGLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Phasor angular profile type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/math.hpp" line="53" column="1" bodyfile="HighMap/include/highmap/math.hpp" bodystart="54" bodyend="60"/>
      </memberdef>
      <memberdef kind="enum" id="namespacehmap_1a9e2493cec1a67b3140691e617ddc925a" prot="public" static="no" strong="no">
        <type>int</type>
        <name>DistanceTransformType</name>
        <qualifiedname>hmap::DistanceTransformType</qualifiedname>
        <enumvalue id="namespacehmap_1a9e2493cec1a67b3140691e617ddc925aa109b04de7ca555c0e4d17629e55e7ee3" prot="public">
          <name>DT_EXACT</name>
          <briefdescription>
<para>Exact distance transform. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a9e2493cec1a67b3140691e617ddc925aa3b8bce8feaa179b9a546bbbe28c1d44a" prot="public">
          <name>DT_APPROX</name>
          <briefdescription>
<para>Approximate distance transform. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a9e2493cec1a67b3140691e617ddc925aae4b14640395ecd7333bea8838ea9dda1" prot="public">
          <name>DT_MANHATTAN</name>
          <briefdescription>
<para>Manhattan distance transform. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumeration for different types of distance transforms. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/morphology.hpp" line="28" column="1" bodyfile="HighMap/include/highmap/morphology.hpp" bodystart="29" bodyend="33"/>
      </memberdef>
      <memberdef kind="enum" id="namespacehmap_1ae84abe9052dcb9c88f3c50716addfe44" prot="public" static="no" strong="no">
        <type>int</type>
        <name>pyramid_transform_support</name>
        <qualifiedname>hmap::pyramid_transform_support</qualifiedname>
        <enumvalue id="namespacehmap_1ae84abe9052dcb9c88f3c50716addfe44a335e6fca97d53bfb6cc3a55c566f1dd7" prot="public">
          <name>FULL</name>
          <briefdescription>
<para>Complete field (sum of low and high pass) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ae84abe9052dcb9c88f3c50716addfe44ab02b262c560a970e4f082d4edee376fb" prot="public">
          <name>LOWPASS_ONLY</name>
          <briefdescription>
<para>Low pass component only. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1ae84abe9052dcb9c88f3c50716addfe44a23fde294eee1dbe59e1c6bb2bc0d5132" prot="public">
          <name>HIGHPASS_ONLY</name>
          <briefdescription>
<para>High pass component only. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Define on which part of the pyramid component the transform function should be applied. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/multiscale/pyramid.hpp" line="28" column="1" bodyfile="HighMap/include/highmap/multiscale/pyramid.hpp" bodystart="29" bodyend="33"/>
      </memberdef>
      <memberdef kind="enum" id="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2f" prot="public" static="no" strong="no">
        <type>int</type>
        <name>VoronoiReturnType</name>
        <qualifiedname>hmap::VoronoiReturnType</qualifiedname>
        <enumvalue id="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fa3e5996ed4314058911435c50bc95e1c2" prot="public">
          <name>F1_SQUARED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2faaf0f73f1150aae0a8affdab8b5f38eca" prot="public">
          <name>F2_SQUARED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fab48ce3afc4f70a5130a1fb10541e2fa2" prot="public">
          <name>F1TF2_SQUARED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fae4e408bd5c4ece5cd6bc7f3a439d87e3" prot="public">
          <name>F1DF2_SQUARED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fac73478836b3a989e9325f861fe2059e2" prot="public">
          <name>F2MF1_SQUARED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2faf044e64b09fbae8b02b6c44f2d69925f" prot="public">
          <name>EDGE_DISTANCE_EXP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fa1d0f88509ad557940f07cd8c5d721820" prot="public">
          <name>EDGE_DISTANCE_SQUARED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fab0d27777279264cbe2a77d4a241e6f55" prot="public">
          <name>CONSTANT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehmap_1a8e3756915e28aa80cec2190043cc8c2fa85f252453c9797b7e00cc96cb7147537" prot="public">
          <name>CONSTANT_F2MF1_SQUARED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/primitives.hpp" line="30" column="1" bodyfile="HighMap/include/highmap/primitives.hpp" bodystart="31" bodyend="41"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="namespacehmap_1a88ca6ccdcae8eba404dc38abac40991d" prot="public" static="yes" mutable="no">
        <type>std::map&lt; <ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369" kindref="member">Cmap</ref>, std::string &gt;</type>
        <definition>std::map&lt;Cmap, std::string&gt; hmap::cmap_as_string</definition>
        <argsstring></argsstring>
        <name>cmap_as_string</name>
        <qualifiedname>hmap::cmap_as_string</qualifiedname>
        <initializer>= {
    {<ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a4eb53d94f58e93c3bdb554d8cca7f306" kindref="member">BONE</ref>, &quot;bone&quot;},
    {<ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">GRAY</ref>, &quot;gray&quot;},
    {<ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a320107cf3138d908a78d3c6d97705717" kindref="member">HOT</ref>, &quot;hot&quot;},
    {<ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">INFERNO</ref>, &quot;inferno&quot;},
    {<ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">JET</ref>, &quot;jet&quot;},
    {<ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a744ead0b170889e33126895264f1af2c" kindref="member">MAGMA</ref>, &quot;magma&quot;},
    {<ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369ae91cb25d4df330517ac69b5f0f2c3e0c" kindref="member">NIPY_SPECTRAL</ref>, &quot;nipy_spectral&quot;},
    {<ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a33b23b52304fbaecc91bdc4090afbd20" kindref="member">SEISMIC</ref>, &quot;seismic&quot;},
    {<ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">TERRAIN</ref>, &quot;terrain&quot;},
    {<ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a555dbf2f8e5b83b9117850a8938e65f9" kindref="member">TURBO</ref>, &quot;turbo&quot;},
    {<ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">VIRIDIS</ref>, &quot;viridis&quot;},
    {<ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a3cd98c63d7e70c2bcc14d9c9911bdc55" kindref="member">WHITE_UNIFORM</ref>, &quot;white_uniform&quot;}}</initializer>
        <briefdescription>
<para>Mapping between the <computeroutput>Cmap</computeroutput> enum and its corresponding lowercase string representation. </para>
        </briefdescription>
        <detaileddescription>
<para>This <computeroutput>std::map</computeroutput> provides a lookup table that associates each colormap defined in the <computeroutput>Cmap</computeroutput> enum with its plain text name in lowercase. This mapping allows for easy conversion between the enum values and their lowercase string equivalents, which can be useful for debugging, logging, or displaying the colormap names in a user interface.</para>
<para>Example usage: <programlisting><codeline><highlight class="normal"><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369" kindref="member">Cmap</ref><sp/>selected_cmap<sp/>=<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">Cmap::JET</ref>;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Selected<sp/>colormap:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cmap_as_string[selected_cmap]<sp/>&lt;&lt;</highlight></codeline>
<codeline><highlight class="normal">std::endl;</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/colormaps.hpp" line="112" column="17" bodyfile="HighMap/include/highmap/colormaps.hpp" bodystart="112" bodyend="124"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehmap_1abba6b48f25191652ca4a9d643bb6542b" prot="public" static="yes" mutable="no">
        <type>std::map&lt; <ref refid="namespacehmap_1ac81a92060b89699c4eb9826495d87250" kindref="member">MeshType</ref>, std::string &gt;</type>
        <definition>std::map&lt;MeshType, std::string&gt; hmap::mesh_type_as_string</definition>
        <argsstring></argsstring>
        <name>mesh_type_as_string</name>
        <qualifiedname>hmap::mesh_type_as_string</qualifiedname>
        <initializer>= {
    {<ref refid="namespacehmap_1ac81a92060b89699c4eb9826495d87250a64d964458b2812e59ec68af2ee53a8ae" kindref="member">TRI_OPTIMIZED</ref>, &quot;triangles (optimized)&quot;},
    {TRI, &quot;triangles&quot;}}</initializer>
        <briefdescription>
<para>Mapping between <computeroutput>MeshType</computeroutput> enum values and their plain text descriptions. </para>
        </briefdescription>
        <detaileddescription>
<para>This static map provides a conversion between <computeroutput>MeshType</computeroutput> enum values and their corresponding human-readable descriptions. It is used for displaying or logging the mesh type in a human-friendly format. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/export.hpp" line="52" column="17" bodyfile="HighMap/include/highmap/export.hpp" bodystart="52" bodyend="54"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehmap_1a53ee5c5907cfb58acb8f30d94f536b21" prot="public" static="yes" mutable="no">
        <type>std::map&lt; <ref refid="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871b" kindref="member">AssetExportFormat</ref>, std::vector&lt; std::string &gt; &gt;</type>
        <definition>std::map&lt;AssetExportFormat, std::vector&lt;std::string&gt; &gt; hmap::asset_export_format_as_string</definition>
        <argsstring></argsstring>
        <name>asset_export_format_as_string</name>
        <qualifiedname>hmap::asset_export_format_as_string</qualifiedname>
        <initializer>= {
	{<ref refid="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871baf10b3b024fd2327370b4c8c45f6ae310" kindref="member">_3DS</ref>, {&quot;Autodesk 3DS (legacy) - *.3ds&quot;, &quot;3ds&quot;, &quot;3ds&quot;}},
	{<ref refid="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871ba2c204df8ef8fa0dc1eb38995cad3bc0f" kindref="member">_3MF</ref>, {&quot;The 3MF-File-Format - *.3mf&quot;, &quot;3mf&quot;, &quot;3mf&quot;}},
	{<ref refid="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871ba332f2a26193b501879c33538df5f62e1" kindref="member">ASSBIN</ref>, {&quot;Assimp Binary - *.assbin&quot;, &quot;assbin&quot;, &quot;assbin&quot;}},
	{<ref refid="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871bab090c9d0931d522e426c4c3e852ab725" kindref="member">ASSXML</ref>, {&quot;Assxml Document - *.assxml&quot;, &quot;assxml&quot;, &quot;assxml&quot;}},
	{<ref refid="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871bab8e641a60a539570cba93410908467ee" kindref="member">FXBA</ref>, {&quot;Autodesk <ref refid="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871ba006b1f81b483f6b3e26dd4a4668ee6dc" kindref="member">FBX</ref> (ascii) - *.fbx&quot;, &quot;fbxa&quot;, &quot;fbx&quot;}},
	{<ref refid="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871ba006b1f81b483f6b3e26dd4a4668ee6dc" kindref="member">FBX</ref>, {&quot;Autodesk <ref refid="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871ba006b1f81b483f6b3e26dd4a4668ee6dc" kindref="member">FBX</ref> (binary) - *.fbx&quot;, &quot;fbx&quot;, &quot;fbx&quot;}},
	{<ref refid="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871ba83492c49190ded5f6cffeab29a42e77d" kindref="member">COLLADA</ref>, {&quot;COLLADA - Digital Asset Exchange Schema - *.dae&quot;, &quot;collada&quot;, &quot;dae&quot;}},
	{<ref refid="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871ba6e6f01ac3d64e1cfe9d5257fdf3093df" kindref="member">X3D</ref>, {&quot;Extensible 3D - *.x3d&quot;, &quot;x3d&quot;, &quot;x3d&quot;}},
	{<ref refid="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871bab9d58e353a90ade3e7bb101339d747bc" kindref="member">GLTF</ref>, {&quot;GL Transmission Format - *.gltf&quot;, &quot;gltf&quot;, &quot;gltf&quot;}},
	{<ref refid="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871baa7c7a874805813166a55e3d5b75b620c" kindref="member">GLB</ref>, {&quot;GL Transmission Format (binary) - *.glb&quot;, &quot;glb&quot;, &quot;glb&quot;}},
	{<ref refid="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871ba3efd2608af3057bde072badad31513ac" kindref="member">GTLF2</ref>, {&quot;GL Transmission Format v. 2 - *.gltf&quot;, &quot;gltf2&quot;, &quot;gltf&quot;}},
	{<ref refid="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871ba0766d2c2cb91f6e1e9a1b4dfcbffd562" kindref="member">GLB2</ref>, {&quot;GL Transmission Format v. 2 (binary) - *.glb&quot;, &quot;glb2&quot;, &quot;glb&quot;}},
	{<ref refid="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871ba01b4a6af39216cb5ba424ef1bd4f66f7" kindref="member">PLY</ref>, {&quot;Stanford Polygon Library - *.ply&quot;, &quot;ply&quot;, &quot;ply&quot;}},
	{<ref refid="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871bae0ce3a88364042b24f65140c351fb6e8" kindref="member">PLYB</ref>, {&quot;Stanford Polygon Library (binary) - *.ply&quot;, &quot;plyb&quot;, &quot;ply&quot;}},
	{<ref refid="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871ba95e433ab6ec047421d332a80d727fd29" kindref="member">STP</ref>, {&quot;Step Files - *.stp&quot;, &quot;stp&quot;, &quot;stp&quot;}},
	{<ref refid="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871ba255d4f7c6ccaff8e1dbba731b721c118" kindref="member">STL</ref>, {&quot;Stereolithography - *.stl&quot;, &quot;stl&quot;, &quot;stl&quot;}},
	{<ref refid="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871bac692212c784096efd35f54c700a039f6" kindref="member">STLB</ref>, {&quot;Stereolithography (binary) - *.stl&quot;, &quot;stlb&quot;, &quot;stl&quot;}},
	{<ref refid="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871bad7b6b74b201392410caefcc4933811e0" kindref="member">OBJ</ref>, {&quot;Wavefront <ref refid="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871bad7b6b74b201392410caefcc4933811e0" kindref="member">OBJ</ref> format - *.obj&quot;, &quot;obj&quot;, &quot;obj&quot;}},
	{<ref refid="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871baf1ff28325bd7912ef3267a9ed0049efe" kindref="member">OBJNOMTL</ref>, {&quot;Wavefront <ref refid="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871bad7b6b74b201392410caefcc4933811e0" kindref="member">OBJ</ref> format without material file - *.obj&quot;, &quot;objnomtl&quot;, &quot;obj&quot;}},
}</initializer>
        <briefdescription>
<para>Mapping between asset export formats and their plain text representations. </para>
        </briefdescription>
        <detaileddescription>
<para>This static map provides a mapping between <computeroutput>AssetExportFormat</computeroutput> enumeration values and their corresponding plain text descriptions. Each entry includes a human-readable format description, the format ID used by the Assimp library, and the associated file extension. This mapping is used for converting between enum values and their string representations in various export scenarios.</para>
<para>The format is structured as follows:<itemizedlist>
<listitem><para>Human-readable description of the format.</para>
</listitem><listitem><para>Format ID as recognized by the Assimp library.</para>
</listitem><listitem><para>File extension commonly used for that format.</para>
</listitem></itemizedlist>
</para>
<para><bold>Note</bold>: For more details on the Assimp library formats, refer to <ulink url="https://github.com/assimp/assimp/issues/2481">Assimp Issue #2481</ulink>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/export.hpp" line="107" column="1" bodyfile="HighMap/include/highmap/export.hpp" bodystart="107" bodyend="127"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehmap_1aed9d644531f4c1132298258bfb9dbf36" prot="public" static="yes" mutable="no">
        <type>std::map&lt; std::string, int &gt;</type>
        <definition>std::map&lt;std::string, int&gt; hmap::normal_map_blending_method_as_string</definition>
        <argsstring></argsstring>
        <name>normal_map_blending_method_as_string</name>
        <qualifiedname>hmap::normal_map_blending_method_as_string</qualifiedname>
        <initializer>= {
    {&quot;Linear&quot;, <ref refid="namespacehmap_1abc952321c99ec11d60b4037e3d27db9bac248af7dd230247485e3c09a663cedd0" kindref="member">NMAP_LINEAR</ref>},
    {&quot;Partial derivative&quot;, <ref refid="namespacehmap_1abc952321c99ec11d60b4037e3d27db9ba97d5a1740991179c436482de8c1c1f34" kindref="member">NMAP_DERIVATIVE</ref>},
    {&quot;Unreal Developer Network&quot;, <ref refid="namespacehmap_1abc952321c99ec11d60b4037e3d27db9ba25b053ebbd8db9d348737e6f343c61bf" kindref="member">NMAP_UDN</ref>},
    {&quot;Unity&quot;, <ref refid="namespacehmap_1abc952321c99ec11d60b4037e3d27db9ba54fd5928677cd19616ec52d6d59d4c60" kindref="member">NMAP_UNITY</ref>},
    {&quot;Whiteout&quot;, <ref refid="namespacehmap_1abc952321c99ec11d60b4037e3d27db9ba6ba5e07d11326f7567d533f169321e37" kindref="member">NMAP_WHITEOUT</ref>},
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="33" column="17" bodyfile="HighMap/include/highmap/heightmap.hpp" bodystart="33" bodyend="39"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehmap_1a5dfb33caf527f7b85895937c1e05286b" prot="public" static="yes" mutable="no">
        <type>std::map&lt; std::string, int &gt;</type>
        <definition>std::map&lt;std::string, int&gt; hmap::transform_mode_as_string</definition>
        <argsstring></argsstring>
        <name>transform_mode_as_string</name>
        <qualifiedname>hmap::transform_mode_as_string</qualifiedname>
        <initializer>= {
    {&quot;Distributed&quot;, <ref refid="namespacehmap_1ab36df744301ada377d4a3f3a34bca77fac40707c2538151422af1c84dfd46252b" kindref="member">DISTRIBUTED</ref>},
    {&quot;Sequential&quot;, <ref refid="namespacehmap_1ab36df744301ada377d4a3f3a34bca77fabd8181f845a88e68d0653323c26ac4ac" kindref="member">SEQUENTIAL</ref>},
    {&quot;Single array&quot;, <ref refid="namespacehmap_1ab36df744301ada377d4a3f3a34bca77fadb0544f4a0452ffb75e88eff0b39095d" kindref="member">SINGLE_ARRAY</ref>},
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="48" column="17" bodyfile="HighMap/include/highmap/heightmap.hpp" bodystart="48" bodyend="52"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehmap_1af6d8f4ad58c37bccc50d1f8227c6999d" prot="public" static="yes" mutable="no">
        <type>std::map&lt; <ref refid="namespacehmap_1a5bfab5d68e822294ff90fde21b85f581" kindref="member">InterpolationMethod2D</ref>, std::string &gt;</type>
        <definition>std::map&lt;InterpolationMethod2D, std::string&gt; hmap::interpolation_method_2d_as_string</definition>
        <argsstring></argsstring>
        <name>interpolation_method_2d_as_string</name>
        <qualifiedname>hmap::interpolation_method_2d_as_string</qualifiedname>
        <initializer>= {{<ref refid="namespacehmap_1a5bfab5d68e822294ff90fde21b85f581a69ac444964e6a94c448c395c8f82b135" kindref="member">DELAUNAY</ref>, &quot;Delaunay linear&quot;},
                                         {<ref refid="namespacehmap_1a5bfab5d68e822294ff90fde21b85f581a7ab263bff6c11b7d35a8c1f1caac8cc2" kindref="member">NEAREST</ref>, &quot;nearest neighbor&quot;}}</initializer>
        <briefdescription>
<para>A map associating 2D interpolation methods with their string representations. </para>
        </briefdescription>
        <detaileddescription>
<para>This static map provides a human-readable string for each interpolation method defined in the <ref refid="namespacehmap_1a5bfab5d68e822294ff90fde21b85f581" kindref="member">InterpolationMethod2D</ref> enum. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/interpolate2d.hpp" line="47" column="5" bodyfile="HighMap/include/highmap/interpolate2d.hpp" bodystart="47" bodyend="48"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespacehmap_1ad37e39413754484dfb342ffbfbe75c2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structhmap_1_1Vec3" kindref="compound">Vec3</ref>&lt; T &gt;</type>
        <definition>Vec3&lt; T &gt; hmap::normalized_vec3</definition>
        <argsstring>(T x, T y, T z)</argsstring>
        <name>normalized_vec3</name>
        <qualifiedname>hmap::normalized_vec3</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T</type>
          <declname>y</declname>
        </param>
        <param>
          <type>T</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Constructs a normalized 3D vector. </para>
        </briefdescription>
        <detaileddescription>
<para>This function takes three components of a vector (x, y, z), creates a Vec3&lt;T&gt; object, normalizes it, and returns the normalized vector.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The data type of the vector components (e.g., float, double, etc.). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The x-component of the vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The y-component of the vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The z-component of the vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vec3&lt;T&gt; A normalized 3D vector of type T. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/algebra.hpp" line="882" column="18" bodyfile="HighMap/include/highmap/algebra.hpp" bodystart="882" bodyend="887"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a457cc8fe8645d43d9c5a2aea80268147" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::cv_mat_to_array</definition>
        <argsstring>(const cv::Mat &amp;mat, bool remap_values=true)</argsstring>
        <name>cv_mat_to_array</name>
        <qualifiedname>hmap::cv_mat_to_array</qualifiedname>
        <param>
          <type>const cv::Mat &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>remap_values</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Converts an OpenCV <computeroutput>cv::Mat</computeroutput> to a 2D <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> with optional value scaling to [0, 1]. </para>
        </briefdescription>
        <detaileddescription>
<para>This function converts an OpenCV <computeroutput>cv::Mat</computeroutput> object into a 2D <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput>. The conversion process creates a new <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> object and copies the data from the <computeroutput>cv::Mat</computeroutput> into this <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput>. If the <computeroutput>remap_values</computeroutput> parameter is set to <computeroutput>true</computeroutput> (the default), the values in the resulting <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> will be scaled to the interval [0, 1]. If set to <computeroutput>false</computeroutput>, the values will be copied directly without scaling. Modifications to the <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> will not affect the original <computeroutput>cv::Mat</computeroutput> and vice versa.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the OpenCV <computeroutput>cv::Mat</computeroutput> object that will be converted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>remap_values</parametername>
</parameternamelist>
<parameterdescription>
<para>A boolean flag indicating whether to scale the values to [0, 1]. If <computeroutput>true</computeroutput>, the values will be scaled; if <computeroutput>false</computeroutput>, they will be copied directly. Default is <computeroutput>true</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A 2D <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> object containing a copy of the data from the input <computeroutput>cv::Mat</computeroutput>, with optional scaling to the interval [0, 1].</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_cv_mat_to_array.cpp"></programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/array/opencv_wrapper.cpp" line="26" column="7" bodyfile="HighMap/src/array/opencv_wrapper.cpp" bodystart="26" bodyend="46" declfile="HighMap/include/highmap/array.hpp" declline="940" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aa0b0e92bd8fa6fdc51ccb39f7a382e92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::alter_elevation</definition>
        <argsstring>(Array &amp;array, const Cloud &amp;cloud, int ir, float footprint_ratio=1.f, Vec2&lt; float &gt; shift={0.f, 0.f}, Vec2&lt; float &gt; scale={1.f, 1.f})</argsstring>
        <name>alter_elevation</name>
        <qualifiedname>hmap::alter_elevation</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Cloud" kindref="compound">Cloud</ref> &amp;</type>
          <declname>cloud</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>float</type>
          <declname>footprint_ratio</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>shift</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>scale</declname>
          <defval>{1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Point-wise alteration: locally enforce a new elevation value while maintaining the &apos;shape&apos; of the heightmap. </para>
        </briefdescription>
        <detaileddescription>
<para>This function modifies the elevation values in the input array based on a cloud of points that specify the coordinates and variations for the alterations. The function ensures that the shape of the heightmap is preserved while applying these local changes.</para>
<para>The alteration is performed using a kernel with a minimal radius (<computeroutput>ir</computeroutput>) and the intensity of the alterations is scaled based on the <computeroutput>footprint_ratio</computeroutput>. The <computeroutput>shift</computeroutput> parameter allows for introducing noise or offset in the alteration process, and the <computeroutput>scale</computeroutput> parameter is used to adjust the domain of the alteration.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap to be altered. The elevation values in this array will be adjusted according to the cloud data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cloud</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Cloud" kindref="compound">Cloud</ref> object that defines the coordinates and elevation variations for the alterations. This object provides the necessary data for applying the local changes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Alteration kernel minimal radius. This parameter defines the minimum size of the kernel used for local alterations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>footprint_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Defines how the radius of the alteration scales with the variation intensity. A higher ratio results in a larger footprint of the alterations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shift</parametername>
</parameternamelist>
<parameterdescription>
<para>Noise shift specified as a vector {xs, ys} for each direction, relative to a unit domain. This allows for adding random offsets to the alteration process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain scaling in the range [0, 1]. This parameter adjusts the domain size over which the alteration is applied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_alter_elevation.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z0<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>modification<sp/>point<sp/>(x,<sp/>y)<sp/>in<sp/>[0,<sp/>1]x[0,<sp/>1]<sp/>and<sp/>a<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>corresponding<sp/>to<sp/>the<sp/>relative<sp/>elevation<sp/>modification</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Cloud" kindref="compound">hmap::Cloud</ref><sp/>cloud<sp/>=<sp/><ref refid="classhmap_1_1Cloud" kindref="compound">hmap::Cloud</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cloud.<ref refid="classhmap_1_1Cloud_1ab1149531131111567d9f8760162d90ff" kindref="member">add_point</ref>(<ref refid="classhmap_1_1Point" kindref="compound">hmap::Point</ref>(0.2f,<sp/>0.5f,<sp/>-1.f));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cloud.<ref refid="classhmap_1_1Cloud_1ab1149531131111567d9f8760162d90ff" kindref="member">add_point</ref>(<ref refid="classhmap_1_1Point" kindref="compound">hmap::Point</ref>(0.6f,<sp/>0.2f,<sp/>1.f));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/>z0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1aa0b0e92bd8fa6fdc51ccb39f7a382e92" kindref="member">hmap::alter_elevation</ref>(z1,<sp/>cloud,<sp/>32,<sp/>2.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z1.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;out.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z0.<ref refid="classhmap_1_1Array_1a3517b483a468873cefa73f7773a893ec" kindref="member">infos</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z1.<ref refid="classhmap_1_1Array_1a3517b483a468873cefa73f7773a893ec" kindref="member">infos</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_alter_elevation.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z0,<sp/>z1},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_alter_elevation.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/authoring/alter_elevation.cpp" line="13" column="6" bodyfile="HighMap/src/authoring/alter_elevation.cpp" bodystart="13" bodyend="60" declfile="HighMap/include/highmap/authoring.hpp" declline="83" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ab54462b486be54fcf316f083f7ea3014" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::base_elevation</definition>
        <argsstring>(Vec2&lt; int &gt; shape, const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;values, float width_factor=1.f, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, const Array *p_stretching=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>base_elevation</name>
        <qualifiedname>hmap::base_elevation</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type>float</type>
          <declname>width_factor</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Generate a heightmap from a coarse grid of control points with defined elevation values. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a heightmap by interpolating elevation values provided at specific control points on a coarse grid. The result is a finer resolution heightmap where the elevation values are smoothly distributed over the entire grid.</para>
<para>The interpolation is performed using a Gaussian function, with the <computeroutput>width_factor</computeroutput> parameter controlling the half-width of the base Gaussian function used for smoothing. Optionally, noise can be added using the provided <computeroutput>p_noise_x</computeroutput> and <computeroutput>p_noise_y</computeroutput> arrays, and the heightmap can be adjusted by a local wavenumber multiplier specified by <computeroutput>p_stretching</computeroutput>. The <computeroutput>bbox</computeroutput> parameter defines the domain bounding box for the heightmap.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimensions of the output array (heightmap). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>values</parametername>
</parameternamelist>
<parameterdescription>
<para>Elevation values at the control points specified on a coarse grid. This 2D vector holds the elevation data at each control point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width_factor</parametername>
</parameternamelist>
<parameterdescription>
<para>Factor applied to the half-width of the Gaussian function used for smoothing the elevations. A value of 1.0 represents the default smoothing width. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to an input noise array affecting the x-direction. If provided, it is used to add noise to the elevation values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to an input noise array affecting the y-direction. If provided, it is used to add noise to the elevation values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_stretching</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to an input array that acts as a local wavenumber multiplier. If provided, it adjusts the elevation values according to the local wavenumber. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box specified as a vector {xmin, xmax, ymin, ymax}. This defines the extent of the heightmap in the coordinate space. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> A new array representing the generated heightmap with interpolated elevation values.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_base_elevation.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>2x3<sp/>grid<sp/>(column<sp/>ordering,<sp/>Fortran<sp/>style)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;std::vector&lt;float&gt;&gt;<sp/>values<sp/>=<sp/>{{0.f,<sp/>0.5f,<sp/>0.f},<sp/>{1.f,<sp/>1.5f,<sp/>2.f}};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1ab54462b486be54fcf316f083f7ea3014" kindref="member">hmap::base_elevation</ref>(shape,<sp/>values);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>nx<sp/>=<sp/>0.4f<sp/>*<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{2.f,<sp/>2.f},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ny<sp/>=<sp/>0.4f<sp/>*<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{2.f,<sp/>2.f},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width_factor<sp/>=<sp/>1.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/><ref refid="namespacehmap_1ab54462b486be54fcf316f083f7ea3014" kindref="member">hmap::base_elevation</ref>(shape,<sp/>values,<sp/>width_factor,<sp/>&amp;nx,<sp/>&amp;ny);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_base_elevation.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z1,<sp/>z2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_base_elevation.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/authoring/base_elevation.cpp" line="12" column="7" bodyfile="HighMap/src/authoring/base_elevation.cpp" bodystart="12" bodyend="58" declfile="HighMap/include/highmap/authoring.hpp" declline="134" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a19bb0a5d0609ac671ca054d18959c7f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::reverse_midpoint</definition>
        <argsstring>(const Array &amp;array, uint seed, float noise_scale=1.f, float threshold=0.f)</argsstring>
        <name>reverse_midpoint</name>
        <qualifiedname>hmap::reverse_midpoint</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>float</type>
          <declname>noise_scale</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>threshold</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Apply the reverse midpoint displacement algorithm to the input array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function implements the reverse midpoint displacement algorithm as described in Belhadj et al. (2005). The algorithm generates a terrain-like structure by applying displacement to the values in the input array based on random noise. The function can be tuned using the <computeroutput>seed</computeroutput> parameter for random number generation, <computeroutput>noise_scale</computeroutput> for controlling the amplitude of the noise, and <computeroutput>threshold</computeroutput> for setting a background value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to which the reverse midpoint displacement algorithm will be applied. The array&apos;s values are modified to produce the output terrain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed number used to initialize the random number generator for reproducibility. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>noise_scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Amplitude of the noise applied during the displacement process. A higher value results in more pronounced terrain features. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>Threshold &apos;background&apos; value used to influence the displacement algorithm. Values below this threshold may be treated differently depending on the algorithm&apos;s design. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The output array after applying the reverse midpoint displacement algorithm. This array contains the modified values representing the generated terrain.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_reverse_midpoint.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec4" kindref="compound">hmap::Vec4&lt;float&gt;</ref><sp/>bbox<sp/>=<sp/><ref refid="namespacehmap_1a4910efa1a82d5dd66d7d02a87fab7e7a" kindref="member">hmap::unit_square_bbox</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Path" kindref="compound">hmap::Path</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/><ref refid="classhmap_1_1Path" kindref="compound">hmap::Path</ref>(4,<sp/>seed,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>path.<ref refid="classhmap_1_1Path_1ad68abaa80879402c3758e24626acfb53" kindref="member">reorder_nns</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>path.<ref refid="classhmap_1_1Path_1a56cc1e52401d748b540f9bc72a49000b" kindref="member">bezier</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>input<sp/>array,<sp/>scattered<sp/>non-zero<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z0<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(shape);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>path.<ref refid="classhmap_1_1Path_1a3b90d30abcdc4da9e381957d76c5d8db" kindref="member">to_array</ref>(z0,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1a19bb0a5d0609ac671ca054d18959c7f1" kindref="member">reverse_midpoint</ref>(z0,<sp/>seed++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a8c9d91481a5908494b9f06c90c705b3a" kindref="member">hmap::median_3x3</ref>(z1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_reverse_midpoint.png&quot;</highlight><highlight class="normal">,<sp/>{z0,<sp/>z1},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_reverse_midpoint.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/authoring/reverse_midpoint.cpp" line="231" column="7" bodyfile="HighMap/src/authoring/reverse_midpoint.cpp" bodystart="231" bodyend="262" declfile="HighMap/include/highmap/authoring.hpp" declline="174" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aca4a5b0313f4efe251b20d90652a896b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::ridgelines</definition>
        <argsstring>(Vec2&lt; int &gt; shape, const std::vector&lt; float &gt; &amp;xr, const std::vector&lt; float &gt; &amp;yr, const std::vector&lt; float &gt; &amp;zr, float slope, float k_smoothing=1.f, float width=0.1f, float vmin=0.f, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f}, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, const Array *p_stretching=nullptr, Vec4&lt; float &gt; bbox_array={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>ridgelines</name>
        <qualifiedname>hmap::ridgelines</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>xr</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>yr</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>zr</declname>
        </param>
        <param>
          <type>float</type>
          <declname>slope</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k_smoothing</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>width</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>vmin</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox_array</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Generate a heightmap based on a set of ridgelines and a specified slope. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a heightmap using a set of ridgelines defined by their x, y, and z coordinates, and applies a specified slope to the ridgelines. The function can optionally apply smoothing, adjust the ridge edge width, and clamp values below a minimum threshold. Additional noise and stretching parameters can be applied to modify the resulting heightmap.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensions of the output array (heightmap). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xr</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of x-coordinates defining ridge segments. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yr</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of y-coordinates defining ridge segments. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zr</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of z-coordinates defining ridge segments. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slope</parametername>
</parameternamelist>
<parameterdescription>
<para>The slope applied to the ridgelines. Can be negative to invert the slope. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k_smoothing</parametername>
</parameternamelist>
<parameterdescription>
<para>Smoothing parameter to control the smoothness of the ridgelines. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>Width of the ridge edges. Determines how broad the ridges appear. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmin</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum value for the heightmap. Values below this threshold will be clamped to <computeroutput>vmin</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Bounding box for the entire domain, defining the area covered by the heightmap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an optional array for x-direction noise to apply to the heightmap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an optional array for y-direction noise to apply to the heightmap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_stretching</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an optional array for local wavenumber multipliers to stretch the ridges. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox_array</parametername>
</parameternamelist>
<parameterdescription>
<para>Bounding box for the array domain, defining the spatial extent of the heightmap.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The generated heightmap with ridgelines and applied slope.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_ridgelines.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;segments&quot;,<sp/>coordinates<sp/>are<sp/>given<sp/>by<sp/>pairs<sp/>(xa_1,<sp/>xa_2,<sp/>xb_1,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>xb_2,<sp/>...)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>x<sp/>=<sp/>{0.1f,<sp/>0.5f,<sp/>0.7f,<sp/>0.2f,<sp/>0.2f,<sp/>0.1f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>y<sp/>=<sp/>{0.2f,<sp/>0.2f,<sp/>0.8f,<sp/>0.9f,<sp/>0.9f,<sp/>0.6f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>v<sp/>=<sp/>{1.0f,<sp/>0.5f,<sp/>0.8f,<sp/>0.4f,<sp/>0.4f,<sp/>0.9f};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1ad1836a084a8607446ce029d32c02a201" kindref="member">slope</ref><sp/>=<sp/>3.f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1aca4a5b0313f4efe251b20d90652a896b" kindref="member">hmap::ridgelines</ref>(shape,<sp/>x,<sp/>y,<sp/>v,<sp/><ref refid="namespacehmap_1ad1836a084a8607446ce029d32c02a201" kindref="member">slope</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/><ref refid="namespacehmap_1aca4a5b0313f4efe251b20d90652a896b" kindref="member">hmap::ridgelines</ref>(shape,<sp/>x,<sp/>y,<sp/>v,<sp/>-<ref refid="namespacehmap_1ad1836a084a8607446ce029d32c02a201" kindref="member">slope</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_ridgelines.png&quot;</highlight><highlight class="normal">,<sp/>{z1,<sp/>z2},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_ridgelines.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/authoring/ridgelines.cpp" line="16" column="7" bodyfile="HighMap/src/authoring/ridgelines.cpp" bodystart="16" bodyend="98" declfile="HighMap/include/highmap/authoring.hpp" declline="221" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a49bf95ae7344e531d7c2af0071e64649" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::ridgelines_bezier</definition>
        <argsstring>(Vec2&lt; int &gt; shape, const std::vector&lt; float &gt; &amp;xr, const std::vector&lt; float &gt; &amp;yr, const std::vector&lt; float &gt; &amp;zr, float slope, float k_smoothing=1.f, float width=0.1f, float vmin=0.f, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f}, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, const Array *p_stretching=nullptr, Vec4&lt; float &gt; bbox_array={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>ridgelines_bezier</name>
        <qualifiedname>hmap::ridgelines_bezier</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>xr</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>yr</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>zr</declname>
        </param>
        <param>
          <type>float</type>
          <declname>slope</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k_smoothing</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>width</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>vmin</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox_array</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Generate a heightmap based on a set of ridgelines with quadratic Bezier interpolation. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a heightmap using ridgelines defined by their x, y, and z coordinates. The ridgelines are interpolated using quadratic Bezier curves to smooth the transitions. The function applies a specified slope to the ridgelines and can optionally apply smoothing, adjust ridge edge width, and clamp values below a minimum threshold. Additional noise and stretching parameters can be used to modify the resulting heightmap.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensions of the output array (heightmap). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xr</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of x-coordinates defining ridge segments, organized in groups of three (control points of the Bezier curves). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yr</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of y-coordinates defining ridge segments, organized in groups of three (control points of the Bezier curves). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zr</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of z-coordinates defining ridge segments, organized in groups of three (control points of the Bezier curves). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slope</parametername>
</parameternamelist>
<parameterdescription>
<para>The slope applied to the ridgelines. Can be negative to invert the slope. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k_smoothing</parametername>
</parameternamelist>
<parameterdescription>
<para>Smoothing parameter to control the smoothness of the ridgelines. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>Width of the ridge edges. Determines how broad the ridges appear. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmin</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum value for the heightmap. Values below this threshold will be clamped to <computeroutput>vmin</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Bounding box for the entire domain, defining the area covered by the heightmap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an optional array for x-direction noise to apply to the heightmap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an optional array for y-direction noise to apply to the heightmap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_stretching</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an optional array for local wavenumber multipliers to stretch the ridges. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox_array</parametername>
</parameternamelist>
<parameterdescription>
<para>Bounding box for the array domain, defining the spatial extent of the heightmap.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The generated heightmap with ridgelines interpolated using quadratic Bezier curves and applied slope.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_ridgelines_bezier.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;segments&quot;,<sp/>coordinates<sp/>are<sp/>given<sp/>by<sp/>groups<sp/>of<sp/>three<sp/>points<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>order<sp/>to<sp/>define<sp/>a<sp/>quadratic<sp/>bezier<sp/>curve,<sp/>start<sp/>point,<sp/>control</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>point<sp/>and<sp/>end<sp/>point<sp/>(xa_1,<sp/>xa_2,<sp/>xa_3,<sp/>xb_1,<sp/>xb_2,<sp/>xb_3...)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>x<sp/>=<sp/>{0.1f,<sp/>0.5f,<sp/>0.7f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>y<sp/>=<sp/>{0.6f,<sp/>0.2f,<sp/>0.8f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>v<sp/>=<sp/>{1.0f,<sp/>0.f,<sp/>0.5f};<sp/></highlight><highlight class="comment">//<sp/>control<sp/>pt<sp/>(middle)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>value<sp/>not<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1ad1836a084a8607446ce029d32c02a201" kindref="member">slope</ref><sp/>=<sp/>4.f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1a49bf95ae7344e531d7c2af0071e64649" kindref="member">hmap::ridgelines_bezier</ref>(shape,<sp/>x,<sp/>y,<sp/>v,<sp/><ref refid="namespacehmap_1ad1836a084a8607446ce029d32c02a201" kindref="member">slope</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>v<sp/>=<sp/>{-1.0f,<sp/>0.f,<sp/>-0.5f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/><ref refid="namespacehmap_1a49bf95ae7344e531d7c2af0071e64649" kindref="member">hmap::ridgelines_bezier</ref>(shape,<sp/>x,<sp/>y,<sp/>v,<sp/>-<ref refid="namespacehmap_1ad1836a084a8607446ce029d32c02a201" kindref="member">slope</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_ridgelines_bezier.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z1,<sp/>z2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_ridgelines_bezier.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/authoring/ridgelines.cpp" line="100" column="7" bodyfile="HighMap/src/authoring/ridgelines.cpp" bodystart="100" bodyend="309" declfile="HighMap/include/highmap/authoring.hpp" declline="285" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a52fe1241da6ece981af7a368ef3ad0c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::stamping</definition>
        <argsstring>(Vec2&lt; int &gt; shape, const std::vector&lt; float &gt; &amp;xr, const std::vector&lt; float &gt; &amp;yr, const std::vector&lt; float &gt; &amp;zr, Array kernel, int kernel_ir, bool kernel_scale_radius, bool kernel_scale_amplitude, StampingBlendMethod blend_method, uint seed, float k_smoothing=0.1f, bool kernel_flip=true, bool kernel_rotate=false, Vec4&lt; float &gt; bbox_array={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>stamping</name>
        <qualifiedname>hmap::stamping</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>xr</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>yr</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>zr</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>kernel_ir</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>kernel_scale_radius</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>kernel_scale_amplitude</declname>
        </param>
        <param>
          <type><ref refid="namespacehmap_1a5101273ec456f5267dddc3e22dae223b" kindref="member">StampingBlendMethod</ref></type>
          <declname>blend_method</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k_smoothing</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>kernel_flip</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>kernel_rotate</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox_array</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Generate a heightmap by stamping a kernel at predefined locations. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a heightmap by stamping a specified kernel at given x, y, and z coordinates. The kernel can be scaled and manipulated based on the z-coordinates of the stamping points, and can be optionally flipped or rotated. The heightmap is generated by blending the results using the specified blending method. Randomization options are available for kernel manipulation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensions of the output array (heightmap). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xr</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of x-coordinates where the kernel is stamped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yr</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of y-coordinates where the kernel is stamped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zr</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of z-coordinates where the kernel is stamped. This affects the kernel radius and amplitude scaling. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel</parametername>
</parameternamelist>
<parameterdescription>
<para>The kernel to be stamped onto the heightmap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel_ir</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the kernel in pixels. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel_scale_radius</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean flag to scale the kernel radius based on the z-coordinates. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel_scale_amplitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean flag to scale the kernel amplitude based on the z-coordinates. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blend_method</parametername>
</parameternamelist>
<parameterdescription>
<para>The method used for blending multiple kernel stamps. Options may include additive, maximum, minimum, etc. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed number for kernel randomization. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k_smoothing</parametername>
</parameternamelist>
<parameterdescription>
<para>Smoothing parameter for the heightmap (e.g., for smooth minimum or maximum blending). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel_flip</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean flag to randomly flip the kernel before stamping. Flipping includes transposing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel_rotate</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean flag to randomly rotate the kernel before stamping. Rotation can be resource-intensive. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox_array</parametername>
</parameternamelist>
<parameterdescription>
<para>Bounding box for the array domain, defining the spatial extent of the heightmap.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The generated heightmap with kernel stamps applied at the specified locations.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_stamping.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>kernel<sp/>to<sp/>be<sp/>stamped</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape_kernel<sp/>=<sp/>{64,<sp/>64};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/><sp/><sp/><sp/><sp/>kernel<sp/>=<sp/><ref refid="namespacehmap_1aab655567714a21e6308c09d07056d52f" kindref="member">hmap::gabor</ref>(shape_kernel,<sp/>8.f,<sp/>15.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>generate<sp/>stamping<sp/>locations</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>50;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>x(n),<sp/>y(n),<sp/>v(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1b302517681613c5b82b06f55237fb98" kindref="member">hmap::random_grid</ref>(x,<sp/>y,<sp/>v,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>eventually<sp/>stamp...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a52fe1241da6ece981af7a368ef3ad0c4" kindref="member">hmap::stamping</ref>(shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kernel,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>32,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>kernel<sp/>radius<sp/>in<sp/>pixels</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>scale<sp/>ampl</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>scale<sp/>radius</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a5101273ec456f5267dddc3e22dae223babafe4f4d1051eb7afe0eab09badd28ad" kindref="member">hmap::StampingBlendMethod::MAXIMUM</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="comment">//<sp/>flip</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>rotate</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>export<sp/>points<sp/>to<sp/>a<sp/>cloud<sp/>to<sp/>generate<sp/>a<sp/>png<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Cloud" kindref="compound">hmap::Cloud</ref><sp/>cloud<sp/>=<sp/><ref refid="classhmap_1_1Cloud" kindref="compound">hmap::Cloud</ref>(x,<sp/>y,<sp/>v);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>c<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(shape);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cloud.<ref refid="classhmap_1_1Cloud_1ad83d71a8729a0e4fcce993c0141275ee" kindref="member">to_array</ref>(c);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a3517b483a468873cefa73f7773a893ec" kindref="member">infos</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>c.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_stamping0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>kernel.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_stamping1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_stamping2.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_stamping0.png"></image>
 <image type="html" name="ex_stamping1.png"></image>
 <image type="html" name="ex_stamping2.png"></image>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="" kindref="compound">other_related_functions</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/authoring/stamping.cpp" line="17" column="7" bodyfile="HighMap/src/authoring/stamping.cpp" bodystart="17" bodyend="142" declfile="HighMap/include/highmap/authoring.hpp" declline="352" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aafb76d7961d1655fdc07422982357588" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::blend_exclusion</definition>
        <argsstring>(const Array &amp;array1, const Array &amp;array2)</argsstring>
        <name>blend_exclusion</name>
        <qualifiedname>hmap::blend_exclusion</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array2</declname>
        </param>
        <briefdescription>
<para>Return the &apos;exclusion&apos; blending of two arrays. </para>
        </briefdescription>
        <detaileddescription>
<para>The exclusion blend mode creates a blend that is similar to the difference blend mode but with lower contrast. It produces an effect that is often used in image editing for special effects. For more details, see <ulink url="https://en.wikipedia.org/wiki/Blend_modes">https://en.wikipedia.org/wiki/Blend_modes</ulink>.</para>
<para><simplesect kind="warning"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> values are expected to be in the range [0, 1].</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array1</parametername>
</parameternamelist>
<parameterdescription>
<para>First input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second input array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Resulting array after applying the exclusion blend mode.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_blend.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{128,<sp/>128};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{2.f,<sp/>2.f},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{4.f,<sp/>4.f},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z_exclusion<sp/>=<sp/><ref refid="namespacehmap_1aafb76d7961d1655fdc07422982357588" kindref="member">hmap::blend_exclusion</ref>(z1,<sp/>z2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z_negate<sp/>=<sp/><ref refid="namespacehmap_1a183cf8de980d1886130cac97fd41bcc5" kindref="member">hmap::blend_negate</ref>(z1,<sp/>z2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z_overlay<sp/>=<sp/><ref refid="namespacehmap_1a3d311d682d431e21c6d7063539a0db8e" kindref="member">hmap::blend_overlay</ref>(z1,<sp/>z2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z_soft<sp/>=<sp/><ref refid="namespacehmap_1a91e52ae1178d54931a1729a2368a31f7" kindref="member">hmap::blend_soft</ref>(z1,<sp/>z2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z_gradients<sp/>=<sp/><ref refid="namespacehmap_1af91a60a9fcbed7e38f53df57631a5298" kindref="member">hmap::blend_gradients</ref>(z1,<sp/>z2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_blend0.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z1,<sp/>z2,<sp/>z_exclusion},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_blend1.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z1,<sp/>z2,<sp/>z_negate},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_blend2.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z1,<sp/>z2,<sp/>z_overlay},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_blend3.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z1,<sp/>z2,<sp/>z_soft},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_blend4.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z1,<sp/>z2,<sp/>z_gradients},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_blend0.png"></image>
 <image type="html" name="ex_blend1.png"></image>
 <image type="html" name="ex_blend2.png"></image>
 <image type="html" name="ex_blend3.png"></image>
 <image type="html" name="ex_blend4.png"></image>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="namespacehmap_1aafb76d7961d1655fdc07422982357588" kindref="member">blend_exclusion</ref></computeroutput>, <computeroutput><ref refid="namespacehmap_1a183cf8de980d1886130cac97fd41bcc5" kindref="member">blend_negate</ref></computeroutput>, <computeroutput><ref refid="namespacehmap_1a3d311d682d431e21c6d7063539a0db8e" kindref="member">blend_overlay</ref></computeroutput>, <computeroutput><ref refid="namespacehmap_1a91e52ae1178d54931a1729a2368a31f7" kindref="member">blend_soft</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/blending/blending.cpp" line="17" column="7" bodyfile="HighMap/src/blending/blending.cpp" bodystart="17" bodyend="22" declfile="HighMap/include/highmap/blending.hpp" declline="53" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1af91a60a9fcbed7e38f53df57631a5298" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::blend_gradients</definition>
        <argsstring>(const Array &amp;array1, const Array &amp;array2, int ir=4)</argsstring>
        <name>blend_gradients</name>
        <qualifiedname>hmap::blend_gradients</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
          <defval>4</defval>
        </param>
        <briefdescription>
<para>Return the blending of two arrays based on their gradients. </para>
        </briefdescription>
        <detaileddescription>
<para>This function blends two arrays by considering their gradients, which can be useful for producing smooth transitions between the arrays based on their directional changes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array1</parametername>
</parameternamelist>
<parameterdescription>
<para>First input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Filtering radius in pixels. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Resulting array after blending based on gradients. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/blending/blending.cpp" line="24" column="7" bodyfile="HighMap/src/blending/blending.cpp" bodystart="24" bodyend="36" declfile="HighMap/include/highmap/blending.hpp" declline="67" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a183cf8de980d1886130cac97fd41bcc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::blend_negate</definition>
        <argsstring>(const Array &amp;array1, const Array &amp;array2)</argsstring>
        <name>blend_negate</name>
        <qualifiedname>hmap::blend_negate</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array2</declname>
        </param>
        <briefdescription>
<para>Return the &apos;negate&apos; blending of two arrays. </para>
        </briefdescription>
        <detaileddescription>
<para>The negate blend mode inverts the colors of one of the arrays relative to the other. It creates a high-contrast effect that can be useful for emphasizing differences between two arrays.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array1</parametername>
</parameternamelist>
<parameterdescription>
<para>First input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second input array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Resulting array after applying the negate blend mode.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="namespacehmap_1aafb76d7961d1655fdc07422982357588" kindref="member">blend_exclusion</ref></computeroutput>, <computeroutput><ref refid="namespacehmap_1a183cf8de980d1886130cac97fd41bcc5" kindref="member">blend_negate</ref></computeroutput>, <computeroutput><ref refid="namespacehmap_1a3d311d682d431e21c6d7063539a0db8e" kindref="member">blend_overlay</ref></computeroutput>, <computeroutput><ref refid="namespacehmap_1a91e52ae1178d54931a1729a2368a31f7" kindref="member">blend_soft</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/blending/blending.cpp" line="38" column="7" bodyfile="HighMap/src/blending/blending.cpp" bodystart="38" bodyend="51" declfile="HighMap/include/highmap/blending.hpp" declline="84" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a3d311d682d431e21c6d7063539a0db8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::blend_overlay</definition>
        <argsstring>(const Array &amp;array1, const Array &amp;array2)</argsstring>
        <name>blend_overlay</name>
        <qualifiedname>hmap::blend_overlay</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array2</declname>
        </param>
        <briefdescription>
<para>Return the &apos;overlay&apos; blending of two arrays. </para>
        </briefdescription>
        <detaileddescription>
<para>The overlay blend mode combines the colors of two arrays in a way that enhances contrast and emphasizes details.</para>
<para><simplesect kind="warning"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> values are expected to be in the range [0, 1].</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array1</parametername>
</parameternamelist>
<parameterdescription>
<para>First input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second input array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Resulting array after applying the overlay blend mode.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="namespacehmap_1aafb76d7961d1655fdc07422982357588" kindref="member">blend_exclusion</ref></computeroutput>, <computeroutput><ref refid="namespacehmap_1a183cf8de980d1886130cac97fd41bcc5" kindref="member">blend_negate</ref></computeroutput>, <computeroutput><ref refid="namespacehmap_1a3d311d682d431e21c6d7063539a0db8e" kindref="member">blend_overlay</ref></computeroutput>, <computeroutput><ref refid="namespacehmap_1a91e52ae1178d54931a1729a2368a31f7" kindref="member">blend_soft</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/blending/blending.cpp" line="53" column="7" bodyfile="HighMap/src/blending/blending.cpp" bodystart="53" bodyend="66" declfile="HighMap/include/highmap/blending.hpp" declline="102" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a91e52ae1178d54931a1729a2368a31f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::blend_soft</definition>
        <argsstring>(const Array &amp;array1, const Array &amp;array2)</argsstring>
        <name>blend_soft</name>
        <qualifiedname>hmap::blend_soft</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array2</declname>
        </param>
        <briefdescription>
<para>Return the &apos;soft&apos; blending of two arrays. </para>
        </briefdescription>
        <detaileddescription>
<para>The soft blend mode applies a soft light effect to the blending of two arrays, based on the soft light mode described in <ulink url="http://www.pegtop.net/delphi/articles/blendmodes/softlight.htm">Pegtop soft light mode</ulink>. It creates a subtle blend with reduced contrast.</para>
<para><simplesect kind="warning"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> values are expected to be in the range [0, 1].</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array1</parametername>
</parameternamelist>
<parameterdescription>
<para>First input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second input array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Resulting array after applying the soft light blend mode.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="namespacehmap_1aafb76d7961d1655fdc07422982357588" kindref="member">blend_exclusion</ref></computeroutput>, <computeroutput><ref refid="namespacehmap_1a183cf8de980d1886130cac97fd41bcc5" kindref="member">blend_negate</ref></computeroutput>, <computeroutput><ref refid="namespacehmap_1a3d311d682d431e21c6d7063539a0db8e" kindref="member">blend_overlay</ref></computeroutput>, <computeroutput><ref refid="namespacehmap_1a91e52ae1178d54931a1729a2368a31f7" kindref="member">blend_soft</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/blending/blending.cpp" line="68" column="7" bodyfile="HighMap/src/blending/blending.cpp" bodystart="68" bodyend="74" declfile="HighMap/include/highmap/blending.hpp" declline="123" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ad1e91583a5c176014ed3720f0eb5a321" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::mixer</definition>
        <argsstring>(const Array &amp;t, const std::vector&lt; const Array * &gt; &amp;arrays, float gain_factor=1.f)</argsstring>
        <name>mixer</name>
        <qualifiedname>hmap::mixer</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const std::vector&lt; const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> * &gt; &amp;</type>
          <declname>arrays</declname>
        </param>
        <param>
          <type>float</type>
          <declname>gain_factor</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Return the mixing of a set of arrays based on a parameter <computeroutput>t</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function mixes a set of arrays based on a mixing coefficient <computeroutput>t</computeroutput> that determines the contribution of each array. The parameter <computeroutput>t</computeroutput> should be in the range [0, 1], where <computeroutput>t</computeroutput> represents the blending ratio.</para>
<para><simplesect kind="warning"><para>Values of array <computeroutput>t</computeroutput> are expected to be in the range [0, 1].</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Mixing coefficient, in the range [0, 1]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arrays</parametername>
</parameternamelist>
<parameterdescription>
<para>References to the input arrays to be mixed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Resulting array after mixing.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_mixer.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{128,<sp/>128};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{8.f,<sp/>8.f},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{4.f,<sp/>4.f},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z3<sp/>=<sp/><ref refid="namespacehmap_1aaebee84e8c697616359a93440eb92b50" kindref="member">hmap::white</ref>(shape,<sp/>0.f,<sp/>1.f,<sp/>seed<sp/>+<sp/>2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>t<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{2.f,<sp/>2.f},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>+<sp/>3);<sp/></highlight><highlight class="comment">//<sp/>mixer</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(t);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zm<sp/>=<sp/><ref refid="namespacehmap_1ad1e91583a5c176014ed3720f0eb5a321" kindref="member">hmap::mixer</ref>(t,<sp/>{&amp;z1,<sp/>&amp;z2,<sp/>&amp;z3});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_mixer.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{t,<sp/>z1,<sp/>z2,<sp/>z3,<sp/>zm},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_mixer.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/blending/blending.cpp" line="76" column="7" bodyfile="HighMap/src/blending/blending.cpp" bodystart="76" bodyend="116" declfile="HighMap/include/highmap/blending.hpp" declline="144" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a8802e95ba76a252d2098bdb3fb5cfc28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::extrapolate_borders</definition>
        <argsstring>(Array &amp;array, int nbuffer=1, float sigma=0.f)</argsstring>
        <name>extrapolate_borders</name>
        <qualifiedname>hmap::extrapolate_borders</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nbuffer</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>float</type>
          <declname>sigma</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Performs linear extrapolation of values at the borders of an array (e.g., <computeroutput>i = 0</computeroutput>, <computeroutput>j = 0</computeroutput>, etc.) based on the inner values of the array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function modifies the borders of the input array by applying a linear extrapolation method, which uses the values inside the array to estimate and fill in the border values. The extrapolation is influenced by a relaxation coefficient (<computeroutput>sigma</computeroutput>) and a buffer depth (<computeroutput>nbuffer</computeroutput>), which determines how many layers of the border are extrapolated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input array whose borders need extrapolation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter specifying the buffer depth, i.e., the number of layers at the border to extrapolate. Default is 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigma</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional relaxation coefficient that adjusts the influence of inner values on the extrapolated border values. Default is 0.0.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="namespacehmap_1a072f0c93c6e3e5e0f8f88c760850dce8" kindref="member">fill_borders()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/boundary/boundary.cpp" line="16" column="6" bodyfile="HighMap/src/boundary/boundary.cpp" bodystart="16" bodyend="75" declfile="HighMap/include/highmap/boundary.hpp" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a1509f9df26854cd66af1b63f2505e1a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::falloff</definition>
        <argsstring>(Array &amp;array, float strength=1.f, DistanceFunction dist_fct=DistanceFunction::EUCLIDIAN, const Array *p_noise=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>falloff</name>
        <qualifiedname>hmap::falloff</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>strength</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="namespacehmap_1a670f50d6c08ecd639d42db9c75a5273a" kindref="member">DistanceFunction</ref></type>
          <declname>dist_fct</declname>
          <defval><ref refid="namespacehmap_1a670f50d6c08ecd639d42db9c75a5273aab5937b3ae1efaa098f517fe7c761b781" kindref="member">DistanceFunction::EUCLIDIAN</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Applies a falloff effect to the input array based on distance. </para>
        </briefdescription>
        <detaileddescription>
<para>This function modifies the elements of the input <computeroutput>array</computeroutput> by applying a falloff effect, which decreases the values based on their distance from a central point or area. The strength of the falloff, the type of distance function used, and optional noise can be specified.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the array that will be modified by the falloff effect. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strength</parametername>
</parameternamelist>
<parameterdescription>
<para>The strength of the falloff effect. A higher value results in a stronger falloff. Default is 1.0f. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dist_fct</parametername>
</parameternamelist>
<parameterdescription>
<para>The distance function to be used for calculating the falloff. Options include Euclidian and others, with <computeroutput><ref refid="namespacehmap_1a670f50d6c08ecd639d42db9c75a5273aab5937b3ae1efaa098f517fe7c761b781" kindref="member">DistanceFunction::EUCLIDIAN</ref></computeroutput> as the default. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to an array that provides noise to be added to the falloff effect. If nullptr (default), no noise is added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>A 4D vector representing the bounding box within which the falloff effect is applied. The default is {0.f, 1.f, 0.f, 1.f}.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_falloff.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sigma<sp/>=<sp/>1.f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z3<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z4<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1509f9df26854cd66af1b63f2505e1a1" kindref="member">hmap::falloff</ref>(z1,<sp/>sigma,<sp/><ref refid="namespacehmap_1a670f50d6c08ecd639d42db9c75a5273aab5937b3ae1efaa098f517fe7c761b781" kindref="member">hmap::DistanceFunction::EUCLIDIAN</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1509f9df26854cd66af1b63f2505e1a1" kindref="member">hmap::falloff</ref>(z2,<sp/>sigma,<sp/><ref refid="namespacehmap_1a670f50d6c08ecd639d42db9c75a5273aa439184a2066b21b9ba0883b29efabfec" kindref="member">hmap::DistanceFunction::EUCLISHEV</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1509f9df26854cd66af1b63f2505e1a1" kindref="member">hmap::falloff</ref>(z3,<sp/>sigma,<sp/><ref refid="namespacehmap_1a670f50d6c08ecd639d42db9c75a5273aa2a9fc119d00df5ec5de1c13a006921f2" kindref="member">hmap::DistanceFunction::CHEBYSHEV</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1509f9df26854cd66af1b63f2505e1a1" kindref="member">hmap::falloff</ref>(z4,<sp/>sigma,<sp/><ref refid="namespacehmap_1a670f50d6c08ecd639d42db9c75a5273aad250b63dea876f47d2b0dab1edf01b63" kindref="member">hmap::DistanceFunction::MANHATTAN</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_falloff.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1,<sp/>z2,<sp/>z3,<sp/>z4},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_falloff.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/boundary/boundary.cpp" line="77" column="6" bodyfile="HighMap/src/boundary/boundary.cpp" bodystart="77" bodyend="114" declfile="HighMap/include/highmap/boundary.hpp" declline="73" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a072f0c93c6e3e5e0f8f88c760850dce8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::fill_borders</definition>
        <argsstring>(Array &amp;array)</argsstring>
        <name>fill_borders</name>
        <qualifiedname>hmap::fill_borders</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Fills the border values of an array (e.g., <computeroutput>i = 0</computeroutput>, <computeroutput>j = 0</computeroutput>, etc.) based on the values of the first neighboring cells. </para>
        </briefdescription>
        <detaileddescription>
<para>This function modifies the border values of the input array by copying values from their immediate neighbors. The operation ensures that border values are consistent with their adjacent cells, typically used to prepare the array for further processing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input array whose borders need to be filled.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="namespacehmap_1a8802e95ba76a252d2098bdb3fb5cfc28" kindref="member">extrapolate_borders()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/boundary/boundary.cpp" line="116" column="6" bodyfile="HighMap/src/boundary/boundary.cpp" bodystart="116" bodyend="132" declfile="HighMap/include/highmap/boundary.hpp" declline="92" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a8b7bdf4f052ba72e3dc8150d324a53b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::fill_borders</definition>
        <argsstring>(Array &amp;array, int nbuffer)</argsstring>
        <name>fill_borders</name>
        <qualifiedname>hmap::fill_borders</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nbuffer</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/boundary/boundary.cpp" line="134" column="6" bodyfile="HighMap/src/boundary/boundary.cpp" bodystart="134" bodyend="152" declfile="HighMap/include/highmap/boundary.hpp" declline="94" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a54bbc87163c158c1753a1f9d0c879995" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::generate_buffered_array</definition>
        <argsstring>(const Array &amp;array, Vec4&lt; int &gt; buffers, bool zero_padding=false)</argsstring>
        <name>generate_buffered_array</name>
        <qualifiedname>hmap::generate_buffered_array</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; int &gt;</type>
          <declname>buffers</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>zero_padding</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Creates and returns a new array with additional buffer zones at the boundaries, where the buffer values are filled either by symmetry or by zero-padding. </para>
        </briefdescription>
        <detaileddescription>
<para>This function takes an input array and generates a new array with extra layers (buffers) added to its boundaries. The size of these buffer zones is specified by the <computeroutput>buffers</computeroutput> parameter, and the values within these buffers can be filled either by reflecting the values at the boundaries (symmetry) or by padding with zeros.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffers</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector specifying the buffer sizes for the east, west, south, and north boundaries. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zero_padding</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional boolean flag to use zero-padding instead of symmetry for filling the buffer values. Default is <computeroutput>false</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> A new array with buffers added at the boundaries. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/boundary/boundary.cpp" line="154" column="7" bodyfile="HighMap/src/boundary/boundary.cpp" bodystart="154" bodyend="190" declfile="HighMap/include/highmap/boundary.hpp" declline="115" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a44fa6e4a99112fb0c9f7cc397ec5b617" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::make_periodic</definition>
        <argsstring>(Array &amp;array, int nbuffer)</argsstring>
        <name>make_periodic</name>
        <qualifiedname>hmap::make_periodic</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nbuffer</declname>
        </param>
        <briefdescription>
<para>Adjusts the input array to be periodic in both directions by transitioning smoothly at the boundaries. </para>
        </briefdescription>
        <detaileddescription>
<para>This function modifies the input array so that the values at the boundaries transition smoothly, making the array periodic in both the horizontal and vertical directions. The width of the transition zone at the boundaries is controlled by the <computeroutput>nbuffer</computeroutput> parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input array to be made periodic. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the transition zone at the boundaries.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_make_periodic.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbuffer<sp/>=<sp/>64;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zp<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a44fa6e4a99112fb0c9f7cc397ec5b617" kindref="member">hmap::make_periodic</ref>(zp,<sp/>nbuffer);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>some<sp/>tiling<sp/>to<sp/>check<sp/>periodicity</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zt<sp/>=<sp/>zp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>zt<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(zt,<sp/>zt);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>zt<sp/>=<sp/><ref refid="namespacehmap_1a462f8b6ebc7b8ab79c619987e0ddfce4" kindref="member">vstack</ref>(zt,<sp/>zt);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_make_periodic0.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zp},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>zt.to_png(</highlight><highlight class="stringliteral">&quot;ex_make_periodic1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_make_periodic0.png"></image>
 <image type="html" name="ex_make_periodic1.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/boundary/boundary.cpp" line="192" column="6" bodyfile="HighMap/src/boundary/boundary.cpp" bodystart="192" bodyend="223" declfile="HighMap/include/highmap/boundary.hpp" declline="138" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a0cfa879188da80b9e5bf16e8c325c9ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::make_periodic_stitching</definition>
        <argsstring>(const Array &amp;array, float overlap)</argsstring>
        <name>make_periodic_stitching</name>
        <qualifiedname>hmap::make_periodic_stitching</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>overlap</declname>
        </param>
        <briefdescription>
<para>Creates a periodic array in both directions using a stitching operation that minimizes errors at the boundaries. </para>
        </briefdescription>
        <detaileddescription>
<para>This function generates a new array that is periodic in both directions by applying a stitching operation at the boundaries. The stitching process aims to minimize discrepancies, creating a seamless transition between the edges of the array. The <computeroutput>overlap</computeroutput> parameter determines the extent of the overlap during the stitching, based on the half-size of the domain. If <computeroutput>overlap</computeroutput> is set to 1, the transition spans the entire domain.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input array to be made periodic. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overlap</parametername>
</parameternamelist>
<parameterdescription>
<para>A float value representing the overlap based on the domain&apos;s half-size. An overlap of 1 means the transition spans the whole domain. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> A new array that is periodic in both directions with minimized boundary errors.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_make_periodic_stitching.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zp<sp/>=<sp/><ref refid="namespacehmap_1a0cfa879188da80b9e5bf16e8c325c9ba" kindref="member">hmap::make_periodic_stitching</ref>(z,<sp/>overlap);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>some<sp/>tiling<sp/>to<sp/>check<sp/>periodicity</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zt<sp/>=<sp/>zp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>zt<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(zt,<sp/>zt);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>zt<sp/>=<sp/><ref refid="namespacehmap_1a462f8b6ebc7b8ab79c619987e0ddfce4" kindref="member">vstack</ref>(zt,<sp/>zt);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>zt.infos();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_make_periodic_stitching0.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zp},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>zt.to_png(</highlight><highlight class="stringliteral">&quot;ex_make_periodic_stitching1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_make_periodic_stitching0.png"></image>
 <image type="html" name="ex_make_periodic_stitching1.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/boundary/boundary.cpp" line="225" column="7" bodyfile="HighMap/src/boundary/boundary.cpp" bodystart="225" bodyend="291" declfile="HighMap/include/highmap/boundary.hpp" declline="165" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ab3df05c2be51b4860710bd077973d19b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::make_periodic_tiling</definition>
        <argsstring>(const Array &amp;array, float overlap, Vec2&lt; int &gt; tiling)</argsstring>
        <name>make_periodic_tiling</name>
        <qualifiedname>hmap::make_periodic_tiling</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>overlap</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>tiling</declname>
        </param>
        <briefdescription>
<para>Creates a tiled, periodic array by applying a transition with overlap in both directions. </para>
        </briefdescription>
        <detaileddescription>
<para>This function generates a new array that is periodic and tiled according to the specified tiling dimensions. The periodicity is achieved by applying a transition at the boundaries, where the extent of overlap is determined by the <computeroutput>overlap</computeroutput> parameter. The <computeroutput>tiling</computeroutput> parameter specifies the number of tiles in the horizontal and vertical directions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input array to be tiled and made periodic. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overlap</parametername>
</parameternamelist>
<parameterdescription>
<para>A float value representing the overlap based on the domain&apos;s half-size. If <computeroutput>overlap</computeroutput> is 1, the transition spans the entire domain on both sides. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tiling</parametername>
</parameternamelist>
<parameterdescription>
<para>A 2D vector specifying the number of tiles in the horizontal and vertical directions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> A new tiled array that is periodic in both directions.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="make_periodic_tiling.cpp"></programlisting></para>
<para><bold>Result</bold> <image type="html" name="make_periodic_tiling.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/boundary/boundary.cpp" line="293" column="7" bodyfile="HighMap/src/boundary/boundary.cpp" bodystart="293" bodyend="316" declfile="HighMap/include/highmap/boundary.hpp" declline="191" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a6741f8d2d6c438c8993a42e1efafc987" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::set_borders</definition>
        <argsstring>(Array &amp;array, Vec4&lt; float &gt; border_values, Vec4&lt; int &gt; buffer_sizes)</argsstring>
        <name>set_borders</name>
        <qualifiedname>hmap::set_borders</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>border_values</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; int &gt;</type>
          <declname>buffer_sizes</declname>
        </param>
        <briefdescription>
<para>Enforces specific values at the boundaries of the array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the values at the borders of the input array to specified values for each side (east, west, south, and north). The size of the buffer zone at each border can also be defined, allowing precise control over how much of the boundary is modified.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input array whose borders are to be modified. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>border_values</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector specifying the values to set at the east, west, south, and north borders. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_sizes</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector specifying the size of the buffer zones at the east, west, south, and north borders.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_set_borders.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>0.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbuffer<sp/>=<sp/>100;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a6741f8d2d6c438c8993a42e1efafc987" kindref="member">hmap::set_borders</ref>(z,<sp/>value,<sp/>nbuffer);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_set_borders.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_set_borders.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/boundary/boundary.cpp" line="318" column="6" bodyfile="HighMap/src/boundary/boundary.cpp" bodystart="318" bodyend="359" declfile="HighMap/include/highmap/boundary.hpp" declline="214" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a403b405887b5cda6a1d6f8bcaeb4c5e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::set_borders</definition>
        <argsstring>(Array &amp;array, float border_values, int buffer_sizes)</argsstring>
        <name>set_borders</name>
        <qualifiedname>hmap::set_borders</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>border_values</declname>
        </param>
        <param>
          <type>int</type>
          <declname>buffer_sizes</declname>
        </param>
        <briefdescription>
<para>Enforces a uniform value at all boundaries of the array. </para>
        </briefdescription>
        <detaileddescription>
<para>This overloaded function sets the same value at all borders of the input array. The size of the buffer zone at each border can be defined with a single value that applies uniformly to all sides.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input array whose borders are to be modified. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>border_values</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set at all borders. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_sizes</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer zone to apply uniformly at all borders. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/boundary/boundary.cpp" line="361" column="6" bodyfile="HighMap/src/boundary/boundary.cpp" bodystart="361" bodyend="372" declfile="HighMap/include/highmap/boundary.hpp" declline="231" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a646e831987d60f4171024faadd6236e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::sym_borders</definition>
        <argsstring>(Array &amp;array, Vec4&lt; int &gt; buffer_sizes)</argsstring>
        <name>sym_borders</name>
        <qualifiedname>hmap::sym_borders</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; int &gt;</type>
          <declname>buffer_sizes</declname>
        </param>
        <briefdescription>
<para>Fills the values at the domain borders using symmetry over a specified buffer depth. </para>
        </briefdescription>
        <detaileddescription>
<para>This function fills the borders of the input array by reflecting the values inside the array symmetrically. The depth of the buffer at each border (east, west, south, north) is specified by the <computeroutput>buffer_sizes</computeroutput> parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input array whose borders are to be filled using symmetry. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_sizes</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector specifying the buffer sizes at the east, west, south, and north borders. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/boundary/boundary.cpp" line="374" column="6" bodyfile="HighMap/src/boundary/boundary.cpp" bodystart="374" bodyend="397" declfile="HighMap/include/highmap/boundary.hpp" declline="246" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ae8bdfc965780305d1d26ff8b84e1dced" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::zeroed_borders</definition>
        <argsstring>(Array &amp;array)</argsstring>
        <name>zeroed_borders</name>
        <qualifiedname>hmap::zeroed_borders</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Fills the border values (e.g., <computeroutput>i = 0</computeroutput>, <computeroutput>j = 0</computeroutput>, etc.) of the array with zeros. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets all the values at the borders of the input array to zero. It can be used to zero out boundary values, preparing the array for specific computations.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input array whose borders are to be zeroed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="namespacehmap_1a072f0c93c6e3e5e0f8f88c760850dce8" kindref="member">fill_borders()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/boundary/boundary.cpp" line="399" column="6" bodyfile="HighMap/src/boundary/boundary.cpp" bodystart="399" bodyend="415" declfile="HighMap/include/highmap/boundary.hpp" declline="260" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aea2ac2d901a1bf47ce8f19d463a7079e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::zeroed_edges</definition>
        <argsstring>(Array &amp;array, float sigma=1.f, DistanceFunction dist_fct=DistanceFunction::EUCLIDIAN, const Array *p_noise=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>zeroed_edges</name>
        <qualifiedname>hmap::zeroed_edges</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>sigma</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="namespacehmap_1a670f50d6c08ecd639d42db9c75a5273a" kindref="member">DistanceFunction</ref></type>
          <declname>dist_fct</declname>
          <defval><ref refid="namespacehmap_1a670f50d6c08ecd639d42db9c75a5273aab5937b3ae1efaa098f517fe7c761b781" kindref="member">DistanceFunction::EUCLIDIAN</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Applies a smooth transition to zero at the array borders. </para>
        </briefdescription>
        <detaileddescription>
<para>This function gradually transitions the values at the borders of the array to zero, using a smoothing function defined by the <computeroutput>sigma</computeroutput> parameter, which controls the half-width of the transition. The transition can be further customized by providing a noise array (<computeroutput>p_noise</computeroutput>) and a bounding box (<computeroutput>bbox</computeroutput>) that defines the domain of the operation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input array whose borders will be smoothly transitioned to zero. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigma</parametername>
</parameternamelist>
<parameterdescription>
<para>A float value controlling the half-width ratio of the transition. Default is 1.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dist_fct</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance function used for determining the smoothing (default is Euclidean distance). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to an input noise array, which can be used during the transition process. Default is <computeroutput>nullptr</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector defining the domain&apos;s bounding box. Default is {0.f, 1.f, 0.f, 1.f}.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_zeroed_edges.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sigma<sp/>=<sp/>1.f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z3<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z4<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1aea2ac2d901a1bf47ce8f19d463a7079e" kindref="member">hmap::zeroed_edges</ref>(z1,<sp/>sigma,<sp/><ref refid="namespacehmap_1a670f50d6c08ecd639d42db9c75a5273aab5937b3ae1efaa098f517fe7c761b781" kindref="member">hmap::DistanceFunction::EUCLIDIAN</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1aea2ac2d901a1bf47ce8f19d463a7079e" kindref="member">hmap::zeroed_edges</ref>(z2,<sp/>sigma,<sp/><ref refid="namespacehmap_1a670f50d6c08ecd639d42db9c75a5273aa439184a2066b21b9ba0883b29efabfec" kindref="member">hmap::DistanceFunction::EUCLISHEV</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1aea2ac2d901a1bf47ce8f19d463a7079e" kindref="member">hmap::zeroed_edges</ref>(z3,<sp/>sigma,<sp/><ref refid="namespacehmap_1a670f50d6c08ecd639d42db9c75a5273aa2a9fc119d00df5ec5de1c13a006921f2" kindref="member">hmap::DistanceFunction::CHEBYSHEV</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1aea2ac2d901a1bf47ce8f19d463a7079e" kindref="member">hmap::zeroed_edges</ref>(z4,<sp/>sigma,<sp/><ref refid="namespacehmap_1a670f50d6c08ecd639d42db9c75a5273aad250b63dea876f47d2b0dab1edf01b63" kindref="member">hmap::DistanceFunction::MANHATTAN</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_zeroed_edges.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1,<sp/>z2,<sp/>z3,<sp/>z4},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_zeroed_edges.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/boundary/boundary.cpp" line="417" column="6" bodyfile="HighMap/src/boundary/boundary.cpp" bodystart="417" bodyend="454" declfile="HighMap/include/highmap/boundary.hpp" declline="288" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a4960846742ad118ec9eadaba40ca39ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::apply_hillshade</definition>
        <argsstring>(Tensor &amp;img, const Array &amp;array, float vmin=0.f, float vmax=1.f, float exponent=1.f)</argsstring>
        <name>apply_hillshade</name>
        <qualifiedname>hmap::apply_hillshade</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>img</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vmin</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>vmax</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>exponent</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Apply hillshading to a <ref refid="classhmap_1_1Tensor" kindref="compound">Tensor</ref> image. </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies a hillshading effect to the provided tensor image using the elevation data in the input array. The effect is controlled by the power exponent and can be scaled by specifying the minimum and maximum values.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>img</parametername>
</parameternamelist>
<parameterdescription>
<para>Input image represented as a <ref refid="classhmap_1_1Tensor" kindref="compound">Tensor</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Elevation data used to generate the hillshading effect. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmin</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum value for scaling the hillshading effect (default is 0.f). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmax</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum value for scaling the hillshading effect (default is 1.f). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exponent</parametername>
</parameternamelist>
<parameterdescription>
<para>Power exponent applied to the hillshade values (default is 1.f). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/colorize/colorize.cpp" line="22" column="6" bodyfile="HighMap/src/colorize/colorize.cpp" bodystart="22" bodyend="42" declfile="HighMap/include/highmap/colorize.hpp" declline="50" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aefc8cbe645337bb5b663436c0324f9e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::apply_hillshade</definition>
        <argsstring>(std::vector&lt; uint8_t &gt; &amp;img, const Array &amp;array, float vmin=0.f, float vmax=1.f, float exponent=1.f, bool is_img_rgba=false)</argsstring>
        <name>apply_hillshade</name>
        <qualifiedname>hmap::apply_hillshade</qualifiedname>
        <param>
          <type>std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>img</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vmin</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>vmax</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>exponent</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>is_img_rgba</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Apply hillshading to an 8-bit image. </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies a hillshading effect to a vector of 8-bit image data. The effect is computed based on the elevation data in the input array. The image can be either RGB or RGBA format depending on the is_img_rgba flag.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>img</parametername>
</parameternamelist>
<parameterdescription>
<para>Input image represented as a vector of 8-bit data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Elevation data used to generate the hillshading effect. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmin</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum value for scaling the hillshading effect (default is 0.f). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmax</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum value for scaling the hillshading effect (default is 1.f). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exponent</parametername>
</parameternamelist>
<parameterdescription>
<para>Power exponent applied to the hillshade values (default is 1.f). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_img_rgba</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean flag indicating if the input image has an alpha channel (default is false). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/colorize/colorize.cpp" line="44" column="6" bodyfile="HighMap/src/colorize/colorize.cpp" bodystart="44" bodyend="86" declfile="HighMap/include/highmap/colorize.hpp" declline="74" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a33a635351aa13228557a585470ba4563" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor hmap::colorize</definition>
        <argsstring>(const Array &amp;array, float vmin, float vmax, int cmap, bool hillshading, bool reverse=false, const Array *p_noise=nullptr)</argsstring>
        <name>colorize</name>
        <qualifiedname>hmap::colorize</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vmin</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vmax</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cmap</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>hillshading</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reverse</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Apply colorization to an array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies a colormap to the input array and optionally applies hillshading and noise. The colorization can be reversed, and the function returns a <ref refid="classhmap_1_1Tensor" kindref="compound">Tensor</ref> representing the colorized image.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be colorized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmin</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum value for scaling the colormap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmax</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum value for scaling the colormap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmap</parametername>
</parameternamelist>
<parameterdescription>
<para>Colormap to be applied (using the Cmap enum). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hillshading</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean flag to apply hillshading. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reverse</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean flag to reverse the colormap (default is false). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to a noise array (default is nullptr). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Tensor" kindref="compound">Tensor</ref> Colorized <ref refid="classhmap_1_1Tensor" kindref="compound">Tensor</ref> image. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/colorize/colorize.cpp" line="88" column="8" bodyfile="HighMap/src/colorize/colorize.cpp" bodystart="88" bodyend="145" declfile="HighMap/include/highmap/colorize.hpp" declline="97" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aa76bdaf8b572bcea0778ef8815965307" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor hmap::colorize_grayscale</definition>
        <argsstring>(const Array &amp;array)</argsstring>
        <name>colorize_grayscale</name>
        <qualifiedname>hmap::colorize_grayscale</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Convert an array to a grayscale image. </para>
        </briefdescription>
        <detaileddescription>
<para>This function converts the input array to an 8-bit grayscale <ref refid="classhmap_1_1Tensor" kindref="compound">Tensor</ref> image.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Tensor" kindref="compound">Tensor</ref> Grayscale <ref refid="classhmap_1_1Tensor" kindref="compound">Tensor</ref> image. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/colorize/colorize.cpp" line="147" column="8" bodyfile="HighMap/src/colorize/colorize.cpp" bodystart="147" bodyend="153" declfile="HighMap/include/highmap/colorize.hpp" declline="113" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1afda3d37dc8fba4a56818964784d2178b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor hmap::colorize_histogram</definition>
        <argsstring>(const Array &amp;array)</argsstring>
        <name>colorize_histogram</name>
        <qualifiedname>hmap::colorize_histogram</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Convert an array to a histogram-based grayscale image. </para>
        </briefdescription>
        <detaileddescription>
<para>This function converts the input array to an 8-bit grayscale <ref refid="classhmap_1_1Tensor" kindref="compound">Tensor</ref> image using a histogram-based method for enhanced contrast.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Tensor" kindref="compound">Tensor</ref> Grayscale <ref refid="classhmap_1_1Tensor" kindref="compound">Tensor</ref> image with histogram-based contrast. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/colorize/colorize.cpp" line="155" column="8" bodyfile="HighMap/src/colorize/colorize.cpp" bodystart="155" bodyend="189" declfile="HighMap/include/highmap/colorize.hpp" declline="124" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aa60f142e186d43472cdda569c03b31b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor hmap::colorize_slope_height_heatmap</definition>
        <argsstring>(const Array &amp;array, int cmap)</argsstring>
        <name>colorize_slope_height_heatmap</name>
        <qualifiedname>hmap::colorize_slope_height_heatmap</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cmap</declname>
        </param>
        <briefdescription>
<para>Colorizes a slope height heatmap based on the gradient norms of a given array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes a colorized heatmap using a two-dimensional histogram that considers the gradient norm of the input array. It normalizes both the input array values and their corresponding gradient norms, calculates a 2D histogram, and then applies a colormap to visualize the heatmap.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The input array for which the slope height heatmap is computed. This should be a 2D array representing height values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmap</parametername>
</parameternamelist>
<parameterdescription>
<para>An integer representing the colormap to be used for colorization. Colormap options depend on the colorization function used internally.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Tensor" kindref="compound">Tensor</ref> representing the colorized heatmap, which visualizes the distribution of height values and their corresponding gradient norms.</para>
</simplesect>
<itemizedlist>
<listitem><para>The function normalizes the height values and gradient norms independently using the minimum and maximum values.</para>
</listitem><listitem><para>A 2D histogram is constructed, where each bin corresponds to a pair of normalized height and gradient values.</para>
</listitem><listitem><para>The colormap is then applied to this histogram to produce a colorized output.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>If the input array has a constant value (i.e., min == max), no normalization is applied, and the function may not produce meaningful results.</para>
</simplesect>
<simplesect kind="warning"><para>Ensure that the input array is non-empty and has valid dimensions.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_colorize_slope_height_heatmap.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Tensor" kindref="compound">hmap::Tensor</ref><sp/>col3<sp/>=<sp/><ref refid="namespacehmap_1aa60f142e186d43472cdda569c03b31b2" kindref="member">hmap::colorize_slope_height_heatmap</ref>(z,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>col3.<ref refid="classhmap_1_1Tensor_1afe46210c8fa2c76229cc4099d63f237e" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_colorize_slope_height_heatmap.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_colorize_slope_height_heatmap.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/colorize/colorize.cpp" line="191" column="8" bodyfile="HighMap/src/colorize/colorize.cpp" bodystart="191" bodyend="235" declfile="HighMap/include/highmap/colorize.hpp" declline="165" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a9f21720d5e7b1c93e0d5b50631f1ca8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor hmap::colorize_vec2</definition>
        <argsstring>(const Array &amp;array1, const Array &amp;array2)</argsstring>
        <name>colorize_vec2</name>
        <qualifiedname>hmap::colorize_vec2</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array2</declname>
        </param>
        <briefdescription>
<para>Combine two arrays into a colored image. </para>
        </briefdescription>
        <detaileddescription>
<para>This function takes two input arrays and combines them into a single 8-bit colored <ref refid="classhmap_1_1Tensor" kindref="compound">Tensor</ref> image. The resulting image uses the data from both arrays to create a composite color representation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array1</parametername>
</parameternamelist>
<parameterdescription>
<para>First input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second input array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Tensor" kindref="compound">Tensor</ref> Colorized <ref refid="classhmap_1_1Tensor" kindref="compound">Tensor</ref> image.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_colorize_vec2.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>x<sp/>=<sp/><ref refid="namespacehmap_1ad1836a084a8607446ce029d32c02a201" kindref="member">hmap::slope</ref>(shape,<sp/>0.f,<sp/>1.f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>y<sp/>=<sp/><ref refid="namespacehmap_1ad1836a084a8607446ce029d32c02a201" kindref="member">hmap::slope</ref>(shape,<sp/>90.f,<sp/>1.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Tensor" kindref="compound">hmap::Tensor</ref><sp/>col3<sp/>=<sp/><ref refid="namespacehmap_1a9f21720d5e7b1c93e0d5b50631f1ca8f" kindref="member">hmap::colorize_vec2</ref>(x,<sp/>y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>col3.<ref refid="classhmap_1_1Tensor_1afe46210c8fa2c76229cc4099d63f237e" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_colorize_vec2.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_colorize_vec2.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/colorize/colorize.cpp" line="237" column="8" bodyfile="HighMap/src/colorize/colorize.cpp" bodystart="237" bodyend="279" declfile="HighMap/include/highmap/colorize.hpp" declline="184" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aea4d1a92934de93437705abd7dde6b06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; float &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; float &gt; &gt; hmap::get_colormap_data</definition>
        <argsstring>(int cmap)</argsstring>
        <name>get_colormap_data</name>
        <qualifiedname>hmap::get_colormap_data</qualifiedname>
        <param>
          <type>int</type>
          <declname>cmap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/colormaps/get_colormap_data.cpp" line="11" column="13" bodyfile="HighMap/src/colormaps/get_colormap_data.cpp" bodystart="11" bodyend="29" declfile="HighMap/include/highmap/colormaps.hpp" declline="261" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a9411ccef8a74e06ef51efd1f5041c7b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::convolve1d_i</definition>
        <argsstring>(const Array &amp;array, const std::vector&lt; float &gt; &amp;kernel)</argsstring>
        <name>convolve1d_i</name>
        <qualifiedname>hmap::convolve1d_i</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>kernel</declname>
        </param>
        <briefdescription>
<para>Return the convolution product of the array with a 1D kernel along the &apos;i&apos; direction. </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies a 1D convolution to the input array using the provided kernel, considering the convolution in the row direction (&apos;i&apos; direction).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be convolved. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel</parametername>
</parameternamelist>
<parameterdescription>
<para>1D kernel to be used for the convolution. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Resulting array after applying the 1D convolution.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_convolve1d_ij.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>k(32);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::fill(k.begin(),<sp/>k.end(),<sp/>1.f<sp/>/<sp/>32.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zc<sp/>=<sp/><ref refid="namespacehmap_1a9411ccef8a74e06ef51efd1f5041c7b4" kindref="member">hmap::convolve1d_i</ref>(z,<sp/>k);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>zc<sp/>=<sp/><ref refid="namespacehmap_1a2f3f79308ada9782de6c4866b567b167" kindref="member">hmap::convolve1d_j</ref>(zc,<sp/>k);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_convolve1d_ij.png&quot;</highlight><highlight class="normal">,<sp/>{z,<sp/>zc},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_convolve1d_ij.png"></image>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="namespacehmap_1a2f3f79308ada9782de6c4866b567b167" kindref="member">convolve1d_j</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/convolve/convolve.cpp" line="16" column="7" bodyfile="HighMap/src/convolve/convolve.cpp" bodystart="16" bodyend="46" declfile="HighMap/include/highmap/convolve.hpp" declline="46" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a2f3f79308ada9782de6c4866b567b167" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::convolve1d_j</definition>
        <argsstring>(const Array &amp;array, const std::vector&lt; float &gt; &amp;kernel)</argsstring>
        <name>convolve1d_j</name>
        <qualifiedname>hmap::convolve1d_j</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>kernel</declname>
        </param>
        <briefdescription>
<para>Return the convolution product of the array with a 1D kernel along the &apos;j&apos; direction. </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies a 1D convolution to the input array using the provided kernel, considering the convolution in the column direction (&apos;j&apos; direction).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be convolved. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel</parametername>
</parameternamelist>
<parameterdescription>
<para>1D kernel to be used for the convolution. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Resulting array after applying the 1D convolution.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_convolve1d_ij.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>k(32);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::fill(k.begin(),<sp/>k.end(),<sp/>1.f<sp/>/<sp/>32.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zc<sp/>=<sp/><ref refid="namespacehmap_1a9411ccef8a74e06ef51efd1f5041c7b4" kindref="member">hmap::convolve1d_i</ref>(z,<sp/>k);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>zc<sp/>=<sp/><ref refid="namespacehmap_1a2f3f79308ada9782de6c4866b567b167" kindref="member">hmap::convolve1d_j</ref>(zc,<sp/>k);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_convolve1d_ij.png&quot;</highlight><highlight class="normal">,<sp/>{z,<sp/>zc},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_convolve1d_ij.png"></image>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="namespacehmap_1a9411ccef8a74e06ef51efd1f5041c7b4" kindref="member">convolve1d_i</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/convolve/convolve.cpp" line="48" column="7" bodyfile="HighMap/src/convolve/convolve.cpp" bodystart="48" bodyend="79" declfile="HighMap/include/highmap/convolve.hpp" declline="67" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1acf8376b5e40b4373986c9a6b41c02429" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::convolve2d</definition>
        <argsstring>(const Array &amp;array, const Array &amp;kernel)</argsstring>
        <name>convolve2d</name>
        <qualifiedname>hmap::convolve2d</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>kernel</declname>
        </param>
        <briefdescription>
<para>Return the convolution product of the array with a given 2D kernel. </para>
        </briefdescription>
        <detaileddescription>
<para>This function performs a 2D convolution on the input array using the specified 2D kernel. The output array has the same shape as the input array, and symmetry boundary conditions are used.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be convolved. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel</parametername>
</parameternamelist>
<parameterdescription>
<para>2D kernel to be used for the convolution. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Resulting array after applying the 2D convolution.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_convolve2d_svd.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1aaebee84e8c697616359a93440eb92b50" kindref="member">hmap::white</ref>(shape,<sp/>0.f,<sp/>1.f,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>kernel<sp/>=<sp/><ref refid="namespacehmap_1acffafcfa04738c04fdd82eea8aa262dc" kindref="member">hmap::disk</ref>({32,<sp/>32});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>kernel.<ref refid="classhmap_1_1Array_1ab55ee6021288a467f7d782b09e888f25" kindref="member">normalize</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SVD<sp/>approximation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>rank<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zs<sp/>=<sp/><ref refid="namespacehmap_1a15951dcd1ef3999591c757944f894e15" kindref="member">hmap::convolve2d_svd</ref>(z,<sp/>kernel,<sp/>rank);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>exact<sp/>convolution</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zc<sp/>=<sp/><ref refid="namespacehmap_1acf8376b5e40b4373986c9a6b41c02429" kindref="member">hmap::convolve2d</ref>(z,<sp/>kernel);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">remap</ref>(zs);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">remap</ref>(zc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_convolve2d_svd.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zs,<sp/>zc},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/convolve/convolve.cpp" line="81" column="7" bodyfile="HighMap/src/convolve/convolve.cpp" bodystart="81" bodyend="92" declfile="HighMap/include/highmap/convolve.hpp" declline="83" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a6108df0909730083cb6dd7cf4a217c1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::convolve2d_truncated</definition>
        <argsstring>(const Array &amp;array, const Array &amp;kernel)</argsstring>
        <name>convolve2d_truncated</name>
        <qualifiedname>hmap::convolve2d_truncated</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>kernel</declname>
        </param>
        <briefdescription>
<para>Return the convolution product of the array with a given 2D kernel, with a truncated output size. </para>
        </briefdescription>
        <detaileddescription>
<para>This function performs a 2D convolution on the input array using the specified 2D kernel. The resulting output array is smaller than the input array by the dimensions of the kernel.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be convolved. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel</parametername>
</parameternamelist>
<parameterdescription>
<para>2D kernel to be used for the convolution. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Resulting array after applying the truncated 2D convolution. Shape: {array.shape[0] - kernel.shape[0], array.shape[1] - kernel.shape[1]}. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/convolve/convolve.cpp" line="94" column="7" bodyfile="HighMap/src/convolve/convolve.cpp" bodystart="94" bodyend="106" declfile="HighMap/include/highmap/convolve.hpp" declline="100" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a15951dcd1ef3999591c757944f894e15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::convolve2d_svd</definition>
        <argsstring>(const Array &amp;z, const Array &amp;kernel, int rank=3)</argsstring>
        <name>convolve2d_svd</name>
        <qualifiedname>hmap::convolve2d_svd</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rank</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
<para>Return the approximate convolution product of the array with a Singular Value Decomposition (SVD) of a kernel. </para>
        </briefdescription>
        <detaileddescription>
<para>This function approximates the convolution of the input array with a 2D kernel by using its Singular Value Decomposition (SVD). The approximation is based on the first <computeroutput>rank</computeroutput> singular values and vectors.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be convolved. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel</parametername>
</parameternamelist>
<parameterdescription>
<para>2D kernel to be used for the convolution. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rank</parametername>
</parameternamelist>
<parameterdescription>
<para>Approximation rank: number of singular values/vectors used for the approximation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Resulting array after applying the SVD-based convolution approximation.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_convolve2d_svd.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1aaebee84e8c697616359a93440eb92b50" kindref="member">hmap::white</ref>(shape,<sp/>0.f,<sp/>1.f,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>kernel<sp/>=<sp/><ref refid="namespacehmap_1acffafcfa04738c04fdd82eea8aa262dc" kindref="member">hmap::disk</ref>({32,<sp/>32});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>kernel.<ref refid="classhmap_1_1Array_1ab55ee6021288a467f7d782b09e888f25" kindref="member">normalize</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SVD<sp/>approximation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>rank<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zs<sp/>=<sp/><ref refid="namespacehmap_1a15951dcd1ef3999591c757944f894e15" kindref="member">hmap::convolve2d_svd</ref>(z,<sp/>kernel,<sp/>rank);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>exact<sp/>convolution</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zc<sp/>=<sp/><ref refid="namespacehmap_1acf8376b5e40b4373986c9a6b41c02429" kindref="member">hmap::convolve2d</ref>(z,<sp/>kernel);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">remap</ref>(zs);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">remap</ref>(zc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_convolve2d_svd.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zs,<sp/>zc},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_convolve2d_svd.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/convolve/convolve2d_svd.cpp" line="19" column="7" bodyfile="HighMap/src/convolve/convolve2d_svd.cpp" bodystart="19" bodyend="66" declfile="HighMap/include/highmap/convolve.hpp" declline="123" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1addbc812a7b7523f4e0f185fb27016469" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::convolve2d_svd_rotated_kernel</definition>
        <argsstring>(const Array &amp;z, const Array &amp;kernel, int rank=3, int n_rotations=6, uint seed=1)</argsstring>
        <name>convolve2d_svd_rotated_kernel</name>
        <qualifiedname>hmap::convolve2d_svd_rotated_kernel</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rank</declname>
          <defval>3</defval>
        </param>
        <param>
          <type>int</type>
          <declname>n_rotations</declname>
          <defval>6</defval>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Return the approximate convolution product of the array with a Singular Value Decomposition (SVD) of a kernel combined with kernel rotations. </para>
        </briefdescription>
        <detaileddescription>
<para>This function approximates the convolution of the input array with a 2D kernel using its SVD, combined with multiple rotations of the kernel. This can enhance the convolution approximation by considering different orientations of the kernel.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be convolved. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel</parametername>
</parameternamelist>
<parameterdescription>
<para>2D kernel to be used for the convolution. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rank</parametername>
</parameternamelist>
<parameterdescription>
<para>Approximation rank: number of singular values/vectors used for the approximation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_rotations</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of kernel rotations to be considered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed number for kernel rotations. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Resulting array after applying the SVD-based convolution approximation with rotations.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_convolve2d_svd.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1aaebee84e8c697616359a93440eb92b50" kindref="member">hmap::white</ref>(shape,<sp/>0.f,<sp/>1.f,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>kernel<sp/>=<sp/><ref refid="namespacehmap_1acffafcfa04738c04fdd82eea8aa262dc" kindref="member">hmap::disk</ref>({32,<sp/>32});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>kernel.<ref refid="classhmap_1_1Array_1ab55ee6021288a467f7d782b09e888f25" kindref="member">normalize</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SVD<sp/>approximation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>rank<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zs<sp/>=<sp/><ref refid="namespacehmap_1a15951dcd1ef3999591c757944f894e15" kindref="member">hmap::convolve2d_svd</ref>(z,<sp/>kernel,<sp/>rank);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>exact<sp/>convolution</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zc<sp/>=<sp/><ref refid="namespacehmap_1acf8376b5e40b4373986c9a6b41c02429" kindref="member">hmap::convolve2d</ref>(z,<sp/>kernel);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">remap</ref>(zs);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">remap</ref>(zc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_convolve2d_svd.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zs,<sp/>zc},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_convolve2d_svd.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/convolve/convolve2d_svd.cpp" line="68" column="7" bodyfile="HighMap/src/convolve/convolve2d_svd.cpp" bodystart="68" bodyend="91" declfile="HighMap/include/highmap/convolve.hpp" declline="150" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a4bc3d501e53aebe8e15428798656a3e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::accumulation_curvature</definition>
        <argsstring>(const Array &amp;z, int ir)</argsstring>
        <name>accumulation_curvature</name>
        <qualifiedname>hmap::accumulation_curvature</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>Computes the accumulation curvature of a heightmap. Acumulation curvature is a measure of the extent of local accumulation of flows at a given point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The input array representing the heightmap data (elevation values). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius used for pre-filtering, which controls the scale of the analysis (in pixels). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> An output array containing the calculated accumulation curvature values for each point in the input heightmap.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_curvature.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195acb1550fb6b10f55ed2d30b10e7ab65bb" kindref="member">hmap::NoiseType::PERLIN_HALF</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>k<sp/>=<sp/><ref refid="namespacehmap_1acad6026e6aab9d084238c6c12cb2c565" kindref="member">hmap::curvature_gaussian</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>h<sp/>=<sp/><ref refid="namespacehmap_1a0f5685e5bb02e29d1d35720d3aaedca0" kindref="member">hmap::curvature_mean</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ir<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ac<sp/>=<sp/><ref refid="namespacehmap_1a4bc3d501e53aebe8e15428798656a3e4" kindref="member">hmap::accumulation_curvature</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>chc<sp/>=<sp/><ref refid="namespacehmap_1adfe8eddd79327602ea551c79524e0a21" kindref="member">hmap::curvature_horizontal_cross_sectional</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>chp<sp/>=<sp/><ref refid="namespacehmap_1a1bf0dae54c5b8bd4e0aeb738c26644fc" kindref="member">hmap::curvature_horizontal_plan</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cht<sp/>=<sp/><ref refid="namespacehmap_1a6c28c3adca1bc50a9e769e3bacaf777b" kindref="member">hmap::curvature_horizontal_tangential</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cri<sp/>=<sp/><ref refid="namespacehmap_1ac60627713d4f7ff0c406182ac9941483" kindref="member">hmap::curvature_ring</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cro<sp/>=<sp/><ref refid="namespacehmap_1ab983266e7db85af59452a75364a6bad8" kindref="member">hmap::curvature_rotor</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cvl<sp/>=<sp/><ref refid="namespacehmap_1ab2de0fa5e51719f4139d0fc0309a9f7f" kindref="member">hmap::curvature_vertical_longitudinal</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cvp<sp/>=<sp/><ref refid="namespacehmap_1ac56ceece101a652bd52592149e031a41" kindref="member">hmap::curvature_vertical_profile</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>si<sp/>=<sp/><ref refid="namespacehmap_1a4e9ebf2cab88b81e28538a5432abf68c" kindref="member">hmap::shape_index</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>un<sp/>=<sp/><ref refid="namespacehmap_1a5dc8b3117305f025eb4d0da50bf3c674" kindref="member">hmap::unsphericity</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Array&gt;<sp/>alist<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>k,<sp/>h,<sp/>ac,<sp/>chc,<sp/>chp,<sp/>cht,<sp/>cri,<sp/>cro,<sp/>cvl,<sp/>cvp,<sp/>si,<sp/>un};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;a<sp/>:<sp/>alist)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap" kindref="compound">hmap</ref>::<ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">remap</ref>(a);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_curvature.png&quot;</highlight><highlight class="normal">,<sp/>alist,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_curvature.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/curvature/curvature.cpp" line="12" column="7" bodyfile="HighMap/src/curvature/curvature.cpp" bodystart="12" bodyend="32" declfile="HighMap/include/highmap/curvature.hpp" declline="37" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1acad6026e6aab9d084238c6c12cb2c565" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::curvature_gaussian</definition>
        <argsstring>(const Array &amp;z)</argsstring>
        <name>curvature_gaussian</name>
        <qualifiedname>hmap::curvature_gaussian</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Calculates the Gaussian curvature of a heightmap, providing insights into the surface&apos;s intrinsic curvature at each point. Gaussian curvature is a fundamental measure of surface curvature, indicating how the surface bends in multiple directions at each point. This metric is often used in geomorphology to understand landform shapes. Usage: Use this function to analyze the overall shape of terrain features, identifying whether regions are saddle-like, dome-like, or basin-like. Useful in studies related to tectonics, erosion patterns, and landform development. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The input array representing the heightmap data (elevation values). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> An output array containing the Gaussian curvature values, with positive values indicating dome-like shapes and negative values indicating saddle shapes.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_curvature.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195acb1550fb6b10f55ed2d30b10e7ab65bb" kindref="member">hmap::NoiseType::PERLIN_HALF</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>k<sp/>=<sp/><ref refid="namespacehmap_1acad6026e6aab9d084238c6c12cb2c565" kindref="member">hmap::curvature_gaussian</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>h<sp/>=<sp/><ref refid="namespacehmap_1a0f5685e5bb02e29d1d35720d3aaedca0" kindref="member">hmap::curvature_mean</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ir<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ac<sp/>=<sp/><ref refid="namespacehmap_1a4bc3d501e53aebe8e15428798656a3e4" kindref="member">hmap::accumulation_curvature</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>chc<sp/>=<sp/><ref refid="namespacehmap_1adfe8eddd79327602ea551c79524e0a21" kindref="member">hmap::curvature_horizontal_cross_sectional</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>chp<sp/>=<sp/><ref refid="namespacehmap_1a1bf0dae54c5b8bd4e0aeb738c26644fc" kindref="member">hmap::curvature_horizontal_plan</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cht<sp/>=<sp/><ref refid="namespacehmap_1a6c28c3adca1bc50a9e769e3bacaf777b" kindref="member">hmap::curvature_horizontal_tangential</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cri<sp/>=<sp/><ref refid="namespacehmap_1ac60627713d4f7ff0c406182ac9941483" kindref="member">hmap::curvature_ring</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cro<sp/>=<sp/><ref refid="namespacehmap_1ab983266e7db85af59452a75364a6bad8" kindref="member">hmap::curvature_rotor</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cvl<sp/>=<sp/><ref refid="namespacehmap_1ab2de0fa5e51719f4139d0fc0309a9f7f" kindref="member">hmap::curvature_vertical_longitudinal</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cvp<sp/>=<sp/><ref refid="namespacehmap_1ac56ceece101a652bd52592149e031a41" kindref="member">hmap::curvature_vertical_profile</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>si<sp/>=<sp/><ref refid="namespacehmap_1a4e9ebf2cab88b81e28538a5432abf68c" kindref="member">hmap::shape_index</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>un<sp/>=<sp/><ref refid="namespacehmap_1a5dc8b3117305f025eb4d0da50bf3c674" kindref="member">hmap::unsphericity</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Array&gt;<sp/>alist<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>k,<sp/>h,<sp/>ac,<sp/>chc,<sp/>chp,<sp/>cht,<sp/>cri,<sp/>cro,<sp/>cvl,<sp/>cvp,<sp/>si,<sp/>un};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;a<sp/>:<sp/>alist)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap" kindref="compound">hmap</ref>::<ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">remap</ref>(a);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_curvature.png&quot;</highlight><highlight class="normal">,<sp/>alist,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_curvature.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/curvature/curvature.cpp" line="34" column="7" bodyfile="HighMap/src/curvature/curvature.cpp" bodystart="34" bodyend="39" declfile="HighMap/include/highmap/curvature.hpp" declline="60" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1adfe8eddd79327602ea551c79524e0a21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::curvature_horizontal_cross_sectional</definition>
        <argsstring>(const Array &amp;z, int ir)</argsstring>
        <name>curvature_horizontal_cross_sectional</name>
        <qualifiedname>hmap::curvature_horizontal_cross_sectional</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>TODO. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The input array representing the heightmap data (elevation values). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> An output array containing the curvature values.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_curvature.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195acb1550fb6b10f55ed2d30b10e7ab65bb" kindref="member">hmap::NoiseType::PERLIN_HALF</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>k<sp/>=<sp/><ref refid="namespacehmap_1acad6026e6aab9d084238c6c12cb2c565" kindref="member">hmap::curvature_gaussian</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>h<sp/>=<sp/><ref refid="namespacehmap_1a0f5685e5bb02e29d1d35720d3aaedca0" kindref="member">hmap::curvature_mean</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ir<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ac<sp/>=<sp/><ref refid="namespacehmap_1a4bc3d501e53aebe8e15428798656a3e4" kindref="member">hmap::accumulation_curvature</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>chc<sp/>=<sp/><ref refid="namespacehmap_1adfe8eddd79327602ea551c79524e0a21" kindref="member">hmap::curvature_horizontal_cross_sectional</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>chp<sp/>=<sp/><ref refid="namespacehmap_1a1bf0dae54c5b8bd4e0aeb738c26644fc" kindref="member">hmap::curvature_horizontal_plan</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cht<sp/>=<sp/><ref refid="namespacehmap_1a6c28c3adca1bc50a9e769e3bacaf777b" kindref="member">hmap::curvature_horizontal_tangential</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cri<sp/>=<sp/><ref refid="namespacehmap_1ac60627713d4f7ff0c406182ac9941483" kindref="member">hmap::curvature_ring</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cro<sp/>=<sp/><ref refid="namespacehmap_1ab983266e7db85af59452a75364a6bad8" kindref="member">hmap::curvature_rotor</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cvl<sp/>=<sp/><ref refid="namespacehmap_1ab2de0fa5e51719f4139d0fc0309a9f7f" kindref="member">hmap::curvature_vertical_longitudinal</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cvp<sp/>=<sp/><ref refid="namespacehmap_1ac56ceece101a652bd52592149e031a41" kindref="member">hmap::curvature_vertical_profile</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>si<sp/>=<sp/><ref refid="namespacehmap_1a4e9ebf2cab88b81e28538a5432abf68c" kindref="member">hmap::shape_index</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>un<sp/>=<sp/><ref refid="namespacehmap_1a5dc8b3117305f025eb4d0da50bf3c674" kindref="member">hmap::unsphericity</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Array&gt;<sp/>alist<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>k,<sp/>h,<sp/>ac,<sp/>chc,<sp/>chp,<sp/>cht,<sp/>cri,<sp/>cro,<sp/>cvl,<sp/>cvp,<sp/>si,<sp/>un};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;a<sp/>:<sp/>alist)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap" kindref="compound">hmap</ref>::<ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">remap</ref>(a);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_curvature.png&quot;</highlight><highlight class="normal">,<sp/>alist,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_curvature.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/curvature/curvature.cpp" line="41" column="7" bodyfile="HighMap/src/curvature/curvature.cpp" bodystart="41" bodyend="54" declfile="HighMap/include/highmap/curvature.hpp" declline="74" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a1bf0dae54c5b8bd4e0aeb738c26644fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::curvature_horizontal_plan</definition>
        <argsstring>(const Array &amp;z, int ir)</argsstring>
        <name>curvature_horizontal_plan</name>
        <qualifiedname>hmap::curvature_horizontal_plan</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>TODO. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The input array representing the heightmap data (elevation values). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> An output array containing the curvature values.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_curvature.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195acb1550fb6b10f55ed2d30b10e7ab65bb" kindref="member">hmap::NoiseType::PERLIN_HALF</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>k<sp/>=<sp/><ref refid="namespacehmap_1acad6026e6aab9d084238c6c12cb2c565" kindref="member">hmap::curvature_gaussian</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>h<sp/>=<sp/><ref refid="namespacehmap_1a0f5685e5bb02e29d1d35720d3aaedca0" kindref="member">hmap::curvature_mean</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ir<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ac<sp/>=<sp/><ref refid="namespacehmap_1a4bc3d501e53aebe8e15428798656a3e4" kindref="member">hmap::accumulation_curvature</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>chc<sp/>=<sp/><ref refid="namespacehmap_1adfe8eddd79327602ea551c79524e0a21" kindref="member">hmap::curvature_horizontal_cross_sectional</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>chp<sp/>=<sp/><ref refid="namespacehmap_1a1bf0dae54c5b8bd4e0aeb738c26644fc" kindref="member">hmap::curvature_horizontal_plan</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cht<sp/>=<sp/><ref refid="namespacehmap_1a6c28c3adca1bc50a9e769e3bacaf777b" kindref="member">hmap::curvature_horizontal_tangential</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cri<sp/>=<sp/><ref refid="namespacehmap_1ac60627713d4f7ff0c406182ac9941483" kindref="member">hmap::curvature_ring</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cro<sp/>=<sp/><ref refid="namespacehmap_1ab983266e7db85af59452a75364a6bad8" kindref="member">hmap::curvature_rotor</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cvl<sp/>=<sp/><ref refid="namespacehmap_1ab2de0fa5e51719f4139d0fc0309a9f7f" kindref="member">hmap::curvature_vertical_longitudinal</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cvp<sp/>=<sp/><ref refid="namespacehmap_1ac56ceece101a652bd52592149e031a41" kindref="member">hmap::curvature_vertical_profile</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>si<sp/>=<sp/><ref refid="namespacehmap_1a4e9ebf2cab88b81e28538a5432abf68c" kindref="member">hmap::shape_index</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>un<sp/>=<sp/><ref refid="namespacehmap_1a5dc8b3117305f025eb4d0da50bf3c674" kindref="member">hmap::unsphericity</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Array&gt;<sp/>alist<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>k,<sp/>h,<sp/>ac,<sp/>chc,<sp/>chp,<sp/>cht,<sp/>cri,<sp/>cro,<sp/>cvl,<sp/>cvp,<sp/>si,<sp/>un};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;a<sp/>:<sp/>alist)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap" kindref="compound">hmap</ref>::<ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">remap</ref>(a);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_curvature.png&quot;</highlight><highlight class="normal">,<sp/>alist,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_curvature.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/curvature/curvature.cpp" line="56" column="7" bodyfile="HighMap/src/curvature/curvature.cpp" bodystart="56" bodyend="70" declfile="HighMap/include/highmap/curvature.hpp" declline="88" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a6c28c3adca1bc50a9e769e3bacaf777b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::curvature_horizontal_tangential</definition>
        <argsstring>(const Array &amp;z, int ir)</argsstring>
        <name>curvature_horizontal_tangential</name>
        <qualifiedname>hmap::curvature_horizontal_tangential</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>TODO. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The input array representing the heightmap data (elevation values). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> An output array containing the curvature values.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_curvature.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195acb1550fb6b10f55ed2d30b10e7ab65bb" kindref="member">hmap::NoiseType::PERLIN_HALF</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>k<sp/>=<sp/><ref refid="namespacehmap_1acad6026e6aab9d084238c6c12cb2c565" kindref="member">hmap::curvature_gaussian</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>h<sp/>=<sp/><ref refid="namespacehmap_1a0f5685e5bb02e29d1d35720d3aaedca0" kindref="member">hmap::curvature_mean</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ir<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ac<sp/>=<sp/><ref refid="namespacehmap_1a4bc3d501e53aebe8e15428798656a3e4" kindref="member">hmap::accumulation_curvature</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>chc<sp/>=<sp/><ref refid="namespacehmap_1adfe8eddd79327602ea551c79524e0a21" kindref="member">hmap::curvature_horizontal_cross_sectional</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>chp<sp/>=<sp/><ref refid="namespacehmap_1a1bf0dae54c5b8bd4e0aeb738c26644fc" kindref="member">hmap::curvature_horizontal_plan</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cht<sp/>=<sp/><ref refid="namespacehmap_1a6c28c3adca1bc50a9e769e3bacaf777b" kindref="member">hmap::curvature_horizontal_tangential</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cri<sp/>=<sp/><ref refid="namespacehmap_1ac60627713d4f7ff0c406182ac9941483" kindref="member">hmap::curvature_ring</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cro<sp/>=<sp/><ref refid="namespacehmap_1ab983266e7db85af59452a75364a6bad8" kindref="member">hmap::curvature_rotor</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cvl<sp/>=<sp/><ref refid="namespacehmap_1ab2de0fa5e51719f4139d0fc0309a9f7f" kindref="member">hmap::curvature_vertical_longitudinal</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cvp<sp/>=<sp/><ref refid="namespacehmap_1ac56ceece101a652bd52592149e031a41" kindref="member">hmap::curvature_vertical_profile</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>si<sp/>=<sp/><ref refid="namespacehmap_1a4e9ebf2cab88b81e28538a5432abf68c" kindref="member">hmap::shape_index</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>un<sp/>=<sp/><ref refid="namespacehmap_1a5dc8b3117305f025eb4d0da50bf3c674" kindref="member">hmap::unsphericity</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Array&gt;<sp/>alist<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>k,<sp/>h,<sp/>ac,<sp/>chc,<sp/>chp,<sp/>cht,<sp/>cri,<sp/>cro,<sp/>cvl,<sp/>cvp,<sp/>si,<sp/>un};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;a<sp/>:<sp/>alist)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap" kindref="compound">hmap</ref>::<ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">remap</ref>(a);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_curvature.png&quot;</highlight><highlight class="normal">,<sp/>alist,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_curvature.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/curvature/curvature.cpp" line="72" column="7" bodyfile="HighMap/src/curvature/curvature.cpp" bodystart="72" bodyend="86" declfile="HighMap/include/highmap/curvature.hpp" declline="102" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a0f5685e5bb02e29d1d35720d3aaedca0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::curvature_mean</definition>
        <argsstring>(const Array &amp;z)</argsstring>
        <name>curvature_mean</name>
        <qualifiedname>hmap::curvature_mean</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Computes the mean curvature of a heightmap, indicating the average curvature at each point on the surface. Mean curvature is another critical metric in geomorphology, representing the average bending of the surface. This measure is useful in understanding terrain smoothness and can help identify areas of potential erosion or deposition. Usage: Apply this function to detect areas prone to erosion or sediment deposition. Useful in landscape evolution models and in analyzing the stability of slopes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The input array representing the heightmap data (elevation values). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> An output array containing the mean curvature values, where positive values indicate convex regions and negative values indicate concave regions.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_curvature.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195acb1550fb6b10f55ed2d30b10e7ab65bb" kindref="member">hmap::NoiseType::PERLIN_HALF</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>k<sp/>=<sp/><ref refid="namespacehmap_1acad6026e6aab9d084238c6c12cb2c565" kindref="member">hmap::curvature_gaussian</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>h<sp/>=<sp/><ref refid="namespacehmap_1a0f5685e5bb02e29d1d35720d3aaedca0" kindref="member">hmap::curvature_mean</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ir<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ac<sp/>=<sp/><ref refid="namespacehmap_1a4bc3d501e53aebe8e15428798656a3e4" kindref="member">hmap::accumulation_curvature</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>chc<sp/>=<sp/><ref refid="namespacehmap_1adfe8eddd79327602ea551c79524e0a21" kindref="member">hmap::curvature_horizontal_cross_sectional</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>chp<sp/>=<sp/><ref refid="namespacehmap_1a1bf0dae54c5b8bd4e0aeb738c26644fc" kindref="member">hmap::curvature_horizontal_plan</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cht<sp/>=<sp/><ref refid="namespacehmap_1a6c28c3adca1bc50a9e769e3bacaf777b" kindref="member">hmap::curvature_horizontal_tangential</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cri<sp/>=<sp/><ref refid="namespacehmap_1ac60627713d4f7ff0c406182ac9941483" kindref="member">hmap::curvature_ring</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cro<sp/>=<sp/><ref refid="namespacehmap_1ab983266e7db85af59452a75364a6bad8" kindref="member">hmap::curvature_rotor</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cvl<sp/>=<sp/><ref refid="namespacehmap_1ab2de0fa5e51719f4139d0fc0309a9f7f" kindref="member">hmap::curvature_vertical_longitudinal</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cvp<sp/>=<sp/><ref refid="namespacehmap_1ac56ceece101a652bd52592149e031a41" kindref="member">hmap::curvature_vertical_profile</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>si<sp/>=<sp/><ref refid="namespacehmap_1a4e9ebf2cab88b81e28538a5432abf68c" kindref="member">hmap::shape_index</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>un<sp/>=<sp/><ref refid="namespacehmap_1a5dc8b3117305f025eb4d0da50bf3c674" kindref="member">hmap::unsphericity</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Array&gt;<sp/>alist<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>k,<sp/>h,<sp/>ac,<sp/>chc,<sp/>chp,<sp/>cht,<sp/>cri,<sp/>cro,<sp/>cvl,<sp/>cvp,<sp/>si,<sp/>un};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;a<sp/>:<sp/>alist)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap" kindref="compound">hmap</ref>::<ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">remap</ref>(a);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_curvature.png&quot;</highlight><highlight class="normal">,<sp/>alist,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_curvature.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/curvature/curvature.cpp" line="88" column="7" bodyfile="HighMap/src/curvature/curvature.cpp" bodystart="88" bodyend="93" declfile="HighMap/include/highmap/curvature.hpp" declline="124" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ac60627713d4f7ff0c406182ac9941483" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::curvature_ring</definition>
        <argsstring>(const Array &amp;z, int ir)</argsstring>
        <name>curvature_ring</name>
        <qualifiedname>hmap::curvature_ring</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>Ring curvature is a second-order derivative of the elevation surface. It describes how the surface bends along a ring-like shape, often computed from the principal curvatures. Positive Values: Indicate convex surfaces where flow disperses (ridges, hilltops). Negative Values: Indicate concave surfaces where flow converges (valleys, depressions). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The input array representing the heightmap data (elevation values). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> An output array containing the curvature values.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_curvature.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195acb1550fb6b10f55ed2d30b10e7ab65bb" kindref="member">hmap::NoiseType::PERLIN_HALF</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>k<sp/>=<sp/><ref refid="namespacehmap_1acad6026e6aab9d084238c6c12cb2c565" kindref="member">hmap::curvature_gaussian</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>h<sp/>=<sp/><ref refid="namespacehmap_1a0f5685e5bb02e29d1d35720d3aaedca0" kindref="member">hmap::curvature_mean</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ir<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ac<sp/>=<sp/><ref refid="namespacehmap_1a4bc3d501e53aebe8e15428798656a3e4" kindref="member">hmap::accumulation_curvature</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>chc<sp/>=<sp/><ref refid="namespacehmap_1adfe8eddd79327602ea551c79524e0a21" kindref="member">hmap::curvature_horizontal_cross_sectional</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>chp<sp/>=<sp/><ref refid="namespacehmap_1a1bf0dae54c5b8bd4e0aeb738c26644fc" kindref="member">hmap::curvature_horizontal_plan</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cht<sp/>=<sp/><ref refid="namespacehmap_1a6c28c3adca1bc50a9e769e3bacaf777b" kindref="member">hmap::curvature_horizontal_tangential</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cri<sp/>=<sp/><ref refid="namespacehmap_1ac60627713d4f7ff0c406182ac9941483" kindref="member">hmap::curvature_ring</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cro<sp/>=<sp/><ref refid="namespacehmap_1ab983266e7db85af59452a75364a6bad8" kindref="member">hmap::curvature_rotor</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cvl<sp/>=<sp/><ref refid="namespacehmap_1ab2de0fa5e51719f4139d0fc0309a9f7f" kindref="member">hmap::curvature_vertical_longitudinal</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cvp<sp/>=<sp/><ref refid="namespacehmap_1ac56ceece101a652bd52592149e031a41" kindref="member">hmap::curvature_vertical_profile</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>si<sp/>=<sp/><ref refid="namespacehmap_1a4e9ebf2cab88b81e28538a5432abf68c" kindref="member">hmap::shape_index</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>un<sp/>=<sp/><ref refid="namespacehmap_1a5dc8b3117305f025eb4d0da50bf3c674" kindref="member">hmap::unsphericity</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Array&gt;<sp/>alist<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>k,<sp/>h,<sp/>ac,<sp/>chc,<sp/>chp,<sp/>cht,<sp/>cri,<sp/>cro,<sp/>cvl,<sp/>cvp,<sp/>si,<sp/>un};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;a<sp/>:<sp/>alist)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap" kindref="compound">hmap</ref>::<ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">remap</ref>(a);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_curvature.png&quot;</highlight><highlight class="normal">,<sp/>alist,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_curvature.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/curvature/curvature.cpp" line="95" column="7" bodyfile="HighMap/src/curvature/curvature.cpp" bodystart="95" bodyend="110" declfile="HighMap/include/highmap/curvature.hpp" declline="142" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ab983266e7db85af59452a75364a6bad8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::curvature_rotor</definition>
        <argsstring>(const Array &amp;z, int ir)</argsstring>
        <name>curvature_rotor</name>
        <qualifiedname>hmap::curvature_rotor</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>Rotor curvature, also called flow line curvature, describes how the curvature of a terrain surface influences the acceleration or deceleration of flow (e.g., water, debris, or air) along the direction of maximum slope. Positive values: Flow is decelerating (convex-up terrain, such as ridges or crests). Negative values: Flow is accelerating (concave-down terrain, such as valleys or channels). Zero values: Flow moves in a linear, constant-slope manner. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The input array representing the heightmap data (elevation values). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> An output array containing the curvature values.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_curvature.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195acb1550fb6b10f55ed2d30b10e7ab65bb" kindref="member">hmap::NoiseType::PERLIN_HALF</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>k<sp/>=<sp/><ref refid="namespacehmap_1acad6026e6aab9d084238c6c12cb2c565" kindref="member">hmap::curvature_gaussian</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>h<sp/>=<sp/><ref refid="namespacehmap_1a0f5685e5bb02e29d1d35720d3aaedca0" kindref="member">hmap::curvature_mean</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ir<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ac<sp/>=<sp/><ref refid="namespacehmap_1a4bc3d501e53aebe8e15428798656a3e4" kindref="member">hmap::accumulation_curvature</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>chc<sp/>=<sp/><ref refid="namespacehmap_1adfe8eddd79327602ea551c79524e0a21" kindref="member">hmap::curvature_horizontal_cross_sectional</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>chp<sp/>=<sp/><ref refid="namespacehmap_1a1bf0dae54c5b8bd4e0aeb738c26644fc" kindref="member">hmap::curvature_horizontal_plan</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cht<sp/>=<sp/><ref refid="namespacehmap_1a6c28c3adca1bc50a9e769e3bacaf777b" kindref="member">hmap::curvature_horizontal_tangential</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cri<sp/>=<sp/><ref refid="namespacehmap_1ac60627713d4f7ff0c406182ac9941483" kindref="member">hmap::curvature_ring</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cro<sp/>=<sp/><ref refid="namespacehmap_1ab983266e7db85af59452a75364a6bad8" kindref="member">hmap::curvature_rotor</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cvl<sp/>=<sp/><ref refid="namespacehmap_1ab2de0fa5e51719f4139d0fc0309a9f7f" kindref="member">hmap::curvature_vertical_longitudinal</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cvp<sp/>=<sp/><ref refid="namespacehmap_1ac56ceece101a652bd52592149e031a41" kindref="member">hmap::curvature_vertical_profile</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>si<sp/>=<sp/><ref refid="namespacehmap_1a4e9ebf2cab88b81e28538a5432abf68c" kindref="member">hmap::shape_index</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>un<sp/>=<sp/><ref refid="namespacehmap_1a5dc8b3117305f025eb4d0da50bf3c674" kindref="member">hmap::unsphericity</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Array&gt;<sp/>alist<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>k,<sp/>h,<sp/>ac,<sp/>chc,<sp/>chp,<sp/>cht,<sp/>cri,<sp/>cro,<sp/>cvl,<sp/>cvp,<sp/>si,<sp/>un};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;a<sp/>:<sp/>alist)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap" kindref="compound">hmap</ref>::<ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">remap</ref>(a);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_curvature.png&quot;</highlight><highlight class="normal">,<sp/>alist,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_curvature.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/curvature/curvature.cpp" line="112" column="7" bodyfile="HighMap/src/curvature/curvature.cpp" bodystart="112" bodyend="128" declfile="HighMap/include/highmap/curvature.hpp" declline="162" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ab2de0fa5e51719f4139d0fc0309a9f7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::curvature_vertical_longitudinal</definition>
        <argsstring>(const Array &amp;z, int ir)</argsstring>
        <name>curvature_vertical_longitudinal</name>
        <qualifiedname>hmap::curvature_vertical_longitudinal</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>TODO. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The input array representing the heightmap data (elevation values). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> An output array containing the curvature values.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_curvature.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195acb1550fb6b10f55ed2d30b10e7ab65bb" kindref="member">hmap::NoiseType::PERLIN_HALF</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>k<sp/>=<sp/><ref refid="namespacehmap_1acad6026e6aab9d084238c6c12cb2c565" kindref="member">hmap::curvature_gaussian</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>h<sp/>=<sp/><ref refid="namespacehmap_1a0f5685e5bb02e29d1d35720d3aaedca0" kindref="member">hmap::curvature_mean</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ir<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ac<sp/>=<sp/><ref refid="namespacehmap_1a4bc3d501e53aebe8e15428798656a3e4" kindref="member">hmap::accumulation_curvature</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>chc<sp/>=<sp/><ref refid="namespacehmap_1adfe8eddd79327602ea551c79524e0a21" kindref="member">hmap::curvature_horizontal_cross_sectional</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>chp<sp/>=<sp/><ref refid="namespacehmap_1a1bf0dae54c5b8bd4e0aeb738c26644fc" kindref="member">hmap::curvature_horizontal_plan</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cht<sp/>=<sp/><ref refid="namespacehmap_1a6c28c3adca1bc50a9e769e3bacaf777b" kindref="member">hmap::curvature_horizontal_tangential</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cri<sp/>=<sp/><ref refid="namespacehmap_1ac60627713d4f7ff0c406182ac9941483" kindref="member">hmap::curvature_ring</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cro<sp/>=<sp/><ref refid="namespacehmap_1ab983266e7db85af59452a75364a6bad8" kindref="member">hmap::curvature_rotor</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cvl<sp/>=<sp/><ref refid="namespacehmap_1ab2de0fa5e51719f4139d0fc0309a9f7f" kindref="member">hmap::curvature_vertical_longitudinal</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cvp<sp/>=<sp/><ref refid="namespacehmap_1ac56ceece101a652bd52592149e031a41" kindref="member">hmap::curvature_vertical_profile</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>si<sp/>=<sp/><ref refid="namespacehmap_1a4e9ebf2cab88b81e28538a5432abf68c" kindref="member">hmap::shape_index</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>un<sp/>=<sp/><ref refid="namespacehmap_1a5dc8b3117305f025eb4d0da50bf3c674" kindref="member">hmap::unsphericity</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Array&gt;<sp/>alist<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>k,<sp/>h,<sp/>ac,<sp/>chc,<sp/>chp,<sp/>cht,<sp/>cri,<sp/>cro,<sp/>cvl,<sp/>cvp,<sp/>si,<sp/>un};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;a<sp/>:<sp/>alist)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap" kindref="compound">hmap</ref>::<ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">remap</ref>(a);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_curvature.png&quot;</highlight><highlight class="normal">,<sp/>alist,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_curvature.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/curvature/curvature.cpp" line="130" column="7" bodyfile="HighMap/src/curvature/curvature.cpp" bodystart="130" bodyend="143" declfile="HighMap/include/highmap/curvature.hpp" declline="176" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ac56ceece101a652bd52592149e031a41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::curvature_vertical_profile</definition>
        <argsstring>(const Array &amp;z, int ir)</argsstring>
        <name>curvature_vertical_profile</name>
        <qualifiedname>hmap::curvature_vertical_profile</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>TODO. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The input array representing the heightmap data (elevation values). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> An output array containing the curvature values.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_curvature.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195acb1550fb6b10f55ed2d30b10e7ab65bb" kindref="member">hmap::NoiseType::PERLIN_HALF</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>k<sp/>=<sp/><ref refid="namespacehmap_1acad6026e6aab9d084238c6c12cb2c565" kindref="member">hmap::curvature_gaussian</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>h<sp/>=<sp/><ref refid="namespacehmap_1a0f5685e5bb02e29d1d35720d3aaedca0" kindref="member">hmap::curvature_mean</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ir<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ac<sp/>=<sp/><ref refid="namespacehmap_1a4bc3d501e53aebe8e15428798656a3e4" kindref="member">hmap::accumulation_curvature</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>chc<sp/>=<sp/><ref refid="namespacehmap_1adfe8eddd79327602ea551c79524e0a21" kindref="member">hmap::curvature_horizontal_cross_sectional</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>chp<sp/>=<sp/><ref refid="namespacehmap_1a1bf0dae54c5b8bd4e0aeb738c26644fc" kindref="member">hmap::curvature_horizontal_plan</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cht<sp/>=<sp/><ref refid="namespacehmap_1a6c28c3adca1bc50a9e769e3bacaf777b" kindref="member">hmap::curvature_horizontal_tangential</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cri<sp/>=<sp/><ref refid="namespacehmap_1ac60627713d4f7ff0c406182ac9941483" kindref="member">hmap::curvature_ring</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cro<sp/>=<sp/><ref refid="namespacehmap_1ab983266e7db85af59452a75364a6bad8" kindref="member">hmap::curvature_rotor</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cvl<sp/>=<sp/><ref refid="namespacehmap_1ab2de0fa5e51719f4139d0fc0309a9f7f" kindref="member">hmap::curvature_vertical_longitudinal</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cvp<sp/>=<sp/><ref refid="namespacehmap_1ac56ceece101a652bd52592149e031a41" kindref="member">hmap::curvature_vertical_profile</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>si<sp/>=<sp/><ref refid="namespacehmap_1a4e9ebf2cab88b81e28538a5432abf68c" kindref="member">hmap::shape_index</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>un<sp/>=<sp/><ref refid="namespacehmap_1a5dc8b3117305f025eb4d0da50bf3c674" kindref="member">hmap::unsphericity</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Array&gt;<sp/>alist<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>k,<sp/>h,<sp/>ac,<sp/>chc,<sp/>chp,<sp/>cht,<sp/>cri,<sp/>cro,<sp/>cvl,<sp/>cvp,<sp/>si,<sp/>un};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;a<sp/>:<sp/>alist)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap" kindref="compound">hmap</ref>::<ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">remap</ref>(a);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_curvature.png&quot;</highlight><highlight class="normal">,<sp/>alist,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_curvature.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/curvature/curvature.cpp" line="145" column="7" bodyfile="HighMap/src/curvature/curvature.cpp" bodystart="145" bodyend="159" declfile="HighMap/include/highmap/curvature.hpp" declline="190" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a4e9ebf2cab88b81e28538a5432abf68c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::shape_index</definition>
        <argsstring>(const Array &amp;z, int ir)</argsstring>
        <name>shape_index</name>
        <qualifiedname>hmap::shape_index</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>Computes the Shape Index (SI) of the terrain, quantifying landform complexity based on curvature. The Shape Index is a metric used to describe the shape of landforms, particularly in digital elevation models (DEMs). It differentiates between convex (e.g., hilltops), concave (e.g., valleys), and flat surfaces. Usage: Use this function to classify terrain into different morphological types, which can be important in land use planning and environmental studies. Useful in landscape ecology and in understanding geomorphological processes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The input array representing the heightmap data (elevation values). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius used for pre-filtering, which controls the scale of the analysis (in pixels). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> An output array containing Shape Index values, where values above 0.5 indicate convex shapes, and values below 0.5 indicate concave shapes.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_curvature.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195acb1550fb6b10f55ed2d30b10e7ab65bb" kindref="member">hmap::NoiseType::PERLIN_HALF</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>k<sp/>=<sp/><ref refid="namespacehmap_1acad6026e6aab9d084238c6c12cb2c565" kindref="member">hmap::curvature_gaussian</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>h<sp/>=<sp/><ref refid="namespacehmap_1a0f5685e5bb02e29d1d35720d3aaedca0" kindref="member">hmap::curvature_mean</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ir<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ac<sp/>=<sp/><ref refid="namespacehmap_1a4bc3d501e53aebe8e15428798656a3e4" kindref="member">hmap::accumulation_curvature</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>chc<sp/>=<sp/><ref refid="namespacehmap_1adfe8eddd79327602ea551c79524e0a21" kindref="member">hmap::curvature_horizontal_cross_sectional</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>chp<sp/>=<sp/><ref refid="namespacehmap_1a1bf0dae54c5b8bd4e0aeb738c26644fc" kindref="member">hmap::curvature_horizontal_plan</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cht<sp/>=<sp/><ref refid="namespacehmap_1a6c28c3adca1bc50a9e769e3bacaf777b" kindref="member">hmap::curvature_horizontal_tangential</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cri<sp/>=<sp/><ref refid="namespacehmap_1ac60627713d4f7ff0c406182ac9941483" kindref="member">hmap::curvature_ring</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cro<sp/>=<sp/><ref refid="namespacehmap_1ab983266e7db85af59452a75364a6bad8" kindref="member">hmap::curvature_rotor</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cvl<sp/>=<sp/><ref refid="namespacehmap_1ab2de0fa5e51719f4139d0fc0309a9f7f" kindref="member">hmap::curvature_vertical_longitudinal</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cvp<sp/>=<sp/><ref refid="namespacehmap_1ac56ceece101a652bd52592149e031a41" kindref="member">hmap::curvature_vertical_profile</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>si<sp/>=<sp/><ref refid="namespacehmap_1a4e9ebf2cab88b81e28538a5432abf68c" kindref="member">hmap::shape_index</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>un<sp/>=<sp/><ref refid="namespacehmap_1a5dc8b3117305f025eb4d0da50bf3c674" kindref="member">hmap::unsphericity</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Array&gt;<sp/>alist<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>k,<sp/>h,<sp/>ac,<sp/>chc,<sp/>chp,<sp/>cht,<sp/>cri,<sp/>cro,<sp/>cvl,<sp/>cvp,<sp/>si,<sp/>un};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;a<sp/>:<sp/>alist)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap" kindref="compound">hmap</ref>::<ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">remap</ref>(a);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_curvature.png&quot;</highlight><highlight class="normal">,<sp/>alist,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_curvature.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/curvature/curvature.cpp" line="161" column="7" bodyfile="HighMap/src/curvature/curvature.cpp" bodystart="161" bodyend="184" declfile="HighMap/include/highmap/curvature.hpp" declline="216" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a5dc8b3117305f025eb4d0da50bf3c674" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::unsphericity</definition>
        <argsstring>(const Array &amp;z, int ir)</argsstring>
        <name>unsphericity</name>
        <qualifiedname>hmap::unsphericity</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>Calculates the unsphericity of a surface, indicating how much the terrain deviates from a perfect spherical shape. Unsphericity is a measure used to understand the degree of asymmetry in terrain surfaces. It quantifies how much a surface deviates from being perfectly spherical or symmetrical, which can be critical in various geomorphological analyses. Usage: Use this function to identify areas of terrain that significantly deviate from a spherical shape, which may indicate unique geological formations or erosion patterns. Helpful in identifying and analyzing landforms that are not perfectly round or symmetrical, such as irregular hills or basins. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The input array representing the heightmap data (elevation values). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius used for pre-filtering, controlling the scale of analysis (in pixels). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> An output array containing unsphericity values, where values greater than 0.5 indicate convex regions (e.g., peaks) and values less than 0.5 indicate concave regions (e.g., valleys).</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_curvature.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195acb1550fb6b10f55ed2d30b10e7ab65bb" kindref="member">hmap::NoiseType::PERLIN_HALF</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>k<sp/>=<sp/><ref refid="namespacehmap_1acad6026e6aab9d084238c6c12cb2c565" kindref="member">hmap::curvature_gaussian</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>h<sp/>=<sp/><ref refid="namespacehmap_1a0f5685e5bb02e29d1d35720d3aaedca0" kindref="member">hmap::curvature_mean</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ir<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ac<sp/>=<sp/><ref refid="namespacehmap_1a4bc3d501e53aebe8e15428798656a3e4" kindref="member">hmap::accumulation_curvature</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>chc<sp/>=<sp/><ref refid="namespacehmap_1adfe8eddd79327602ea551c79524e0a21" kindref="member">hmap::curvature_horizontal_cross_sectional</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>chp<sp/>=<sp/><ref refid="namespacehmap_1a1bf0dae54c5b8bd4e0aeb738c26644fc" kindref="member">hmap::curvature_horizontal_plan</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cht<sp/>=<sp/><ref refid="namespacehmap_1a6c28c3adca1bc50a9e769e3bacaf777b" kindref="member">hmap::curvature_horizontal_tangential</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cri<sp/>=<sp/><ref refid="namespacehmap_1ac60627713d4f7ff0c406182ac9941483" kindref="member">hmap::curvature_ring</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cro<sp/>=<sp/><ref refid="namespacehmap_1ab983266e7db85af59452a75364a6bad8" kindref="member">hmap::curvature_rotor</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cvl<sp/>=<sp/><ref refid="namespacehmap_1ab2de0fa5e51719f4139d0fc0309a9f7f" kindref="member">hmap::curvature_vertical_longitudinal</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>cvp<sp/>=<sp/><ref refid="namespacehmap_1ac56ceece101a652bd52592149e031a41" kindref="member">hmap::curvature_vertical_profile</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>si<sp/>=<sp/><ref refid="namespacehmap_1a4e9ebf2cab88b81e28538a5432abf68c" kindref="member">hmap::shape_index</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>un<sp/>=<sp/><ref refid="namespacehmap_1a5dc8b3117305f025eb4d0da50bf3c674" kindref="member">hmap::unsphericity</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Array&gt;<sp/>alist<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>k,<sp/>h,<sp/>ac,<sp/>chc,<sp/>chp,<sp/>cht,<sp/>cri,<sp/>cro,<sp/>cvl,<sp/>cvp,<sp/>si,<sp/>un};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;a<sp/>:<sp/>alist)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap" kindref="compound">hmap</ref>::<ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">remap</ref>(a);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_curvature.png&quot;</highlight><highlight class="normal">,<sp/>alist,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_curvature.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/curvature/curvature.cpp" line="186" column="7" bodyfile="HighMap/src/curvature/curvature.cpp" bodystart="186" bodyend="206" declfile="HighMap/include/highmap/curvature.hpp" declline="243" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ad8bed5d4ec0f54adc017527fa134f455" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::compute_curvature_gradients</definition>
        <argsstring>(const Array &amp;z, Array &amp;p, Array &amp;q, Array &amp;r, Array &amp;s, Array &amp;t)</argsstring>
        <name>compute_curvature_gradients</name>
        <qualifiedname>hmap::compute_curvature_gradients</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/curvature/curvature.cpp" line="210" column="6" bodyfile="HighMap/src/curvature/curvature.cpp" bodystart="210" bodyend="233" declfile="HighMap/include/highmap/curvature.hpp" declline="250" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a4a1660bb65728209b9d07f6ce4486584" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::compute_curvature_h</definition>
        <argsstring>(const Array &amp;r, const Array &amp;t)</argsstring>
        <name>compute_curvature_h</name>
        <qualifiedname>hmap::compute_curvature_h</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/curvature/curvature.cpp" line="235" column="7" bodyfile="HighMap/src/curvature/curvature.cpp" bodystart="235" bodyend="238" declfile="HighMap/include/highmap/curvature.hpp" declline="257" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1af54b122203d5eee61b9b6d6c7979ddfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::compute_curvature_k</definition>
        <argsstring>(const Array &amp;p, const Array &amp;q, const Array &amp;r, const Array &amp;s, const Array &amp;t)</argsstring>
        <name>compute_curvature_k</name>
        <qualifiedname>hmap::compute_curvature_k</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/curvature/curvature.cpp" line="240" column="7" bodyfile="HighMap/src/curvature/curvature.cpp" bodystart="240" bodyend="247" declfile="HighMap/include/highmap/curvature.hpp" declline="259" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a2c154806321deecb3240ac71eb7ccf29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hmap::assert_almost_equal</definition>
        <argsstring>(const Array &amp;a, const Array &amp;b, float tolerance, const std::string &amp;fname=&quot;&quot;, AssertResults *p_results=nullptr)</argsstring>
        <name>assert_almost_equal</name>
        <qualifiedname>hmap::assert_almost_equal</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1AssertResults" kindref="compound">AssertResults</ref> *</type>
          <declname>p_results</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/dbg/assert.cpp" line="14" column="6" bodyfile="HighMap/src/dbg/assert.cpp" bodystart="14" bodyend="103" declfile="HighMap/include/highmap/dbg/assert.hpp" declline="38" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aa64448e4b5640d90570e53249907c98a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::depression_filling</definition>
        <argsstring>(Array &amp;z, int iterations=1000, float epsilon=1e-4f)</argsstring>
        <name>depression_filling</name>
        <qualifiedname>hmap::depression_filling</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>1000</defval>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
          <defval>1e-4<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Fill the depressions of the heightmap using the Planchon-Darboux algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para>Fill heightmap depressions to ensure that every cell can be connected to the boundaries following a downward slope Planchon2002.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iterations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_depression_filling.cpp"></programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_depression_filling.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/depression_filling.cpp" line="23" column="6" bodyfile="HighMap/src/erosion/depression_filling.cpp" bodystart="23" bodyend="59" declfile="HighMap/include/highmap/erosion.hpp" declline="70" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1af91e2b8638aab2c4357ce37812b8a99c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::erosion_maps</definition>
        <argsstring>(Array &amp;z_before, Array &amp;z_after, Array &amp;erosion_map, Array &amp;deposition_map, float tolerance=0.f)</argsstring>
        <name>erosion_maps</name>
        <qualifiedname>hmap::erosion_maps</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z_before</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z_after</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>erosion_map</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>deposition_map</declname>
        </param>
        <param>
          <type>float</type>
          <declname>tolerance</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z_before</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array (before erosion). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z_after</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array (after erosion). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>erosion_map</parametername>
</parameternamelist>
<parameterdescription>
<para>Erosion map. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deposition_map</parametername>
</parameternamelist>
<parameterdescription>
<para>Deposition map. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>Tolerance for erosion / deposition definition.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_erosions_maps.cpp"></programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_erosions_maps0.png"></image>
 <image type="html" name="ex_erosions_maps1.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/erosion_maps.cpp" line="16" column="6" bodyfile="HighMap/src/erosion/erosion_maps.cpp" bodystart="16" bodyend="27" declfile="HighMap/include/highmap/erosion.hpp" declline="88" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ac4f3c8b3d5f766b15c0ac64359fdc219" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::hydraulic_algebric</definition>
        <argsstring>(Array &amp;z, Array *p_mask, float talus_ref, int ir, Array *p_bedrock=nullptr, Array *p_erosion_map=nullptr, Array *p_deposition_map=nullptr, float c_erosion=0.05f, float c_deposition=0.05f, int iterations=1)</argsstring>
        <name>hydraulic_algebric</name>
        <qualifiedname>hmap::hydraulic_algebric</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus_ref</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_bedrock</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_erosion_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_erosion</declname>
          <defval>0.05<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_deposition</declname>
          <defval>0.05<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Apply an algerbic formula based on the local gradient to perform erosion/deposition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Intensity mask, expected in [0, 1] (applied as a post-processing). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus_ref</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference talus. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Smoothing prefilter radius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_bedrock</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the bedrock heightmap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_erosion_map[out]</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the erosion map, provided as an output field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_deposition_map</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] Reference to the deposition map, provided as an output field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_erosion</parametername>
</parameternamelist>
<parameterdescription>
<para>Erosion coefficient. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_deposition</parametername>
</parameternamelist>
<parameterdescription>
<para>Deposition coefficient. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iterations.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_hydraulic_algebric.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z0<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/>talus<sp/>=<sp/><ref refid="namespacehmap_1a618fb6d396a832c3dd1f053bfd27eed4" kindref="member">gradient_talus</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>talus_ref<sp/>=<sp/>0.2f<sp/>*<sp/>talus.max();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>c_erosion<sp/>=<sp/>0.05f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>c_deposition<sp/>=<sp/>0.05f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>iterations<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ir<sp/>=<sp/>16;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1ac4f3c8b3d5f766b15c0ac64359fdc219" kindref="member">hmap::hydraulic_algebric</ref>(z,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>talus_ref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ir,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c_erosion,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c_deposition,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterations);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_hydraulic_algebric.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z0,<sp/>z},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_hydraulic_algebric.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/hydraulic_algebric.cpp" line="73" column="6" bodyfile="HighMap/src/erosion/hydraulic_algebric.cpp" bodystart="73" bodyend="108" declfile="HighMap/include/highmap/erosion.hpp" declline="118" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aa9fd3c429dfa135cb80376aabcf66c2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::hydraulic_algebric</definition>
        <argsstring>(Array &amp;z, float talus_ref, int ir, Array *p_bedrock=nullptr, Array *p_erosion_map=nullptr, Array *p_deposition_map=nullptr, float c_erosion=0.05f, float c_deposition=0.05f, int iterations=1)</argsstring>
        <name>hydraulic_algebric</name>
        <qualifiedname>hmap::hydraulic_algebric</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus_ref</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_bedrock</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_erosion_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_erosion</declname>
          <defval>0.05<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_deposition</declname>
          <defval>0.05<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/hydraulic_algebric.cpp" line="18" column="6" bodyfile="HighMap/src/erosion/hydraulic_algebric.cpp" bodystart="18" bodyend="71" declfile="HighMap/include/highmap/erosion.hpp" declline="129" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ae791758f736d5ed3e164262f3b1c5d20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::hydraulic_benes</definition>
        <argsstring>(Array &amp;z, Array *p_mask, int iterations=50, Array *p_bedrock=nullptr, Array *p_moisture_map=nullptr, Array *p_erosion_map=nullptr, Array *p_deposition_map=nullptr, float c_capacity=40.f, float c_erosion=0.2f, float c_deposition=0.8f, float water_level=0.005f, float evap_rate=0.01f, float rain_rate=0.5f)</argsstring>
        <name>hydraulic_benes</name>
        <qualifiedname>hmap::hydraulic_benes</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>50</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_bedrock</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_moisture_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_erosion_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_capacity</declname>
          <defval>40.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_erosion</declname>
          <defval>0.2<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_deposition</declname>
          <defval>0.8<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>water_level</declname>
          <defval>0.005<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>evap_rate</declname>
          <defval>0.01<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>rain_rate</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Apply cell-based hydraulic erosion/deposition based on Benes et al. procedure. </para>
        </briefdescription>
        <detaileddescription>
<para>See Benes2002 and Olsen2004.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Intensity mask, expected in [0, 1] (applied as a post-processing). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iterations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_bedrock</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the bedrock heightmap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_moisture_map</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the moisture map (quantity of rain), expected to be in [0, 1]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_erosion_map[out]</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the erosion map, provided as an output field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_deposition_map</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] Reference to the deposition map, provided as an output field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>Sediment capacity. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_deposition</parametername>
</parameternamelist>
<parameterdescription>
<para>Deposition coefficient. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_erosion</parametername>
</parameternamelist>
<parameterdescription>
<para>Erosion coefficient. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>water_level</parametername>
</parameternamelist>
<parameterdescription>
<para>Water level. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>evap_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>Water evaporation rate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rain_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>Rain relaxation rate.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_hydraulic_benes.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z0<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1ae791758f736d5ed3e164262f3b1c5d20" kindref="member">hmap::hydraulic_benes</ref>(z,<sp/>50);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_hydraulic_benes.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z0,<sp/>z},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_hydraulic_benes.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/hydraulic_benes.cpp" line="207" column="6" bodyfile="HighMap/src/erosion/hydraulic_benes.cpp" bodystart="207" bodyend="251" declfile="HighMap/include/highmap/erosion.hpp" declline="169" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ab36a27b4c79ad5b201d79ac92388caa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::hydraulic_benes</definition>
        <argsstring>(Array &amp;z, int iterations=50, Array *p_bedrock=nullptr, Array *p_moisture_map=nullptr, Array *p_erosion_map=nullptr, Array *p_deposition_map=nullptr, float c_capacity=40.f, float c_erosion=0.2f, float c_deposition=0.8f, float water_level=0.005f, float evap_rate=0.01f, float rain_rate=0.5f)</argsstring>
        <name>hydraulic_benes</name>
        <qualifiedname>hmap::hydraulic_benes</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>50</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_bedrock</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_moisture_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_erosion_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_capacity</declname>
          <defval>40.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_erosion</declname>
          <defval>0.2<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_deposition</declname>
          <defval>0.8<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>water_level</declname>
          <defval>0.005<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>evap_rate</declname>
          <defval>0.01<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>rain_rate</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/hydraulic_benes.cpp" line="24" column="6" bodyfile="HighMap/src/erosion/hydraulic_benes.cpp" bodystart="24" bodyend="205" declfile="HighMap/include/highmap/erosion.hpp" declline="183" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a2074cabb598086fe29f52247bfadceb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::hydraulic_blur</definition>
        <argsstring>(Array &amp;z, float radius, float vmax, float k_smoothing=0.1f)</argsstring>
        <name>hydraulic_blur</name>
        <qualifiedname>hmap::hydraulic_blur</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vmax</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k_smoothing</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Apply cell-based hydraulic erosion using a nonlinear diffusion model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>Gaussian filter radius (with respect to a unit domain). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmax</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum elevation for the details. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k_smoothing</parametername>
</parameternamelist>
<parameterdescription>
<para>Smoothing factor, if any.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_hydraulic_blur.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z0<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>vmax<sp/>=<sp/>0.8f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>radius<sp/>=<sp/>0.1f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>k_smoothing<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a2074cabb598086fe29f52247bfadceb9" kindref="member">hmap::hydraulic_blur</ref>(z,<sp/>vmax,<sp/>radius,<sp/>k_smoothing);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_hydraulic_blur.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z0,<sp/>z},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_hydraulic_blur.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/hydraulic_blur.cpp" line="13" column="6" bodyfile="HighMap/src/erosion/hydraulic_blur.cpp" bodystart="13" bodyend="27" declfile="HighMap/include/highmap/erosion.hpp" declline="209" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a7b2c04c0b2cd0da363d2382f5a753a81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::hydraulic_diffusion</definition>
        <argsstring>(Array &amp;z, float c_diffusion, float talus, int iterations)</argsstring>
        <name>hydraulic_diffusion</name>
        <qualifiedname>hmap::hydraulic_diffusion</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>c_diffusion</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
        </param>
        <briefdescription>
<para>Apply cell-based hydraulic erosion using a nonlinear diffusion model. </para>
        </briefdescription>
        <detaileddescription>
<para>See Roering2001.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_diffusion</parametername>
</parameternamelist>
<parameterdescription>
<para>Diffusion coefficient. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference talus (must be higher than the maximum talus of the map). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iterations.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_hydraulic_diffusion.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z0<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>c_diffusion<sp/>=<sp/>0.1f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>iterations<sp/>=<sp/>100;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/>dn<sp/>=<sp/><ref refid="namespacehmap_1a5f58c4149344b401d82f0be3c3807156" kindref="member">gradient_norm</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>talus_ref<sp/>=<sp/>1.1f<sp/>*<sp/>dn.max();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a7b2c04c0b2cd0da363d2382f5a753a81" kindref="member">hmap::hydraulic_diffusion</ref>(z,<sp/>c_diffusion,<sp/>talus_ref,<sp/>iterations);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_hydraulic_diffusion.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z0,<sp/>z},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_hydraulic_diffusion.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/hydraulic_diffusion.cpp" line="17" column="6" bodyfile="HighMap/src/erosion/hydraulic_diffusion.cpp" bodystart="17" bodyend="44" declfile="HighMap/include/highmap/erosion.hpp" declline="231" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a5aceac22b926cbff676c323e1aca4db0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::hydraulic_musgrave</definition>
        <argsstring>(Array &amp;z, Array &amp;moisture_map, int iterations=100, float c_capacity=1.f, float c_erosion=0.1f, float c_deposition=0.1f, float water_level=0.01f, float evap_rate=0.01f)</argsstring>
        <name>hydraulic_musgrave</name>
        <qualifiedname>hmap::hydraulic_musgrave</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>moisture_map</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>100</defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_capacity</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_erosion</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_deposition</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>water_level</declname>
          <defval>0.01<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>evap_rate</declname>
          <defval>0.01<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Apply cell-based hydraulic erosion/deposition of Musgrave et al. (1989). </para>
        </briefdescription>
        <detaileddescription>
<para>A simple grid-based erosion technique was published by Musgrave, Kolb, and Mace in 1989 Musgrave1989.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>moisture_map</parametername>
</parameternamelist>
<parameterdescription>
<para>Moisture map (quantity of rain), expected to be in [0, 1]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iterations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>Sediment capacity. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_deposition</parametername>
</parameternamelist>
<parameterdescription>
<para>Deposition coefficient. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_erosion</parametername>
</parameternamelist>
<parameterdescription>
<para>Erosion coefficient. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>water_level</parametername>
</parameternamelist>
<parameterdescription>
<para>Water level. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>evap_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>Water evaporation rate.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_hydraulic_musgrave.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z0<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a5aceac22b926cbff676c323e1aca4db0" kindref="member">hmap::hydraulic_musgrave</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_hydraulic_musgrave.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z0,<sp/>z},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_hydraulic_musgrave.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/hydraulic_musgrave.cpp" line="31" column="6" bodyfile="HighMap/src/erosion/hydraulic_musgrave.cpp" bodystart="31" bodyend="112" declfile="HighMap/include/highmap/erosion.hpp" declline="258" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a8c20cd6c2b1cd1ec20ffb2ce86ed0ecb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::hydraulic_musgrave</definition>
        <argsstring>(Array &amp;z, int iterations=100, float c_capacity=1.f, float c_erosion=0.1f, float c_deposition=0.1f, float water_level=0.01f, float evap_rate=0.01f)</argsstring>
        <name>hydraulic_musgrave</name>
        <qualifiedname>hmap::hydraulic_musgrave</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>100</defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_capacity</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_erosion</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_deposition</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>water_level</declname>
          <defval>0.01<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>evap_rate</declname>
          <defval>0.01<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/hydraulic_musgrave.cpp" line="119" column="6" bodyfile="HighMap/src/erosion/hydraulic_musgrave.cpp" bodystart="119" bodyend="136" declfile="HighMap/include/highmap/erosion.hpp" declline="267" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a9571076da7c13d9bd3ab99f137ef8188" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::hydraulic_particle</definition>
        <argsstring>(Array &amp;z, Array *p_mask, int nparticles, int seed, Array *p_bedrock=nullptr, Array *p_moisture_map=nullptr, Array *p_erosion_map=nullptr, Array *p_deposition_map=nullptr, float c_capacity=10.f, float c_erosion=0.05f, float c_deposition=0.05f, float c_inertia=0.3f, float drag_rate=0.001f, float evap_rate=0.001f, bool post_filtering=false)</argsstring>
        <name>hydraulic_particle</name>
        <qualifiedname>hmap::hydraulic_particle</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nparticles</declname>
        </param>
        <param>
          <type>int</type>
          <declname>seed</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_bedrock</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_moisture_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_erosion_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_capacity</declname>
          <defval>10.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_erosion</declname>
          <defval>0.05<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_deposition</declname>
          <defval>0.05<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_inertia</declname>
          <defval>0.3<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>drag_rate</declname>
          <defval>0.001<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>evap_rate</declname>
          <defval>0.001<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>post_filtering</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Apply hydraulic erosion using a particle based procedure. </para>
        </briefdescription>
        <detaileddescription>
<para>Adapted from Beyer2015 and Hjulstroem1935.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Intensity mask, expected in [0, 1] (applied as a post-processing). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nparticles</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of particles. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_bedrock</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the bedrock heightmap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_moisture_map</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the moisture map (quantity of rain), expected to be in [0, 1]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_erosion_map[out]</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the erosion map, provided as an output field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_deposition_map</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] Reference to the deposition map, provided as an output field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>Sediment capacity. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_deposition</parametername>
</parameternamelist>
<parameterdescription>
<para>Deposition coefficient. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_erosion</parametername>
</parameternamelist>
<parameterdescription>
<para>Erosion coefficient. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>drag_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>Drag rate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>evap_rate</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structhmap_1_1Particle" kindref="compound">Particle</ref> evaporation rate.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_hydraulic_particle.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nparticles<sp/>=<sp/>50000;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a9571076da7c13d9bd3ab99f137ef8188" kindref="member">hmap::hydraulic_particle</ref>(z1,<sp/>nparticles,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>moisture_map<sp/>=<sp/>z<sp/>*<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a9571076da7c13d9bd3ab99f137ef8188" kindref="member">hmap::hydraulic_particle</ref>(z2,<sp/>nparticles,<sp/>seed,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;moisture_map);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z3<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>erosion_map;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>deposition_map;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a9571076da7c13d9bd3ab99f137ef8188" kindref="member">hmap::hydraulic_particle</ref>(z3,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nparticles,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;moisture_map,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;erosion_map,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;deposition_map);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_hydraulic_particle0.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1,<sp/>z2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_hydraulic_particle1.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{erosion_map,<sp/>deposition_map},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_hydraulic_particle0.png"></image>
 <image type="html" name="ex_hydraulic_particle1.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/hydraulic_particle.cpp" line="182" column="6" bodyfile="HighMap/src/erosion/hydraulic_particle.cpp" bodystart="182" bodyend="232" declfile="HighMap/include/highmap/erosion.hpp" declline="305" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a949d10cfd7731c6a5519051943d711d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::hydraulic_particle</definition>
        <argsstring>(Array &amp;z, int nparticles, int seed, Array *p_bedrock=nullptr, Array *p_moisture_map=nullptr, Array *p_erosion_map=nullptr, Array *p_deposition_map=nullptr, float c_capacity=10.f, float c_erosion=0.05f, float c_deposition=0.05f, float c_inertia=0.3f, float drag_rate=0.001f, float evap_rate=0.001f, bool post_filtering=false)</argsstring>
        <name>hydraulic_particle</name>
        <qualifiedname>hmap::hydraulic_particle</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nparticles</declname>
        </param>
        <param>
          <type>int</type>
          <declname>seed</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_bedrock</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_moisture_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_erosion_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_capacity</declname>
          <defval>10.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_erosion</declname>
          <defval>0.05<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_deposition</declname>
          <defval>0.05<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_inertia</declname>
          <defval>0.3<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>drag_rate</declname>
          <defval>0.001<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>evap_rate</declname>
          <defval>0.001<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>post_filtering</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/hydraulic_particle.cpp" line="32" column="6" bodyfile="HighMap/src/erosion/hydraulic_particle.cpp" bodystart="32" bodyend="180" declfile="HighMap/include/highmap/erosion.hpp" declline="321" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ab2b38a401eebca7bd3c9a96a072f0df7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::hydraulic_particle_multiscale</definition>
        <argsstring>(Array &amp;z, float particle_density, int seed, Array *p_bedrock=nullptr, Array *p_moisture_map=nullptr, Array *p_erosion_map=nullptr, Array *p_deposition_map=nullptr, float c_capacity=10.f, float c_erosion=0.05f, float c_deposition=0.01f, float c_inertia=0.3f, float drag_rate=0.01f, float evap_rate=0.001f, int pyramid_finest_level=0)</argsstring>
        <name>hydraulic_particle_multiscale</name>
        <qualifiedname>hmap::hydraulic_particle_multiscale</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>particle_density</declname>
        </param>
        <param>
          <type>int</type>
          <declname>seed</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_bedrock</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_moisture_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_erosion_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_capacity</declname>
          <defval>10.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_erosion</declname>
          <defval>0.05<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_deposition</declname>
          <defval>0.01<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_inertia</declname>
          <defval>0.3<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>drag_rate</declname>
          <defval>0.01<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>evap_rate</declname>
          <defval>0.001<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>pyramid_finest_level</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Apply hydraulic erosion using a particle based procedure, using a pyramid decomposition to allow a multiscale approach. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>particle_density</parametername>
</parameternamelist>
<parameterdescription>
<para>Particles density (with respect to the number of cells of the input array). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_bedrock</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the bedrock heightmap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_moisture_map</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the moisture map (quantity of rain), expected to be in [0, 1]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_erosion_map[out]</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the erosion map, provided as an output field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_deposition_map</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] Reference to the deposition map, provided as an output field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>Sediment capacity. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_deposition</parametername>
</parameternamelist>
<parameterdescription>
<para>Deposition coefficient. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_erosion</parametername>
</parameternamelist>
<parameterdescription>
<para>Erosion coefficient. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>drag_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>Drag rate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>evap_rate</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structhmap_1_1Particle" kindref="compound">Particle</ref> evaporation rate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pyramid_finest_level</parametername>
</parameternamelist>
<parameterdescription>
<para>First level at which the erosion is applied (default is 0, meaning it is applied to the current resolution, the 0th pyramid level, and then to the coarser pyramid levels, if set to 1 it starts with the first pyramid level and so on).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_hydraulic_particle_multiscale.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>particle_density<sp/>=<sp/>0.1f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1ab2b38a401eebca7bd3c9a96a072f0df7" kindref="member">hmap::hydraulic_particle_multiscale</ref>(z1,<sp/>particle_density,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>moisture_map<sp/>=<sp/>z<sp/>*<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1ab2b38a401eebca7bd3c9a96a072f0df7" kindref="member">hmap::hydraulic_particle_multiscale</ref>(z2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>particle_density,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;moisture_map);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z3<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>erosion_map;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>deposition_map;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1ab2b38a401eebca7bd3c9a96a072f0df7" kindref="member">hmap::hydraulic_particle_multiscale</ref>(z3,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>particle_density,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;moisture_map,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;erosion_map,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;deposition_map);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_hydraulic_particle_multiscale0.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_hydraulic_particle_multiscale1.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{erosion_map,<sp/>deposition_map},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_hydraulic_particle_multiscale0.png"></image>
 <image type="html" name="ex_hydraulic_particle_multiscale1.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/hydraulic_particle_multiscale.cpp" line="17" column="6" bodyfile="HighMap/src/erosion/hydraulic_particle_multiscale.cpp" bodystart="17" bodyend="99" declfile="HighMap/include/highmap/erosion.hpp" declline="369" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1af65bb48580b5f860571161387a22fbb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::hydraulic_procedural</definition>
        <argsstring>(Array &amp;z, uint seed, float ridge_wavelength, float ridge_scaling=0.1f, ErosionProfile erosion_profile=ErosionProfile::TRIANGLE_SMOOTH, float delta=0.02f, float noise_ratio=0.2f, int prefilter_ir=-1, float density_factor=1.f, float kernel_width_ratio=2.f, float phase_smoothing=2.f, float phase_noise_amp=M_PI, bool reverse_phase=false, bool rotate90=false, bool use_default_mask=true, float talus_mask=0.f, Array *p_mask=nullptr, Array *p_ridge_mask=nullptr, float vmin=0.f, float vmax=-1.f)</argsstring>
        <name>hydraulic_procedural</name>
        <qualifiedname>hmap::hydraulic_procedural</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>float</type>
          <declname>ridge_wavelength</declname>
        </param>
        <param>
          <type>float</type>
          <declname>ridge_scaling</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="namespacehmap_1a25a4e4775f3c0918ed75f0503f5ed0a6" kindref="member">ErosionProfile</ref></type>
          <declname>erosion_profile</declname>
          <defval><ref refid="namespacehmap_1a25a4e4775f3c0918ed75f0503f5ed0a6af078cf93214e8043479eb5906a456880" kindref="member">ErosionProfile::TRIANGLE_SMOOTH</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>delta</declname>
          <defval>0.02<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>noise_ratio</declname>
          <defval>0.2<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>prefilter_ir</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>float</type>
          <declname>density_factor</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>kernel_width_ratio</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>phase_smoothing</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>phase_noise_amp</declname>
          <defval>M_PI</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>reverse_phase</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>rotate90</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>use_default_mask</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>float</type>
          <declname>talus_mask</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_ridge_mask</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>float</type>
          <declname>vmin</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>vmax</declname>
          <defval>-1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Generates a procedurally eroded terrain using hydraulic erosion and ridge generation techniques. </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies a combination of hydraulic erosion and ridge formation to modify a heightmap, leveraging parameters such as erosion profiles, ridge scaling, and noise characteristics. It also supports custom or default masks to influence the erosion process.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">z</parametername>
</parameternamelist>
<parameterdescription>
<para>The heightmap to be modified, represented as a 2D array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed for procedural generation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ridge_wavelength</parametername>
</parameternamelist>
<parameterdescription>
<para>Wavelength of the ridge structures in the heightmap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ridge_scaling</parametername>
</parameternamelist>
<parameterdescription>
<para>Scaling factor for the ridge height. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">erosion_profile</parametername>
</parameternamelist>
<parameterdescription>
<para>The profile that defines the erosion curve behavior. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">delta</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter controlling the erosion intensity. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">noise_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Ratio of noise added to the ridge crest lines. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">prefilter_ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Kernel radius for pre-smoothing the heightmap. If negative, a default value is computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">density_factor</parametername>
</parameternamelist>
<parameterdescription>
<para>Factor influencing the density of the ridges. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">kernel_width_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Ratio defining the width of the ridge generation kernel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">phase_smoothing</parametername>
</parameternamelist>
<parameterdescription>
<para>Smoothing factor for the phase field used in ridge generation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">use_default_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to use a default mask for erosion if no mask is provided. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">talus_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Threshold for default mask slope to identify regions prone to erosion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to a custom mask array to influence the erosion process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">p_ridge_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to store the ridge mask resulting from the operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">vmin</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum elevation value. If set to a sentinel value (vmax &lt; vmin), it is calculated from the heightmap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">vmax</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum elevation value. If set to a sentinel value (vmax &lt; vmin), it is calculated from the heightmap.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_hydraulic_procedural.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195ac5113a637d69eb3c549e6d561da167ed" kindref="member">hmap::NoiseType::SIMPLEX2</ref>,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z0<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>2-step<sp/>erosion<sp/>at<sp/>different<sp/>scales</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1af65bb48580b5f860571161387a22fbb4" kindref="member">hmap::hydraulic_procedural</ref>(z,<sp/>++seed,<sp/>1.f<sp/>/<sp/>8.f,<sp/>0.2f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1af65bb48580b5f860571161387a22fbb4" kindref="member">hmap::hydraulic_procedural</ref>(z,<sp/>++seed,<sp/>1.f<sp/>/<sp/>32.f,<sp/>0.2f<sp/>/<sp/>8.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_hydraulic_procedural0.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z0,<sp/>z1,<sp/>z},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>all<sp/>profiles</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::ErosionProfile&gt;<sp/>profiles<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a25a4e4775f3c0918ed75f0503f5ed0a6af8c94bc76e5d0a80a0ea8a6cda58832e" kindref="member">hmap::ErosionProfile::COSINE</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a25a4e4775f3c0918ed75f0503f5ed0a6aa7fce3ae63e2de0b582f1af344e798fd" kindref="member">hmap::ErosionProfile::SAW_SHARP</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a25a4e4775f3c0918ed75f0503f5ed0a6a18fba3380d9dbcb57378fbbbc522965c" kindref="member">hmap::ErosionProfile::SAW_SMOOTH</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a25a4e4775f3c0918ed75f0503f5ed0a6aeb684e263530f3a9ebfd94816e8bf60c" kindref="member">hmap::ErosionProfile::SHARP_VALLEYS</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a25a4e4775f3c0918ed75f0503f5ed0a6a8aa5067161e7490dd7a989f1b33cf57d" kindref="member">hmap::ErosionProfile::SQUARE_SMOOTH</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a25a4e4775f3c0918ed75f0503f5ed0a6a3b4b1fb15aaf3888333a9d6958eae76a" kindref="member">hmap::ErosionProfile::TRIANGLE_GRENIER</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a25a4e4775f3c0918ed75f0503f5ed0a6ac6ec19319c947a3b6484c42b69007636" kindref="member">hmap::ErosionProfile::TRIANGLE_SHARP</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a25a4e4775f3c0918ed75f0503f5ed0a6af078cf93214e8043479eb5906a456880" kindref="member">hmap::ErosionProfile::TRIANGLE_SMOOTH</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Array&gt;<sp/>stack<sp/>=<sp/>{z0};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ep<sp/>:<sp/>profiles)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ze<sp/>=<sp/>z0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1af65bb48580b5f860571161387a22fbb4" kindref="member">hmap::hydraulic_procedural</ref>(ze,<sp/>seed,<sp/>1.f<sp/>/<sp/>8.f,<sp/>0.2f,<sp/>ep);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>stack.push_back(ze);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_hydraulic_procedural1.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z1.to_png_grayscale(</highlight><highlight class="stringliteral">&quot;hmap.png&quot;</highlight><highlight class="normal">,<sp/>CV_16U);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_hydraulic_procedural0.png"></image>
 <image type="html" name="ex_hydraulic_procedural1.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/hydraulic_procedural.cpp" line="148" column="6" bodyfile="HighMap/src/erosion/hydraulic_procedural.cpp" bodystart="148" bodyend="289" declfile="HighMap/include/highmap/erosion.hpp" declline="432" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1acbf32c30d68183eb5522888af2ede316" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::hydraulic_stream</definition>
        <argsstring>(Array &amp;z, float c_erosion, float talus_ref, Array *p_bedrock=nullptr, Array *p_moisture_map=nullptr, Array *p_erosion_map=nullptr, int ir=1, float clipping_ratio=10.f)</argsstring>
        <name>hydraulic_stream</name>
        <qualifiedname>hmap::hydraulic_stream</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>c_erosion</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus_ref</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_bedrock</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_moisture_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_erosion_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>float</type>
          <declname>clipping_ratio</declname>
          <defval>10.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Apply hydraulic erosion based on a flow accumulation map. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Intensity mask, expected in [0, 1] (applied as a post-processing). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_erosion</parametername>
</parameternamelist>
<parameterdescription>
<para>Erosion coefficient. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus_ref</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference talus used to localy define the flow-partition exponent (small values of <computeroutput>talus_ref</computeroutput> will lead to thinner flow streams, see <computeroutput><ref refid="namespacehmap_1a58ba4910af868f70849f343e0c73adf3" kindref="member">flow_accumulation_dinf</ref></computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_bedrock</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower elevation limit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_moisture_map</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the moisture map (quantity of rain), expected to be in [0, 1]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_erosion_map[out]</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the erosion map, provided as an output field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Kernel radius. If <computeroutput>ir &gt; 1</computeroutput>, a cone kernel is used to carv channel flow erosion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clipping_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Flow accumulation clipping ratio.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_hydraulic_stream.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>shape<sp/>=<sp/>{1024,<sp/>1024};</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z0<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c_erosion<sp/>=<sp/>0.1f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>talus_ref<sp/>=<sp/>5.f<sp/>/<sp/>(float)shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iradius<sp/>=<sp/>64;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z_bedrock<sp/>=<sp/><ref refid="namespacehmap_1adf68a2f031297654f88252b7ce027b3d" kindref="member">hmap::minimum_local</ref>(z,<sp/>iradius);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1acbf32c30d68183eb5522888af2ede316" kindref="member">hmap::hydraulic_stream</ref>(z1,<sp/>c_erosion,<sp/>talus_ref);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>ir<sp/>=<sp/>5;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>erosion_map<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(shape);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>moisture_map<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1acbf32c30d68183eb5522888af2ede316" kindref="member">hmap::hydraulic_stream</ref>(z2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c_erosion,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>talus_ref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;z_bedrock,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;moisture_map,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;erosion_map,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1_1gpu_1adb8336ed4d83c15500872185dee45d50" kindref="member">hmap::gpu::init_opencl</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>log<sp/>scale</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z3<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>deposition_ir<sp/>=<sp/>32;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>c_erosion<sp/>=<sp/>0.2f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a37caab05db1b9791bf8a8ca10852c0da" kindref="member">hmap::hydraulic_stream_log</ref>(z3,<sp/>c_erosion,<sp/>talus_ref,<sp/>deposition_ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z3.dump();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_hydraulic_stream0.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z0,<sp/>z1,<sp/>z2,<sp/>z3},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>erosion_map.to_png(</highlight><highlight class="stringliteral">&quot;ex_hydraulic_stream1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_hydraulic_stream0.png"></image>
 <image type="html" name="ex_hydraulic_stream1.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/hydraulic_stream.cpp" line="20" column="6" bodyfile="HighMap/src/erosion/hydraulic_stream.cpp" bodystart="20" bodyend="64" declfile="HighMap/include/highmap/erosion.hpp" declline="481" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ae3bc02b89f4e7d0bdb221e13b66ad91e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::hydraulic_stream</definition>
        <argsstring>(Array &amp;z, Array *p_mask, float c_erosion, float talus_ref, Array *p_bedrock=nullptr, Array *p_moisture_map=nullptr, Array *p_erosion_map=nullptr, int ir=1, float clipping_ratio=10.f)</argsstring>
        <name>hydraulic_stream</name>
        <qualifiedname>hmap::hydraulic_stream</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>float</type>
          <declname>c_erosion</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus_ref</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_bedrock</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_moisture_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_erosion_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>float</type>
          <declname>clipping_ratio</declname>
          <defval>10.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/hydraulic_stream.cpp" line="66" column="6" bodyfile="HighMap/src/erosion/hydraulic_stream.cpp" bodystart="66" bodyend="98" declfile="HighMap/include/highmap/erosion.hpp" declline="490" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a66355f091aa60d97d5a7c7eeb08c51cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::hydraulic_stream_upscale_amplification</definition>
        <argsstring>(Array &amp;z, float c_erosion, float talus_ref, int upscaling_levels=1, float persistence=1.f, int ir=1, float clipping_ratio=10.f)</argsstring>
        <name>hydraulic_stream_upscale_amplification</name>
        <qualifiedname>hmap::hydraulic_stream_upscale_amplification</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>c_erosion</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus_ref</declname>
        </param>
        <param>
          <type>int</type>
          <declname>upscaling_levels</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>float</type>
          <declname>persistence</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>float</type>
          <declname>clipping_ratio</declname>
          <defval>10.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Applies hydraulic erosion with upscaling amplification. </para>
        </briefdescription>
        <detaileddescription>
<para>This function progressively upscales the input array <computeroutput>z</computeroutput> by powers of 2 and applies hydraulic erosion based on flow accumulation at each level of upscaling. After all upscaling levels are processed, the array is resampled back to its original resolution using bilinear interpolation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing elevation data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_erosion</parametername>
</parameternamelist>
<parameterdescription>
<para>Erosion coefficient. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus_ref</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference talus used to locally define the flow-partition exponent. Smaller values lead to thinner flow streams. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upscaling_levels</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of upscaling levels to apply. The function will resample the array at each level. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>persistence</parametername>
</parameternamelist>
<parameterdescription>
<para>A scaling factor applied at each level to adjust the impact of the unary operation. Higher persistence values will amplify the effects at each level. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Kernel radius. If <computeroutput>ir &gt; 1</computeroutput>, a cone kernel is used to carve channel flow erosion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clipping_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Flow accumulation clipping ratio.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The function first applies upscaling using bicubic resampling, performs hydraulic erosion at each level, and finally resamples the array back to its initial resolution using bilinear interpolation.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_hydraulic_stream_upscale_amplification.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z0<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>c_erosion<sp/>=<sp/>0.05f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>talus_ref<sp/>=<sp/>5.f<sp/>/<sp/>(float)shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1acbf32c30d68183eb5522888af2ede316" kindref="member">hmap::hydraulic_stream</ref>(z1,<sp/>c_erosion,<sp/>talus_ref);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>upscaling_levels<sp/>=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a66355f091aa60d97d5a7c7eeb08c51cc" kindref="member">hmap::hydraulic_stream_upscale_amplification</ref>(z2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c_erosion,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>talus_ref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upscaling_levels);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z3<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>upscaling_levels<sp/>=<sp/>3;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>persistence<sp/>=<sp/>0.75f;<sp/></highlight><highlight class="comment">//<sp/>decrease<sp/>ratio<sp/>of<sp/>erosion<sp/>coeff<sp/>at<sp/>each<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a66355f091aa60d97d5a7c7eeb08c51cc" kindref="member">hmap::hydraulic_stream_upscale_amplification</ref>(z3,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c_erosion,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>talus_ref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upscaling_levels,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>persistence);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_hydraulic_stream_upscale_amplification.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z0,<sp/>z1,<sp/>z2,<sp/>z3},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_hydraulic_stream_upscale_amplification.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/hydraulic_stream_upscale_amplification.cpp" line="17" column="6" bodyfile="HighMap/src/erosion/hydraulic_stream_upscale_amplification.cpp" bodystart="17" bodyend="40" declfile="HighMap/include/highmap/erosion.hpp" declline="532" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1af975837e0f5b169dcb6d3f5f58c95fe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::hydraulic_stream_upscale_amplification</definition>
        <argsstring>(Array &amp;z, Array *p_mask, float c_erosion, float talus_ref, int upscaling_levels=1, float persistence=1.f, int ir=1, float clipping_ratio=10.f)</argsstring>
        <name>hydraulic_stream_upscale_amplification</name>
        <qualifiedname>hmap::hydraulic_stream_upscale_amplification</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>float</type>
          <declname>c_erosion</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus_ref</declname>
        </param>
        <param>
          <type>int</type>
          <declname>upscaling_levels</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>float</type>
          <declname>persistence</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>float</type>
          <declname>clipping_ratio</declname>
          <defval>10.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Applies hydraulic erosion with upscaling amplification, with a post-processing intensity mask. </para>
        </briefdescription>
        <detaileddescription>
<para>Similar to the overloaded version, this function progressively upscales the input array <computeroutput>z</computeroutput> and applies hydraulic erosion. Additionally, an intensity mask <computeroutput>p_mask</computeroutput> is applied as a post-processing step.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing elevation data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Intensity mask, expected in [0, 1], which is applied as a post-processing step. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_erosion</parametername>
</parameternamelist>
<parameterdescription>
<para>Erosion coefficient. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus_ref</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference talus used to locally define the flow-partition exponent. Smaller values lead to thinner flow streams. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upscaling_levels</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of upscaling levels to apply. The function will resample the array at each level. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>persistence</parametername>
</parameternamelist>
<parameterdescription>
<para>A scaling factor applied at each level to adjust the impact of the unary operation. Higher persistence values will amplify the effects at each level. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Kernel radius. If <computeroutput>ir &gt; 1</computeroutput>, a cone kernel is used to carve channel flow erosion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clipping_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Flow accumulation clipping ratio.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This version of the function applies an additional intensity mask as part of the upscaling amplification process.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_hydraulic_stream_upscale_amplification.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z0<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>c_erosion<sp/>=<sp/>0.05f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>talus_ref<sp/>=<sp/>5.f<sp/>/<sp/>(float)shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1acbf32c30d68183eb5522888af2ede316" kindref="member">hmap::hydraulic_stream</ref>(z1,<sp/>c_erosion,<sp/>talus_ref);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>upscaling_levels<sp/>=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a66355f091aa60d97d5a7c7eeb08c51cc" kindref="member">hmap::hydraulic_stream_upscale_amplification</ref>(z2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c_erosion,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>talus_ref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upscaling_levels);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z3<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>upscaling_levels<sp/>=<sp/>3;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>persistence<sp/>=<sp/>0.75f;<sp/></highlight><highlight class="comment">//<sp/>decrease<sp/>ratio<sp/>of<sp/>erosion<sp/>coeff<sp/>at<sp/>each<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a66355f091aa60d97d5a7c7eeb08c51cc" kindref="member">hmap::hydraulic_stream_upscale_amplification</ref>(z3,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c_erosion,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>talus_ref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upscaling_levels,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>persistence);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_hydraulic_stream_upscale_amplification.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z0,<sp/>z1,<sp/>z2,<sp/>z3},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_hydraulic_stream_upscale_amplification.png"></image>
 This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/hydraulic_stream_upscale_amplification.cpp" line="42" column="6" bodyfile="HighMap/src/erosion/hydraulic_stream_upscale_amplification.cpp" bodystart="42" bodyend="71" declfile="HighMap/include/highmap/erosion.hpp" declline="573" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a37caab05db1b9791bf8a8ca10852c0da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::hydraulic_stream_log</definition>
        <argsstring>(Array &amp;z, float c_erosion, float talus_ref, int deposition_ir=32, float deposition_scale_ratio=1.f, float gradient_power=0.8f, float gradient_scaling_ratio=1.f, int gradient_prefilter_ir=16, float saturation_ratio=1.f, Array *p_bedrock=nullptr, Array *p_moisture_map=nullptr, Array *p_erosion_map=nullptr, Array *p_deposition_map=nullptr, Array *p_flow_map=nullptr)</argsstring>
        <name>hydraulic_stream_log</name>
        <qualifiedname>hmap::hydraulic_stream_log</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>c_erosion</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus_ref</declname>
        </param>
        <param>
          <type>int</type>
          <declname>deposition_ir</declname>
          <defval>32</defval>
        </param>
        <param>
          <type>float</type>
          <declname>deposition_scale_ratio</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>gradient_power</declname>
          <defval>0.8<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>gradient_scaling_ratio</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>gradient_prefilter_ir</declname>
          <defval>16</defval>
        </param>
        <param>
          <type>float</type>
          <declname>saturation_ratio</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_bedrock</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_moisture_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_erosion_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_flow_map</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Apply hydraulic erosion based on a flow accumulation map, alternative formulation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the terrain elevation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_erosion</parametername>
</parameternamelist>
<parameterdescription>
<para>Erosion coefficient controlling the intensity of erosion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus_ref</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference talus used to locally define the flow-partition exponent. Small values lead to thinner flow streams (see <computeroutput><ref refid="namespacehmap_1a58ba4910af868f70849f343e0c73adf3" kindref="member">flow_accumulation_dinf</ref></computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deposition_ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Kernel radius for sediment deposition. If greater than 1, a smoothing effect is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deposition_scale_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Scaling factor for sediment deposition. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gradient_power</parametername>
</parameternamelist>
<parameterdescription>
<para>Exponent applied to the terrain gradient to control erosion intensity. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gradient_scaling_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Scaling factor for gradient-based erosion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gradient_prefilter_ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Kernel radius for pre-filtering the terrain gradient. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>saturation_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Ratio controlling the water saturation threshold for erosion processes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_bedrock</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an optional lower elevation limit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_moisture_map</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the moisture map (rainfall quantity), expected to be in [0, 1]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_erosion_map[out]</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the erosion map, provided as an output field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_flow_map[out]</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the flow accumulation map, provided as an output field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Kernel radius. If <computeroutput>ir &gt; 1</computeroutput>, a cone kernel is used to carve channel flow erosion.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_hydraulic_stream.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>shape<sp/>=<sp/>{1024,<sp/>1024};</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z0<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c_erosion<sp/>=<sp/>0.1f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>talus_ref<sp/>=<sp/>5.f<sp/>/<sp/>(float)shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iradius<sp/>=<sp/>64;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z_bedrock<sp/>=<sp/><ref refid="namespacehmap_1adf68a2f031297654f88252b7ce027b3d" kindref="member">hmap::minimum_local</ref>(z,<sp/>iradius);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1acbf32c30d68183eb5522888af2ede316" kindref="member">hmap::hydraulic_stream</ref>(z1,<sp/>c_erosion,<sp/>talus_ref);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>ir<sp/>=<sp/>5;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>erosion_map<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(shape);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>moisture_map<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1acbf32c30d68183eb5522888af2ede316" kindref="member">hmap::hydraulic_stream</ref>(z2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c_erosion,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>talus_ref,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;z_bedrock,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;moisture_map,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;erosion_map,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1_1gpu_1adb8336ed4d83c15500872185dee45d50" kindref="member">hmap::gpu::init_opencl</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>log<sp/>scale</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z3<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>deposition_ir<sp/>=<sp/>32;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>c_erosion<sp/>=<sp/>0.2f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a37caab05db1b9791bf8a8ca10852c0da" kindref="member">hmap::hydraulic_stream_log</ref>(z3,<sp/>c_erosion,<sp/>talus_ref,<sp/>deposition_ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z3.dump();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_hydraulic_stream0.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z0,<sp/>z1,<sp/>z2,<sp/>z3},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>erosion_map.to_png(</highlight><highlight class="stringliteral">&quot;ex_hydraulic_stream1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_hydraulic_stream0.png"></image>
 <image type="html" name="ex_hydraulic_stream1.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/hydraulic_stream.cpp" line="100" column="6" bodyfile="HighMap/src/erosion/hydraulic_stream.cpp" bodystart="100" bodyend="168" declfile="HighMap/include/highmap/erosion.hpp" declline="621" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aa7f5971ef086adea43d610f81b0307ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::hydraulic_stream_log</definition>
        <argsstring>(Array &amp;z, float c_erosion, float talus_ref, Array *p_mask, int deposition_ir=32, float deposition_scale_ratio=1.f, float gradient_power=0.8f, float gradient_scaling_ratio=1.f, int gradient_prefilter_ir=16, float saturation_ratio=1.f, Array *p_bedrock=nullptr, Array *p_moisture_map=nullptr, Array *p_erosion_map=nullptr, Array *p_deposition_map=nullptr, Array *p_flow_map=nullptr)</argsstring>
        <name>hydraulic_stream_log</name>
        <qualifiedname>hmap::hydraulic_stream_log</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>c_erosion</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus_ref</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>deposition_ir</declname>
          <defval>32</defval>
        </param>
        <param>
          <type>float</type>
          <declname>deposition_scale_ratio</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>gradient_power</declname>
          <defval>0.8<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>gradient_scaling_ratio</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>gradient_prefilter_ir</declname>
          <defval>16</defval>
        </param>
        <param>
          <type>float</type>
          <declname>saturation_ratio</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_bedrock</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_moisture_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_erosion_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_flow_map</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/hydraulic_stream.cpp" line="170" column="6" bodyfile="HighMap/src/erosion/hydraulic_stream.cpp" bodystart="170" bodyend="220" declfile="HighMap/include/highmap/erosion.hpp" declline="636" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aa6efdb6d9fbf995b00f889ca290819cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::hydraulic_vpipes</definition>
        <argsstring>(Array &amp;z, Array *p_mask, int iterations, Array *p_bedrock=nullptr, Array *p_moisture_map=nullptr, Array *p_erosion_map=nullptr, Array *p_deposition_map=nullptr, float water_height=0.1f, float c_capacity=0.1f, float c_erosion=0.05f, float c_deposition=0.05f, float rain_rate=0.f, float evap_rate=0.01f)</argsstring>
        <name>hydraulic_vpipes</name>
        <qualifiedname>hmap::hydraulic_vpipes</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_bedrock</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_moisture_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_erosion_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>float</type>
          <declname>water_height</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_capacity</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_erosion</declname>
          <defval>0.05<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_deposition</declname>
          <defval>0.05<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>rain_rate</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>evap_rate</declname>
          <defval>0.01<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Apply hydraulic erosion using the &apos;virtual pipes&apos; algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para>See Chiba1998, Isheden2022, Mei2007 and Stava2008.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Intensity mask, expected in [0, 1] (applied as a </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iterations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_bedrock</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower elevation limit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_moisture_map</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the moisture map (quantity of rain), expected to be in [0, 1]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_erosion_map[out]</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the erosion map, provided as an output field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_deposition_map</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] Reference to the deposition map, provided as an output field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>water_height</parametername>
</parameternamelist>
<parameterdescription>
<para>Water height. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>Sediment capacity. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_deposition</parametername>
</parameternamelist>
<parameterdescription>
<para>Deposition coefficient. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_erosion</parametername>
</parameternamelist>
<parameterdescription>
<para>Erosion coefficient. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rain_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>Rain rate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>evap_rate</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structhmap_1_1Particle" kindref="compound">Particle</ref> evaporation rate.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_hydraulic_vpipes.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{512,<sp/>512};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z0<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1aa6efdb6d9fbf995b00f889ca290819cd" kindref="member">hmap::hydraulic_vpipes</ref>(z,<sp/>300);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a3517b483a468873cefa73f7773a893ec" kindref="member">infos</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_hydraulic_vpipes.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z0,<sp/>z},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_hydraulic_vpipes.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/hydraulic_vpipes.cpp" line="289" column="6" bodyfile="HighMap/src/erosion/hydraulic_vpipes.cpp" bodystart="289" bodyend="333" declfile="HighMap/include/highmap/erosion.hpp" declline="680" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ac30a1d413b62e80d0d2fd3073cc975d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::hydraulic_vpipes</definition>
        <argsstring>(Array &amp;z, int iterations, Array *p_bedrock=nullptr, Array *p_moisture_map=nullptr, Array *p_erosion_map=nullptr, Array *p_deposition_map=nullptr, float water_height=0.1f, float c_capacity=0.1f, float c_erosion=0.05f, float c_deposition=0.05f, float rain_rate=0.f, float evap_rate=0.01f)</argsstring>
        <name>hydraulic_vpipes</name>
        <qualifiedname>hmap::hydraulic_vpipes</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_bedrock</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_moisture_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_erosion_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>float</type>
          <declname>water_height</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_capacity</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_erosion</declname>
          <defval>0.05<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>c_deposition</declname>
          <defval>0.05<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>rain_rate</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>evap_rate</declname>
          <defval>0.01<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/hydraulic_vpipes.cpp" line="25" column="6" bodyfile="HighMap/src/erosion/hydraulic_vpipes.cpp" bodystart="25" bodyend="287" declfile="HighMap/include/highmap/erosion.hpp" declline="694" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a2f83e2631c0b0dee67aae188f439f1bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::sediment_deposition</definition>
        <argsstring>(Array &amp;z, Array *p_mask, const Array &amp;talus, Array *p_deposition_map=nullptr, float max_deposition=0.01, int iterations=5, int thermal_subiterations=10)</argsstring>
        <name>sediment_deposition</name>
        <qualifiedname>hmap::sediment_deposition</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>talus</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>float</type>
          <declname>max_deposition</declname>
          <defval>0.01</defval>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>5</defval>
        </param>
        <param>
          <type>int</type>
          <declname>thermal_subiterations</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
<para>Perform sediment deposition combined with thermal erosion. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000001"><xreftitle>Todo</xreftitle><xrefdescription><para>deposition map</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Intensity mask, expected in [0, 1] (applied as a post-processing). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus</parametername>
</parameternamelist>
<parameterdescription>
<para>Talus limit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_deposition_map</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] Reference to the deposition map, provided as an output field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_deposition</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum height of sediment deposition. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iterations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thermal_erosion_subiterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of thermal erosion iterations for each pass.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_sediment_deposition.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z0<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>talus<sp/>limit<sp/>defined<sp/>locally</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>talus<sp/>=<sp/><ref refid="namespacehmap_1a8f4e766dca0065219e26af946bd61946" kindref="member">hmap::constant</ref>(shape,<sp/>0.2f<sp/>/<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a2f83e2631c0b0dee67aae188f439f1bb" kindref="member">hmap::sediment_deposition</ref>(z,<sp/>talus);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_sediment_deposition.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z0,<sp/>z},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_sediment_deposition.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/deposition.cpp" line="47" column="6" bodyfile="HighMap/src/erosion/deposition.cpp" bodystart="47" bodyend="73" declfile="HighMap/include/highmap/erosion.hpp" declline="729" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a7f31b214bbcc3083c75cbcac905b5a1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::sediment_deposition</definition>
        <argsstring>(Array &amp;z, const Array &amp;talus, Array *p_deposition_map=nullptr, float max_deposition=0.01, int iterations=5, int thermal_subiterations=10)</argsstring>
        <name>sediment_deposition</name>
        <qualifiedname>hmap::sediment_deposition</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>talus</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>float</type>
          <declname>max_deposition</declname>
          <defval>0.01</defval>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>5</defval>
        </param>
        <param>
          <type>int</type>
          <declname>thermal_subiterations</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/deposition.cpp" line="24" column="6" bodyfile="HighMap/src/erosion/deposition.cpp" bodystart="24" bodyend="45" declfile="HighMap/include/highmap/erosion.hpp" declline="737" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aef448d1fdaa3277652ef0d5616e4fc2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::sediment_deposition_particle</definition>
        <argsstring>(Array &amp;z, Array *p_mask, int nparticles, int ir, int seed=1, Array *p_spawning_map=nullptr, Array *p_deposition_map=nullptr, float particle_initial_sediment=0.1f, float deposition_velocity_limit=0.01f, float drag_rate=0.001f)</argsstring>
        <name>sediment_deposition_particle</name>
        <qualifiedname>hmap::sediment_deposition_particle</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nparticles</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>seed</declname>
          <defval>1</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_spawning_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>float</type>
          <declname>particle_initial_sediment</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>deposition_velocity_limit</declname>
          <defval>0.01<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>drag_rate</declname>
          <defval>0.001<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Intensity mask, expected in [0, 1] (applied as a post-processing). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nparticles</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of particles. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structhmap_1_1Particle" kindref="compound">Particle</ref> deposition radius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_spawning_map</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the particle spawning density map. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_deposition_map</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the deposition map (output). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>particle_initial_sediment</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial sediment amount carried out by the particles. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deposition_velocity_limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Deposition at which the deposition occurs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>drag_rate</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structhmap_1_1Particle" kindref="compound">Particle</ref> drag rate.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_sediment_deposition_particle.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z0<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1aef448d1fdaa3277652ef0d5616e4fc2f" kindref="member">hmap::sediment_deposition_particle</ref>(z,<sp/>200000,<sp/>16);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_sediment_deposition_particle.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z0,<sp/>z},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_sediment_deposition_particle.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/deposition.cpp" line="172" column="6" bodyfile="HighMap/src/erosion/deposition.cpp" bodystart="172" bodyend="207" declfile="HighMap/include/highmap/erosion.hpp" declline="767" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a692c074c2a2f7c4560364f5770411894" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::sediment_deposition_particle</definition>
        <argsstring>(Array &amp;z, int nparticles, int ir, int seed=1, Array *p_spawning_map=nullptr, Array *p_deposition_map=nullptr, float particle_initial_sediment=0.1f, float deposition_velocity_limit=0.01f, float drag_rate=0.001f)</argsstring>
        <name>sediment_deposition_particle</name>
        <qualifiedname>hmap::sediment_deposition_particle</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nparticles</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>seed</declname>
          <defval>1</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_spawning_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>float</type>
          <declname>particle_initial_sediment</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>deposition_velocity_limit</declname>
          <defval>0.01<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>drag_rate</declname>
          <defval>0.001<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/deposition.cpp" line="75" column="6" bodyfile="HighMap/src/erosion/deposition.cpp" bodystart="75" bodyend="170" declfile="HighMap/include/highmap/erosion.hpp" declline="778" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a9d594d0e16132aeef59e1680789b886e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::sediment_layer</definition>
        <argsstring>(Array &amp;z, const Array &amp;talus_layer, const Array &amp;talus_upper_limit, int iterations, bool apply_post_filter=true, Array *p_deposition_map=nullptr)</argsstring>
        <name>sediment_layer</name>
        <qualifiedname>hmap::sediment_layer</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>talus_layer</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>talus_upper_limit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>apply_post_filter</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/deposition.cpp" line="209" column="6" bodyfile="HighMap/src/erosion/deposition.cpp" bodystart="209" bodyend="252" declfile="HighMap/include/highmap/erosion.hpp" declline="788" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1abc0ddcae8cec8a556b8a343eaafe1dc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::stratify</definition>
        <argsstring>(Array &amp;z, Array *p_mask, std::vector&lt; float &gt; hs, std::vector&lt; float &gt; gamma, Array *p_noise=nullptr)</argsstring>
        <name>stratify</name>
        <qualifiedname>hmap::stratify</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt;</type>
          <declname>hs</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt;</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Stratify the heightmap by creating a series of layers with elevations corrected by a gamma factor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Intensity mask, expected in [0, 1] (applied as a post-processing). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hs</parametername>
</parameternamelist>
<parameterdescription>
<para>Layer elevations. For &apos;n&apos; layers, &apos;n + 1&apos; values must be provided. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gamma</parametername>
</parameternamelist>
<parameterdescription>
<para>Layer gamma correction factors, &apos;n&apos; values.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="namespacehmap_1aba3674787d520af15267ee7d1e46d220" kindref="member">gamma_correction</ref>.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_stratify.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>mask<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(mask);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>stratification<sp/>features<sp/>(nb<sp/>of<sp/>layers,<sp/>elevations<sp/>and<sp/>gamma</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>correction<sp/>factors)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>ns<sp/>=<sp/>10;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hs<sp/>=<sp/><ref refid="namespacehmap_1a068e4d5be8c16ab9e708dca9678dc8de" kindref="member">hmap::linspace_jitted</ref>(z1.min(),<sp/>z1.max(),<sp/>ns,<sp/>0.9f,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>gs<sp/>=<sp/><ref refid="namespacehmap_1a3e6de5f9e14f11872651af22e5756c32" kindref="member">hmap::random_vector</ref>(0.2,<sp/>0.8,<sp/>ns<sp/>-<sp/>1,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1abc0ddcae8cec8a556b8a343eaafe1dc4" kindref="member">hmap::stratify</ref>(z1,<sp/>hs,<sp/>gs);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>oblique<sp/>layers</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>talus<sp/>=<sp/>4.f<sp/>/<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref><sp/>=<sp/>15.f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a06a4f7bbf99b83632ceb8a9ba5989823" kindref="member">hmap::stratify_oblique</ref>(z2,<sp/>&amp;mask,<sp/>hs,<sp/>gs,<sp/>talus,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>domain<sp/>partitioning<sp/>with<sp/>different<sp/>strata<sp/>systems</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/>z3<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>nstrata<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>strata_noise<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma_noise<sp/>=<sp/>0.1f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>npartitions<sp/>=<sp/>3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>partition<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(partition);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1abc0ddcae8cec8a556b8a343eaafe1dc4" kindref="member">hmap::stratify</ref>(z3,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partition,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nstrata,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strata_noise,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gamma,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gamma_noise,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>npartitions,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_stratify.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1,<sp/>z2,<sp/>z3},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_stratify.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/stratify.cpp" line="46" column="6" bodyfile="HighMap/src/erosion/stratify.cpp" bodystart="46" bodyend="60" declfile="HighMap/include/highmap/erosion.hpp" declline="814" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ad117ced78d758baa0bb5e1e7655bd0b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::stratify</definition>
        <argsstring>(Array &amp;z, std::vector&lt; float &gt; hs, std::vector&lt; float &gt; gamma, Array *p_noise=nullptr)</argsstring>
        <name>stratify</name>
        <qualifiedname>hmap::stratify</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt;</type>
          <declname>hs</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt;</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/stratify.cpp" line="17" column="6" bodyfile="HighMap/src/erosion/stratify.cpp" bodystart="17" bodyend="44" declfile="HighMap/include/highmap/erosion.hpp" declline="820" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1abca93ca8447abd2fc06c9892a4dc248c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::stratify</definition>
        <argsstring>(Array &amp;z, std::vector&lt; float &gt; hs, float gamma=0.5f, Array *p_noise=nullptr)</argsstring>
        <name>stratify</name>
        <qualifiedname>hmap::stratify</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt;</type>
          <declname>hs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>gamma</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/stratify.cpp" line="131" column="6" bodyfile="HighMap/src/erosion/stratify.cpp" bodystart="131" bodyend="139" declfile="HighMap/include/highmap/erosion.hpp" declline="825" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a9b3fc59af5c418c494eec160399839bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::stratify</definition>
        <argsstring>(Array &amp;z, Array &amp;partition, int nstrata, float strata_noise, float gamma, float gamma_noise, int npartitions, uint seed, float mixing_gain_factor=1.f, Array *p_noise=nullptr, float vmin=1.f, float vmax=0.f)</argsstring>
        <name>stratify</name>
        <qualifiedname>hmap::stratify</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>partition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nstrata</declname>
        </param>
        <param>
          <type>float</type>
          <declname>strata_noise</declname>
        </param>
        <param>
          <type>float</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>float</type>
          <declname>gamma_noise</declname>
        </param>
        <param>
          <type>int</type>
          <declname>npartitions</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>float</type>
          <declname>mixing_gain_factor</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>float</type>
          <declname>vmin</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>vmax</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/stratify.cpp" line="141" column="6" bodyfile="HighMap/src/erosion/stratify.cpp" bodystart="141" bodyend="188" declfile="HighMap/include/highmap/erosion.hpp" declline="830" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a815d3c721091a5525f872527a994ec1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::stratify_multiscale</definition>
        <argsstring>(Array &amp;z, float zmin, float zmax, std::vector&lt; int &gt; n_strata, std::vector&lt; float &gt; strata_noise, std::vector&lt; float &gt; gamma_list, std::vector&lt; float &gt; gamma_noise, uint seed, Array *p_mask=nullptr, Array *p_noise=nullptr)</argsstring>
        <name>stratify_multiscale</name>
        <qualifiedname>hmap::stratify_multiscale</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>zmin</declname>
        </param>
        <param>
          <type>float</type>
          <declname>zmax</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>n_strata</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt;</type>
          <declname>strata_noise</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt;</type>
          <declname>gamma_list</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt;</type>
          <declname>gamma_noise</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Stratify the heightmap by creating a multiscale series of layers with elevations corrected by a gamma factor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zmin</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum elevation for the strata </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zmax</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum elevation for the strata </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_strata</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of strata for each stratification iteration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strata_noise</parametername>
</parameternamelist>
<parameterdescription>
<para>Elevation relative noise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gamma_list</parametername>
</parameternamelist>
<parameterdescription>
<para>Gamma value for each stratification iteration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gamma_noise</parametername>
</parameternamelist>
<parameterdescription>
<para>Gamma relative noise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Intensity mask, expected in [0, 1] (applied as a post-processing). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise</parametername>
</parameternamelist>
<parameterdescription>
<para>Local elevation noise.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_stratify_multiscale.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/><sp/><sp/>n_strata<sp/>=<sp/>{2,<sp/>3,<sp/>6};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>strata_noise<sp/>=<sp/>{0.5f,<sp/>0.5f,<sp/>0.5f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>gamma_list<sp/>=<sp/>{2.f,<sp/>0.5f,<sp/>0.5f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>gamma_noise<sp/>=<sp/>{0.2f,<sp/>0.2f,<sp/>0.2f};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a815d3c721091a5525f872527a994ec1f" kindref="member">hmap::stratify_multiscale</ref>(z1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z1.min(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z1.max(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_strata,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strata_noise,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gamma_list,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gamma_noise,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_stratify_multiscale.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_stratify_multiscale.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/stratify.cpp" line="62" column="6" bodyfile="HighMap/src/erosion/stratify.cpp" bodystart="62" bodyend="129" declfile="HighMap/include/highmap/erosion.hpp" declline="866" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a06a4f7bbf99b83632ceb8a9ba5989823" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::stratify_oblique</definition>
        <argsstring>(Array &amp;z, Array *p_mask, std::vector&lt; float &gt; hs, std::vector&lt; float &gt; gamma, float talus, float angle, Array *p_noise=nullptr)</argsstring>
        <name>stratify_oblique</name>
        <qualifiedname>hmap::stratify_oblique</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt;</type>
          <declname>hs</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt;</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Stratify the heightmap by creating a series of oblique layers with elevations corrected by a gamma factor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Intensity mask, expected in [0, 1] (applied as a post-processing). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hs</parametername>
</parameternamelist>
<parameterdescription>
<para>Layer elevations. For &apos;n&apos; layers, &apos;n + 1&apos; values must be provided. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gamma</parametername>
</parameternamelist>
<parameterdescription>
<para>Layer gamma correction factors, &apos;n&apos; values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus</parametername>
</parameternamelist>
<parameterdescription>
<para>Layer talus value (slope). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Slope orientation (in degrees). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise</parametername>
</parameternamelist>
<parameterdescription>
<para>Local elevation noise.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_stratify.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>mask<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(mask);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>stratification<sp/>features<sp/>(nb<sp/>of<sp/>layers,<sp/>elevations<sp/>and<sp/>gamma</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>correction<sp/>factors)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>ns<sp/>=<sp/>10;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hs<sp/>=<sp/><ref refid="namespacehmap_1a068e4d5be8c16ab9e708dca9678dc8de" kindref="member">hmap::linspace_jitted</ref>(z1.min(),<sp/>z1.max(),<sp/>ns,<sp/>0.9f,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>gs<sp/>=<sp/><ref refid="namespacehmap_1a3e6de5f9e14f11872651af22e5756c32" kindref="member">hmap::random_vector</ref>(0.2,<sp/>0.8,<sp/>ns<sp/>-<sp/>1,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1abc0ddcae8cec8a556b8a343eaafe1dc4" kindref="member">hmap::stratify</ref>(z1,<sp/>hs,<sp/>gs);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>oblique<sp/>layers</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>talus<sp/>=<sp/>4.f<sp/>/<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref><sp/>=<sp/>15.f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a06a4f7bbf99b83632ceb8a9ba5989823" kindref="member">hmap::stratify_oblique</ref>(z2,<sp/>&amp;mask,<sp/>hs,<sp/>gs,<sp/>talus,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>domain<sp/>partitioning<sp/>with<sp/>different<sp/>strata<sp/>systems</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/>z3<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>nstrata<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>strata_noise<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma_noise<sp/>=<sp/>0.1f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>npartitions<sp/>=<sp/>3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>partition<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(partition);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1abc0ddcae8cec8a556b8a343eaafe1dc4" kindref="member">hmap::stratify</ref>(z3,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partition,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nstrata,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strata_noise,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gamma,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gamma_noise,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>npartitions,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_stratify.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1,<sp/>z2,<sp/>z3},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_stratify.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/stratify.cpp" line="241" column="6" bodyfile="HighMap/src/erosion/stratify.cpp" bodystart="241" bodyend="257" declfile="HighMap/include/highmap/erosion.hpp" declline="897" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a1d3b4f4dbe769a1f71f8fcc44cfcaf8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::stratify_oblique</definition>
        <argsstring>(Array &amp;z, std::vector&lt; float &gt; hs, std::vector&lt; float &gt; gamma, float talus, float angle, Array *p_noise=nullptr)</argsstring>
        <name>stratify_oblique</name>
        <qualifiedname>hmap::stratify_oblique</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt;</type>
          <declname>hs</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt;</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/stratify.cpp" line="190" column="6" bodyfile="HighMap/src/erosion/stratify.cpp" bodystart="190" bodyend="239" declfile="HighMap/include/highmap/erosion.hpp" declline="905" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ab6221592aa07d117715b474afab7db1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::thermal</definition>
        <argsstring>(Array &amp;z, Array *p_mask, const Array &amp;talus, int iterations=10, Array *p_bedrock=nullptr, Array *p_deposition_map=nullptr)</argsstring>
        <name>thermal</name>
        <qualifiedname>hmap::thermal</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>10</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_bedrock</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Apply thermal weathering erosion. </para>
        </briefdescription>
        <detaileddescription>
<para>Based on <ulink url="https://www.shadertoy.com/view/XtKSWh">https://www.shadertoy.com/view/XtKSWh</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Filter mask, expected in [0, 1]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus</parametername>
</parameternamelist>
<parameterdescription>
<para>Talus limit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_bedrock</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower elevation limit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_deposition_map</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] Reference to the deposition map, provided as an output field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iterations.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_thermal.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z0<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>dmap<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(shape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1ab6221592aa07d117715b474afab7db1c" kindref="member">hmap::thermal</ref>(z,<sp/>0.1f<sp/>/<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_thermal.png&quot;</highlight><highlight class="normal">,<sp/>{z0,<sp/>z},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_thermal.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/thermal.cpp" line="174" column="6" bodyfile="HighMap/src/erosion/thermal.cpp" bodystart="174" bodyend="189" declfile="HighMap/include/highmap/erosion.hpp" declline="931" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aeb883524caa1b5ce67ee3b60376b4abb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::thermal</definition>
        <argsstring>(Array &amp;z, const Array &amp;talus, int iterations=10, Array *p_bedrock=nullptr, Array *p_deposition_map=nullptr)</argsstring>
        <name>thermal</name>
        <qualifiedname>hmap::thermal</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>10</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_bedrock</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/thermal.cpp" line="45" column="6" bodyfile="HighMap/src/erosion/thermal.cpp" bodystart="45" bodyend="168" declfile="HighMap/include/highmap/erosion.hpp" declline="938" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a515af2d938d55488bbb549c708597886" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::thermal</definition>
        <argsstring>(Array &amp;z, float talus, int iterations=10, Array *p_bedrock=nullptr, Array *p_deposition_map=nullptr)</argsstring>
        <name>thermal</name>
        <qualifiedname>hmap::thermal</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>10</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_bedrock</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/thermal.cpp" line="192" column="6" bodyfile="HighMap/src/erosion/thermal.cpp" bodystart="192" bodyend="200" declfile="HighMap/include/highmap/erosion.hpp" declline="944" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1acbd2a3c82ec3ce4eaf77dbc92d580321" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::thermal_auto_bedrock</definition>
        <argsstring>(Array &amp;z, const Array &amp;talus, int iterations=10, Array *p_deposition_map=nullptr)</argsstring>
        <name>thermal_auto_bedrock</name>
        <qualifiedname>hmap::thermal_auto_bedrock</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>10</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Apply thermal weathering erosion with automatic determination of the bedrock. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000002"><xreftitle>Todo</xreftitle><xrefdescription><para>more comprehensive documentation on auto-bedrock algo. </para>
<para>fix hard-coded parameters.</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><computeroutput><ref refid="namespacehmap_1ab6221592aa07d117715b474afab7db1c" kindref="member">thermal</ref></computeroutput></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus</parametername>
</parameternamelist>
<parameterdescription>
<para>Local talus limit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iterations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_deposition_map</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] Reference to the deposition map, provided as an output field.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_thermal_auto_bedrock.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z0<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1acbd2a3c82ec3ce4eaf77dbc92d580321" kindref="member">hmap::thermal_auto_bedrock</ref>(z,<sp/>0.5f<sp/>/<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_thermal_auto_bedrock.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z0,<sp/>z},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_thermal_auto_bedrock.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/thermal.cpp" line="206" column="6" bodyfile="HighMap/src/erosion/thermal.cpp" bodystart="206" bodyend="242" declfile="HighMap/include/highmap/erosion.hpp" declline="971" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a2e350857ce33125722d9c8ff6663f1c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::thermal_auto_bedrock</definition>
        <argsstring>(Array &amp;z, float talus, int iterations=10, Array *p_deposition_map=nullptr)</argsstring>
        <name>thermal_auto_bedrock</name>
        <qualifiedname>hmap::thermal_auto_bedrock</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>10</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/thermal.cpp" line="244" column="6" bodyfile="HighMap/src/erosion/thermal.cpp" bodystart="244" bodyend="251" declfile="HighMap/include/highmap/erosion.hpp" declline="976" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1af6a1650f303f70801a19aba318090664" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::thermal_auto_bedrock</definition>
        <argsstring>(Array &amp;z, Array *p_mask, float talus, int iterations=10, Array *p_deposition_map=nullptr)</argsstring>
        <name>thermal_auto_bedrock</name>
        <qualifiedname>hmap::thermal_auto_bedrock</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>10</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/thermal.cpp" line="253" column="6" bodyfile="HighMap/src/erosion/thermal.cpp" bodystart="253" bodyend="267" declfile="HighMap/include/highmap/erosion.hpp" declline="981" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a600b794acf99e4b8d41ee7526e5c21ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::thermal_flatten</definition>
        <argsstring>(Array &amp;z, const Array &amp;talus, const Array &amp;bedrock, int iterations=10, int post_filter_ir=1)</argsstring>
        <name>thermal_flatten</name>
        <qualifiedname>hmap::thermal_flatten</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>bedrock</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>int</type>
          <declname>post_filter_ir</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Apply modified thermal weathering of Olsen. </para>
        </briefdescription>
        <detaileddescription>
<para>Based on the algorithm of Olsen Olsen2004, which &quot;causes slopes steeper
than the talus threshold to remain unaffected while flatter areas are
levelled out&quot;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus</parametername>
</parameternamelist>
<parameterdescription>
<para>Local talus limit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iterations.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_thermal_flatten.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z0<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a600b794acf99e4b8d41ee7526e5c21ec" kindref="member">hmap::thermal_flatten</ref>(z,<sp/>8.f<sp/>/<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_thermal_flatten.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z0,<sp/>z},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_thermal_flatten.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/thermal_flatten.cpp" line="22" column="6" bodyfile="HighMap/src/erosion/thermal_flatten.cpp" bodystart="22" bodyend="81" declfile="HighMap/include/highmap/erosion.hpp" declline="1004" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aad5d723c32c1cd431ad4ab6638fb523d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::thermal_flatten</definition>
        <argsstring>(Array &amp;z, float talus, int iterations=10, int post_filter_ir=1)</argsstring>
        <name>thermal_flatten</name>
        <qualifiedname>hmap::thermal_flatten</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>int</type>
          <declname>post_filter_ir</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/thermal_flatten.cpp" line="87" column="6" bodyfile="HighMap/src/erosion/thermal_flatten.cpp" bodystart="87" bodyend="92" declfile="HighMap/include/highmap/erosion.hpp" declline="1010" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a1ebb59674f1b317db20cc87385bc41a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::thermal_olsen</definition>
        <argsstring>(Array &amp;z, const Array &amp;talus, int iterations=10, Array *p_bedrock=nullptr, Array *p_deposition_map=nullptr)</argsstring>
        <name>thermal_olsen</name>
        <qualifiedname>hmap::thermal_olsen</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>10</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_bedrock</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Apply thermal weathering erosion. </para>
        </briefdescription>
        <detaileddescription>
<para>Based on averaging over first neighbors, see Olsen2004. Refer to Musgrave1989 for the original formulation.</para>
<para>Thermal erosion refers to the process in which surface sediment weakens due to temperature and detaches, falling down the slopes of the terrain until a resting place is reached, where smooth plateaus tend to form Musgrave1989.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Filter mask, expected in [0, 1]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus</parametername>
</parameternamelist>
<parameterdescription>
<para>Talus limit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_bedrock</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower elevation limit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_deposition_map</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] Reference to the deposition map, provided as an output field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iterations. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/thermal_olsen.cpp" line="23" column="6" bodyfile="HighMap/src/erosion/thermal_olsen.cpp" bodystart="23" bodyend="177" declfile="HighMap/include/highmap/erosion.hpp" declline="1034" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a4ca4c918ef88ea4fc16e25c7017e15c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::thermal_rib</definition>
        <argsstring>(Array &amp;z, int iterations, Array *p_bedrock=nullptr)</argsstring>
        <name>thermal_rib</name>
        <qualifiedname>hmap::thermal_rib</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_bedrock</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Apply thermal erosion using a &apos;rib&apos; algorithm (taken from Geomorph). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input heightmap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iterations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_bedrock</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower elevation limit.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_thermal_rib.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z0<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a4ca4c918ef88ea4fc16e25c7017e15c9" kindref="member">hmap::thermal_rib</ref>(z,<sp/>50);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_thermal_rib.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z0,<sp/>z},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_thermal_rib.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/thermal_rib.cpp" line="17" column="6" bodyfile="HighMap/src/erosion/thermal_rib.cpp" bodystart="17" bodyend="45" declfile="HighMap/include/highmap/erosion.hpp" declline="1052" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ab38af66da103b9be4e5aaeed7213b9c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::thermal_schott</definition>
        <argsstring>(Array &amp;z, const Array &amp;talus, int iterations=10, float intensity=0.001f)</argsstring>
        <name>thermal_schott</name>
        <qualifiedname>hmap::thermal_schott</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>float</type>
          <declname>intensity</declname>
          <defval>0.001<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Applies the thermal erosion process to an array of elevation values. </para>
        </briefdescription>
        <detaileddescription>
<para>This function simulates thermal erosion by modifying the elevation values in the array <computeroutput>z</computeroutput>. It compares the slope between each cell and its neighbors with a specified threshold (<computeroutput>talus</computeroutput>). If the slope exceeds the threshold, material is considered to move from higher to lower cells, resulting in a smoother terrain.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the array of elevation values that will be modified. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> of threshold slope values for each cell, representing stability criteria. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of erosion iterations to apply. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intensity</parametername>
</parameternamelist>
<parameterdescription>
<para>Intensity factor controlling the amount of change per iteration.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_thermal_schott.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>iterations<sp/>=<sp/>100;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>intensity<sp/>=<sp/>0.001f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>talus<sp/>=<sp/>2.f<sp/>/<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1ab38af66da103b9be4e5aaeed7213b9c2" kindref="member">hmap::thermal_schott</ref>(z1,<sp/>talus,<sp/>iterations,<sp/>intensity);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>align<sp/>talus<sp/>constraint<sp/>with<sp/>the<sp/>elevation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>talus_map<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(talus_map,<sp/>talus<sp/>/<sp/>2.f,<sp/>talus);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1ab38af66da103b9be4e5aaeed7213b9c2" kindref="member">hmap::thermal_schott</ref>(z2,<sp/>talus_map,<sp/>iterations,<sp/>intensity);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_thermal_schott.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1,<sp/>z2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_thermal_schott.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/thermal_schott.cpp" line="24" column="6" bodyfile="HighMap/src/erosion/thermal_schott.cpp" bodystart="24" bodyend="66" declfile="HighMap/include/highmap/erosion.hpp" declline="1077" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a934a4f6e9ae0f315a2296d488b9333b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::thermal_schott</definition>
        <argsstring>(Array &amp;z, const Array &amp;talus, Array *p_mask, int iterations=10, float intensity=0.001f)</argsstring>
        <name>thermal_schott</name>
        <qualifiedname>hmap::thermal_schott</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>talus</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>float</type>
          <declname>intensity</declname>
          <defval>0.001<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/thermal_schott.cpp" line="68" column="6" bodyfile="HighMap/src/erosion/thermal_schott.cpp" bodystart="68" bodyend="82" declfile="HighMap/include/highmap/erosion.hpp" declline="1082" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aa328e3342e845d021f300dcb6cb42fbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::thermal_schott</definition>
        <argsstring>(Array &amp;z, const float talus, int iterations=10, float intensity=0.001f)</argsstring>
        <name>thermal_schott</name>
        <qualifiedname>hmap::thermal_schott</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>float</type>
          <declname>intensity</declname>
          <defval>0.001<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Applies the thermal erosion process with a uniform slope threshold. </para>
        </briefdescription>
        <detaileddescription>
<para>This overload of <computeroutput>thermal_schott</computeroutput> applies thermal erosion with a uniform threshold value. It generates an internal talus map using the specified constant <computeroutput>talus</computeroutput> value and applies the erosion process in the same manner as the other overload.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the array of elevation values that will be modified. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant threshold slope value used for all cells. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of erosion iterations to apply. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intensity</parametername>
</parameternamelist>
<parameterdescription>
<para>Intensity factor controlling the amount of change per iteration.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_thermal_schott.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>iterations<sp/>=<sp/>100;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>intensity<sp/>=<sp/>0.001f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>talus<sp/>=<sp/>2.f<sp/>/<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1ab38af66da103b9be4e5aaeed7213b9c2" kindref="member">hmap::thermal_schott</ref>(z1,<sp/>talus,<sp/>iterations,<sp/>intensity);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>align<sp/>talus<sp/>constraint<sp/>with<sp/>the<sp/>elevation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>talus_map<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(talus_map,<sp/>talus<sp/>/<sp/>2.f,<sp/>talus);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1ab38af66da103b9be4e5aaeed7213b9c2" kindref="member">hmap::thermal_schott</ref>(z2,<sp/>talus_map,<sp/>iterations,<sp/>intensity);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_thermal_schott.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1,<sp/>z2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_thermal_schott.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/thermal_schott.cpp" line="84" column="6" bodyfile="HighMap/src/erosion/thermal_schott.cpp" bodystart="84" bodyend="91" declfile="HighMap/include/highmap/erosion.hpp" declline="1109" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1afe2e4c1e06205f5051ce6e86ea647a77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::thermal_schott</definition>
        <argsstring>(Array &amp;z, const float talus, Array *p_mask, int iterations=10, float intensity=0.001f)</argsstring>
        <name>thermal_schott</name>
        <qualifiedname>hmap::thermal_schott</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>talus</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>float</type>
          <declname>intensity</declname>
          <defval>0.001<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/thermal_schott.cpp" line="93" column="6" bodyfile="HighMap/src/erosion/thermal_schott.cpp" bodystart="93" bodyend="107" declfile="HighMap/include/highmap/erosion.hpp" declline="1114" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a7b8945745feaeaa365d965ce66b32f58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hmap::export_asset</definition>
        <argsstring>(const std::string &amp;fname, const Array &amp;array, MeshType mesh_type=MeshType::TRI, AssetExportFormat export_format=AssetExportFormat::GLB2, float elevation_scaling=0.2f, const std::string &amp;texture_fname=&quot;&quot;, const std::string &amp;normal_map_fname=&quot;&quot;, float max_error=5e-4f)</argsstring>
        <name>export_asset</name>
        <qualifiedname>hmap::export_asset</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="namespacehmap_1ac81a92060b89699c4eb9826495d87250" kindref="member">MeshType</ref></type>
          <declname>mesh_type</declname>
          <defval><ref refid="namespacehmap_1ac81a92060b89699c4eb9826495d87250a68dced9d7f19cbd741feae05ad17ca14" kindref="member">MeshType::TRI</ref></defval>
        </param>
        <param>
          <type><ref refid="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871b" kindref="member">AssetExportFormat</ref></type>
          <declname>export_format</declname>
          <defval><ref refid="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871ba0766d2c2cb91f6e1e9a1b4dfcbffd562" kindref="member">AssetExportFormat::GLB2</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>elevation_scaling</declname>
          <defval>0.2<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>texture_fname</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>normal_map_fname</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>float</type>
          <declname>max_error</declname>
          <defval>5e-4<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Exports a heightmap to various 3D file formats. </para>
        </briefdescription>
        <detaileddescription>
<para>This function exports the input heightmap array as a 3D asset in the specified format. The export can include different mesh types, elevation scaling, and optional texture and normal maps. The function supports optimized Delaunay triangulation for mesh generation, with a configurable maximum error.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the file to which the 3D asset will be exported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The input heightmap array to be converted into a 3D asset. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mesh_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of mesh to generate (see <computeroutput><ref refid="namespacehmap_1ac81a92060b89699c4eb9826495d87250" kindref="member">MeshType</ref></computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>export_format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format in which to export the asset (see <computeroutput><ref refid="namespacehmap_1ac3d35efc6e5b596f508e2b17a5aa871b" kindref="member">AssetExportFormat</ref></computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elevation_scaling</parametername>
</parameternamelist>
<parameterdescription>
<para>A scaling factor applied to the elevation values of the heightmap. Default is 0.2f. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>texture_fname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the texture file to be applied to the asset (optional). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>normal_map_fname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the normal map file to be applied to the asset (optional). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_error</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum allowable error for optimized Delaunay triangulation. Default is 5e-4f. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the export is successful, <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/export/export_asset.cpp" line="27" column="6" bodyfile="HighMap/src/export/export_asset.cpp" bodystart="27" bodyend="210" declfile="HighMap/include/highmap/export.hpp" declline="158" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a3aa96cd684efd827ce57ffd9fef3c950" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::export_as_cubemap</definition>
        <argsstring>(const std::string &amp;fname, const Array &amp;z, int cubemap_resolution=128, float overlap=0.25f, int ir=16, Cmap cmap=Cmap::GRAY, bool splitted=false, Array *p_cubemap=nullptr)</argsstring>
        <name>export_as_cubemap</name>
        <qualifiedname>hmap::export_as_cubemap</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cubemap_resolution</declname>
          <defval>128</defval>
        </param>
        <param>
          <type>float</type>
          <declname>overlap</declname>
          <defval>0.25<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
          <defval>16</defval>
        </param>
        <param>
          <type><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369" kindref="member">Cmap</ref></type>
          <declname>cmap</declname>
          <defval><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">Cmap::GRAY</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>splitted</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_cubemap</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Exports a 2D array as a cubemap texture with continuity enforcement and overlapping regions. </para>
        </briefdescription>
        <detaileddescription>
<para>This function generates a cubemap texture from the input array <computeroutput>z</computeroutput>, resamples the data to fit the cubemap resolution with optional overlapping regions, and ensures seamless transitions between the six faces of the cubemap. The cubemap can either be saved as a single texture or split into individual face textures.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>Output file name or base name for the cubemap files. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input 2D array representing the data to be converted into a cubemap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cubemap_resolution</parametername>
</parameternamelist>
<parameterdescription>
<para>Resolution (width and height) of each individual face of the cubemap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overlap</parametername>
</parameternamelist>
<parameterdescription>
<para>Fraction (0 to 1) of overlap between adjacent faces to ensure smooth transitions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Radius parameter for smoothing at triple corners. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmap</parametername>
</parameternamelist>
<parameterdescription>
<para>Colormap to be applied when exporting the textures. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>splitted</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, exports each face of the cubemap as a separate image; otherwise, exports the entire cubemap as a single texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_cubemap</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an optional output array where the final cubemap data will be stored.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The generated cubemap maintains continuity between faces, adjusting values at overlapping regions and corners using smooth transitions. If the <computeroutput>splitted</computeroutput> flag is set, six individual PNG images are generated for the cubemap faces with appropriate suffixes appended to the base name. Otherwise, the entire cubemap is exported as a single texture file.</para>
<para><bold>Example</bold> <programlisting filename="ex_export_as_cubemap.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{1024,<sp/>1024};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a7e2cad4ea77481f469f5a669b8a7d99f" kindref="member">hmap::noise_ridged</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1acbf32c30d68183eb5522888af2ede316" kindref="member">hmap::hydraulic_stream</ref>(z,<sp/>&amp;z,<sp/>0.05f,<sp/>4.f<sp/>/<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a3aa96cd684efd827ce57ffd9fef3c950" kindref="member">hmap::export_as_cubemap</ref>(</highlight><highlight class="stringliteral">&quot;ex_export_as_cubemap.png&quot;</highlight><highlight class="normal">,<sp/>z);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_export_as_cubemap.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/export/export_as_cubemap.cpp" line="174" column="6" bodyfile="HighMap/src/export/export_as_cubemap.cpp" bodystart="174" bodyend="511" declfile="HighMap/include/highmap/export.hpp" declline="205" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::export_banner_png</definition>
        <argsstring>(const std::string &amp;fname, const std::vector&lt; Array &gt; &amp;arrays, int cmap, bool hillshading=false)</argsstring>
        <name>export_banner_png</name>
        <qualifiedname>hmap::export_banner_png</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &gt; &amp;</type>
          <declname>arrays</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cmap</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>hillshading</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Exports a set of arrays as a banner PNG image file. </para>
        </briefdescription>
        <detaileddescription>
<para>This function takes a vector of arrays and exports them as a single banner PNG image. The arrays are displayed side by side in the image, using the specified colormap <computeroutput>cmap</computeroutput>. Optionally, hillshading can be applied to enhance the visual representation of the data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the file to which the banner image will be exported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arrays</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of arrays to be included in the banner image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmap</parametername>
</parameternamelist>
<parameterdescription>
<para>An integer representing the colormap to be applied to the arrays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hillshading</parametername>
</parameternamelist>
<parameterdescription>
<para>A boolean flag to activate hillshading for enhanced visual depth. Default is <computeroutput>false</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/export/export_banner_png.cpp" line="11" column="6" bodyfile="HighMap/src/export/export_banner_png.cpp" bodystart="11" bodyend="29" declfile="HighMap/include/highmap/export.hpp" declline="230" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a9648a23e61a84a702d89159d516dd4ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::export_normal_map_png</definition>
        <argsstring>(const std::string &amp;fname, const Array &amp;array, int depth=CV_8U)</argsstring>
        <name>export_normal_map_png</name>
        <qualifiedname>hmap::export_normal_map_png</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>depth</declname>
          <defval>CV_8U</defval>
        </param>
        <briefdescription>
<para>Exports the heightmap normal map as an 8-bit PNG file. </para>
        </briefdescription>
        <detaileddescription>
<para>This function generates a normal map from the input heightmap array and exports it as an 8-bit PNG image. The normal map can be used in 3D rendering engines to create realistic lighting and shading effects.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the file to which the normal map will be exported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The input heightmap array from which the normal map is derived. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depth</parametername>
</parameternamelist>
<parameterdescription>
<para>The depth of the PNG image, e.g., <computeroutput>CV_8U</computeroutput> for 8-bit or <computeroutput>CV_16U</computeroutput> for 16-bit. Default is <computeroutput>CV_8U</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_export_normal_map.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{512,<sp/>512};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{1.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>Array<sp/>from<sp/>png</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a9648a23e61a84a702d89159d516dd4ec" kindref="member">hmap::export_normal_map_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_export_normal_map0.png&quot;</highlight><highlight class="normal">,<sp/>z1,<sp/>CV_8U);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a9648a23e61a84a702d89159d516dd4ec" kindref="member">hmap::export_normal_map_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_export_normal_map1.png&quot;</highlight><highlight class="normal">,<sp/>z1,<sp/>CV_16U);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/export/export_normal_map.cpp" line="15" column="6" bodyfile="HighMap/src/export/export_normal_map.cpp" bodystart="15" bodyend="21" declfile="HighMap/include/highmap/export.hpp" declline="250" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a32464922c39713910ebeab632e0e8fd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::export_splatmap_png</definition>
        <argsstring>(const std::string &amp;fname, const Array *p_r, const Array *p_g=nullptr, const Array *p_b=nullptr, const Array *p_a=nullptr, int depth=CV_8U)</argsstring>
        <name>export_splatmap_png</name>
        <qualifiedname>hmap::export_splatmap_png</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_r</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_g</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_b</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_a</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>int</type>
          <declname>depth</declname>
          <defval>CV_8U</defval>
        </param>
        <briefdescription>
<para>Exports four arrays as an RGBA PNG splatmap. </para>
        </briefdescription>
        <detaileddescription>
<para>This function combines four input arrays, representing the red (R), green (G), blue (B), and alpha (A) channels, into a single RGBA PNG image. The resulting splatmap can be used in applications like terrain texturing. The PNG image is saved to the specified file name <computeroutput>fname</computeroutput>. Channels G, B, and A are optional; if not provided, they will default to zero.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the file to which the RGBA splatmap will be exported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_r</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the array representing the red (R) channel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_g</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the array representing the green (G) channel. Default is <computeroutput>nullptr</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_b</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the array representing the blue (B) channel. Default is <computeroutput>nullptr</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_a</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the array representing the alpha (A) channel. Default is <computeroutput>nullptr</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depth</parametername>
</parameternamelist>
<parameterdescription>
<para>The depth of the PNG image, e.g., <computeroutput>CV_8U</computeroutput> for 8-bit or <computeroutput>CV_16U</computeroutput> for 16-bit. Default is <computeroutput>CV_8U</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_export_splatmap_png_16bit.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{512,<sp/>512};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zr<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zg<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zb<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>za<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed++);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_export_splatmap_png_16bit0.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{zr,<sp/>zg,<sp/>zb,<sp/>za},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a32464922c39713910ebeab632e0e8fd1" kindref="member">hmap::export_splatmap_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_export_splatmap_png_16bit1.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;zr,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;zg,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;zb,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;za,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CV_16U);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_export_splatmap_png_16bit0.png"></image>
 <image type="html" name="ex_export_splatmap_png_16bit1.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/export/export_splatmap.cpp" line="29" column="6" bodyfile="HighMap/src/export/export_splatmap.cpp" bodystart="29" bodyend="38" declfile="HighMap/include/highmap/export.hpp" declline="283" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a90b6cad473f30aa0aa92158e5af7ee7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::export_tiled</definition>
        <argsstring>(const std::string &amp;fname_radical, const std::string &amp;fname_extension, const Array &amp;array, const Vec2&lt; int &gt; &amp;tiling, int leading_zeros=0, int depth=CV_8U, bool overlapping_edges=false, bool reverse_tile_y_indexing=false)</argsstring>
        <name>export_tiled</name>
        <qualifiedname>hmap::export_tiled</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname_radical</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname_extension</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt; &amp;</type>
          <declname>tiling</declname>
        </param>
        <param>
          <type>int</type>
          <declname>leading_zeros</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>depth</declname>
          <defval>CV_8U</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>overlapping_edges</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>reverse_tile_y_indexing</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Exports a 2D array as a set of grayscale PNG image tiles. </para>
        </briefdescription>
        <detaileddescription>
<para>This function divides a given 2D array into smaller rectangular tiles and saves each tile as a grayscale PNG image file. Tiles are named using a combination of the provided file name radical, tile indices, and file extension.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname_radical</parametername>
</parameternamelist>
<parameterdescription>
<para>Base name (radical) for output image files. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fname_extension</parametername>
</parameternamelist>
<parameterdescription>
<para>File extension to use for exported images (e.g., &quot;png&quot;). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The input 2D array to be tiled and exported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tiling</parametername>
</parameternamelist>
<parameterdescription>
<para>A 2D vector specifying the number of tiles in the x and y directions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>leading_zeros</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of digits used to pad the tile indices in the filename. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depth</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit depth of the output PNG images (commonly 8 or 16). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overlapping_edges</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, each tile includes an extra row/column from neighboring tiles (for overlap). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reverse_tile_y_indexing</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, Y tile indices are reversed (tile 0 is at the top).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Each tile is extracted using slicing, adjusted for overlap if specified, and then exported as an individual image file named with its tile indices. For example, an output file might be named <computeroutput>radical_01_03.png</computeroutput>.</para>
<para><bold>Example</bold> <programlisting filename="ex_export_tiled.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{763,<sp/>451};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{1.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>tiling<sp/>=<sp/>{4,<sp/>3};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::string<sp/><sp/><sp/><sp/><sp/>fname_radical<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ex_export_tiled&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::string<sp/><sp/><sp/><sp/><sp/>fname_extension<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;png&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leading_zeros<sp/>=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>depth<sp/>=<sp/>CV_16U;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlapping_edges<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reverse_tile_y_indexing<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a90b6cad473f30aa0aa92158e5af7ee7f" kindref="member">hmap::export_tiled</ref>(fname_radical,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fname_extension,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tiling,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leading_zeros,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>depth,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlapping_edges,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reverse_tile_y_indexing);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/export/export_tiled.cpp" line="12" column="6" bodyfile="HighMap/src/export/export_tiled.cpp" bodystart="12" bodyend="67" declfile="HighMap/include/highmap/export.hpp" declline="322" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1af6f0426c8791970cf51e5ab44f6760fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::read_to_array</definition>
        <argsstring>(const std::string &amp;fname)</argsstring>
        <name>read_to_array</name>
        <qualifiedname>hmap::read_to_array</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
<para>Reads an image file and converts it to a 2D array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the OpenCV <computeroutput>imread</computeroutput> function to load an image from the specified file. The supported file formats are those recognized by OpenCV&apos;s <computeroutput>imread</computeroutput> function, such as JPEG, PNG, BMP, and others. If the image is in color, it is automatically converted to grayscale using the built-in OpenCV codec converter. This conversion process may introduce artifacts depending on the image&apos;s original format and content.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the image file to be read. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> A 2D array containing the pixel values of the grayscale image. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/export/read_to_array.cpp" line="14" column="7" bodyfile="HighMap/src/export/read_to_array.cpp" bodystart="14" bodyend="28" declfile="HighMap/include/highmap/export.hpp" declline="345" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a466d4275bb86ca9ca603c9d4192f931a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::write_raw_16bit</definition>
        <argsstring>(const std::string &amp;fname, const Array &amp;array)</argsstring>
        <name>write_raw_16bit</name>
        <qualifiedname>hmap::write_raw_16bit</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Exports an array to a 16-bit &apos;raw&apos; file format, commonly used for Unity terrain imports. </para>
        </briefdescription>
        <detaileddescription>
<para>This function saves the input array to a file in a 16-bit &apos;raw&apos; format, which is suitable for importing heightmaps into Unity or other applications that support this format. The array values are converted and written to the file specified by <computeroutput>fname</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the file to which the array will be exported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The input array containing the data to be exported. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/export/format_raw.cpp" line="15" column="6" bodyfile="HighMap/src/export/format_raw.cpp" bodystart="15" bodyend="47" declfile="HighMap/include/highmap/export.hpp" declline="359" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a67eae4546cbed6a804eaddcde9350e1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::filesystem::path</type>
        <definition>std::filesystem::path hmap::add_filename_suffix</definition>
        <argsstring>(const std::filesystem::path &amp;file_path, const std::string &amp;suffix)</argsstring>
        <name>add_filename_suffix</name>
        <qualifiedname>hmap::add_filename_suffix</qualifiedname>
        <param>
          <type>const std::filesystem::path &amp;</type>
          <declname>file_path</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>suffix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/export/helpers.cpp" line="9" column="23" bodyfile="HighMap/src/export/helpers.cpp" bodystart="9" bodyend="20" declfile="HighMap/include/highmap/export.hpp" declline="383" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a9f8b079598b5ab3850c747ece6c81345" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::connected_components</definition>
        <argsstring>(const Array &amp;array, float surface_threshold=0.f, float background_value=0.f)</argsstring>
        <name>connected_components</name>
        <qualifiedname>hmap::connected_components</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>surface_threshold</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>background_value</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Identifies and labels connected components within a binary or labeled array, with optional filtering by size. </para>
        </briefdescription>
        <detaileddescription>
<para>Connected-component labeling is a technique used to identify clusters of connected pixels (or components) in an array. This function can be used in image processing and spatial analysis to isolate regions of interest, such as detecting distinct objects or areas within a heightmap.</para>
<para><bold>Usage</bold><itemizedlist>
<listitem><para>Use this function to label distinct features within an array, such as individual water bodies, forest patches, or elevation features.</para>
</listitem><listitem><para>Apply the surface threshold to filter out small, insignificant components that might be noise or irrelevant.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The input array where connected components are to be identified. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>surface_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum number of pixels a component must have to be retained. Components smaller than this threshold will be removed. The default value is 0 (no filtering). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>background_value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value used to represent background pixels, which are not part of any component. Default is 0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> An array with labeled connected components, where each component is assigned a unique identifier.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_connected_components.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>5;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a2badbebec49b12d0d721970a18eb420d" kindref="member">hmap::clamp_min</ref>(z,<sp/>0.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>labels<sp/>=<sp/><ref refid="namespacehmap_1a9f8b079598b5ab3850c747ece6c81345" kindref="member">hmap::connected_components</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_connected_components0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>labels.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_connected_components1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369ae91cb25d4df330517ac69b5f0f2c3e0c" kindref="member">hmap::Cmap::NIPY_SPECTRAL</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_connected_components0.png"></image>
 <image type="html" name="ex_connected_components1.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/features/connected_components.cpp" line="14" column="7" bodyfile="HighMap/src/features/connected_components.cpp" bodystart="14" bodyend="117" declfile="HighMap/include/highmap/features.hpp" declline="82" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aa60fa2d3f02d1e064b520fa1623200d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::geomorphons</definition>
        <argsstring>(const Array &amp;array, int irmin, int irmax, float epsilon)</argsstring>
        <name>geomorphons</name>
        <qualifiedname>hmap::geomorphons</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>irmin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>irmax</declname>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
<para>Classifies terrain into geomorphological features based on the geomorphons method. </para>
        </briefdescription>
        <detaileddescription>
<para>The geomorphons method classifies each point in a terrain into one of several landform types (e.g., ridge, valley, plain) based on the surrounding topography. This classification is useful for automated landform mapping and terrain analysis.</para>
<para><bold>Usage</bold><itemizedlist>
<listitem><para>Use this function to automatically categorize terrain into different geomorphological units.</para>
</listitem><listitem><para>Useful in large-scale landform mapping and environmental modeling.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The input array representing the terrain elevation data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>irmin</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum radius (in pixels) for considering the surrounding area during classification. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>irmax</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum radius (in pixels) for considering the surrounding area during classification. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>The slope tolerance that defines &apos;flat&apos; regions, affecting the classification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> An output array with each pixel classified into a geomorphological feature.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_geomorphons.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a374c6a8ff3d27e854a254139435c5d8d" kindref="member">hmap::clamp_min_smooth</ref>(z,<sp/>0.3f,<sp/>0.1f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>irmin<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>irmax<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>epsilon<sp/>=<sp/>0.001f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>labels<sp/>=<sp/><ref refid="namespacehmap_1aa60fa2d3f02d1e064b520fa1623200d0" kindref="member">hmap::geomorphons</ref>(z,<sp/>irmin,<sp/>irmax,<sp/>epsilon);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_geomorphons0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>labels.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_geomorphons1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369ae91cb25d4df330517ac69b5f0f2c3e0c" kindref="member">hmap::Cmap::NIPY_SPECTRAL</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_geomorphons0.png"></image>
 <image type="html" name="ex_geomorphons1.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/features/geomorphons.cpp" line="14" column="7" bodyfile="HighMap/src/features/geomorphons.cpp" bodystart="14" bodyend="185" declfile="HighMap/include/highmap/features.hpp" declline="117" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ae19d507d917f1f4cbc61fc76cc5baab0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::kmeans_clustering2</definition>
        <argsstring>(const Array &amp;array1, const Array &amp;array2, int nclusters, std::vector&lt; Array &gt; *p_scoring=nullptr, Array *p_aggregate_scoring=nullptr, Vec2&lt; float &gt; weights={1.f, 1.f}, uint seed=1)</argsstring>
        <name>kmeans_clustering2</name>
        <qualifiedname>hmap::kmeans_clustering2</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nclusters</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &gt; *</type>
          <declname>p_scoring</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_aggregate_scoring</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>weights</declname>
          <defval>{1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Performs k-means clustering on two input arrays, grouping similar data points into clusters. </para>
        </briefdescription>
        <detaileddescription>
<para>K-means clustering is a popular unsupervised learning algorithm used to partition data into clusters. This function applies k-means clustering to two arrays, which might represent different terrain attributes or environmental variables.</para>
<para><bold>Usage</bold>:<itemizedlist>
<listitem><para>Use this function to identify regions with similar characteristics based on multiple terrain features.</para>
</listitem><listitem><para>Useful in ecological modeling, land cover classification, and resource management.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">array1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first input array for clustering, typically representing one attribute of the terrain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">array2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second input array for clustering, representing another attribute. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nclusters</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of clusters (k) to be formed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">p_scoring</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) A pointer to a vector of arrays where the clustering scores will be stored. Pass nullptr if scoring is not required. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">p_aggregate_scoring</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) A pointer to an array where the aggregate score across all clusters will be stored. Pass nullptr if not required. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">weights</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of two floats representing the weight given to <computeroutput>array1</computeroutput> and <computeroutput>array2</computeroutput>. The default weights are {1.f, 1.f}. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">seed</parametername>
</parameternamelist>
<parameterdescription>
<para>A seed value for random number generation, ensuring reproducibility of the clustering results. The default value is 1. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> An array representing the clustered data, with each pixel assigned to a cluster.</para>
</simplesect>
<simplesect kind="return"><para>An <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> containing the clustered data resulting from the k-means algorithm.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_kmeans_clustering.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>5;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>dz<sp/>=<sp/><ref refid="namespacehmap_1a618fb6d396a832c3dd1f053bfd27eed4" kindref="member">hmap::gradient_talus</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>normalize<sp/>data<sp/>to<sp/>balance<sp/>their<sp/>respective<sp/>weights<sp/>during<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clustering</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(dz);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>build<sp/>up<sp/>4<sp/>clusters<sp/>based<sp/>the<sp/>elevation<sp/>and<sp/>the<sp/>local<sp/>talus</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(to<sp/>get<sp/>fot<sp/>instance<sp/>for<sp/>types<sp/>of<sp/>land:<sp/>high-altitude<sp/>flat,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>high-altitude<sp/>steep,<sp/>low-altitude<sp/>flat,<sp/>low-altitude<sp/>steep)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nclusters<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>labels4<sp/>=<sp/><ref refid="namespacehmap_1ae19d507d917f1f4cbc61fc76cc5baab0" kindref="member">hmap::kmeans_clustering2</ref>(z,<sp/>dz,<sp/>nclusters);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(optional)<sp/>continuous<sp/>scoring<sp/>can<sp/>also<sp/>be<sp/>retrieved<sp/>for<sp/>each<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Array&gt;<sp/>scoring4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aggregate_scoring4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>labels4<sp/>=<sp/><ref refid="namespacehmap_1ae19d507d917f1f4cbc61fc76cc5baab0" kindref="member">hmap::kmeans_clustering2</ref>(z,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dz,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nclusters,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;scoring4,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;aggregate_scoring4);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>add<sp/>some<sp/>data<sp/>mimicking<sp/>some<sp/>moisture<sp/>increasing<sp/>from<sp/>west<sp/>to<sp/>east</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>moisture<sp/>=<sp/><ref refid="namespacehmap_1ad1836a084a8607446ce029d32c02a201" kindref="member">hmap::slope</ref>(shape,<sp/>0.f,<sp/>1.f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(moisture);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>up<sp/>6<sp/>clusters<sp/>(cloud<sp/>be<sp/>biomes)<sp/>based<sp/>on<sp/>dry/wet<sp/>combined</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>elevation/slope<sp/>criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>nclusters<sp/>=<sp/>6;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Array&gt;<sp/>scoring6;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>labels6<sp/>=<sp/><ref refid="namespacehmap_1ac177e8615e697e3096737cb21a15f3ed" kindref="member">hmap::kmeans_clustering3</ref>(z,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dz,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moisture,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nclusters,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;scoring6);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_kmeans_clustering0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>labels4.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_kmeans_clustering1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_kmeans_clustering2.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scoring4,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369ae91cb25d4df330517ac69b5f0f2c3e0c" kindref="member">hmap::Cmap::NIPY_SPECTRAL</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>aggregate_scoring4.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_kmeans_clustering3.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>aggregate_scoring4.<ref refid="classhmap_1_1Array_1a3517b483a468873cefa73f7773a893ec" kindref="member">infos</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>labels6.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_kmeans_clustering4.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_kmeans_clustering5.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scoring6,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369ae91cb25d4df330517ac69b5f0f2c3e0c" kindref="member">hmap::Cmap::NIPY_SPECTRAL</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_kmeans_clustering0.png"></image>
 <image type="html" name="ex_kmeans_clustering1.png"></image>
 <image type="html" name="ex_kmeans_clustering2.png"></image>
 <image type="html" name="ex_kmeans_clustering3.png"></image>
 <image type="html" name="ex_kmeans_clustering4.png"></image>
 <image type="html" name="ex_kmeans_clustering5.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/features/kmeans_clustering.cpp" line="13" column="7" bodyfile="HighMap/src/features/kmeans_clustering.cpp" bodystart="13" bodyend="131" declfile="HighMap/include/highmap/features.hpp" declline="169" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ac177e8615e697e3096737cb21a15f3ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::kmeans_clustering3</definition>
        <argsstring>(const Array &amp;array1, const Array &amp;array2, const Array &amp;array3, int nclusters, std::vector&lt; Array &gt; *p_scoring=nullptr, Array *p_aggregate_scoring=nullptr, Vec3&lt; float &gt; weights={1.f, 1.f, 1.f}, uint seed=1)</argsstring>
        <name>kmeans_clustering3</name>
        <qualifiedname>hmap::kmeans_clustering3</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array2</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array3</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nclusters</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &gt; *</type>
          <declname>p_scoring</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_aggregate_scoring</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec3" kindref="compound">Vec3</ref>&lt; float &gt;</type>
          <declname>weights</declname>
          <defval>{1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Performs k-means clustering on three input arrays, providing more detailed cluster analysis by considering an additional dimension. </para>
        </briefdescription>
        <detaileddescription>
<para>This version of k-means clustering includes a third array, enabling more complex clustering based on three terrain attributes or environmental variables.</para>
<para><bold>Usage</bold><itemizedlist>
<listitem><para>Apply this function to analyze the relationships between three different terrain attributes, revealing complex patterns.</para>
</listitem><listitem><para>Useful in multi-dimensional environmental modeling and resource management.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">array1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first input array for clustering. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">array2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second input array for clustering. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">array3</parametername>
</parameternamelist>
<parameterdescription>
<para>The third input array for clustering. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nclusters</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of clusters (k) to be formed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">p_scoring</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) A pointer to a vector of arrays where the clustering scores will be stored. Pass nullptr if scoring is not required. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">p_aggregate_scoring</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) A pointer to an array where the aggregate score across all clusters will be stored. Pass nullptr if not required. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">weights</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of three floats representing the weight given to <computeroutput>array1</computeroutput>, <computeroutput>array2</computeroutput>, and <computeroutput>array3</computeroutput>. The default weights are {1.f, 1.f, 1.f}. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">seed</parametername>
</parameternamelist>
<parameterdescription>
<para>A seed value for random number generation, ensuring reproducibility of the clustering results. The default value is 1. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> An array representing the clustered data, with each pixel assigned to a cluster.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_kmeans_clustering.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>5;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>dz<sp/>=<sp/><ref refid="namespacehmap_1a618fb6d396a832c3dd1f053bfd27eed4" kindref="member">hmap::gradient_talus</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>normalize<sp/>data<sp/>to<sp/>balance<sp/>their<sp/>respective<sp/>weights<sp/>during<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clustering</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(dz);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>build<sp/>up<sp/>4<sp/>clusters<sp/>based<sp/>the<sp/>elevation<sp/>and<sp/>the<sp/>local<sp/>talus</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(to<sp/>get<sp/>fot<sp/>instance<sp/>for<sp/>types<sp/>of<sp/>land:<sp/>high-altitude<sp/>flat,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>high-altitude<sp/>steep,<sp/>low-altitude<sp/>flat,<sp/>low-altitude<sp/>steep)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nclusters<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>labels4<sp/>=<sp/><ref refid="namespacehmap_1ae19d507d917f1f4cbc61fc76cc5baab0" kindref="member">hmap::kmeans_clustering2</ref>(z,<sp/>dz,<sp/>nclusters);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(optional)<sp/>continuous<sp/>scoring<sp/>can<sp/>also<sp/>be<sp/>retrieved<sp/>for<sp/>each<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Array&gt;<sp/>scoring4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aggregate_scoring4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>labels4<sp/>=<sp/><ref refid="namespacehmap_1ae19d507d917f1f4cbc61fc76cc5baab0" kindref="member">hmap::kmeans_clustering2</ref>(z,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dz,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nclusters,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;scoring4,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;aggregate_scoring4);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>add<sp/>some<sp/>data<sp/>mimicking<sp/>some<sp/>moisture<sp/>increasing<sp/>from<sp/>west<sp/>to<sp/>east</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>moisture<sp/>=<sp/><ref refid="namespacehmap_1ad1836a084a8607446ce029d32c02a201" kindref="member">hmap::slope</ref>(shape,<sp/>0.f,<sp/>1.f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(moisture);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>up<sp/>6<sp/>clusters<sp/>(cloud<sp/>be<sp/>biomes)<sp/>based<sp/>on<sp/>dry/wet<sp/>combined</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>elevation/slope<sp/>criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>nclusters<sp/>=<sp/>6;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Array&gt;<sp/>scoring6;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>labels6<sp/>=<sp/><ref refid="namespacehmap_1ac177e8615e697e3096737cb21a15f3ed" kindref="member">hmap::kmeans_clustering3</ref>(z,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dz,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moisture,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nclusters,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;scoring6);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_kmeans_clustering0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>labels4.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_kmeans_clustering1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_kmeans_clustering2.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scoring4,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369ae91cb25d4df330517ac69b5f0f2c3e0c" kindref="member">hmap::Cmap::NIPY_SPECTRAL</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>aggregate_scoring4.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_kmeans_clustering3.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>aggregate_scoring4.<ref refid="classhmap_1_1Array_1a3517b483a468873cefa73f7773a893ec" kindref="member">infos</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>labels6.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_kmeans_clustering4.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_kmeans_clustering5.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scoring6,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369ae91cb25d4df330517ac69b5f0f2c3e0c" kindref="member">hmap::Cmap::NIPY_SPECTRAL</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_kmeans_clustering0.png"></image>
 <image type="html" name="ex_kmeans_clustering1.png"></image>
 <image type="html" name="ex_kmeans_clustering2.png"></image>
 <image type="html" name="ex_kmeans_clustering3.png"></image>
 <image type="html" name="ex_kmeans_clustering4.png"></image>
 <image type="html" name="ex_kmeans_clustering5.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/features/kmeans_clustering.cpp" line="133" column="7" bodyfile="HighMap/src/features/kmeans_clustering.cpp" bodystart="133" bodyend="254" declfile="HighMap/include/highmap/features.hpp" declline="220" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a9b6a1d2ca8ef58a4a0605d04bcbff038" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::local_median_deviation</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>local_median_deviation</name>
        <qualifiedname>hmap::local_median_deviation</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>Computes the local median deviation of a 2D array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the absolute difference between the local mean and a pseudo-local median of each element in the input array. The local neighborhood is defined by a square window with radius <computeroutput>ir</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The input 2D array of values (e.g., a heightmap). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the square neighborhood window used for computing local statistics. The window size is (2*ir + 1) x (2*ir + 1).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new array of the same size as <computeroutput>array</computeroutput>, where each element represents the absolute deviation between the local mean and pseudo-local median in its neighborhood.</para>
</simplesect>
<simplesect kind="note"><para>The function uses a pseudo-median approximation. For exact median computation, replace the <computeroutput><ref refid="namespacehmap_1a14eb6b7d304484c8cbb231b672851491" kindref="member">median_pseudo()</ref></computeroutput> call with a proper median filter implementation.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_local_median_deviation.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ir<sp/>=<sp/>16;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1a9b6a1d2ca8ef58a4a0605d04bcbff038" kindref="member">hmap::local_median_deviation</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>gpu<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1_1gpu_1adb8336ed4d83c15500872185dee45d50" kindref="member">hmap::gpu::init_opencl</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1a022f5800d7e28f79f9e2d3abf687f490" kindref="member">hmap::gpu::local_median_deviation</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_local_median_deviation.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1,<sp/>z2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_local_median_deviation.png"></image>
</para>
<para><simplesect kind="see"><para><ref refid="namespacehmap_1a39d52250df1825ecea1e63309d94d1fb" kindref="member">mean_local()</ref>, <ref refid="namespacehmap_1a14eb6b7d304484c8cbb231b672851491" kindref="member">median_pseudo()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/features/features.cpp" line="16" column="7" bodyfile="HighMap/src/features/features.cpp" bodystart="16" bodyend="21" declfile="HighMap/include/highmap/features.hpp" declline="256" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a39d52250df1825ecea1e63309d94d1fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::mean_local</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>mean_local</name>
        <qualifiedname>hmap::mean_local</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>Return the local mean based on a mean filter with a square kernel. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the local mean of the input array using a mean filter with a square kernel. The local mean is determined by averaging values within a square neighborhood defined by the footprint radius <computeroutput>ir</computeroutput>. The result is an array where each value represents the mean of the surrounding values within the kernel size.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array from which the local mean is to be calculated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Square kernel footprint radius. The size of the kernel used to compute the local mean. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Resulting array containing the local means.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_mean_local.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radius<sp/>=<sp/>10;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zm<sp/>=<sp/><ref refid="namespacehmap_1a39d52250df1825ecea1e63309d94d1fb" kindref="member">hmap::mean_local</ref>(z,<sp/>radius);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_mean_local0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>zm.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_mean_local1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_mean_local0.png"></image>
 <image type="html" name="ex_mean_local1.png"></image>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="namespacehmap_1a5437c715b7a187bc794b1bf66891bddf" kindref="member">maximum_local</ref></computeroutput>, <computeroutput><ref refid="namespacehmap_1adf68a2f031297654f88252b7ce027b3d" kindref="member">minimum_local</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/features/features.cpp" line="23" column="7" bodyfile="HighMap/src/features/features.cpp" bodystart="23" bodyend="35" declfile="HighMap/include/highmap/features.hpp" declline="281" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a941d446cad19c166f4f6c4df857dba65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::relative_elevation</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>relative_elevation</name>
        <qualifiedname>hmap::relative_elevation</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>Calculates the relative elevation within a specified radius, helping to identify local highs and lows. </para>
        </briefdescription>
        <detaileddescription>
<para>Relative elevation analysis determines how high or low a point is relative to its surroundings, which can be critical in hydrological modeling and geomorphology.</para>
<para><bold>Usage</bold>:<itemizedlist>
<listitem><para>Use this function to detect local depressions or peaks in the terrain, which could indicate potential water collection points or hilltops.</para>
</listitem><listitem><para>Useful in flood risk assessment and landscape classification.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The input array representing the terrain elevation data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius (in pixels) within which to calculate the relative elevation for each point. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> An output array containing the relative elevation values, normalized between 0 and 1.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_relative_elevation.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>ir<sp/>=<sp/>32;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zr<sp/>=<sp/><ref refid="namespacehmap_1a941d446cad19c166f4f6c4df857dba65" kindref="member">hmap::relative_elevation</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_relative_elevation.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zr},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_relative_elevation.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/features/features.cpp" line="37" column="7" bodyfile="HighMap/src/features/features.cpp" bodystart="37" bodyend="46" declfile="HighMap/include/highmap/features.hpp" declline="308" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1af4ec8b5be149e6749fdf09759daf1e9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::ruggedness</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>ruggedness</name>
        <qualifiedname>hmap::ruggedness</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>Computes the ruggedness of each element in the input array. </para>
        </briefdescription>
        <detaileddescription>
<para>The ruggedness is calculated as the square root of the sum of squared differences between each element and its neighbors within a specified radius.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The input array for which ruggedness is to be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius within which neighbors are considered for ruggedness calculation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array containing the ruggedness values for each element in the input array.</para>
</simplesect>
<simplesect kind="note"><para><ulink url="https://xdem.readthedocs.io/en/latest/terrain.html">https://xdem.readthedocs.io/en/latest/terrain.html</ulink></para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_ruggedness.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ir<sp/>=<sp/>5;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>c<sp/>=<sp/><ref refid="namespacehmap_1af4ec8b5be149e6749fdf09759daf1e9e" kindref="member">hmap::ruggedness</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_ruggedness0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>c.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_ruggedness1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_ruggedness0.png"></image>
 <image type="html" name="ex_ruggedness1.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/features/features.cpp" line="48" column="7" bodyfile="HighMap/src/features/features.cpp" bodystart="48" bodyend="73" declfile="HighMap/include/highmap/features.hpp" declline="331" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a85e411c67e97deb8459f25d4440546c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::rugosity</definition>
        <argsstring>(const Array &amp;z, int ir, bool convex=true)</argsstring>
        <name>rugosity</name>
        <qualifiedname>hmap::rugosity</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>convex</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Estimates the rugosity of a surface by analyzing the skewness of the elevation data, which reflects surface roughness. </para>
        </briefdescription>
        <detaileddescription>
<para>Rugosity is a measure of terrain roughness, often used in ecological studies and habitat mapping. Higher rugosity values indicate more rugged terrain, which can affect species distribution and water flow.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The input array representing the heightmap data (elevation values). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the square kernel used for calculations, determining the scale of the analysis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>convex</parametername>
</parameternamelist>
<parameterdescription>
<para>Return the convex rugosity if true, and the concave ones if not. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> An output array containing the rugosity estimates, where higher values indicate rougher terrain.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_rugosity.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ir<sp/>=<sp/>5;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>c<sp/>=<sp/><ref refid="namespacehmap_1a85e411c67e97deb8459f25d4440546c3" kindref="member">hmap::rugosity</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_rugosity0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>c.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_rugosity1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_rugosity0.png"></image>
 <image type="html" name="ex_rugosity1.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/features/features.cpp" line="75" column="7" bodyfile="HighMap/src/features/features.cpp" bodystart="75" bodyend="116" declfile="HighMap/include/highmap/features.hpp" declline="357" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a0157f72a2a70dae28d0767a13739f4b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::std_local</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>std_local</name>
        <qualifiedname>hmap::std_local</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>Computes the local standard deviation of a 2D array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the standard deviation within a square neighborhood around each element in the input array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The input 2D array of values (e.g., a heightmap or intensity map). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the square neighborhood window used for computing local statistics. The window size is (2*ir + 1) x (2*ir + 1).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new array of the same size as <computeroutput>array</computeroutput>, where each element contains the standard deviation of values within its local neighborhood.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_std_local.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ir<sp/>=<sp/>16;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1a0157f72a2a70dae28d0767a13739f4b5" kindref="member">hmap::std_local</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>gpu<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1_1gpu_1adb8336ed4d83c15500872185dee45d50" kindref="member">hmap::gpu::init_opencl</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1aa5f9b68baa2c17c23c8f21708e8fac9e" kindref="member">hmap::gpu::std_local</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_std_local.png&quot;</highlight><highlight class="normal">,<sp/>{z,<sp/>z1,<sp/>z2},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_std_local.png"></image>
</para>
<para><simplesect kind="see"><para><ref refid="namespacehmap_1a39d52250df1825ecea1e63309d94d1fb" kindref="member">mean_local()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/features/features.cpp" line="118" column="7" bodyfile="HighMap/src/features/features.cpp" bodystart="118" bodyend="131" declfile="HighMap/include/highmap/features.hpp" declline="382" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ab4d8048b79080012b8e60c270de8137f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::valley_width</definition>
        <argsstring>(const Array &amp;z, int ir=0, bool ridge_select=false)</argsstring>
        <name>valley_width</name>
        <qualifiedname>hmap::valley_width</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>ridge_select</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Measures the valley width by calculating the distance from each point in a concave region to the frontier of that region. </para>
        </briefdescription>
        <detaileddescription>
<para>Valley width is a geomorphological metric that represents the distance across valleys or concave regions in a terrain. This measurement is particularly useful in hydrological modeling and landscape analysis, where valley dimensions are important.</para>
<para><bold>Usage</bold><itemizedlist>
<listitem><para>Use this function to assess the width of valleys within a terrain, which can be important for understanding water flow, sediment transport, and landform development.</para>
</listitem><listitem><para>Applicable in studies focusing on river valleys, canyon analysis, and erosion patterns.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The input array representing the heightmap data (elevation values). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius used for pre-filtering, controlling the scale of analysis (in pixels). The default value is 0, meaning no pre-filtering is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ridge_select</parametername>
</parameternamelist>
<parameterdescription>
<para>If enabled, selects ridges instead of valleys. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> An output array containing valley width values, representing the distance to the edge of the concave region for each point.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_valley_width.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ir<sp/>=<sp/>8;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>w1<sp/>=<sp/><ref refid="namespacehmap_1ab4d8048b79080012b8e60c270de8137f" kindref="member">hmap::valley_width</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ridge_select<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>w2<sp/>=<sp/><ref refid="namespacehmap_1ab4d8048b79080012b8e60c270de8137f" kindref="member">hmap::valley_width</ref>(z,<sp/>ir,<sp/>ridge_select);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_valley_width0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>w1.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_valley_width1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>w2.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_valley_width2.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_valley_width0.png"></image>
 <image type="html" name="ex_valley_width1.png"></image>
 <image type="html" name="ex_valley_width2.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/features/features.cpp" line="133" column="7" bodyfile="HighMap/src/features/features.cpp" bodystart="133" bodyend="144" declfile="HighMap/include/highmap/features.hpp" declline="418" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a732a83c92c4a2d232fc9f421f98c0c6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::z_score</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>z_score</name>
        <qualifiedname>hmap::z_score</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/features/features.cpp" line="146" column="7" bodyfile="HighMap/src/features/features.cpp" bodystart="146" bodyend="159" declfile="HighMap/include/highmap/features.hpp" declline="420" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ab57f747b36842221871303e08b1d169e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::diffusion_retargeting</definition>
        <argsstring>(const Array &amp;array_before, const Array &amp;array_after, int ir)</argsstring>
        <name>diffusion_retargeting</name>
        <qualifiedname>hmap::diffusion_retargeting</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array_before</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array_after</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>Applies diffusion retargeting by detecting local maxima and adjusting based on the difference between two arrays. </para>
        </briefdescription>
        <detaileddescription>
<para>This function identifies points of interest in the <computeroutput>array_before</computeroutput> (local maxima in a 3x3 neighborhood), computes the difference between the corresponding points in <computeroutput>array_before</computeroutput> and <computeroutput>array_after</computeroutput>, and stores these differences in a delta array. It then applies smoothing to the delta values, remaps them within the original min-max range, and returns the corrected array by adding the adjusted delta to <computeroutput>array_after</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array_before</parametername>
</parameternamelist>
<parameterdescription>
<para>The original 2D array used to detect local maxima for retargeting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array_after</parametername>
</parameternamelist>
<parameterdescription>
<para>The 2D array representing the state after the diffusion process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>The smoothing radius used in the smoothing step (<computeroutput>smooth_cpulse</computeroutput>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new 2D array where the delta between the two input arrays has been smoothed and applied as a correction to <computeroutput>array_after</computeroutput>.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_diffusion_retargeting.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z0<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/>z0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z1,<sp/>0.f,<sp/>0.5f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ir<sp/>=<sp/>32;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/><ref refid="namespacehmap_1ab57f747b36842221871303e08b1d169e" kindref="member">hmap::diffusion_retargeting</ref>(z0,<sp/>z1,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_diffusion_retargeting.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z0,<sp/>z1,<sp/>z2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_diffusion_retargeting.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/diffusion_retargeting.cpp" line="16" column="7" bodyfile="HighMap/src/filters/diffusion_retargeting.cpp" bodystart="16" bodyend="50" declfile="HighMap/include/highmap/filters.hpp" declline="69" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a22656a7e71302244f5f79f237a81c985" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::directional_blur</definition>
        <argsstring>(Array &amp;array, int ir, float angle, float intensity, float stretch=1.f, float spread=1.f)</argsstring>
        <name>directional_blur</name>
        <qualifiedname>hmap::directional_blur</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>float</type>
          <declname>intensity</declname>
        </param>
        <param>
          <type>float</type>
          <declname>stretch</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>spread</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Applies a directional blur to a 2D array based on a spatially varying angle field. </para>
        </briefdescription>
        <detaileddescription>
<para>This function performs an anisotropic blur on the input <computeroutput>array</computeroutput>, using the <computeroutput>angle</computeroutput> array to determine the direction of blur at each pixel. The blur is computed by sampling values along a line in the specified direction (per-pixel), using linear interpolation through an <computeroutput><ref refid="classhmap_1_1ArrayFunction" kindref="compound">ArrayFunction</ref></computeroutput>. The amount of blur is controlled by parameters for intensity, stretching, and spread.</para>
<para>For each pixel, the function samples values along the blur direction determined by <computeroutput>angle(i, j)</computeroutput> (in degrees), applies a smooth weight profile (<computeroutput>smoothstep3</computeroutput>) over a range of <computeroutput>2 * ir - 1</computeroutput> steps, and accumulates the weighted values. The output is then normalized by the total weight sum.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The input/output 2D array to be blurred (modified in-place). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Blur radius: the number of samples on each side of the center (total samples = 2 * ir - 1). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>A 2D array of the same shape as <computeroutput>array</computeroutput> giving blur direction (in degrees) at each pixel. 0° points to the right (positive X), 90° points upward (positive Y). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intensity</parametername>
</parameternamelist>
<parameterdescription>
<para>The overall weight of the blur effect (scales the weight profile). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stretch</parametername>
</parameternamelist>
<parameterdescription>
<para>A scaling factor applied to the sampling step along the blur direction. Higher values stretch the blur further along the direction vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spread</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum normalized distance at which blur weights are applied (used in smoothstep weight profile).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Uses linear interpolation through an <computeroutput><ref refid="classhmap_1_1ArrayFunction" kindref="compound">ArrayFunction</ref></computeroutput>, and wraps coordinates using clamping (not periodic).</para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacehmap_1a413648e2595721d8ba4096357dbb1f84" kindref="member">smoothstep3()</ref>, <ref refid="classhmap_1_1ArrayFunction" kindref="compound">ArrayFunction</ref></para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_directional_blur.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ir<sp/>=<sp/>64;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref><sp/>=<sp/>30.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>intensity<sp/>=<sp/>1.f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a22656a7e71302244f5f79f237a81c985" kindref="member">hmap::directional_blur</ref>(z1,<sp/>ir,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>intensity);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>stretch<sp/>=<sp/>3.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a22656a7e71302244f5f79f237a81c985" kindref="member">hmap::directional_blur</ref>(z2,<sp/>ir,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>intensity,<sp/>stretch);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z3<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>stretch<sp/>=<sp/>1.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>spread<sp/>=<sp/>0.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a22656a7e71302244f5f79f237a81c985" kindref="member">hmap::directional_blur</ref>(z3,<sp/>ir,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>intensity,<sp/>stretch,<sp/>spread);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_directional_blur.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1,<sp/>z2,<sp/>z3},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_directional_blur.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/directional_blur.cpp" line="55" column="6" bodyfile="HighMap/src/filters/directional_blur.cpp" bodystart="55" bodyend="68" declfile="HighMap/include/highmap/filters.hpp" declline="114" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1afb9b18e93276f49b347d2efbd94c1df4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::directional_blur</definition>
        <argsstring>(Array &amp;array, int ir, const Array &amp;angle, float intensity, float stretch=1.f, float spread=1.f)</argsstring>
        <name>directional_blur</name>
        <qualifiedname>hmap::directional_blur</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>float</type>
          <declname>intensity</declname>
        </param>
        <param>
          <type>float</type>
          <declname>stretch</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>spread</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Applies a directional blur to the provided 2D array with a constant angle. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is a convenience wrapper that applies a directional blur using a constant angle for all pixels. Internally, it creates a uniform angle array and calls the primary <computeroutput>directional_blur</computeroutput> function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The 2D array to be blurred. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the blur operation (number of steps). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>The constant directional angle (in degrees) for the blur. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intensity</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum intensity of the blur at the starting point of the radius.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The <computeroutput>angle</computeroutput> value should be in degrees, where 0° points to the right (positive x-direction).</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_directional_blur.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ir<sp/>=<sp/>64;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref><sp/>=<sp/>30.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>intensity<sp/>=<sp/>1.f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a22656a7e71302244f5f79f237a81c985" kindref="member">hmap::directional_blur</ref>(z1,<sp/>ir,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>intensity);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>stretch<sp/>=<sp/>3.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a22656a7e71302244f5f79f237a81c985" kindref="member">hmap::directional_blur</ref>(z2,<sp/>ir,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>intensity,<sp/>stretch);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z3<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>stretch<sp/>=<sp/>1.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>spread<sp/>=<sp/>0.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a22656a7e71302244f5f79f237a81c985" kindref="member">hmap::directional_blur</ref>(z3,<sp/>ir,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>intensity,<sp/>stretch,<sp/>spread);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_directional_blur.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1,<sp/>z2,<sp/>z3},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_directional_blur.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/directional_blur.cpp" line="14" column="6" bodyfile="HighMap/src/filters/directional_blur.cpp" bodystart="14" bodyend="53" declfile="HighMap/include/highmap/filters.hpp" declline="144" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a1b08d9a5d25e6bcd9d080accd077cc98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::equalize</definition>
        <argsstring>(Array &amp;array)</argsstring>
        <name>equalize</name>
        <qualifiedname>hmap::equalize</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Apply histogram equalization to the array values. </para>
        </briefdescription>
        <detaileddescription>
<para>This function performs histogram equalization on the input array to enhance the contrast of the image or data by adjusting the intensity distribution.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be equalized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="43" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="43" bodyend="47" declfile="HighMap/include/highmap/filters.hpp" declline="159" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a1470c4d74892293e4974a319c6b17267" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::equalize</definition>
        <argsstring>(Array &amp;array, const Array *p_mask)</argsstring>
        <name>equalize</name>
        <qualifiedname>hmap::equalize</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <briefdescription>
<para>Apply histogram equalization to the array values with a mask. </para>
        </briefdescription>
        <detaileddescription>
<para>This function performs histogram equalization on the input array while considering the specified mask. Only the elements of the array corresponding to non-zero values in the mask are equalized.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be equalized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional mask array. Only the elements where the mask is non-zero are equalized.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="49" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="49" bodyend="59" declfile="HighMap/include/highmap/filters.hpp" declline="174" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ae00605c7af4addcb5092c90260e2d61b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::expand</definition>
        <argsstring>(Array &amp;array, int ir, const Array *p_mask, int iterations=1)</argsstring>
        <name>expand</name>
        <qualifiedname>hmap::expand</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Apply expansion, or &quot;inflation&quot;, to emphasize the bulk of the terrain. </para>
        </briefdescription>
        <detaileddescription>
<para>This function expands the features of the terrain represented by the input array. The expansion operation, often referred to as &quot;inflation&quot;, increases the prominence of elevated regions, effectively making them more pronounced.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the terrain or data to be expanded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Filter radius, which determines the extent of the expansion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, with values expected in the range [0, 1]. The mask controls which parts of the array are affected by the expansion.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_expand.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a3517b483a468873cefa73f7773a893ec" kindref="member">infos</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ir<sp/>=<sp/>64;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1ae00605c7af4addcb5092c90260e2d61b" kindref="member">hmap::expand</ref>(z1,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1acde2b4e7bac6ebfe2c2dcfe3f0a369f1" kindref="member">hmap::shrink</ref>(z2,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z3<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>kernel<sp/>=<sp/><ref refid="namespacehmap_1a1d9165a0056e99a90b7734268f231901" kindref="member">hmap::lorentzian</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(2<sp/>*<sp/>ir<sp/>+<sp/>1,<sp/>2<sp/>*<sp/>ir<sp/>+<sp/>1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1acde2b4e7bac6ebfe2c2dcfe3f0a369f1" kindref="member">hmap::shrink</ref>(z3,<sp/>kernel);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_expand.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1,<sp/>z2,<sp/>z3},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_expand.png"></image>
</para>
<para><simplesect kind="see"><para>ex_shrink </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="92" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="92" bodyend="102" declfile="HighMap/include/highmap/filters.hpp" declline="197" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a49ea41f360f192a6c21efffd8b4df659" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::expand</definition>
        <argsstring>(Array &amp;array, int ir, int iterations=1)</argsstring>
        <name>expand</name>
        <qualifiedname>hmap::expand</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Apply expansion to emphasize the bulk of the terrain using a filter radius. </para>
        </briefdescription>
        <detaileddescription>
<para>This overload applies expansion without the use of a mask, utilizing only the filter radius.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the terrain or data to be expanded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Filter radius, which determines the extent of the expansion.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="61" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="61" bodyend="90" declfile="HighMap/include/highmap/filters.hpp" declline="211" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a3b39190192fb3cbda0b6d55d49d44eca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::expand</definition>
        <argsstring>(Array &amp;array, const Array &amp;kernel, int iterations=1)</argsstring>
        <name>expand</name>
        <qualifiedname>hmap::expand</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Apply expansion using a custom kernel. </para>
        </briefdescription>
        <detaileddescription>
<para>This overload allows the use of a custom kernel for expansion, offering more control over the operation compared to the filter radius method.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the terrain or data to be expanded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel</parametername>
</parameternamelist>
<parameterdescription>
<para>Custom kernel array used to perform the expansion.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="104" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="104" bodyend="136" declfile="HighMap/include/highmap/filters.hpp" declline="224" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1afddb3c456ba0f74b521d10c4022925a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::expand</definition>
        <argsstring>(Array &amp;array, const Array &amp;kernel, const Array *p_mask, int iterations=1)</argsstring>
        <name>expand</name>
        <qualifiedname>hmap::expand</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Apply expansion using a custom kernel with an optional mask. </para>
        </briefdescription>
        <detaileddescription>
<para>This overload allows the use of a custom kernel for expansion, along with an optional mask to control which parts of the array are affected.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the terrain or data to be expanded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel</parametername>
</parameternamelist>
<parameterdescription>
<para>Custom kernel array used to perform the expansion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, with values expected in the range [0, 1]. The mask controls which parts of the array are affected by the expansion.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="138" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="138" bodyend="151" declfile="HighMap/include/highmap/filters.hpp" declline="240" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1affdf6ff9564f31cb988131c2b2c4c280" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::expand_directional</definition>
        <argsstring>(Array &amp;array, int ir, float angle, float aspect_ratio, float anisotropy=1.f, const Array *p_mask=nullptr)</argsstring>
        <name>expand_directional</name>
        <qualifiedname>hmap::expand_directional</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>float</type>
          <declname>aspect_ratio</declname>
        </param>
        <param>
          <type>float</type>
          <declname>anisotropy</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Apply expansion, or &quot;inflation&quot;, to emphasize the bulk of the terrain, using a directional kernel. </para>
        </briefdescription>
        <detaileddescription>
<para>This function expands features of the terrain represented by the input array, with emphasis applied directionally based on the specified angle. The directional kernel allows for anisotropic expansion, making the expansion more pronounced in a specified direction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the terrain or data to be expanded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Filter radius, determining the extent of the expansion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Angle (in degrees) that sets the direction of the expansion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aspect_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Pulse aspect ratio, determining the shape of the expansion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>anisotropy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pulse width ratio between upstream and downstream sides, default is 1.0 (isotropic expansion). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask with values expected in the range [0, 1]. The mask controls which parts of the array are affected by the expansion.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_expand_directional.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ir<sp/>=<sp/>64;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref><sp/>=<sp/>30.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>aspect_ratio<sp/>=<sp/>0.2f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1affdf6ff9564f31cb988131c2b2c4c280" kindref="member">hmap::expand_directional</ref>(z1,<sp/>ir,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>aspect_ratio);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a5cfbd685a2042726fdcd7faa460273a3" kindref="member">hmap::shrink_directional</ref>(z2,<sp/>ir,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>aspect_ratio);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_expand_directional.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1,<sp/>z2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_expand_directional.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="153" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="153" bodyend="165" declfile="HighMap/include/highmap/filters.hpp" declline="273" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a11b0213f43ea0d2228c0dbd385b8308a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::expand_talus</definition>
        <argsstring>(Array &amp;z, const Array &amp;mask, float talus, uint seed, float noise_ratio=0.2f)</argsstring>
        <name>expand_talus</name>
        <qualifiedname>hmap::expand_talus</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>float</type>
          <declname>noise_ratio</declname>
          <defval>0.2<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="167" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="167" bodyend="229" declfile="HighMap/include/highmap/filters.hpp" declline="280" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ad066ff6ef56dbf9827ff6cca9a22e58a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::faceted</definition>
        <argsstring>(const Array &amp;array, int neighborhood=0, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr)</argsstring>
        <name>faceted</name>
        <qualifiedname>hmap::faceted</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>neighborhood</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Generate a faceted heightmap that retains the main features of the input heightmap. </para>
        </briefdescription>
        <detaileddescription>
<para>This function processes the input heightmap to produce a new heightmap with a &apos;faceted&apos; appearance, where the terrain features are preserved but with a more angular and planar aspect. This effect can be controlled by specifying a neighborhood type and optional noise arrays for domain warping.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the original heightmap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>neighborhood</parametername>
</parameternamelist>
<parameterdescription>
<para>Neighborhood type that defines how the faceting effect is applied (see <ref refid="namespacehmap_1a9d00db2263b4b7b05245531c41c1b592" kindref="member">neighborhood</ref>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional reference to the input noise array used for domain warping in the x-direction (NOT in pixels, with respect to a unit domain). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional reference to the input noise array used for domain warping in the y-direction (NOT in pixels, with respect to a unit domain). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Output array containing the faceted heightmap.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_faceted.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/><ref refid="namespacehmap_1ad066ff6ef56dbf9827ff6cca9a22e58a" kindref="member">hmap::faceted</ref>(z1,<sp/><ref refid="namespacehmap_1a9d00db2263b4b7b05245531c41c1b592a5a41d1fe35db5ea65c515f217e5df2af" kindref="member">hmap::neighborhood::CROSS</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_faceted.png&quot;</highlight><highlight class="normal">,<sp/>{z1,<sp/>z2},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_faceted.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/faceted.cpp" line="17" column="7" bodyfile="HighMap/src/filters/faceted.cpp" bodystart="17" bodyend="112" declfile="HighMap/include/highmap/filters.hpp" declline="312" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aeaa7400373b21f2fe35443384ccb1f7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::fill_talus</definition>
        <argsstring>(Array &amp;z, float talus, uint seed, float noise_ratio=0.2f)</argsstring>
        <name>fill_talus</name>
        <qualifiedname>hmap::fill_talus</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>float</type>
          <declname>noise_ratio</declname>
          <defval>0.2<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Modifies a terrain array by filling it with talus slopes. </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies a talus formation algorithm to an existing terrain array, adjusting the heights to create natural-looking slopes. The process involves random perturbations influenced by noise to simulate erosion or sediment transport.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to the 2D array representing the terrain heights. The function modifies this array in place to introduce talus slopes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus</parametername>
</parameternamelist>
<parameterdescription>
<para>The critical slope angle that determines where material will move from higher elevations to lower ones. Slopes steeper than this value will be flattened by material transport. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>The seed for the random number generator, ensuring reproducibility of the noise effects in the talus formation process. The same seed will produce the same terrain modifications. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>noise_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>A parameter that controls the amount of randomness or noise introduced in the talus formation process. The default value is 0.2.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_fill_talus.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>talus<sp/>=<sp/>1.f<sp/>/<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1aeaa7400373b21f2fe35443384ccb1f7b" kindref="member">hmap::fill_talus</ref>(z1,<sp/>talus,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>same<sp/>algo<sp/>on<sp/>a<sp/>coarser<sp/>mesh<sp/>to<sp/>spare<sp/>some<sp/>computational<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a8d285d64ffd577d077f189c913a2bb97" kindref="member">hmap::fill_talus_fast</ref>(z2,<sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(64,<sp/>64),<sp/>talus,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_fill_talus.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1,<sp/>z2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_fill_talus.png"></image>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="" kindref="compound">thermal_scree</ref></computeroutput>, <computeroutput><ref refid="" kindref="compound">thermal_scree_fast</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="231" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="231" bodyend="282" declfile="HighMap/include/highmap/filters.hpp" declline="348" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a8d285d64ffd577d077f189c913a2bb97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::fill_talus_fast</definition>
        <argsstring>(Array &amp;z, Vec2&lt; int &gt; shape_coarse, float talus, uint seed, float noise_ratio=0.2f)</argsstring>
        <name>fill_talus_fast</name>
        <qualifiedname>hmap::fill_talus_fast</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape_coarse</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>float</type>
          <declname>noise_ratio</declname>
          <defval>0.2<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Fill terrain values with a given downslope talus, optimized using a coarse mesh for faster computation. </para>
        </briefdescription>
        <detaileddescription>
<para>This function performs a talus formation process on a terrain array similar to <computeroutput>fill_talus</computeroutput>, but with an optimization that involves working on a coarser mesh. The coarse mesh reduces the computation time while still producing realistic downslope talus effects. The method starts by filling the values from the cells with the highest elevations and introduces random perturbations to avoid grid orientation artifacts.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the terrain heights. The function modifies this array in place to introduce talus slopes, starting from the highest values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shape_coarse</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> representing the coarser shape used for the solver, which determines the resolution of the coarse mesh. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus</parametername>
</parameternamelist>
<parameterdescription>
<para>The critical slope angle that determines where material will move from higher elevations to lower ones. Slopes steeper than this value will be flattened by material transport. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>The seed for the random number generator, ensuring reproducibility of the noise effects in the talus formation process. The same seed will produce the same terrain modifications. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>noise_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>A parameter that controls the amount of randomness or noise introduced in the talus formation process. The noise helps to avoid grid orientation artifacts. The default value is 0.2.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_fill_talus.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>talus<sp/>=<sp/>1.f<sp/>/<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1aeaa7400373b21f2fe35443384ccb1f7b" kindref="member">hmap::fill_talus</ref>(z1,<sp/>talus,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>same<sp/>algo<sp/>on<sp/>a<sp/>coarser<sp/>mesh<sp/>to<sp/>spare<sp/>some<sp/>computational<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a8d285d64ffd577d077f189c913a2bb97" kindref="member">hmap::fill_talus_fast</ref>(z2,<sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(64,<sp/>64),<sp/>talus,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_fill_talus.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1,<sp/>z2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_fill_talus.png"></image>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="" kindref="compound">thermal_scree</ref></computeroutput>, <computeroutput><ref refid="" kindref="compound">thermal_scree_fast</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="284" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="284" bodyend="310" declfile="HighMap/include/highmap/filters.hpp" declline="387" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a2ba465615ff1d745cfcf7a27b7dcb37e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::fold</definition>
        <argsstring>(Array &amp;array, float vmin, float vmax, int iterations=3, float k=0.05f)</argsstring>
        <name>fold</name>
        <qualifiedname>hmap::fold</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vmin</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vmax</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>3</defval>
        </param>
        <param>
          <type>float</type>
          <declname>k</declname>
          <defval>0.05<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Apply a &quot;folding&quot; filter (successive absolute values) to the array elements. </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies a folding filter to the input array, where the values are successively folded (using absolute values) within a specified range, defined by <computeroutput>vmin</computeroutput> and <computeroutput>vmax</computeroutput>. The process can be repeated for a number of iterations, with an optional smoothing parameter <computeroutput>k</computeroutput> to control the intensity of the folding effect.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to which the folding filter is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmin</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum reference value used as a lower bound for the folding operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmax</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum reference value used as an upper bound for the folding operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iterations for applying the folding filter. The default is 3. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>Smoothing parameter for the absolute value operation, expected to be greater than 0. It controls the degree of smoothing applied during folding. The default value is 0.05.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_fold.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>iterations<sp/>=<sp/>5;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>k_smooth;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>k_smooth<sp/>=<sp/>0.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a2ba465615ff1d745cfcf7a27b7dcb37e" kindref="member">hmap::fold</ref>(z1,<sp/>iterations,<sp/>k_smooth);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>k_smooth<sp/>=<sp/>0.05f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a2ba465615ff1d745cfcf7a27b7dcb37e" kindref="member">hmap::fold</ref>(z2,<sp/>iterations,<sp/>k_smooth);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_fold.png&quot;</highlight><highlight class="normal">,<sp/>{z,<sp/>z1,<sp/>z2},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_fold.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="317" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="317" bodyend="331" declfile="HighMap/include/highmap/filters.hpp" declline="421" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a2dc21bf2079bb06efa5d16445a00ca7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::fold</definition>
        <argsstring>(Array &amp;array, int iterations=3, float k=0.05f)</argsstring>
        <name>fold</name>
        <qualifiedname>hmap::fold</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>3</defval>
        </param>
        <param>
          <type>float</type>
          <declname>k</declname>
          <defval>0.05<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Apply a &quot;folding&quot; filter with default reference values and parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>This overload applies the folding filter to the input array with the default number of iterations and smoothing parameter <computeroutput>k</computeroutput>. The folding is done without explicit minimum and maximum reference values.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to which the folding filter is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iterations for applying the folding filter. The default is 3. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>Smoothing parameter for the absolute value operation, expected to be greater than 0. It controls the degree of smoothing applied during folding. The default value is 0.05.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="312" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="312" bodyend="315" declfile="HighMap/include/highmap/filters.hpp" declline="444" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gain</definition>
        <argsstring>(Array &amp;array, float factor, const Array *p_mask)</argsstring>
        <name>gain</name>
        <qualifiedname>hmap::gain</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>factor</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <briefdescription>
<para>Apply a gain correction to the array elements. </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies a gain correction to the input array using a power law. The correction enhances or reduces the intensity of the values based on the specified gain factor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to which the gain correction is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>factor</parametername>
</parameternamelist>
<parameterdescription>
<para>Gain factor, expected to be greater than 0. It determines the strength of the gain correction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, with values expected in the range [0, 1]. The mask controls which parts of the array are affected by the gain correction.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> values are expected to be in the range [0, 1]. Applying the gain correction outside of this range may lead to unexpected results.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_gain.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">hmap::gain</ref>(z,<sp/>2.f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_gain.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_gain.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="347" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="347" bodyend="357" declfile="HighMap/include/highmap/filters.hpp" declline="469" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a2f49cb88fec2755be122d5b097bedc9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gain</definition>
        <argsstring>(Array &amp;array, float factor)</argsstring>
        <name>gain</name>
        <qualifiedname>hmap::gain</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>factor</declname>
        </param>
        <briefdescription>
<para>Apply a gain correction to the array elements without a mask. </para>
        </briefdescription>
        <detaileddescription>
<para>This overload applies the gain correction to the entire array without using a mask. The gain correction is performed using the specified gain factor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to which the gain correction is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>factor</parametername>
</parameternamelist>
<parameterdescription>
<para>Gain factor, expected to be greater than 0. It determines the strength of the gain correction.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="333" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="333" bodyend="345" declfile="HighMap/include/highmap/filters.hpp" declline="483" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aba3674787d520af15267ee7d1e46d220" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gamma_correction</definition>
        <argsstring>(Array &amp;array, float gamma, const Array *p_mask)</argsstring>
        <name>gamma_correction</name>
        <qualifiedname>hmap::gamma_correction</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <briefdescription>
<para>Apply gamma correction to the input array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies gamma correction to the input array, which adjusts the brightness and contrast based on a specified gamma factor. Gamma correction is used to correct or adjust the tonal range of an image or data to achieve a desired visual effect.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to which the gamma correction is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gamma</parametername>
</parameternamelist>
<parameterdescription>
<para>Gamma factor, expected to be greater than 0. It determines the level of correction applied. A gamma value less than 1 will lighten the image, while a value greater than 1 will darken it. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, with values expected in the range [0, 1]. The mask controls which parts of the array are affected by the gamma correction.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> values are expected to be in the range [0, 1]. Applying gamma correction outside of this range may result in incorrect or unintended modifications.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_gamma_correction.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1aba3674787d520af15267ee7d1e46d220" kindref="member">hmap::gamma_correction</ref>(z,<sp/>0.5f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_gamma_correction.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_gamma_correction.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="369" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="369" bodyend="379" declfile="HighMap/include/highmap/filters.hpp" declline="511" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a4e87766dc576eec73cfef1f4050f3bb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gamma_correction</definition>
        <argsstring>(Array &amp;array, float gamma)</argsstring>
        <name>gamma_correction</name>
        <qualifiedname>hmap::gamma_correction</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>gamma</declname>
        </param>
        <briefdescription>
<para>Apply gamma correction to the input array without a mask. </para>
        </briefdescription>
        <detaileddescription>
<para>This overload applies gamma correction to the entire array without using a mask. The gamma correction is performed using the specified gamma factor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to which the gamma correction is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gamma</parametername>
</parameternamelist>
<parameterdescription>
<para>Gamma factor, expected to be greater than 0. It determines the level of correction applied. A gamma value less than 1 will lighten the image, while a value greater than 1 will darken it.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="359" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="359" bodyend="367" declfile="HighMap/include/highmap/filters.hpp" declline="526" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1acf8c38e2bcaa9c116b607230dcc6cb0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gamma_correction_local</definition>
        <argsstring>(Array &amp;array, float gamma, int ir, float k=0.1f)</argsstring>
        <name>gamma_correction_local</name>
        <qualifiedname>hmap::gamma_correction_local</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Apply a &quot;local&quot; gamma correction to the input array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function performs gamma correction by first normalizing the values locally within a specified neighborhood around each pixel. The normalization is achieved using minimum and maximum filters before applying the gamma correction based on the specified gamma factor. This method allows for localized adjustments of contrast and brightness in the input array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to which the local gamma correction is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gamma</parametername>
</parameternamelist>
<parameterdescription>
<para>Gamma factor, expected to be greater than 0. It determines the level of correction applied after local normalization. A gamma value less than 1 will lighten the local regions, while a value greater than 1 will darken them. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Filter radius that defines the size of the local neighborhood used for normalization. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>Smoothing factor used to control the degree of smoothing applied during normalization. The default value is 0.1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, with values expected in the range [0, 1]. The mask controls which parts of the array are affected by the local gamma correction.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_gamma_correction_local.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ir<sp/>=<sp/>8;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_smoothing<sp/>=<sp/>0.1f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1acf8c38e2bcaa9c116b607230dcc6cb0e" kindref="member">hmap::gamma_correction_local</ref>(z,<sp/>0.5f,<sp/>ir,<sp/>k_smoothing);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_gamma_correction_local.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_gamma_correction_local.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="381" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="381" bodyend="412" declfile="HighMap/include/highmap/filters.hpp" declline="556" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a7ad148178be926b19ba618842832fa90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gamma_correction_local</definition>
        <argsstring>(Array &amp;array, float gamma, int ir, const Array *p_mask, float k=0.1f)</argsstring>
        <name>gamma_correction_local</name>
        <qualifiedname>hmap::gamma_correction_local</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Apply a &quot;local&quot; gamma correction with a mask to the input array. </para>
        </briefdescription>
        <detaileddescription>
<para>This overload applies local gamma correction to the input array using a mask. The gamma correction is performed after normalizing values locally within the specified neighborhood defined by the filter radius. The optional mask allows for selective application of the correction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to which the local gamma correction is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gamma</parametername>
</parameternamelist>
<parameterdescription>
<para>Gamma factor, expected to be greater than 0. It determines the level of correction applied after local normalization. A gamma value less than 1 will lighten the local regions, while a value greater than 1 will darken them. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Filter radius that defines the size of the local neighborhood used for normalization. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Filter mask, with values expected in the range [0, 1]. The mask controls which parts of the array are affected by the local gamma correction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>Smoothing factor used to control the degree of smoothing applied during normalization. The default value is 0.1.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="414" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="414" bodyend="428" declfile="HighMap/include/highmap/filters.hpp" declline="581" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ad3c6f230996ef2d2313278103b75fbd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::kuwahara</definition>
        <argsstring>(Array &amp;array, int ir, float mix_ratio=1.f)</argsstring>
        <name>kuwahara</name>
        <qualifiedname>hmap::kuwahara</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>float</type>
          <declname>mix_ratio</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Applies the Kuwahara filter to an array with optional per-pixel masking. </para>
        </briefdescription>
        <detaileddescription>
<para>This overloaded version of the Kuwahara filter allows applying the filter with a per-pixel mask. The mask determines the blending ratio for each pixel, allowing selective smoothing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The input/output array to apply the filter on. The array is modified in place. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the region to analyze for each pixel. Larger values result in stronger smoothing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mix_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>A blending factor between the original and filtered arrays when <computeroutput>p_mask</computeroutput> is <computeroutput>nullptr</computeroutput>. Ignored if <computeroutput>p_mask</computeroutput> is provided.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_kuwahara.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>ir<sp/>=<sp/>8;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1ad3c6f230996ef2d2313278103b75fbd1" kindref="member">hmap::kuwahara</ref>(z1,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mix<sp/>=<sp/>0.25f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1ad3c6f230996ef2d2313278103b75fbd1" kindref="member">hmap::kuwahara</ref>(z2,<sp/>ir,<sp/>mix);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_kuwahara.png&quot;</highlight><highlight class="normal">,<sp/>{z,<sp/>z1,<sp/>z2},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_kuwahara.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="430" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="430" bodyend="474" declfile="HighMap/include/highmap/filters.hpp" declline="608" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a149904b1eda7e91fc908fa10da54075b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::kuwahara</definition>
        <argsstring>(Array &amp;array, int ir, const Array *p_mask, float mix_ratio=1.f)</argsstring>
        <name>kuwahara</name>
        <qualifiedname>hmap::kuwahara</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>float</type>
          <declname>mix_ratio</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Applies the Kuwahara filter to an array with optional per-pixel masking. </para>
        </briefdescription>
        <detaileddescription>
<para>This overloaded version of the Kuwahara filter allows applying the filter with a per-pixel mask. The mask determines the blending ratio for each pixel, allowing selective smoothing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The input/output array to apply the filter on. The array is modified in place. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the region to analyze for each pixel. Larger values result in stronger smoothing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an array representing the mask. The values in the mask range from 0.0 to 1.0, specifying the blending ratio for each pixel. If <computeroutput>nullptr</computeroutput>, the filter is applied without masking. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mix_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>A blending factor between the original and filtered arrays when <computeroutput>p_mask</computeroutput> is <computeroutput>nullptr</computeroutput>. Ignored if <computeroutput>p_mask</computeroutput> is provided.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
If no mask is provided:<itemizedlist>
<listitem><para>The function behaves like the single-argument version of <computeroutput>kuwahara</computeroutput>.</para>
</listitem></itemizedlist>
</para>
<para><bold>Example</bold> <programlisting filename="ex_kuwahara.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>ir<sp/>=<sp/>8;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1ad3c6f230996ef2d2313278103b75fbd1" kindref="member">hmap::kuwahara</ref>(z1,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mix<sp/>=<sp/>0.25f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1ad3c6f230996ef2d2313278103b75fbd1" kindref="member">hmap::kuwahara</ref>(z2,<sp/>ir,<sp/>mix);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_kuwahara.png&quot;</highlight><highlight class="normal">,<sp/>{z,<sp/>z1,<sp/>z2},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_kuwahara.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="476" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="476" bodyend="487" declfile="HighMap/include/highmap/filters.hpp" declline="638" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ae5dd839d799e31ea377dc4daff29b62d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::laplace</definition>
        <argsstring>(Array &amp;array, float sigma=0.2f, int iterations=3)</argsstring>
        <name>laplace</name>
        <qualifiedname>hmap::laplace</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>sigma</declname>
          <defval>0.2<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
<para>Apply a low-pass Laplace filter to the input array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies a low-pass Laplace filter to the input array to smooth out high-frequency noise and detail. The filtering intensity and the number of iterations determine the extent of the smoothing effect.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to which the Laplace filter is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigma</parametername>
</parameternamelist>
<parameterdescription>
<para>Filtering intensity, expected to be in the range [0, 1]. It controls the strength of the filtering effect. A value closer to 1 results in more smoothing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iterations to apply the filter. More iterations will increase the smoothing effect. The default value is 3.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_laplace.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sigma<sp/>=<sp/>0.2f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>iterations<sp/>=<sp/>10;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1ae5dd839d799e31ea377dc4daff29b62d" kindref="member">hmap::laplace</ref>(z1,<sp/>sigma,<sp/>iterations);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>talus<sp/>=<sp/>1.f<sp/>/<sp/>(float)shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a120b7a6f8941d783c52acf799d3cb7b2" kindref="member">hmap::laplace_edge_preserving</ref>(z2,<sp/>talus,<sp/>sigma,<sp/>iterations);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_laplace.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1,<sp/>z2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_laplace.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="489" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="489" bodyend="496" declfile="HighMap/include/highmap/filters.hpp" declline="660" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a94efa789e37074f1e214f7788468b076" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::laplace</definition>
        <argsstring>(Array &amp;array, const Array *p_mask, float sigma=0.2f, int iterations=3)</argsstring>
        <name>laplace</name>
        <qualifiedname>hmap::laplace</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>float</type>
          <declname>sigma</declname>
          <defval>0.2<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
<para>Apply a low-pass Laplace filter with a mask. </para>
        </briefdescription>
        <detaileddescription>
<para>This overload applies the Laplace filter to the input array using an optional mask. The mask determines which parts of the array are affected by the filter. The filtering intensity and the number of iterations control the extent of the smoothing effect.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to which the Laplace filter is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, with values expected in the range [0, 1]. The mask specifies which parts of the array are affected by the filter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigma</parametername>
</parameternamelist>
<parameterdescription>
<para>Filtering intensity, expected to be in the range [0, 1]. It controls the strength of the filtering effect. A value closer to 1 results in more smoothing. The default value is 0.2. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iterations to apply the filter. More iterations will increase the smoothing effect. The default value is 3.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="498" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="498" bodyend="508" declfile="HighMap/include/highmap/filters.hpp" declline="683" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1abf9521082ba09eb022834306bc6c354b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::laplace1d</definition>
        <argsstring>(std::vector&lt; float &gt; &amp;v, float sigma=0.5f, int iterations=1)</argsstring>
        <name>laplace1d</name>
        <qualifiedname>hmap::laplace1d</qualifiedname>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>float</type>
          <declname>sigma</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Apply a low-pass Laplace filter to a vector. </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies a low-pass Laplace filter to a 1D vector to smooth out high-frequency noise and detail. The filtering intensity and the number of iterations control the extent of the smoothing effect.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Input vector to which the Laplace filter is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigma</parametername>
</parameternamelist>
<parameterdescription>
<para>Filtering intensity, expected to be in the range [0, 1]. It determines the strength of the filtering effect. A value closer to 1 results in more smoothing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iterations to apply the filter. More iterations will increase the smoothing effect. The default value is 1. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/operator/vector.cpp" line="31" column="6" bodyfile="HighMap/src/operator/vector.cpp" bodystart="31" bodyend="44" declfile="HighMap/include/highmap/filters.hpp" declline="702" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a120b7a6f8941d783c52acf799d3cb7b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::laplace_edge_preserving</definition>
        <argsstring>(Array &amp;array, float talus, float sigma=0.2f, int iterations=3)</argsstring>
        <name>laplace_edge_preserving</name>
        <qualifiedname>hmap::laplace_edge_preserving</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>float</type>
          <declname>sigma</declname>
          <defval>0.2<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
<para>Apply a low-pass anisotropic Laplace filter to the input array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies an anisotropic Laplace filter to the input array. Anisotropic diffusion, also known as edge-preserving smoothing, helps to reduce noise while preserving edges. The effect of the filter is controlled by the talus limit, filtering intensity, and the number of iterations.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to which the anisotropic Laplace filter is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus</parametername>
</parameternamelist>
<parameterdescription>
<para>Talus limit for edge sensitivity. Gradients above this value are less affected by the filtering, preserving important edges in the data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigma</parametername>
</parameternamelist>
<parameterdescription>
<para>Filtering intensity, expected to be in the range [0, 1]. It controls the strength of the filtering effect. A value closer to 1 results in more smoothing. The default value is 0.2. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iterations to apply the filter. More iterations will increase the smoothing effect. The default value is 3.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_laplace.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sigma<sp/>=<sp/>0.2f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>iterations<sp/>=<sp/>10;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1ae5dd839d799e31ea377dc4daff29b62d" kindref="member">hmap::laplace</ref>(z1,<sp/>sigma,<sp/>iterations);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>talus<sp/>=<sp/>1.f<sp/>/<sp/>(float)shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a120b7a6f8941d783c52acf799d3cb7b2" kindref="member">hmap::laplace_edge_preserving</ref>(z2,<sp/>talus,<sp/>sigma,<sp/>iterations);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_laplace.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1,<sp/>z2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_laplace.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="510" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="510" bodyend="528" declfile="HighMap/include/highmap/filters.hpp" declline="730" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aa3154bd93dda630a0d17f1b75ab6b3c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::laplace_edge_preserving</definition>
        <argsstring>(Array &amp;array, float talus, const Array *p_mask, float sigma=0.2f, int iterations=3)</argsstring>
        <name>laplace_edge_preserving</name>
        <qualifiedname>hmap::laplace_edge_preserving</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>float</type>
          <declname>sigma</declname>
          <defval>0.2<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
<para>Apply a low-pass anisotropic Laplace filter with a mask. </para>
        </briefdescription>
        <detaileddescription>
<para>This overload applies the anisotropic Laplace filter to the input array using an optional mask. The mask determines which parts of the array are affected by the filter. The effect of the filtering is controlled by the talus limit, filtering intensity, and the number of iterations.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to which the anisotropic Laplace filter is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus</parametername>
</parameternamelist>
<parameterdescription>
<para>Talus limit for edge sensitivity. Gradients above this value are less affected by the filtering, preserving important edges in the data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, with values expected in the range [0, 1]. The mask specifies which parts of the array are affected by the filter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigma</parametername>
</parameternamelist>
<parameterdescription>
<para>Filtering intensity, expected to be in the range [0, 1]. It controls the strength of the filtering effect. A value closer to 1 results in more smoothing. The default value is 0.2. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iterations to apply the filter. More iterations will increase the smoothing effect. The default value is 3.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="530" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="530" bodyend="544" declfile="HighMap/include/highmap/filters.hpp" declline="760" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a81842482472ceecc660913388219bb77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::low_pass_high_order</definition>
        <argsstring>(Array &amp;array, int order=9, float sigma=1.f)</argsstring>
        <name>low_pass_high_order</name>
        <qualifiedname>hmap::low_pass_high_order</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>order</declname>
          <defval>9</defval>
        </param>
        <param>
          <type>float</type>
          <declname>sigma</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Apply a low-pass high-order filter to the input array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies a high-order low-pass filter to the input array. The filter can be of 5th, 7th, or 9th order, providing increasingly sharp filtering effects. The filtering intensity is controlled by the <computeroutput>sigma</computeroutput> parameter, which determines the strength of the filtering.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to which the high-order low-pass filter is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>Filter order, which can be 5, 7, or 9. Higher orders provide more refined filtering. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigma</parametername>
</parameternamelist>
<parameterdescription>
<para>Filtering intensity, expected to be in the range [0, 1]. It controls the strength of the filtering effect. A value closer to 1 results in more smoothing. The default value is 1.0.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_low_pass_high_order.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zf<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>order<sp/>=<sp/>7;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a81842482472ceecc660913388219bb77" kindref="member">hmap::low_pass_high_order</ref>(zf,<sp/>order);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_low_pass_high_order.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zf},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_low_pass_high_order.png"></image>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="namespacehmap_1ae5dd839d799e31ea377dc4daff29b62d" kindref="member">laplace</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="546" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="546" bodyend="585" declfile="HighMap/include/highmap/filters.hpp" declline="789" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a4799d3f029d45240a5b40b4853583a58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::make_binary</definition>
        <argsstring>(Array &amp;array, float threshold=0.f)</argsstring>
        <name>make_binary</name>
        <qualifiedname>hmap::make_binary</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>threshold</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Convert array values to binary using a threshold. </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies a binary filter to the input array, converting all values to either 0 or 1 based on a specified threshold. Values above the threshold are set to 1, while values equal to or below the threshold are set to 0.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be converted to binary. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>Threshold value. Any array value greater than this threshold is set to 1, while values less than or equal to the threshold are set to 0. The default threshold is 0.0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="587" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="587" bodyend="595" declfile="HighMap/include/highmap/filters.hpp" declline="804" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a5437c715b7a187bc794b1bf66891bddf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::maximum_local</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>maximum_local</name>
        <qualifiedname>hmap::maximum_local</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>Return the local maxima based on a maximum filter with a square kernel. </para>
        </briefdescription>
        <detaileddescription>
<para>This function identifies the local maxima in the input array using a maximum filter with a square kernel. The local maxima are determined based on the footprint radius specified by <computeroutput>ir</computeroutput>. The result is an array where each value represents the local maximum within the defined kernel size.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array from which local maxima are to be extracted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Square kernel footprint radius. The size of the kernel used to determine the local maxima. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Resulting array containing the local maxima.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_maximum_local.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radius<sp/>=<sp/>5;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zmin<sp/>=<sp/><ref refid="namespacehmap_1adf68a2f031297654f88252b7ce027b3d" kindref="member">hmap::minimum_local</ref>(z,<sp/>radius);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zmax<sp/>=<sp/><ref refid="namespacehmap_1a5437c715b7a187bc794b1bf66891bddf" kindref="member">hmap::maximum_local</ref>(z,<sp/>radius);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zdisk<sp/>=<sp/><ref refid="namespacehmap_1a2470328dcc792f6563c5844a2cc163ee" kindref="member">hmap::maximum_local_disk</ref>(z,<sp/>radius);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_maximum_local.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zmin,<sp/>zmax,<sp/>zdisk},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_maximum_local.png"></image>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="namespacehmap_1a2470328dcc792f6563c5844a2cc163ee" kindref="member">maximum_local_disk</ref></computeroutput>, <computeroutput><ref refid="namespacehmap_1adf68a2f031297654f88252b7ce027b3d" kindref="member">minimum_local</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/range/range.cpp" line="200" column="7" bodyfile="HighMap/src/range/range.cpp" bodystart="200" bodyend="235" declfile="HighMap/include/highmap/filters.hpp" declline="828" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a2470328dcc792f6563c5844a2cc163ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::maximum_local_disk</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>maximum_local_disk</name>
        <qualifiedname>hmap::maximum_local_disk</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>Return the local maxima based on a maximum filter using a disk kernel. </para>
        </briefdescription>
        <detaileddescription>
<para>This function identifies the local maxima in the input array using a maximum filter with a disk-shaped kernel. The local maxima are determined based on the footprint radius specified by <computeroutput>ir</computeroutput>. The result is an array where each value represents the local maximum within the disk-shaped kernel.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array from which local maxima are to be extracted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Disk kernel footprint radius. The size of the disk-shaped kernel used to determine the local maxima. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Resulting array containing the local maxima.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_maximum_local.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radius<sp/>=<sp/>5;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zmin<sp/>=<sp/><ref refid="namespacehmap_1adf68a2f031297654f88252b7ce027b3d" kindref="member">hmap::minimum_local</ref>(z,<sp/>radius);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zmax<sp/>=<sp/><ref refid="namespacehmap_1a5437c715b7a187bc794b1bf66891bddf" kindref="member">hmap::maximum_local</ref>(z,<sp/>radius);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zdisk<sp/>=<sp/><ref refid="namespacehmap_1a2470328dcc792f6563c5844a2cc163ee" kindref="member">hmap::maximum_local_disk</ref>(z,<sp/>radius);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_maximum_local.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zmin,<sp/>zmax,<sp/>zdisk},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_maximum_local.png"></image>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="namespacehmap_1a5437c715b7a187bc794b1bf66891bddf" kindref="member">maximum_local</ref></computeroutput>, <computeroutput><ref refid="namespacehmap_1a2b174148b8c1f2e44b5ecff756e9a0f9" kindref="member">minimum_local_disk</ref></computeroutput>, <computeroutput><ref refid="namespacehmap_1adf68a2f031297654f88252b7ce027b3d" kindref="member">minimum_local</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/range/range.cpp" line="237" column="7" bodyfile="HighMap/src/range/range.cpp" bodystart="237" bodyend="264" declfile="HighMap/include/highmap/filters.hpp" declline="852" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a8afd3d81a238c8a5d10059b3a029554e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::match_histogram</definition>
        <argsstring>(Array &amp;array, const Array &amp;array_reference)</argsstring>
        <name>match_histogram</name>
        <qualifiedname>hmap::match_histogram</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array_reference</declname>
        </param>
        <briefdescription>
<para>Transform the input array elevation to match the histogram of a reference array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function performs histogram matching on the input array to adjust its elevation values so that the resulting histogram closely matches the histogram of a reference array. This process is useful for aligning the statistical properties of the input data with those of the reference data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array whose elevation values are to be transformed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array_reference</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference array whose histogram is used as the target for matching.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_match_histogram.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z0<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zref<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>++seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(zref);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">hmap::gain</ref>(zref,<sp/>4.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/>z0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a8afd3d81a238c8a5d10059b3a029554e" kindref="member">hmap::match_histogram</ref>(z1,<sp/>zref);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_match_histogram.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{zref,<sp/>z0,<sp/>z1},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_match_histogram.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="597" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="597" bodyend="604" declfile="HighMap/include/highmap/filters.hpp" declline="874" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a8ac4638525bb243024d50793d97bc9ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::mean_shift</definition>
        <argsstring>(const Array &amp;array, int ir, float talus, int iterations=1, bool talus_weighted=true)</argsstring>
        <name>mean_shift</name>
        <qualifiedname>hmap::mean_shift</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>talus_weighted</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Applies the mean shift algorithm to the input array. </para>
        </briefdescription>
        <detaileddescription>
<para>The mean shift algorithm iteratively adjusts each value in the input array by averaging nearby values within a specified radius (<computeroutput>ir</computeroutput>), using either simple or weighted mean computation. The process stops after the specified number of iterations or if convergence criteria are met.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The input array to process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the neighborhood to consider for mean computation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>The value threshold for considering neighboring elements. Only elements with differences below this threshold are included. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of iterations to perform the mean shift process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus_weighted</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, uses weighted mean based on differences between values and their neighbors. If false, uses unweighted mean. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new array containing the result of the mean shift process.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_mean_shift.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ir<sp/>=<sp/>32;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>talus<sp/>=<sp/>16.f<sp/>/<sp/>(float)shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>iterations<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zm<sp/>=<sp/><ref refid="namespacehmap_1a8ac4638525bb243024d50793d97bc9ee" kindref="member">hmap::mean_shift</ref>(z,<sp/>ir,<sp/>talus,<sp/>iterations);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>zm.<ref refid="classhmap_1_1Array_1ad7018857827d8e8d263516bbbd77630f" kindref="member">to_png_grayscale</ref>(</highlight><highlight class="stringliteral">&quot;out.png&quot;</highlight><highlight class="normal">,<sp/>CV_16U);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_mean_shift.png&quot;</highlight><highlight class="normal">,<sp/>{z,<sp/>zm},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_mean_shift.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="606" column="7" bodyfile="HighMap/src/filters/filters.cpp" bodystart="606" bodyend="671" declfile="HighMap/include/highmap/filters.hpp" declline="904" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1af12f56824dfe06e29f7063fa59b2d1f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::mean_shift</definition>
        <argsstring>(const Array &amp;array, int ir, float talus, const Array *p_mask, int iterations=1, bool talus_weighted=true)</argsstring>
        <name>mean_shift</name>
        <qualifiedname>hmap::mean_shift</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>talus_weighted</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="673" column="7" bodyfile="HighMap/src/filters/filters.cpp" bodystart="673" bodyend="688" declfile="HighMap/include/highmap/filters.hpp" declline="910" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a8c9d91481a5908494b9f06c90c705b3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::median_3x3</definition>
        <argsstring>(Array &amp;array, const Array *p_mask)</argsstring>
        <name>median_3x3</name>
        <qualifiedname>hmap::median_3x3</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <briefdescription>
<para>Apply a 3x3 median filter to the input array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies a 3x3 median filter to the input array to reduce noise while preserving edges. The median filter replaces each pixel with the median value of the 3x3 neighborhood surrounding it. An optional mask can be used to control which parts of the array are filtered.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to which the median filter is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, with values expected in the range [0, 1]. The mask determines which parts of the array are affected by the median filter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_median_3x3.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z<sp/>+=<sp/>0.1f<sp/>*<sp/><ref refid="namespacehmap_1aaebee84e8c697616359a93440eb92b50" kindref="member">hmap::white</ref>(shape,<sp/>0.f,<sp/>1.f,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z0<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a8c9d91481a5908494b9f06c90c705b3a" kindref="member">hmap::median_3x3</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_median_3x3.png&quot;</highlight><highlight class="normal">,<sp/>{z0,<sp/>z},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_median_3x3.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="718" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="718" bodyend="728" declfile="HighMap/include/highmap/filters.hpp" declline="936" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ad99aff62bcc6c5c7a610d315e255b6d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::median_3x3</definition>
        <argsstring>(Array &amp;array)</argsstring>
        <name>median_3x3</name>
        <qualifiedname>hmap::median_3x3</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Apply a 3x3 median filter to the input array without a mask. </para>
        </briefdescription>
        <detaileddescription>
<para>This overload applies a 3x3 median filter to the input array, affecting all pixels. The median filter replaces each pixel with the median value of the 3x3 neighborhood surrounding it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to which the median filter is applied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="690" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="690" bodyend="716" declfile="HighMap/include/highmap/filters.hpp" declline="949" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a14eb6b7d304484c8cbb231b672851491" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::median_pseudo</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>median_pseudo</name>
        <qualifiedname>hmap::median_pseudo</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>Computes a fast pseudo-median approximation of a local neighborhood in an array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function approximates the effect of a median filter by computing the local minimum, maximum, and mean values within a square neighborhood of radius <computeroutput>ir</computeroutput>, and averaging the results:</para>
<para><formula id="0">\[
\text{pseudo\_median}(x, y) = \frac{\text{min} + \text{max} + \text{mean}}{3}
\]</formula></para>
<para>This method is computationally cheaper than a true median filter and can approximate its noise-reduction and edge-preserving properties to some extent.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array (e.g., image or 2D signal). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Radius of the square neighborhood (kernel size will be <formula id="1">$2
              \cdot ir + 1$</formula>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> containing the pseudo-median filtered output.</para>
</simplesect>
<simplesect kind="note"><para>This method works best on images with impulsive noise (e.g., salt-and-pepper), but is only an approximation and may behave differently from a true median filter on complex structures or edges.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_median_pseudo.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z<sp/>+=<sp/>0.1f<sp/>*<sp/><ref refid="namespacehmap_1aaebee84e8c697616359a93440eb92b50" kindref="member">hmap::white</ref>(shape,<sp/>0.f,<sp/>1.f,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ir<sp/>=<sp/>16;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1a14eb6b7d304484c8cbb231b672851491" kindref="member">hmap::median_pseudo</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>gpu<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1_1gpu_1adb8336ed4d83c15500872185dee45d50" kindref="member">hmap::gpu::init_opencl</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/><ref refid="namespacehmap_1_1gpu_1a2e2bccfafc05679f1762ba039df58dbf" kindref="member">hmap::gpu::median_pseudo</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_median_pseudo.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1,<sp/>z2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_median_pseudo.png"></image>
</para>
<para><simplesect kind="see"><para><ref refid="namespacehmap_1adf68a2f031297654f88252b7ce027b3d" kindref="member">minimum_local</ref>, <ref refid="namespacehmap_1a5437c715b7a187bc794b1bf66891bddf" kindref="member">maximum_local</ref>, <ref refid="namespacehmap_1a39d52250df1825ecea1e63309d94d1fb" kindref="member">mean_local</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="730" column="7" bodyfile="HighMap/src/filters/filters.cpp" bodystart="730" bodyend="735" declfile="HighMap/include/highmap/filters.hpp" declline="984" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1adf68a2f031297654f88252b7ce027b3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::minimum_local</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>minimum_local</name>
        <qualifiedname>hmap::minimum_local</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>Return the local minima based on a maximum filter with a square kernel. </para>
        </briefdescription>
        <detaileddescription>
<para>This function identifies the local minima in the input array using a maximum filter with a square kernel. The local minima are determined based on the footprint radius specified by <computeroutput>ir</computeroutput>. The result is an array where each value represents the local minimum within the defined kernel size.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array from which local minima are to be extracted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Square kernel footprint radius. The size of the kernel used to determine the local minima. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Resulting array containing the local minima.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_maximum_local.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radius<sp/>=<sp/>5;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zmin<sp/>=<sp/><ref refid="namespacehmap_1adf68a2f031297654f88252b7ce027b3d" kindref="member">hmap::minimum_local</ref>(z,<sp/>radius);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zmax<sp/>=<sp/><ref refid="namespacehmap_1a5437c715b7a187bc794b1bf66891bddf" kindref="member">hmap::maximum_local</ref>(z,<sp/>radius);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zdisk<sp/>=<sp/><ref refid="namespacehmap_1a2470328dcc792f6563c5844a2cc163ee" kindref="member">hmap::maximum_local_disk</ref>(z,<sp/>radius);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_maximum_local.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zmin,<sp/>zmax,<sp/>zdisk},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_maximum_local.png"></image>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="namespacehmap_1adf68a2f031297654f88252b7ce027b3d" kindref="member">minimum_local</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/range/range.cpp" line="316" column="7" bodyfile="HighMap/src/range/range.cpp" bodystart="316" bodyend="319" declfile="HighMap/include/highmap/filters.hpp" declline="1008" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a2b174148b8c1f2e44b5ecff756e9a0f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::minimum_local_disk</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>minimum_local_disk</name>
        <qualifiedname>hmap::minimum_local_disk</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>Return the local minima based on a maximum filter using a disk kernel. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the local minima in the input array using a maximum filter with a disk-shaped kernel. The local minima are determined based on the footprint radius specified by <computeroutput>ir</computeroutput>. The result is an array where each value represents the local minimum within the disk-shaped kernel.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array from which local minima are to be extracted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Disk kernel footprint radius. The size of the disk-shaped kernel used to determine the local minima. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Resulting array containing the local minima.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_maximum_local.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radius<sp/>=<sp/>5;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zmin<sp/>=<sp/><ref refid="namespacehmap_1adf68a2f031297654f88252b7ce027b3d" kindref="member">hmap::minimum_local</ref>(z,<sp/>radius);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zmax<sp/>=<sp/><ref refid="namespacehmap_1a5437c715b7a187bc794b1bf66891bddf" kindref="member">hmap::maximum_local</ref>(z,<sp/>radius);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zdisk<sp/>=<sp/><ref refid="namespacehmap_1a2470328dcc792f6563c5844a2cc163ee" kindref="member">hmap::maximum_local_disk</ref>(z,<sp/>radius);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_maximum_local.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zmin,<sp/>zmax,<sp/>zdisk},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_maximum_local.png"></image>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="namespacehmap_1a5437c715b7a187bc794b1bf66891bddf" kindref="member">maximum_local</ref></computeroutput>, <computeroutput><ref refid="namespacehmap_1a2470328dcc792f6563c5844a2cc163ee" kindref="member">maximum_local_disk</ref></computeroutput>, <computeroutput><ref refid="namespacehmap_1adf68a2f031297654f88252b7ce027b3d" kindref="member">minimum_local</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/range/range.cpp" line="321" column="7" bodyfile="HighMap/src/range/range.cpp" bodystart="321" bodyend="324" declfile="HighMap/include/highmap/filters.hpp" declline="1032" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aafd7a642dabfbcf2ab2981b229a30e15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::normal_displacement</definition>
        <argsstring>(Array &amp;array, float amount=0.1f, int ir=0, bool reverse=false)</argsstring>
        <name>normal_displacement</name>
        <qualifiedname>hmap::normal_displacement</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amount</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>reverse</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Apply a displacement to the terrain along the normal direction. </para>
        </briefdescription>
        <detaileddescription>
<para>This function displaces the terrain along its normal direction, simulating effects like erosion or terrain modification. The amount of displacement and direction (normal or reversed) can be specified. Optionally, a mask can be used to control which parts of the terrain are affected.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the terrain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, with values expected in the range [0, 1]. The mask specifies which parts of the array are affected by the displacement. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of displacement to apply. The default value is 0.1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Pre-filtering radius. The radius used to smooth the terrain before applying displacement. The default value is 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reverse</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, the displacement direction is reversed. The default value is false.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_normal_displacement.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>mask<sp/>=<sp/>z1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(mask);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/>z1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1aafd7a642dabfbcf2ab2981b229a30e15" kindref="member">hmap::normal_displacement</ref>(z2,<sp/>&amp;mask,<sp/>5.f,<sp/>4,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_normal_displacement.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z1,<sp/>z2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_normal_displacement.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="737" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="737" bodyend="769" declfile="HighMap/include/highmap/filters.hpp" declline="1058" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a8994656d85a1b9dd0f2c99a3fd45ceb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::normal_displacement</definition>
        <argsstring>(Array &amp;array, const Array *p_mask, float amount=0.1f, int ir=0, bool reverse=false)</argsstring>
        <name>normal_displacement</name>
        <qualifiedname>hmap::normal_displacement</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amount</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>reverse</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="771" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="771" bodyend="785" declfile="HighMap/include/highmap/filters.hpp" declline="1063" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a558c273680de2328f37e5df7ee598813" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::plateau</definition>
        <argsstring>(Array &amp;array, const Array *p_mask, int ir, float factor)</argsstring>
        <name>plateau</name>
        <qualifiedname>hmap::plateau</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>float</type>
          <declname>factor</declname>
        </param>
        <briefdescription>
<para>Apply a plateau-shape filter to the input array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies a plateau-shape filter to the input array, modifying the terrain to create flat, plateau-like regions. The filter&apos;s radius and flatness can be adjusted to control the extent and shape of the plateaus. An optional mask can be used to control which parts of the array are affected.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to which the plateau-shape filter is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, with values expected in the range [0, 1]. The mask specifies which parts of the array are affected by the filter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Plateau radius. The size of the area over which the plateau effect is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>factor</parametername>
</parameternamelist>
<parameterdescription>
<para>Gain factor that controls the flatness of the plateau. The higher the factor, the flatter the resulting plateau. The default value is 1.0.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_plateau.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zp<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a558c273680de2328f37e5df7ee598813" kindref="member">hmap::plateau</ref>(zp,<sp/>64,<sp/>4.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_plateau.png&quot;</highlight><highlight class="normal">,<sp/>{z,<sp/>zp},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_plateau.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="801" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="801" bodyend="811" declfile="HighMap/include/highmap/filters.hpp" declline="1093" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a9f49d016a05aa8636bb0ff3c3d30aaf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::plateau</definition>
        <argsstring>(Array &amp;array, int ir, float factor)</argsstring>
        <name>plateau</name>
        <qualifiedname>hmap::plateau</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>float</type>
          <declname>factor</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="787" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="787" bodyend="799" declfile="HighMap/include/highmap/filters.hpp" declline="1095" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ad2f0b00fee1cff1a2df0049176548ea5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::recast_billow</definition>
        <argsstring>(Array &amp;array, float vref, float k)</argsstring>
        <name>recast_billow</name>
        <qualifiedname>hmap::recast_billow</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vref</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Transform heightmap to give a &quot;billow&quot; like appearance. </para>
        </briefdescription>
        <detaileddescription>
<para>This function modifies the heightmap to produce a &quot;billow&quot; effect. The transformation is applied based on a reference elevation (<computeroutput>vref</computeroutput>) where the elevation is folded. The smoothing coefficient (<computeroutput>k</computeroutput>) controls the degree of smoothing applied during the transformation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap to be transformed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vref</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference elevation where the heightmap values are folded. This value determines the baseline around which the billow effect is centered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>Smoothing coefficient that influences the degree of smoothness in the billow transformation. Higher values result in more smoothing.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_recast.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>shape<sp/>=<sp/>{512,<sp/>512};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ir<sp/>=<sp/>16;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>2.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac2a2b604d4c167dcaddfbd1c66df3e4c" kindref="member">hmap::recast_peak</ref>(z1,<sp/>ir,<sp/>gamma);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref><sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>,<sp/>-0.1f,<sp/>0.1f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>zcut<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>4.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ae475b4f5defd09d3e566f44dd2c21575" kindref="member">hmap::recast_canyon</ref>(z2,<sp/>zcut,<sp/>gamma,<sp/>&amp;<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z3<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>talus<sp/>=<sp/>2.f<sp/>/<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ir<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amplitude<sp/>=<sp/>0.2f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kw<sp/>=<sp/>16.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1af7709075260d830b45e0f2ea7ea64c94" kindref="member">hmap::recast_rocky_slopes</ref>(z3,<sp/>talus,<sp/>ir,<sp/>amplitude,<sp/>seed,<sp/>kw,<sp/>gamma);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z4<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z5<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>talus<sp/>=<sp/>1.f<sp/>/<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ir<sp/>=<sp/>32;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amplitude<sp/>=<sp/>0.05f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref><sp/>=<sp/>1.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a5bfddc2b02cae0d5ee107d35459d626f" kindref="member">hmap::recast_cliff</ref>(z4,<sp/>talus,<sp/>ir,<sp/>amplitude,<sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z4);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref><sp/>=<sp/>0.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1acf26969b97f38bf692f538efb12ac2c2" kindref="member">hmap::recast_cliff_directional</ref>(z5,<sp/>talus,<sp/>ir,<sp/>amplitude,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z6<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z7<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0.01f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ad2f0b00fee1cff1a2df0049176548ea5" kindref="member">hmap::recast_billow</ref>(z6,<sp/>0.5f,<sp/>k);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z6);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1abf3c7485f0f6f9e56b2cec58e085dc23" kindref="member">hmap::recast_sag</ref>(z7,<sp/>0.5f,<sp/>k);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z7);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z8<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z8.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;out0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>CV_16U);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1adcf3232842a5d6a3c0d9a8bc9b5da61e" kindref="member">hmap::recast_escarpment</ref>(z8,<sp/>16,<sp/>0.1f,<sp/>1.f,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z8.to_png(</highlight><highlight class="stringliteral">&quot;out1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>CV_16U);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_recast.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1,<sp/>z2,<sp/>z3,<sp/>z4,<sp/>z5,<sp/>z6,<sp/>z7,<sp/>z8},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_recast.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/recast.cpp" line="22" column="6" bodyfile="HighMap/src/filters/recast.cpp" bodystart="22" bodyend="25" declfile="HighMap/include/highmap/filters.hpp" declline="1118" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ae475b4f5defd09d3e566f44dd2c21575" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::recast_canyon</definition>
        <argsstring>(Array &amp;array, const Array &amp;vcut, float gamma=4.f)</argsstring>
        <name>recast_canyon</name>
        <qualifiedname>hmap::recast_canyon</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>vcut</declname>
        </param>
        <param>
          <type>float</type>
          <declname>gamma</declname>
          <defval>4.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Transform heightmap to give a &quot;canyon&quot; like appearance. </para>
        </briefdescription>
        <detaileddescription>
<para>This function modifies the heightmap to create a &quot;canyon&quot; effect. The transformation is based on a canyon top elevation (<computeroutput>vcut</computeroutput>). The effect can be adjusted with a gamma factor to control the intensity of the canyon effect. Optional parameters include a filter mask for selective application and a noise array for additional variation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap to be transformed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vcut</parametername>
</parameternamelist>
<parameterdescription>
<para>Canyon top elevation. This value defines the threshold for canyon formation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gamma</parametername>
</parameternamelist>
<parameterdescription>
<para>Gamma factor (&gt; 0) that adjusts the intensity of the canyon effect. A higher value increases the effect. The default value is 4.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, with values expected in the range [0, 1]. The mask specifies which parts of the heightmap are affected by the transformation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional noise array used to introduce variation in the canyon effect. If not provided, no additional noise is applied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_recast.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>shape<sp/>=<sp/>{512,<sp/>512};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ir<sp/>=<sp/>16;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>2.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac2a2b604d4c167dcaddfbd1c66df3e4c" kindref="member">hmap::recast_peak</ref>(z1,<sp/>ir,<sp/>gamma);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref><sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>,<sp/>-0.1f,<sp/>0.1f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>zcut<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>4.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ae475b4f5defd09d3e566f44dd2c21575" kindref="member">hmap::recast_canyon</ref>(z2,<sp/>zcut,<sp/>gamma,<sp/>&amp;<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z3<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>talus<sp/>=<sp/>2.f<sp/>/<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ir<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amplitude<sp/>=<sp/>0.2f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kw<sp/>=<sp/>16.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1af7709075260d830b45e0f2ea7ea64c94" kindref="member">hmap::recast_rocky_slopes</ref>(z3,<sp/>talus,<sp/>ir,<sp/>amplitude,<sp/>seed,<sp/>kw,<sp/>gamma);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z4<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z5<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>talus<sp/>=<sp/>1.f<sp/>/<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ir<sp/>=<sp/>32;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amplitude<sp/>=<sp/>0.05f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref><sp/>=<sp/>1.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a5bfddc2b02cae0d5ee107d35459d626f" kindref="member">hmap::recast_cliff</ref>(z4,<sp/>talus,<sp/>ir,<sp/>amplitude,<sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z4);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref><sp/>=<sp/>0.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1acf26969b97f38bf692f538efb12ac2c2" kindref="member">hmap::recast_cliff_directional</ref>(z5,<sp/>talus,<sp/>ir,<sp/>amplitude,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z6<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z7<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0.01f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ad2f0b00fee1cff1a2df0049176548ea5" kindref="member">hmap::recast_billow</ref>(z6,<sp/>0.5f,<sp/>k);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z6);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1abf3c7485f0f6f9e56b2cec58e085dc23" kindref="member">hmap::recast_sag</ref>(z7,<sp/>0.5f,<sp/>k);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z7);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z8<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z8.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;out0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>CV_16U);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1adcf3232842a5d6a3c0d9a8bc9b5da61e" kindref="member">hmap::recast_escarpment</ref>(z8,<sp/>16,<sp/>0.1f,<sp/>1.f,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z8.to_png(</highlight><highlight class="stringliteral">&quot;out1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>CV_16U);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_recast.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1,<sp/>z2,<sp/>z3,<sp/>z4,<sp/>z5,<sp/>z6,<sp/>z7,<sp/>z8},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_recast.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/recast.cpp" line="27" column="6" bodyfile="HighMap/src/filters/recast.cpp" bodystart="27" bodyend="37" declfile="HighMap/include/highmap/filters.hpp" declline="1147" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a21def375eb7059931a64b6cb9f628a23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::recast_canyon</definition>
        <argsstring>(Array &amp;array, const Array &amp;vcut, const Array *p_mask, float gamma=4.f)</argsstring>
        <name>recast_canyon</name>
        <qualifiedname>hmap::recast_canyon</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>vcut</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>float</type>
          <declname>gamma</declname>
          <defval>4.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/recast.cpp" line="39" column="6" bodyfile="HighMap/src/filters/recast.cpp" bodystart="39" bodyend="52" declfile="HighMap/include/highmap/filters.hpp" declline="1149" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a0488fc217795b5a49287a19e785602fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::recast_canyon</definition>
        <argsstring>(Array &amp;array, float vcut, const Array *p_mask, float gamma=4.f, const Array *p_noise=nullptr)</argsstring>
        <name>recast_canyon</name>
        <qualifiedname>hmap::recast_canyon</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vcut</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>float</type>
          <declname>gamma</declname>
          <defval>4.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/recast.cpp" line="80" column="6" bodyfile="HighMap/src/filters/recast.cpp" bodystart="80" bodyend="94" declfile="HighMap/include/highmap/filters.hpp" declline="1154" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aa8ca09c4db0795d0d7a4a8341e7f1159" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::recast_canyon</definition>
        <argsstring>(Array &amp;array, float vcut, float gamma=4.f, const Array *p_noise=nullptr)</argsstring>
        <name>recast_canyon</name>
        <qualifiedname>hmap::recast_canyon</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vcut</declname>
        </param>
        <param>
          <type>float</type>
          <declname>gamma</declname>
          <defval>4.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/recast.cpp" line="54" column="6" bodyfile="HighMap/src/filters/recast.cpp" bodystart="54" bodyend="78" declfile="HighMap/include/highmap/filters.hpp" declline="1160" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a5bfddc2b02cae0d5ee107d35459d626f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::recast_cliff</definition>
        <argsstring>(Array &amp;array, float talus, int ir, float amplitude, float gain=2.f)</argsstring>
        <name>recast_cliff</name>
        <qualifiedname>hmap::recast_cliff</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amplitude</declname>
        </param>
        <param>
          <type>float</type>
          <declname>gain</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Transform heightmap to add cliffs where gradients are steep enough. </para>
        </briefdescription>
        <detaileddescription>
<para>This function modifies the heightmap to introduce cliffs based on a reference talus angle. Cliffs are added where the gradient exceeds the specified talus angle. The amplitude of the cliffs and the gain factor for steepness are adjustable. Additionally, a filter mask can be applied to control which parts of the heightmap are affected.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap to be modified. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference talus angle. This angle determines the threshold above which cliffs are formed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Filter radius used to smooth the heightmap before applying the cliff effect. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amplitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Amplitude of the cliffs. This value controls the height of the cliffs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gain</parametername>
</parameternamelist>
<parameterdescription>
<para>Gain factor for the gain filter, influencing the steepness of the cliffs. Higher values result in steeper cliffs. The default value is 2.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, with values expected in the range [0, 1]. The mask specifies which parts of the heightmap are affected by the cliff transformation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_recast.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>shape<sp/>=<sp/>{512,<sp/>512};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ir<sp/>=<sp/>16;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>2.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac2a2b604d4c167dcaddfbd1c66df3e4c" kindref="member">hmap::recast_peak</ref>(z1,<sp/>ir,<sp/>gamma);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref><sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>,<sp/>-0.1f,<sp/>0.1f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>zcut<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>4.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ae475b4f5defd09d3e566f44dd2c21575" kindref="member">hmap::recast_canyon</ref>(z2,<sp/>zcut,<sp/>gamma,<sp/>&amp;<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z3<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>talus<sp/>=<sp/>2.f<sp/>/<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ir<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amplitude<sp/>=<sp/>0.2f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kw<sp/>=<sp/>16.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1af7709075260d830b45e0f2ea7ea64c94" kindref="member">hmap::recast_rocky_slopes</ref>(z3,<sp/>talus,<sp/>ir,<sp/>amplitude,<sp/>seed,<sp/>kw,<sp/>gamma);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z4<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z5<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>talus<sp/>=<sp/>1.f<sp/>/<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ir<sp/>=<sp/>32;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amplitude<sp/>=<sp/>0.05f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref><sp/>=<sp/>1.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a5bfddc2b02cae0d5ee107d35459d626f" kindref="member">hmap::recast_cliff</ref>(z4,<sp/>talus,<sp/>ir,<sp/>amplitude,<sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z4);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref><sp/>=<sp/>0.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1acf26969b97f38bf692f538efb12ac2c2" kindref="member">hmap::recast_cliff_directional</ref>(z5,<sp/>talus,<sp/>ir,<sp/>amplitude,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z6<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z7<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0.01f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ad2f0b00fee1cff1a2df0049176548ea5" kindref="member">hmap::recast_billow</ref>(z6,<sp/>0.5f,<sp/>k);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z6);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1abf3c7485f0f6f9e56b2cec58e085dc23" kindref="member">hmap::recast_sag</ref>(z7,<sp/>0.5f,<sp/>k);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z7);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z8<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z8.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;out0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>CV_16U);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1adcf3232842a5d6a3c0d9a8bc9b5da61e" kindref="member">hmap::recast_escarpment</ref>(z8,<sp/>16,<sp/>0.1f,<sp/>1.f,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z8.to_png(</highlight><highlight class="stringliteral">&quot;out1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>CV_16U);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_recast.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1,<sp/>z2,<sp/>z3,<sp/>z4,<sp/>z5,<sp/>z6,<sp/>z7,<sp/>z8},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_recast.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/recast.cpp" line="96" column="6" bodyfile="HighMap/src/filters/recast.cpp" bodystart="96" bodyend="127" declfile="HighMap/include/highmap/filters.hpp" declline="1194" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ab9b560067f09332a4ff50670dfef00a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::recast_cliff</definition>
        <argsstring>(Array &amp;array, float talus, int ir, float amplitude, const Array *p_mask, float gain=2.f)</argsstring>
        <name>recast_cliff</name>
        <qualifiedname>hmap::recast_cliff</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amplitude</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>float</type>
          <declname>gain</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/recast.cpp" line="129" column="6" bodyfile="HighMap/src/filters/recast.cpp" bodystart="129" bodyend="144" declfile="HighMap/include/highmap/filters.hpp" declline="1200" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1acf26969b97f38bf692f538efb12ac2c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::recast_cliff_directional</definition>
        <argsstring>(Array &amp;array, float talus, int ir, float amplitude, float angle, float gain=2.f)</argsstring>
        <name>recast_cliff_directional</name>
        <qualifiedname>hmap::recast_cliff_directional</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amplitude</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>float</type>
          <declname>gain</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Transform heightmap to add directional cliffs where gradients are steep enough. </para>
        </briefdescription>
        <detaileddescription>
<para>This function modifies the heightmap to introduce cliffs in a specific direction, based on a reference talus angle. The cliffs are added where the gradient exceeds the specified talus angle, with the direction of the cliffs controlled by the specified angle. The amplitude of the cliffs and the gain factor for steepness are also adjustable. A filter mask can be used to specify which parts of the heightmap are affected.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap to be modified. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference talus angle. This angle determines the threshold above which cliffs are formed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Filter radius used to smooth the heightmap before applying the cliff effect. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amplitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Amplitude of the cliffs. This value controls the height of the cliffs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Angle (in degrees) determining the direction of the cliffs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gain</parametername>
</parameternamelist>
<parameterdescription>
<para>Gain factor for the gain filter, influencing the steepness of the cliffs. Higher values result in steeper cliffs. The default value is 2.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, with values expected in the range [0, 1]. The mask specifies which parts of the heightmap are affected by the cliff transformation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_recast.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>shape<sp/>=<sp/>{512,<sp/>512};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ir<sp/>=<sp/>16;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>2.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac2a2b604d4c167dcaddfbd1c66df3e4c" kindref="member">hmap::recast_peak</ref>(z1,<sp/>ir,<sp/>gamma);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref><sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>,<sp/>-0.1f,<sp/>0.1f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>zcut<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>4.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ae475b4f5defd09d3e566f44dd2c21575" kindref="member">hmap::recast_canyon</ref>(z2,<sp/>zcut,<sp/>gamma,<sp/>&amp;<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z3<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>talus<sp/>=<sp/>2.f<sp/>/<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ir<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amplitude<sp/>=<sp/>0.2f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kw<sp/>=<sp/>16.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1af7709075260d830b45e0f2ea7ea64c94" kindref="member">hmap::recast_rocky_slopes</ref>(z3,<sp/>talus,<sp/>ir,<sp/>amplitude,<sp/>seed,<sp/>kw,<sp/>gamma);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z4<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z5<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>talus<sp/>=<sp/>1.f<sp/>/<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ir<sp/>=<sp/>32;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amplitude<sp/>=<sp/>0.05f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref><sp/>=<sp/>1.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a5bfddc2b02cae0d5ee107d35459d626f" kindref="member">hmap::recast_cliff</ref>(z4,<sp/>talus,<sp/>ir,<sp/>amplitude,<sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z4);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref><sp/>=<sp/>0.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1acf26969b97f38bf692f538efb12ac2c2" kindref="member">hmap::recast_cliff_directional</ref>(z5,<sp/>talus,<sp/>ir,<sp/>amplitude,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z6<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z7<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0.01f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ad2f0b00fee1cff1a2df0049176548ea5" kindref="member">hmap::recast_billow</ref>(z6,<sp/>0.5f,<sp/>k);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z6);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1abf3c7485f0f6f9e56b2cec58e085dc23" kindref="member">hmap::recast_sag</ref>(z7,<sp/>0.5f,<sp/>k);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z7);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z8<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z8.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;out0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>CV_16U);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1adcf3232842a5d6a3c0d9a8bc9b5da61e" kindref="member">hmap::recast_escarpment</ref>(z8,<sp/>16,<sp/>0.1f,<sp/>1.f,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z8.to_png(</highlight><highlight class="stringliteral">&quot;out1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>CV_16U);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_recast.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1,<sp/>z2,<sp/>z3,<sp/>z4,<sp/>z5,<sp/>z6,<sp/>z7,<sp/>z8},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_recast.png"></image>
 This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/recast.cpp" line="146" column="6" bodyfile="HighMap/src/filters/recast.cpp" bodystart="146" bodyend="187" declfile="HighMap/include/highmap/filters.hpp" declline="1239" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a93ccb4563e958441cc0d2f917633059e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::recast_cliff_directional</definition>
        <argsstring>(Array &amp;array, float talus, int ir, float amplitude, float angle, const Array *p_mask, float gain=2.f)</argsstring>
        <name>recast_cliff_directional</name>
        <qualifiedname>hmap::recast_cliff_directional</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amplitude</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>float</type>
          <declname>gain</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/recast.cpp" line="189" column="6" bodyfile="HighMap/src/filters/recast.cpp" bodystart="189" bodyend="205" declfile="HighMap/include/highmap/filters.hpp" declline="1246" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1af30ba2c296c8937bb78279c03e0388bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::recast_cracks</definition>
        <argsstring>(Array &amp;array, float cut_min=0.05f, float cut_max=0.5f, float k_smoothing=0.01f, float vmin=0.f, float vmax=-1.f)</argsstring>
        <name>recast_cracks</name>
        <qualifiedname>hmap::recast_cracks</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>cut_min</declname>
          <defval>0.05<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>cut_max</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>k_smoothing</declname>
          <defval>0.01<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>vmin</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>vmax</declname>
          <defval>-1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/recast.cpp" line="207" column="6" bodyfile="HighMap/src/filters/recast.cpp" bodystart="207" bodyend="229" declfile="HighMap/include/highmap/filters.hpp" declline="1254" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1adcf3232842a5d6a3c0d9a8bc9b5da61e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::recast_escarpment</definition>
        <argsstring>(Array &amp;array, int ir=16, float ratio=0.1f, float scale=1.f, bool reverse=false, bool transpose_effect=false, float global_scaling=0.f)</argsstring>
        <name>recast_escarpment</name>
        <qualifiedname>hmap::recast_escarpment</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
          <defval>16</defval>
        </param>
        <param>
          <type>float</type>
          <declname>ratio</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>scale</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>reverse</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>transpose_effect</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>float</type>
          <declname>global_scaling</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Applies an escarpment effect to the given 2D array, modifying its values based on cumulative displacement with optional directional and transpositional transformations. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates cumulative displacement along the x-axis based on relative elevation differences between adjacent cells. The displacement is scaled and optionally reversed, then used to apply a warping effect to the array, simulating an escarpment feature. An optional global scaling factor can further adjust the displacement effect intensity.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the 2D array where the escarpment effect will be applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Radius for the smoothing kernel used on the displacement, controlling the smoothness of the effect. Larger values result in smoother transitions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>The ratio influencing displacement; values &gt; 1.0 increase displacement sensitivity to height differences. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>The scaling factor for the cumulative displacement, affecting the intensity of the effect. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reverse</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, reverses the direction of the displacement effect. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transpose_effect</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, transposes the array before and after applying the effect. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>global_scaling</parametername>
</parameternamelist>
<parameterdescription>
<para>An additional scaling factor for the displacement; if set to 0, a default value is computed based on the array&apos;s range and size. Higher values increase the overall effect.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_recast.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>shape<sp/>=<sp/>{512,<sp/>512};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ir<sp/>=<sp/>16;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>2.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac2a2b604d4c167dcaddfbd1c66df3e4c" kindref="member">hmap::recast_peak</ref>(z1,<sp/>ir,<sp/>gamma);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref><sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>,<sp/>-0.1f,<sp/>0.1f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>zcut<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>4.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ae475b4f5defd09d3e566f44dd2c21575" kindref="member">hmap::recast_canyon</ref>(z2,<sp/>zcut,<sp/>gamma,<sp/>&amp;<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z3<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>talus<sp/>=<sp/>2.f<sp/>/<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ir<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amplitude<sp/>=<sp/>0.2f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kw<sp/>=<sp/>16.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1af7709075260d830b45e0f2ea7ea64c94" kindref="member">hmap::recast_rocky_slopes</ref>(z3,<sp/>talus,<sp/>ir,<sp/>amplitude,<sp/>seed,<sp/>kw,<sp/>gamma);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z4<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z5<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>talus<sp/>=<sp/>1.f<sp/>/<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ir<sp/>=<sp/>32;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amplitude<sp/>=<sp/>0.05f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref><sp/>=<sp/>1.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a5bfddc2b02cae0d5ee107d35459d626f" kindref="member">hmap::recast_cliff</ref>(z4,<sp/>talus,<sp/>ir,<sp/>amplitude,<sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z4);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref><sp/>=<sp/>0.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1acf26969b97f38bf692f538efb12ac2c2" kindref="member">hmap::recast_cliff_directional</ref>(z5,<sp/>talus,<sp/>ir,<sp/>amplitude,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z6<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z7<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0.01f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ad2f0b00fee1cff1a2df0049176548ea5" kindref="member">hmap::recast_billow</ref>(z6,<sp/>0.5f,<sp/>k);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z6);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1abf3c7485f0f6f9e56b2cec58e085dc23" kindref="member">hmap::recast_sag</ref>(z7,<sp/>0.5f,<sp/>k);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z7);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z8<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z8.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;out0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>CV_16U);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1adcf3232842a5d6a3c0d9a8bc9b5da61e" kindref="member">hmap::recast_escarpment</ref>(z8,<sp/>16,<sp/>0.1f,<sp/>1.f,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z8.to_png(</highlight><highlight class="stringliteral">&quot;out1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>CV_16U);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_recast.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1,<sp/>z2,<sp/>z3,<sp/>z4,<sp/>z5,<sp/>z6,<sp/>z7,<sp/>z8},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_recast.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/recast.cpp" line="231" column="6" bodyfile="HighMap/src/filters/recast.cpp" bodystart="231" bodyend="275" declfile="HighMap/include/highmap/filters.hpp" declline="1297" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a6fa21b8b4797ae017025d891f9704848" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::recast_escarpment</definition>
        <argsstring>(Array &amp;array, const Array *p_mask, int ir=16, float ratio=0.1f, float scale=1.f, bool reverse=false, bool transpose_effect=false, float global_scaling=0.f)</argsstring>
        <name>recast_escarpment</name>
        <qualifiedname>hmap::recast_escarpment</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
          <defval>16</defval>
        </param>
        <param>
          <type>float</type>
          <declname>ratio</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>scale</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>reverse</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>transpose_effect</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>float</type>
          <declname>global_scaling</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Applies an escarpment effect to the given 2D array, with an optional mask to blend the effect. </para>
        </briefdescription>
        <detaileddescription>
<para>This overload allows for a blending mask that controls the intensity of the escarpment effect at each point in the array. The mask values range between 0 and 1, where values closer to 1 fully apply the effect, and values closer to 0 reduce it. An optional global scaling factor can further adjust the displacement effect intensity.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the 2D array where the escarpment effect will be applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an optional mask array for blending the effect, where values range from 0 to 1. A nullptr applies the effect fully without blending. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Radius for the smoothing kernel used on the displacement, controlling the smoothness of the effect. Larger values result in smoother transitions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>The ratio influencing displacement; values &gt; 1.0 increase displacement sensitivity to height differences. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>The scaling factor for the cumulative displacement, affecting the intensity of the effect. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reverse</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, reverses the direction of the displacement effect. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transpose_effect</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, transposes the array before and after applying the effect. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>global_scaling</parametername>
</parameternamelist>
<parameterdescription>
<para>An additional scaling factor for the displacement; if set to 0, a default value is computed based on the array&apos;s range and size. Higher values increase the overall effect.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_recast.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>shape<sp/>=<sp/>{512,<sp/>512};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ir<sp/>=<sp/>16;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>2.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac2a2b604d4c167dcaddfbd1c66df3e4c" kindref="member">hmap::recast_peak</ref>(z1,<sp/>ir,<sp/>gamma);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref><sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>,<sp/>-0.1f,<sp/>0.1f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>zcut<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>4.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ae475b4f5defd09d3e566f44dd2c21575" kindref="member">hmap::recast_canyon</ref>(z2,<sp/>zcut,<sp/>gamma,<sp/>&amp;<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z3<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>talus<sp/>=<sp/>2.f<sp/>/<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ir<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amplitude<sp/>=<sp/>0.2f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kw<sp/>=<sp/>16.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1af7709075260d830b45e0f2ea7ea64c94" kindref="member">hmap::recast_rocky_slopes</ref>(z3,<sp/>talus,<sp/>ir,<sp/>amplitude,<sp/>seed,<sp/>kw,<sp/>gamma);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z4<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z5<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>talus<sp/>=<sp/>1.f<sp/>/<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ir<sp/>=<sp/>32;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amplitude<sp/>=<sp/>0.05f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref><sp/>=<sp/>1.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a5bfddc2b02cae0d5ee107d35459d626f" kindref="member">hmap::recast_cliff</ref>(z4,<sp/>talus,<sp/>ir,<sp/>amplitude,<sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z4);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref><sp/>=<sp/>0.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1acf26969b97f38bf692f538efb12ac2c2" kindref="member">hmap::recast_cliff_directional</ref>(z5,<sp/>talus,<sp/>ir,<sp/>amplitude,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z6<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z7<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0.01f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ad2f0b00fee1cff1a2df0049176548ea5" kindref="member">hmap::recast_billow</ref>(z6,<sp/>0.5f,<sp/>k);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z6);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1abf3c7485f0f6f9e56b2cec58e085dc23" kindref="member">hmap::recast_sag</ref>(z7,<sp/>0.5f,<sp/>k);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z7);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z8<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z8.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;out0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>CV_16U);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1adcf3232842a5d6a3c0d9a8bc9b5da61e" kindref="member">hmap::recast_escarpment</ref>(z8,<sp/>16,<sp/>0.1f,<sp/>1.f,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z8.to_png(</highlight><highlight class="stringliteral">&quot;out1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>CV_16U);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_recast.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1,<sp/>z2,<sp/>z3,<sp/>z4,<sp/>z5,<sp/>z6,<sp/>z7,<sp/>z8},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_recast.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/recast.cpp" line="277" column="6" bodyfile="HighMap/src/filters/recast.cpp" bodystart="277" bodyend="306" declfile="HighMap/include/highmap/filters.hpp" declline="1343" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ac2a2b604d4c167dcaddfbd1c66df3e4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::recast_peak</definition>
        <argsstring>(Array &amp;array, int ir, float gamma=2.f, float k=0.1f)</argsstring>
        <name>recast_peak</name>
        <qualifiedname>hmap::recast_peak</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>float</type>
          <declname>gamma</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>k</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Transform heightmap to give a &quot;peak&quot; like appearance. </para>
        </briefdescription>
        <detaileddescription>
<para>This function modifies the heightmap to create a &quot;peak&quot; effect, where the elevations are adjusted to emphasize peak-like features. The transformation is applied based on a filter radius (<computeroutput>ir</computeroutput>) and involves gamma correction and smoothing parameters. The effect can be selectively applied using a filter mask.</para>
<para><simplesect kind="warning"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> values are expected to be in the range [0, 1].</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap to be transformed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Filter radius used to smooth the heightmap before applying the peak effect. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gamma</parametername>
</parameternamelist>
<parameterdescription>
<para>Gamma factor (&gt; 0) that adjusts the intensity of the peak effect. A higher value increases the effect. The default value is 2.0. For details on gamma correction, see <computeroutput><ref refid="namespacehmap_1aba3674787d520af15267ee7d1e46d220" kindref="member">gamma_correction</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>Smoothing parameter (&gt; 0) that controls the degree of smoothing applied during the transformation. Higher values result in more smoothing. The default value is 0.1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, with values expected in the range [0, 1]. The mask specifies which parts of the heightmap are affected by the peak transformation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_recast.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>shape<sp/>=<sp/>{512,<sp/>512};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ir<sp/>=<sp/>16;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>2.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac2a2b604d4c167dcaddfbd1c66df3e4c" kindref="member">hmap::recast_peak</ref>(z1,<sp/>ir,<sp/>gamma);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref><sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>,<sp/>-0.1f,<sp/>0.1f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>zcut<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>4.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ae475b4f5defd09d3e566f44dd2c21575" kindref="member">hmap::recast_canyon</ref>(z2,<sp/>zcut,<sp/>gamma,<sp/>&amp;<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z3<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>talus<sp/>=<sp/>2.f<sp/>/<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ir<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amplitude<sp/>=<sp/>0.2f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kw<sp/>=<sp/>16.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1af7709075260d830b45e0f2ea7ea64c94" kindref="member">hmap::recast_rocky_slopes</ref>(z3,<sp/>talus,<sp/>ir,<sp/>amplitude,<sp/>seed,<sp/>kw,<sp/>gamma);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z4<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z5<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>talus<sp/>=<sp/>1.f<sp/>/<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ir<sp/>=<sp/>32;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amplitude<sp/>=<sp/>0.05f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref><sp/>=<sp/>1.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a5bfddc2b02cae0d5ee107d35459d626f" kindref="member">hmap::recast_cliff</ref>(z4,<sp/>talus,<sp/>ir,<sp/>amplitude,<sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z4);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref><sp/>=<sp/>0.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1acf26969b97f38bf692f538efb12ac2c2" kindref="member">hmap::recast_cliff_directional</ref>(z5,<sp/>talus,<sp/>ir,<sp/>amplitude,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z6<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z7<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0.01f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ad2f0b00fee1cff1a2df0049176548ea5" kindref="member">hmap::recast_billow</ref>(z6,<sp/>0.5f,<sp/>k);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z6);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1abf3c7485f0f6f9e56b2cec58e085dc23" kindref="member">hmap::recast_sag</ref>(z7,<sp/>0.5f,<sp/>k);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z7);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z8<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z8.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;out0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>CV_16U);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1adcf3232842a5d6a3c0d9a8bc9b5da61e" kindref="member">hmap::recast_escarpment</ref>(z8,<sp/>16,<sp/>0.1f,<sp/>1.f,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z8.to_png(</highlight><highlight class="stringliteral">&quot;out1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>CV_16U);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_recast.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1,<sp/>z2,<sp/>z3,<sp/>z4,<sp/>z5,<sp/>z6,<sp/>z7,<sp/>z8},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_recast.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/recast.cpp" line="308" column="6" bodyfile="HighMap/src/filters/recast.cpp" bodystart="308" bodyend="315" declfile="HighMap/include/highmap/filters.hpp" declline="1383" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a4ca9ddaa140548937a12022e79823401" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::recast_peak</definition>
        <argsstring>(Array &amp;array, int ir, const Array *p_mask, float gamma=2.f, float k=0.1f)</argsstring>
        <name>recast_peak</name>
        <qualifiedname>hmap::recast_peak</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>float</type>
          <declname>gamma</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>k</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/recast.cpp" line="317" column="6" bodyfile="HighMap/src/filters/recast.cpp" bodystart="317" bodyend="331" declfile="HighMap/include/highmap/filters.hpp" declline="1385" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1af7709075260d830b45e0f2ea7ea64c94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::recast_rocky_slopes</definition>
        <argsstring>(Array &amp;array, float talus, int ir, float amplitude, uint seed, float kw, float gamma=0.5f, const Array *p_noise=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>recast_rocky_slopes</name>
        <qualifiedname>hmap::recast_rocky_slopes</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amplitude</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>float</type>
          <declname>kw</declname>
        </param>
        <param>
          <type>float</type>
          <declname>gamma</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Transform heightmap by adding &quot;rock-like&quot; features at higher slopes. </para>
        </briefdescription>
        <detaileddescription>
<para>This function modifies the heightmap to introduce rock-like features, particularly at locations with higher slopes. The transformation is controlled by parameters defining talus limit, filter radius, amplitude, and noise characteristics. The rock features are generated using a specified random seed and can be customized with optional noise and gamma correction. A filter mask can be applied to control which parts of the heightmap are affected.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap to be transformed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus</parametername>
</parameternamelist>
<parameterdescription>
<para>Talus limit that determines the threshold above which rock-like features are introduced based on slope steepness. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Filter radius used to smooth the heightmap and define the area of influence for adding rock features. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amplitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Amplitude of the rock features. This value controls the intensity of the rock-like appearance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random number seed used to generate noise patterns for the rock features. Different seeds produce different rock patterns. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>Noise wavenumber with respect to a unit domain, influencing the frequency of rock features. Higher values result in more detailed rock textures. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gamma</parametername>
</parameternamelist>
<parameterdescription>
<para>Gamma correction coefficient applied to the rock features. This parameter adjusts the contrast of the rock features. The default value is 0.5. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional reference to an input noise array used for generating rock features. If provided, it overrides the default noise generator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, with values expected in the range [0, 1]. The mask specifies which parts of the heightmap are affected by the rock feature transformation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Bounding box defining the region of interest within the heightmap. This parameter specifies the coordinates of the bounding box in the format {xmin, xmax, ymin, ymax}. The default bounding box covers the entire domain.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_recast.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>shape<sp/>=<sp/>{512,<sp/>512};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ir<sp/>=<sp/>16;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>2.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac2a2b604d4c167dcaddfbd1c66df3e4c" kindref="member">hmap::recast_peak</ref>(z1,<sp/>ir,<sp/>gamma);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref><sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>,<sp/>-0.1f,<sp/>0.1f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>zcut<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>4.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ae475b4f5defd09d3e566f44dd2c21575" kindref="member">hmap::recast_canyon</ref>(z2,<sp/>zcut,<sp/>gamma,<sp/>&amp;<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z3<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>talus<sp/>=<sp/>2.f<sp/>/<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ir<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amplitude<sp/>=<sp/>0.2f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kw<sp/>=<sp/>16.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1af7709075260d830b45e0f2ea7ea64c94" kindref="member">hmap::recast_rocky_slopes</ref>(z3,<sp/>talus,<sp/>ir,<sp/>amplitude,<sp/>seed,<sp/>kw,<sp/>gamma);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z4<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z5<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>talus<sp/>=<sp/>1.f<sp/>/<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ir<sp/>=<sp/>32;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amplitude<sp/>=<sp/>0.05f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref><sp/>=<sp/>1.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a5bfddc2b02cae0d5ee107d35459d626f" kindref="member">hmap::recast_cliff</ref>(z4,<sp/>talus,<sp/>ir,<sp/>amplitude,<sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z4);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref><sp/>=<sp/>0.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1acf26969b97f38bf692f538efb12ac2c2" kindref="member">hmap::recast_cliff_directional</ref>(z5,<sp/>talus,<sp/>ir,<sp/>amplitude,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z6<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z7<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0.01f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ad2f0b00fee1cff1a2df0049176548ea5" kindref="member">hmap::recast_billow</ref>(z6,<sp/>0.5f,<sp/>k);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z6);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1abf3c7485f0f6f9e56b2cec58e085dc23" kindref="member">hmap::recast_sag</ref>(z7,<sp/>0.5f,<sp/>k);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z7);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z8<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z8.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;out0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>CV_16U);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1adcf3232842a5d6a3c0d9a8bc9b5da61e" kindref="member">hmap::recast_escarpment</ref>(z8,<sp/>16,<sp/>0.1f,<sp/>1.f,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z8.to_png(</highlight><highlight class="stringliteral">&quot;out1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>CV_16U);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_recast.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1,<sp/>z2,<sp/>z3,<sp/>z4,<sp/>z5,<sp/>z6,<sp/>z7,<sp/>z8},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_recast.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/recast.cpp" line="333" column="6" bodyfile="HighMap/src/filters/recast.cpp" bodystart="333" bodyend="371" declfile="HighMap/include/highmap/filters.hpp" declline="1435" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a05bb0469c9a049b3e3e0753faa9073ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::recast_rocky_slopes</definition>
        <argsstring>(Array &amp;array, float talus, int ir, float amplitude, uint seed, float kw, const Array *p_mask, float gamma=0.5f, const Array *p_noise=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>recast_rocky_slopes</name>
        <qualifiedname>hmap::recast_rocky_slopes</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amplitude</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>float</type>
          <declname>kw</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>float</type>
          <declname>gamma</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/recast.cpp" line="373" column="6" bodyfile="HighMap/src/filters/recast.cpp" bodystart="373" bodyend="410" declfile="HighMap/include/highmap/filters.hpp" declline="1445" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1abf3c7485f0f6f9e56b2cec58e085dc23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::recast_sag</definition>
        <argsstring>(Array &amp;array, float vref, float k)</argsstring>
        <name>recast_sag</name>
        <qualifiedname>hmap::recast_sag</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vref</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Transform heightmap to give a &quot;cliff&quot; like appearance. </para>
        </briefdescription>
        <detaileddescription>
<para>This function modifies the heightmap to create a &quot;cliff&quot; effect by folding the elevations around a reference height (<computeroutput>vref</computeroutput>). The transformation is influenced by a smoothing coefficient (<computeroutput>k</computeroutput>) and can be selectively applied using a filter mask.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap to be transformed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vref</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference elevation where the heightmap is folded to create the cliff-like appearance. Elevations near this value will be prominently altered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>Smoothing coefficient that controls the degree of smoothing applied during the transformation. A higher value results in smoother cliffs. The default value is not specified in this function; it must be provided by the user. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, with values expected in the range [0, 1]. The mask specifies which parts of the heightmap are affected by the cliff transformation. If not provided, the transformation is applied to the entire heightmap.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_recast.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>shape<sp/>=<sp/>{512,<sp/>512};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ir<sp/>=<sp/>16;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>2.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac2a2b604d4c167dcaddfbd1c66df3e4c" kindref="member">hmap::recast_peak</ref>(z1,<sp/>ir,<sp/>gamma);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref><sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>,<sp/>-0.1f,<sp/>0.1f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>zcut<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>4.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ae475b4f5defd09d3e566f44dd2c21575" kindref="member">hmap::recast_canyon</ref>(z2,<sp/>zcut,<sp/>gamma,<sp/>&amp;<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z3<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>talus<sp/>=<sp/>2.f<sp/>/<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ir<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amplitude<sp/>=<sp/>0.2f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kw<sp/>=<sp/>16.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1af7709075260d830b45e0f2ea7ea64c94" kindref="member">hmap::recast_rocky_slopes</ref>(z3,<sp/>talus,<sp/>ir,<sp/>amplitude,<sp/>seed,<sp/>kw,<sp/>gamma);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z4<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z5<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>talus<sp/>=<sp/>1.f<sp/>/<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ir<sp/>=<sp/>32;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amplitude<sp/>=<sp/>0.05f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref><sp/>=<sp/>1.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a5bfddc2b02cae0d5ee107d35459d626f" kindref="member">hmap::recast_cliff</ref>(z4,<sp/>talus,<sp/>ir,<sp/>amplitude,<sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z4);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref><sp/>=<sp/>0.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1acf26969b97f38bf692f538efb12ac2c2" kindref="member">hmap::recast_cliff_directional</ref>(z5,<sp/>talus,<sp/>ir,<sp/>amplitude,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z6<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z7<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0.01f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ad2f0b00fee1cff1a2df0049176548ea5" kindref="member">hmap::recast_billow</ref>(z6,<sp/>0.5f,<sp/>k);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z6);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1abf3c7485f0f6f9e56b2cec58e085dc23" kindref="member">hmap::recast_sag</ref>(z7,<sp/>0.5f,<sp/>k);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z7);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z8<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z8.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;out0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>CV_16U);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1adcf3232842a5d6a3c0d9a8bc9b5da61e" kindref="member">hmap::recast_escarpment</ref>(z8,<sp/>16,<sp/>0.1f,<sp/>1.f,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z8.to_png(</highlight><highlight class="stringliteral">&quot;out1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>CV_16U);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_recast.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1,<sp/>z2,<sp/>z3,<sp/>z4,<sp/>z5,<sp/>z6,<sp/>z7,<sp/>z8},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_recast.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/recast.cpp" line="412" column="6" bodyfile="HighMap/src/filters/recast.cpp" bodystart="412" bodyend="415" declfile="HighMap/include/highmap/filters.hpp" declline="1484" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a86963a517ac96c442272bdf6fd967f60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::recast_sag</definition>
        <argsstring>(Array &amp;array, float vref, float k, const Array *p_mask)</argsstring>
        <name>recast_sag</name>
        <qualifiedname>hmap::recast_sag</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vref</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/recast.cpp" line="417" column="6" bodyfile="HighMap/src/filters/recast.cpp" bodystart="417" bodyend="427" declfile="HighMap/include/highmap/filters.hpp" declline="1486" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a9cb00fb8280178099a8d430f761c62bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::recurve</definition>
        <argsstring>(Array &amp;array, const std::vector&lt; float &gt; &amp;t, const std::vector&lt; float &gt; &amp;v)</argsstring>
        <name>recurve</name>
        <qualifiedname>hmap::recurve</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Apply a curve adjustment filter to the array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies a curve adjustment to the heightmap by mapping input values to output values according to a given correction curve. The curve is monotonically interpolated, and any values outside the defined input range are clipped. The filter can be selectively applied using a mask.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap to be adjusted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of input values for the correction curve. These values define the x-coordinates (input values) of the curve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of output values for the correction curve. These values define the y-coordinates (output values) of the curve corresponding to the input values in <computeroutput>t</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, with values expected in the range [0, 1]. The mask specifies which parts of the heightmap are affected by the curve adjustment. If not provided, the curve adjustment is applied to the entire heightmap.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_recurve.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z0<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>curve<sp/>definition<sp/>(will<sp/>be<sp/>monotically<sp/>interpolated<sp/>and<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>outside<sp/>the<sp/>input<sp/>range<sp/>avec<sp/>clipped)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>t<sp/>=<sp/>{0.f,<sp/>0.5f,<sp/>1.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>v<sp/>=<sp/>{0.f,<sp/>0.25f,<sp/>1.f};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a9cb00fb8280178099a8d430f761c62bd" kindref="member">hmap::recurve</ref>(z,<sp/>t,<sp/>v);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_recurve.png&quot;</highlight><highlight class="normal">,<sp/>{z0,<sp/>z},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_recurve.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/recurve.cpp" line="20" column="6" bodyfile="HighMap/src/filters/recurve.cpp" bodystart="20" bodyend="32" declfile="HighMap/include/highmap/filters.hpp" declline="1516" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a9dc604a3fcfa918857f3488977d2a45f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::recurve</definition>
        <argsstring>(Array &amp;array, const std::vector&lt; float &gt; &amp;t, const std::vector&lt; float &gt; &amp;v, const Array *p_mask)</argsstring>
        <name>recurve</name>
        <qualifiedname>hmap::recurve</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/recurve.cpp" line="34" column="6" bodyfile="HighMap/src/filters/recurve.cpp" bodystart="34" bodyend="49" declfile="HighMap/include/highmap/filters.hpp" declline="1520" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1af9e3033eb08345c1e3c46bde5dcd29a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::recurve_bexp</definition>
        <argsstring>(Array &amp;array, float tau=0.5f)</argsstring>
        <name>recurve_bexp</name>
        <qualifiedname>hmap::recurve_bexp</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>tau</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Apply a curve adjustment filter using a &quot;bumpy exponential-shape&quot; curve. </para>
        </briefdescription>
        <detaileddescription>
<para>This function adjusts the heightmap using a &quot;bumpy exponential-shape&quot; curve, where the curve has an exponential decay defined by the parameter <computeroutput>tau</computeroutput>. The curve transformation is applied to the entire heightmap or selectively using a filter mask.</para>
<para><simplesect kind="warning"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> values are expected to be in the range [0, 1].</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap to be adjusted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, with values expected in the range [0, 1]. The mask specifies which parts of the heightmap are affected by the curve adjustment. If not provided, the adjustment is applied to the entire heightmap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tau</parametername>
</parameternamelist>
<parameterdescription>
<para>Exponential decay parameter that defines the shape of the &quot;bumpy&quot; curve. Higher values of <computeroutput>tau</computeroutput> result in a sharper curve. The default value is 0.5.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_recurve_xxx.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zs<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zb<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ze<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zk<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zr<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1aa1f23e7ca8c6eccc62ff3f9e73bb3884" kindref="member">hmap::recurve_s</ref>(zs);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;gentle<sp/>S&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1af9e3033eb08345c1e3c46bde5dcd29a1" kindref="member">hmap::recurve_bexp</ref>(zb,<sp/>0.5f);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bumpy<sp/>exponential</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a69137ab0da4a3b15979b7ede32dfab19" kindref="member">hmap::recurve_exp</ref>(ze,<sp/>0.5f);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sharp<sp/>exponential</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1af080317ac939503049515f0a792c84b3" kindref="member">hmap::recurve_kura</ref>(zk,<sp/>2.f,<sp/>0.5f);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Kumaraswamy</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1affcc500f17897f37cdb0717bc579d2b4" kindref="member">hmap::recurve_smoothstep_rational</ref>(zr,<sp/>0.5f);<sp/></highlight><highlight class="comment">//<sp/>general<sp/>smoothstep</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_recurve_xxx.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zs,<sp/>zb,<sp/>ze,<sp/>zk,<sp/>zr},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_recurve_xxx.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/recurve.cpp" line="51" column="6" bodyfile="HighMap/src/filters/recurve.cpp" bodystart="51" bodyend="60" declfile="HighMap/include/highmap/filters.hpp" declline="1552" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a2483b01656d8822247f2e01431664879" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::recurve_bexp</definition>
        <argsstring>(Array &amp;array, const Array *p_mask, float tau=0.5f)</argsstring>
        <name>recurve_bexp</name>
        <qualifiedname>hmap::recurve_bexp</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>float</type>
          <declname>tau</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/filters.hpp" line="1554" column="6" declfile="HighMap/include/highmap/filters.hpp" declline="1554" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a69137ab0da4a3b15979b7ede32dfab19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::recurve_exp</definition>
        <argsstring>(Array &amp;array, float tau=0.5f)</argsstring>
        <name>recurve_exp</name>
        <qualifiedname>hmap::recurve_exp</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>tau</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Apply a curve adjustment filter using a &quot;sharp exponential-shape&quot; curve. </para>
        </briefdescription>
        <detaileddescription>
<para>This function adjusts the heightmap using a &quot;sharp exponential-shape&quot; curve, where the curve has an exponential decay defined by the parameter <computeroutput>tau</computeroutput>. The curve transformation can be applied to the entire heightmap or selectively using a filter mask.</para>
<para><simplesect kind="warning"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> values are expected to be in the range [0, 1].</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap to be adjusted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, with values expected in the range [0, 1]. The mask specifies which parts of the heightmap are affected by the curve adjustment. If not provided, the adjustment is applied to the entire heightmap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tau</parametername>
</parameternamelist>
<parameterdescription>
<para>Exponential decay parameter that defines the shape of the &quot;sharp&quot; curve. Higher values of <computeroutput>tau</computeroutput> result in a steeper curve. The default value is 0.5.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_recurve_xxx.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zs<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zb<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ze<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zk<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zr<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1aa1f23e7ca8c6eccc62ff3f9e73bb3884" kindref="member">hmap::recurve_s</ref>(zs);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;gentle<sp/>S&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1af9e3033eb08345c1e3c46bde5dcd29a1" kindref="member">hmap::recurve_bexp</ref>(zb,<sp/>0.5f);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bumpy<sp/>exponential</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a69137ab0da4a3b15979b7ede32dfab19" kindref="member">hmap::recurve_exp</ref>(ze,<sp/>0.5f);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sharp<sp/>exponential</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1af080317ac939503049515f0a792c84b3" kindref="member">hmap::recurve_kura</ref>(zk,<sp/>2.f,<sp/>0.5f);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Kumaraswamy</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1affcc500f17897f37cdb0717bc579d2b4" kindref="member">hmap::recurve_smoothstep_rational</ref>(zr,<sp/>0.5f);<sp/></highlight><highlight class="comment">//<sp/>general<sp/>smoothstep</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_recurve_xxx.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zs,<sp/>zb,<sp/>ze,<sp/>zk,<sp/>zr},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_recurve_xxx.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/recurve.cpp" line="76" column="6" bodyfile="HighMap/src/filters/recurve.cpp" bodystart="76" bodyend="85" declfile="HighMap/include/highmap/filters.hpp" declline="1585" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a4aad0dde957ecf5887323f3d3a4f4f0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::recurve_exp</definition>
        <argsstring>(Array &amp;array, const Array *p_mask, float tau=0.5f)</argsstring>
        <name>recurve_exp</name>
        <qualifiedname>hmap::recurve_exp</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>float</type>
          <declname>tau</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/filters.hpp" line="1587" column="6" declfile="HighMap/include/highmap/filters.hpp" declline="1587" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1af080317ac939503049515f0a792c84b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::recurve_kura</definition>
        <argsstring>(Array &amp;array, float a, float b)</argsstring>
        <name>recurve_kura</name>
        <qualifiedname>hmap::recurve_kura</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Apply a curve adjustment filter using Kumaraswamy&apos;s cumulative distribution function (CDF). </para>
        </briefdescription>
        <detaileddescription>
<para>This function transforms the heightmap using Kumaraswamy&apos;s CDF, which is defined by two shape parameters, <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput>. The transformation applies a curve adjustment that can shape the data closer to 0 or 1 depending on the values of <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput>. The adjustment can be applied to the entire heightmap or selectively using a filter mask.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap to be adjusted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter &apos;a&apos; of Kumaraswamy&apos;s CDF, which drives the curve shape towards 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter &apos;b&apos; of Kumaraswamy&apos;s CDF, which drives the curve shape towards 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, with values expected in the range [0, 1]. If provided, the adjustment is applied according to this mask. If not provided, the entire heightmap is adjusted.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_recurve_xxx.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zs<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zb<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ze<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zk<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zr<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1aa1f23e7ca8c6eccc62ff3f9e73bb3884" kindref="member">hmap::recurve_s</ref>(zs);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;gentle<sp/>S&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1af9e3033eb08345c1e3c46bde5dcd29a1" kindref="member">hmap::recurve_bexp</ref>(zb,<sp/>0.5f);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bumpy<sp/>exponential</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a69137ab0da4a3b15979b7ede32dfab19" kindref="member">hmap::recurve_exp</ref>(ze,<sp/>0.5f);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sharp<sp/>exponential</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1af080317ac939503049515f0a792c84b3" kindref="member">hmap::recurve_kura</ref>(zk,<sp/>2.f,<sp/>0.5f);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Kumaraswamy</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1affcc500f17897f37cdb0717bc579d2b4" kindref="member">hmap::recurve_smoothstep_rational</ref>(zr,<sp/>0.5f);<sp/></highlight><highlight class="comment">//<sp/>general<sp/>smoothstep</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_recurve_xxx.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zs,<sp/>zb,<sp/>ze,<sp/>zk,<sp/>zr},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_recurve_xxx.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/recurve.cpp" line="101" column="6" bodyfile="HighMap/src/filters/recurve.cpp" bodystart="101" bodyend="110" declfile="HighMap/include/highmap/filters.hpp" declline="1616" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a69b83eb8de92d70ffc446c6aebec9935" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::recurve_kura</definition>
        <argsstring>(Array &amp;array, float a, float b, const Array *p_mask)</argsstring>
        <name>recurve_kura</name>
        <qualifiedname>hmap::recurve_kura</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/recurve.cpp" line="112" column="6" bodyfile="HighMap/src/filters/recurve.cpp" bodystart="112" bodyend="124" declfile="HighMap/include/highmap/filters.hpp" declline="1618" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aa1f23e7ca8c6eccc62ff3f9e73bb3884" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::recurve_s</definition>
        <argsstring>(Array &amp;array)</argsstring>
        <name>recurve_s</name>
        <qualifiedname>hmap::recurve_s</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Apply a curve adjustment filter using a smooth &quot;S-shape&quot; curve. </para>
        </briefdescription>
        <detaileddescription>
<para>This function adjusts the heightmap using a smooth &quot;S-shape&quot; curve, which transforms the input values in a manner that creates an S-shaped distribution. The transformation can be applied to the entire heightmap or selectively using a filter mask.</para>
<para><simplesect kind="warning"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> values are expected to be in the range [0, 1].</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap to be adjusted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, with values expected in the range [0, 1]. If provided, the adjustment is applied according to this mask. If not provided, the entire heightmap is adjusted.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_recurve_xxx.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zs<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zb<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ze<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zk<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zr<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1aa1f23e7ca8c6eccc62ff3f9e73bb3884" kindref="member">hmap::recurve_s</ref>(zs);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;gentle<sp/>S&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1af9e3033eb08345c1e3c46bde5dcd29a1" kindref="member">hmap::recurve_bexp</ref>(zb,<sp/>0.5f);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bumpy<sp/>exponential</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a69137ab0da4a3b15979b7ede32dfab19" kindref="member">hmap::recurve_exp</ref>(ze,<sp/>0.5f);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sharp<sp/>exponential</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1af080317ac939503049515f0a792c84b3" kindref="member">hmap::recurve_kura</ref>(zk,<sp/>2.f,<sp/>0.5f);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Kumaraswamy</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1affcc500f17897f37cdb0717bc579d2b4" kindref="member">hmap::recurve_smoothstep_rational</ref>(zr,<sp/>0.5f);<sp/></highlight><highlight class="comment">//<sp/>general<sp/>smoothstep</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_recurve_xxx.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zs,<sp/>zb,<sp/>ze,<sp/>zk,<sp/>zr},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_recurve_xxx.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/recurve.cpp" line="126" column="6" bodyfile="HighMap/src/filters/recurve.cpp" bodystart="126" bodyend="134" declfile="HighMap/include/highmap/filters.hpp" declline="1644" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a516835426429688c59f7a02a8abbb174" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::recurve_s</definition>
        <argsstring>(Array &amp;array, const Array *p_mask)</argsstring>
        <name>recurve_s</name>
        <qualifiedname>hmap::recurve_s</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/recurve.cpp" line="136" column="6" bodyfile="HighMap/src/filters/recurve.cpp" bodystart="136" bodyend="148" declfile="HighMap/include/highmap/filters.hpp" declline="1646" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1affcc500f17897f37cdb0717bc579d2b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::recurve_smoothstep_rational</definition>
        <argsstring>(Array &amp;array, float n)</argsstring>
        <name>recurve_smoothstep_rational</name>
        <qualifiedname>hmap::recurve_smoothstep_rational</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Apply a curve adjustment filter using an nth-order smoothstep curve. </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies a curve adjustment to the heightmap using a smoothstep function of order <computeroutput>n</computeroutput>. The smoothstep function provides a smooth transition between 0 and 1, where <computeroutput>n</computeroutput> determines the smoothness of the transition. The adjustment can be applied to the entire heightmap or selectively using a filter mask.</para>
<para><simplesect kind="warning"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> values are expected to be in the range [0, 1].</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap to be adjusted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Smoothstep order, which determines the degree of smoothness for the transition. <computeroutput>n</computeroutput> should be a non-negative value (in [0, ∞[). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, with values expected in the range [0, 1]. If provided, the adjustment is applied according to this mask. If not provided, the entire heightmap is adjusted.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_recurve_xxx.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zs<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zb<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ze<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zk<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zr<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1aa1f23e7ca8c6eccc62ff3f9e73bb3884" kindref="member">hmap::recurve_s</ref>(zs);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;gentle<sp/>S&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1af9e3033eb08345c1e3c46bde5dcd29a1" kindref="member">hmap::recurve_bexp</ref>(zb,<sp/>0.5f);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bumpy<sp/>exponential</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a69137ab0da4a3b15979b7ede32dfab19" kindref="member">hmap::recurve_exp</ref>(ze,<sp/>0.5f);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sharp<sp/>exponential</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1af080317ac939503049515f0a792c84b3" kindref="member">hmap::recurve_kura</ref>(zk,<sp/>2.f,<sp/>0.5f);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Kumaraswamy</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1affcc500f17897f37cdb0717bc579d2b4" kindref="member">hmap::recurve_smoothstep_rational</ref>(zr,<sp/>0.5f);<sp/></highlight><highlight class="comment">//<sp/>general<sp/>smoothstep</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_recurve_xxx.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zs,<sp/>zb,<sp/>ze,<sp/>zk,<sp/>zr},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_recurve_xxx.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/recurve.cpp" line="150" column="6" bodyfile="HighMap/src/filters/recurve.cpp" bodystart="150" bodyend="162" declfile="HighMap/include/highmap/filters.hpp" declline="1672" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ab9926efb5c9c3859a0407b8fb9dbe4f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::recurve_smoothstep_rational</definition>
        <argsstring>(Array &amp;array, float n, const Array *p_mask)</argsstring>
        <name>recurve_smoothstep_rational</name>
        <qualifiedname>hmap::recurve_smoothstep_rational</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/recurve.cpp" line="164" column="6" bodyfile="HighMap/src/filters/recurve.cpp" bodystart="164" bodyend="176" declfile="HighMap/include/highmap/filters.hpp" declline="1674" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a2e4283dd5da8add89788c5023c73042c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::saturate</definition>
        <argsstring>(Array &amp;array, float vmin, float vmax, float from_min, float from_max, float k=0.f)</argsstring>
        <name>saturate</name>
        <qualifiedname>hmap::saturate</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vmin</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vmax</declname>
        </param>
        <param>
          <type>float</type>
          <declname>from_min</declname>
        </param>
        <param>
          <type>float</type>
          <declname>from_max</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Saturate the array values based on the input interval [vmin, vmax] (the output amplitude is not modified). </para>
        </briefdescription>
        <detaileddescription>
<para>This function adjusts the heightmap values to fit within the specified range [vmin, vmax]. Values outside the range [from_min, from_max] are clamped to [vmin, vmax]. The output amplitude of the heightmap remains unchanged.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap to be saturated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmin</parametername>
</parameternamelist>
<parameterdescription>
<para>The lower bound of the range to remap to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmax</parametername>
</parameternamelist>
<parameterdescription>
<para>The upper bound of the range to remap to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>from_min</parametername>
</parameternamelist>
<parameterdescription>
<para>The lower bound of the range to remap from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>from_max</parametername>
</parameternamelist>
<parameterdescription>
<para>The upper bound of the range to remap from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_saturate.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/>zs<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>vmin<sp/>=<sp/>-0.2f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>vmax<sp/>=<sp/>0.2f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0.1f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a2e4283dd5da8add89788c5023c73042c" kindref="member">hmap::saturate</ref>(zs,<sp/>vmin,<sp/>vmax,<sp/>k);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_saturate.png&quot;</highlight><highlight class="normal">,<sp/>{z,<sp/>zs},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a744ead0b170889e33126895264f1af2c" kindref="member">hmap::Cmap::MAGMA</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_saturate.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/recurve.cpp" line="178" column="6" bodyfile="HighMap/src/filters/recurve.cpp" bodystart="178" bodyend="191" declfile="HighMap/include/highmap/filters.hpp" declline="1698" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ad4c8b8b2361aa1fec5c984287a837461" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::saturate</definition>
        <argsstring>(Array &amp;array, float vmin, float vmax, float k=0.f)</argsstring>
        <name>saturate</name>
        <qualifiedname>hmap::saturate</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vmin</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vmax</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/recurve.cpp" line="193" column="6" bodyfile="HighMap/src/filters/recurve.cpp" bodystart="193" bodyend="204" declfile="HighMap/include/highmap/filters.hpp" declline="1705" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a738bcdb6b3493bf7f2cbfcfc03a00159" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::sharpen</definition>
        <argsstring>(Array &amp;array, float ratio=1.f)</argsstring>
        <name>sharpen</name>
        <qualifiedname>hmap::sharpen</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>ratio</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Apply a sharpening filter based on the Laplace operator. </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies a sharpening filter to the input array using the Laplace operator. The sharpening effect can be controlled by adjusting the <computeroutput>ratio</computeroutput> parameter, which determines the balance between the sharpened and non-sharpened output. A <computeroutput>ratio</computeroutput> of 1 applies full sharpening, while a <computeroutput>ratio</computeroutput> of 0 applies no sharpening.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap or image to be sharpened. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, expected in the range [0, 1]. If provided, sharpening is applied according to this mask. If not provided, the entire array is sharpened. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Ratio of the sharpening effect. A value of 1 applies full sharpening, while a value of 0 applies no sharpening. Default is 1.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_sharpen.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z0<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a738bcdb6b3493bf7f2cbfcfc03a00159" kindref="member">hmap::sharpen</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z0,<sp/>z).<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_sharpen.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_sharpen.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="813" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="813" bodyend="825" declfile="HighMap/include/highmap/filters.hpp" declline="1731" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aae4699340c68bc39efae13b0e81eea3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::sharpen</definition>
        <argsstring>(Array &amp;array, const Array *p_mask, float ratio=1.f)</argsstring>
        <name>sharpen</name>
        <qualifiedname>hmap::sharpen</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>float</type>
          <declname>ratio</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="827" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="827" bodyend="837" declfile="HighMap/include/highmap/filters.hpp" declline="1733" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a6190b6dde2fd6a6bf9e98eecec10e5f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::sharpen_cone</definition>
        <argsstring>(Array &amp;array, int ir, float intensity=0.5f)</argsstring>
        <name>sharpen_cone</name>
        <qualifiedname>hmap::sharpen_cone</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>float</type>
          <declname>intensity</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Apply a sharpening filter based on a smooth cone filter. </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies a sharpening filter to the input array using a smooth cone filter. The sharpening effect can be controlled by the <computeroutput>scale</computeroutput> parameter, and the size of the smoothing operation is determined by the <computeroutput>ir</computeroutput> parameter. The optional filter mask allows selective application of the sharpening effect.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap or image to be sharpened. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, expected in the range [0, 1]. If provided, sharpening is applied according to this mask. If not provided, the entire array is sharpened. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Filter radius, which determines the size of the smoothing operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Sharpening scale. Adjusts the intensity of the sharpening effect. Default is 0.5.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_sharpen_cone.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z0<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z1<sp/>=<sp/>z0;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ir<sp/>=<sp/>16;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a6190b6dde2fd6a6bf9e98eecec10e5f1" kindref="member">hmap::sharpen_cone</ref>(z1,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_sharpen_clone.png&quot;</highlight><highlight class="normal">,<sp/>{z0,<sp/>z1},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_sharpen_cone.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="839" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="839" bodyend="844" declfile="HighMap/include/highmap/filters.hpp" declline="1762" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a1857226aa04d2a7d7e3bfbb7af9a12c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::sharpen_cone</definition>
        <argsstring>(Array &amp;array, const Array *p_mask, int ir, float scale=0.5f)</argsstring>
        <name>sharpen_cone</name>
        <qualifiedname>hmap::sharpen_cone</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scale</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="846" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="846" bodyend="856" declfile="HighMap/include/highmap/filters.hpp" declline="1764" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1acde2b4e7bac6ebfe2c2dcfe3f0a369f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::shrink</definition>
        <argsstring>(Array &amp;array, int ir, int iterations=1)</argsstring>
        <name>shrink</name>
        <qualifiedname>hmap::shrink</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Apply shrinking, or &quot;deflating&quot;, to emphasize the ridges in the heightmap. </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies a shrinking filter to the input array, which accentuates the ridges by shrinking or deflating the terrain features. The filter radius <computeroutput>ir</computeroutput> determines the extent of the deflation. You can also apply the shrinking effect selectively using an optional filter mask. Additionally, an alternative method using a custom kernel is available.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap to be processed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Filter radius, which controls the extent of the shrinking effect. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, expected in the range [0, 1]. If provided, shrinking is applied according to this mask. If not provided, the entire array is processed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional custom kernel to be used for the shrinking operation. If provided, this kernel will override the default filter radius.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_expand.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a3517b483a468873cefa73f7773a893ec" kindref="member">infos</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ir<sp/>=<sp/>64;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1ae00605c7af4addcb5092c90260e2d61b" kindref="member">hmap::expand</ref>(z1,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1acde2b4e7bac6ebfe2c2dcfe3f0a369f1" kindref="member">hmap::shrink</ref>(z2,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z3<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>kernel<sp/>=<sp/><ref refid="namespacehmap_1a1d9165a0056e99a90b7734268f231901" kindref="member">hmap::lorentzian</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(2<sp/>*<sp/>ir<sp/>+<sp/>1,<sp/>2<sp/>*<sp/>ir<sp/>+<sp/>1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1acde2b4e7bac6ebfe2c2dcfe3f0a369f1" kindref="member">hmap::shrink</ref>(z3,<sp/>kernel);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_expand.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1,<sp/>z2,<sp/>z3},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_expand.png"></image>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="" kindref="compound">ex_expand</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="858" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="858" bodyend="864" declfile="HighMap/include/highmap/filters.hpp" declline="1797" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a64fd39fbc155858c359b051c1a2dff8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::shrink</definition>
        <argsstring>(Array &amp;array, int ir, const Array *p_mask, int iterations=1)</argsstring>
        <name>shrink</name>
        <qualifiedname>hmap::shrink</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="866" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="866" bodyend="876" declfile="HighMap/include/highmap/filters.hpp" declline="1798" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a8d49313d4730d6d6ccdbb4f033031f4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::shrink</definition>
        <argsstring>(Array &amp;array, const Array &amp;kernel, int iterations=1)</argsstring>
        <name>shrink</name>
        <qualifiedname>hmap::shrink</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="878" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="878" bodyend="884" declfile="HighMap/include/highmap/filters.hpp" declline="1802" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aae53d6bf5f363d9a108b55004e8fb68f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::shrink</definition>
        <argsstring>(Array &amp;array, const Array &amp;kernel, const Array *p_mask, int iterations=1)</argsstring>
        <name>shrink</name>
        <qualifiedname>hmap::shrink</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="886" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="886" bodyend="899" declfile="HighMap/include/highmap/filters.hpp" declline="1805" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a5cfbd685a2042726fdcd7faa460273a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::shrink_directional</definition>
        <argsstring>(Array &amp;array, int ir, float angle, float aspect_ratio, float anisotropy=1.f, const Array *p_mask=nullptr)</argsstring>
        <name>shrink_directional</name>
        <qualifiedname>hmap::shrink_directional</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>float</type>
          <declname>aspect_ratio</declname>
        </param>
        <param>
          <type>float</type>
          <declname>anisotropy</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Apply directional shrinking, or &quot;deflating&quot;, to emphasize the ridges in the terrain. </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies a directional shrinking filter to the input array, enhancing the ridges by shrinking or deflating the terrain features with respect to a specified direction. Parameters include filter radius <computeroutput>ir</computeroutput>, direction angle, aspect ratio, and anisotropy to control the shape and orientation of the filter. An optional filter mask can be used for selective application.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap to be processed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Filter radius, which controls the extent of the shrinking effect. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Angle (in degrees) of the directional filter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aspect_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Pulse aspect ratio, which influences the shape of the filter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>anisotropy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pulse width ratio between upstream and downstream sides. Default is 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, expected in the range [0, 1]. If provided, shrinking is applied according to this mask. If not provided, the entire array is processed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_expand_directional.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ir<sp/>=<sp/>64;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref><sp/>=<sp/>30.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>aspect_ratio<sp/>=<sp/>0.2f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1affdf6ff9564f31cb988131c2b2c4c280" kindref="member">hmap::expand_directional</ref>(z1,<sp/>ir,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>aspect_ratio);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a5cfbd685a2042726fdcd7faa460273a3" kindref="member">hmap::shrink_directional</ref>(z2,<sp/>ir,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>aspect_ratio);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_expand_directional.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1,<sp/>z2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_expand_directional.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="901" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="901" bodyend="913" declfile="HighMap/include/highmap/filters.hpp" declline="1839" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1abeab23d26e0e9cb4563b221193ca6041" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::smooth_cone</definition>
        <argsstring>(Array &amp;array, int ir)</argsstring>
        <name>smooth_cone</name>
        <qualifiedname>hmap::smooth_cone</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>Apply a convolution filter with a cone kernel to smooth the array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function performs convolution on the input array using a cone-shaped kernel. The cone radius <computeroutput>ir</computeroutput> determines the extent of the smoothing effect. An optional filter mask can be used for selective smoothing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap or image to be smoothed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Cone radius, which controls the extent of the smoothing effect. The cone&apos;s half-width is half this radius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, expected in the range [0, 1]. If provided, smoothing is applied according to this mask. If not provided, the entire array is processed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_smooth_cone.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radius<sp/>=<sp/>16;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z0<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1abeab23d26e0e9cb4563b221193ca6041" kindref="member">hmap::smooth_cone</ref>(z,<sp/>radius);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_smooth_cone.png&quot;</highlight><highlight class="normal">,<sp/>{z0,<sp/>z},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_smooth_cone.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="915" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="915" bodyend="939" declfile="HighMap/include/highmap/filters.hpp" declline="1866" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a9d8b2a9245ce9b774f4fe0cb06460b13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::smooth_cone</definition>
        <argsstring>(Array &amp;array, int ir, const Array *p_mask)</argsstring>
        <name>smooth_cone</name>
        <qualifiedname>hmap::smooth_cone</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="941" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="941" bodyend="951" declfile="HighMap/include/highmap/filters.hpp" declline="1867" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a95c0f4c53278620f0812381ccaa7459e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::smooth_cpulse</definition>
        <argsstring>(Array &amp;array, int ir)</argsstring>
        <name>smooth_cpulse</name>
        <qualifiedname>hmap::smooth_cpulse</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>Apply filtering to the array using convolution with a cubic pulse kernel. </para>
        </briefdescription>
        <detaileddescription>
<para>This function performs convolution on the input array using a cubic pulse kernel. It serves as an alternative to Gaussian smoothing, offering a more compact support with potentially faster computations. For direct comparison with Gaussian smoothing, the pulse radius <computeroutput>ir</computeroutput> should be set to twice the desired Gaussian half-width.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap or image to be smoothed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Pulse radius, where the half-width of the cubic pulse kernel is half of this value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, expected in the range [0, 1]. If provided, filtering is applied according to this mask. If not provided, the entire array is processed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_smooth_cpulse.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radius<sp/>=<sp/>20;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z0<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a95c0f4c53278620f0812381ccaa7459e" kindref="member">hmap::smooth_cpulse</ref>(z,<sp/>radius);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_smooth_cpulse.png&quot;</highlight><highlight class="normal">,<sp/>{z0,<sp/>z},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_smooth_cpulse.png"></image>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="namespacehmap_1a4e3cbe9e4b43341148c170f34bd462fd" kindref="member">smooth_gaussian</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="953" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="953" bodyend="977" declfile="HighMap/include/highmap/filters.hpp" declline="1894" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a8fdb203094eb8cfee25b3c4364fbbed6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::smooth_cpulse</definition>
        <argsstring>(Array &amp;array, int ir, const Array *p_mask)</argsstring>
        <name>smooth_cpulse</name>
        <qualifiedname>hmap::smooth_cpulse</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="979" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="979" bodyend="989" declfile="HighMap/include/highmap/filters.hpp" declline="1895" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a81647bbf7183fed5cbfc468c8fa75b62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::smooth_flat</definition>
        <argsstring>(Array &amp;array, int ir)</argsstring>
        <name>smooth_flat</name>
        <qualifiedname>hmap::smooth_flat</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>Applies a smoothing average filter to the given 2D array in both dimensions. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a smoothing kernel of size (2 \times \text{ir} + 1) with uniform weights, then applies a 1D convolution along both the i (rows) and j (columns) dimensions of the array to achieve a 2D smoothing effect.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the 2D array to be smoothed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Radius of the smoothing kernel, determining its size as (2 \times \text{ir} + 1). Larger values produce more smoothing. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="991" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="991" bodyend="1002" declfile="HighMap/include/highmap/filters.hpp" declline="1910" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a4e3cbe9e4b43341148c170f34bd462fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::smooth_gaussian</definition>
        <argsstring>(Array &amp;array, int ir)</argsstring>
        <name>smooth_gaussian</name>
        <qualifiedname>hmap::smooth_gaussian</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>Apply Gaussian filtering to the array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function performs convolution on the input array using a Gaussian kernel, which smooths the array by averaging values within a Gaussian-weighted neighborhood. The <computeroutput>ir</computeroutput> parameter specifies the Gaussian half-width, which influences the extent of the smoothing effect. An optional filter mask can be provided for selective filtering.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap or image to be smoothed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Gaussian half-width, which determines the extent of the smoothing effect. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, expected in the range [0, 1]. If provided, filtering is applied according to this mask. If not provided, the entire array is processed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_smooth_gaussian.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radius<sp/>=<sp/>10;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z0<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a4e3cbe9e4b43341148c170f34bd462fd" kindref="member">hmap::smooth_gaussian</ref>(z,<sp/>radius);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_smooth_gaussian.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z0,<sp/>z},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_smooth_gaussian.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="1004" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="1004" bodyend="1030" declfile="HighMap/include/highmap/filters.hpp" declline="1934" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a6a2f30cadb25b5e8b20d73c5447e4c56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::smooth_gaussian</definition>
        <argsstring>(Array &amp;array, int ir, const Array *p_mask)</argsstring>
        <name>smooth_gaussian</name>
        <qualifiedname>hmap::smooth_gaussian</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="1032" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="1032" bodyend="1042" declfile="HighMap/include/highmap/filters.hpp" declline="1935" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ae9fece3e5896d3a5fe4a89d76d6b9dba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::smooth_fill</definition>
        <argsstring>(Array &amp;array, int ir, float k=0.1f, Array *p_deposition_map=nullptr)</argsstring>
        <name>smooth_fill</name>
        <qualifiedname>hmap::smooth_fill</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Apply cubic pulse smoothing to fill lower flat regions while preserving some sharpness. </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies a cubic pulse smoothing technique to the input array, specifically designed to fill in lower flat regions without significantly impacting sharp features. It provides a more computationally efficient alternative to the <computeroutput>thermal_auto_bedrock</computeroutput> method. The <computeroutput>p_deposition_map</computeroutput> output field captures the amount of smoothing applied.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap or image to be processed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Pulse radius, which determines the extent of the smoothing effect. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>Transition smoothing parameter in the range [0, 1]. It controls the balance between smoothing and preserving sharpness. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, expected in the range [0, 1]. If provided, smoothing is applied according to this mask. If not provided, the entire array is processed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_deposition_map</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] Optional reference to the deposition map. This output field records the amount of deposition or smoothing applied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_smooth_fill.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radius<sp/>=<sp/>32;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z0<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1ae9fece3e5896d3a5fe4a89d76d6b9dba" kindref="member">hmap::smooth_fill</ref>(z,<sp/>radius);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_smooth_fill.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z0,<sp/>z},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a6cd8060670649c0934ddab573e378d3f" kindref="member">to_file</ref>(</highlight><highlight class="stringliteral">&quot;out.bin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_smooth_fill.png"></image>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="namespacehmap_1a95c0f4c53278620f0812381ccaa7459e" kindref="member">smooth_cpulse</ref></computeroutput>, <computeroutput><ref refid="namespacehmap_1acbd2a3c82ec3ce4eaf77dbc92d580321" kindref="member">thermal_auto_bedrock</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="1044" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="1044" bodyend="1061" declfile="HighMap/include/highmap/filters.hpp" declline="1968" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a0102d286095deba3f4df0ec95c4b5c63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::smooth_fill</definition>
        <argsstring>(Array &amp;array, int ir, const Array *p_mask, float k=0.1f, Array *p_deposition_map=nullptr)</argsstring>
        <name>smooth_fill</name>
        <qualifiedname>hmap::smooth_fill</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_deposition_map</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="1063" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="1063" bodyend="1077" declfile="HighMap/include/highmap/filters.hpp" declline="1973" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a1be0dea3638a072678a860c798f4f271" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::smooth_fill_holes</definition>
        <argsstring>(Array &amp;array, int ir)</argsstring>
        <name>smooth_fill_holes</name>
        <qualifiedname>hmap::smooth_fill_holes</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>Apply smoothing to fill holes (elliptic concave surfaces). </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies a smoothing filter to the input array to fill in holes or concave surfaces. The goal is to smooth out regions that are concave, providing a more uniform appearance.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap or image to be processed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Filter radius, which controls the extent of the smoothing effect. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, expected in the range [0, 1]. If provided, smoothing is applied according to this mask. If not provided, the entire array is processed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_smooth_fill_holes.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radius<sp/>=<sp/>8;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1be0dea3638a072678a860c798f4f271" kindref="member">hmap::smooth_fill_holes</ref>(z1,<sp/>radius);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1afa6f07541841c674663141d84ec4d000" kindref="member">hmap::smooth_fill_smear_peaks</ref>(z2,<sp/>radius);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_smooth_fill_holes.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1,<sp/>z2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a6cd8060670649c0934ddab573e378d3f" kindref="member">to_file</ref>(</highlight><highlight class="stringliteral">&quot;out.bin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_smooth_fill_holes.png"></image>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="namespacehmap_1afa6f07541841c674663141d84ec4d000" kindref="member">smooth_fill_smear_peaks</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="1079" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="1079" bodyend="1093" declfile="HighMap/include/highmap/filters.hpp" declline="2002" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a3215e4b5edc94421956595835fb986f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::smooth_fill_holes</definition>
        <argsstring>(Array &amp;array, int ir, const Array *p_mask)</argsstring>
        <name>smooth_fill_holes</name>
        <qualifiedname>hmap::smooth_fill_holes</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="1095" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="1095" bodyend="1105" declfile="HighMap/include/highmap/filters.hpp" declline="2003" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1afa6f07541841c674663141d84ec4d000" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::smooth_fill_smear_peaks</definition>
        <argsstring>(Array &amp;array, int ir)</argsstring>
        <name>smooth_fill_smear_peaks</name>
        <qualifiedname>hmap::smooth_fill_smear_peaks</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>Apply smoothing to smear peaks (elliptic convex surfaces). </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies a smoothing filter designed to reduce the prominence of peaks or convex surfaces in the input array. It smooths out convex regions, creating a more level surface.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap or image to be processed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Filter radius, which controls the extent of the smoothing effect. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, expected in the range [0, 1]. If provided, smoothing is applied according to this mask. If not provided, the entire array is processed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_smooth_fill_holes.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radius<sp/>=<sp/>8;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1be0dea3638a072678a860c798f4f271" kindref="member">hmap::smooth_fill_holes</ref>(z1,<sp/>radius);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1afa6f07541841c674663141d84ec4d000" kindref="member">hmap::smooth_fill_smear_peaks</ref>(z2,<sp/>radius);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_smooth_fill_holes.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1,<sp/>z2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a6cd8060670649c0934ddab573e378d3f" kindref="member">to_file</ref>(</highlight><highlight class="stringliteral">&quot;out.bin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_smooth_fill_holes.png"></image>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="namespacehmap_1a1be0dea3638a072678a860c798f4f271" kindref="member">smooth_fill_holes</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="1107" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="1107" bodyend="1121" declfile="HighMap/include/highmap/filters.hpp" declline="2030" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a3c5dc6759079cece03fad3d2c40813b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::smooth_fill_smear_peaks</definition>
        <argsstring>(Array &amp;array, int ir, const Array *p_mask)</argsstring>
        <name>smooth_fill_smear_peaks</name>
        <qualifiedname>hmap::smooth_fill_smear_peaks</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="1123" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="1123" bodyend="1133" declfile="HighMap/include/highmap/filters.hpp" declline="2031" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aa0d8c9cba830c501ac318cf6510a78ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::smoothstep_local</definition>
        <argsstring>(Array &amp;array, int ir)</argsstring>
        <name>smoothstep_local</name>
        <qualifiedname>hmap::smoothstep_local</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>Applies a localized smoothstep operation to the provided array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function modifies the input array using a localized smoothstep operation. It calculates the local minimum and maximum values within a radius (<computeroutput>ir</computeroutput>) and smooths the values in the array based on these bounds.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The 2D array to be smoothed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius used to compute the local minimum and maximum values.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_smoothstep_local.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ir<sp/>=<sp/>8;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1aa0d8c9cba830c501ac318cf6510a78ad" kindref="member">hmap::smoothstep_local</ref>(z1,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_smoothstep_local.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_smoothstep_local.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="1135" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="1135" bodyend="1149" declfile="HighMap/include/highmap/filters.hpp" declline="2051" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ac4ed13c5d45906009461972781263b06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::smoothstep_local</definition>
        <argsstring>(Array &amp;array, int ir, const Array *p_mask)</argsstring>
        <name>smoothstep_local</name>
        <qualifiedname>hmap::smoothstep_local</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <briefdescription>
<para>Applies a localized smoothstep operation to the provided array with an optional mask. </para>
        </briefdescription>
        <detaileddescription>
<para>If a mask is provided, the function blends the smoothed values with the original array using the mask. Otherwise, it directly applies the localized smoothstep operation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The 2D array to be smoothed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius used to compute the local minimum and maximum values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an optional mask array. If provided, the smoothed array is blended with the original using this mask.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_smoothstep_local.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ir<sp/>=<sp/>8;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1aa0d8c9cba830c501ac318cf6510a78ad" kindref="member">hmap::smoothstep_local</ref>(z1,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_smoothstep_local.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_smoothstep_local.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="1151" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="1151" bodyend="1161" declfile="HighMap/include/highmap/filters.hpp" declline="2073" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a38fb422e7a9cd383d40c9a25a06767d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::steepen</definition>
        <argsstring>(Array &amp;array, float scale, int ir=8)</argsstring>
        <name>steepen</name>
        <qualifiedname>hmap::steepen</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
          <defval>8</defval>
        </param>
        <briefdescription>
<para>Steepen (or flatten) the array map. </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies a steepening effect to the input array, enhancing the contrast of the gradients or flattening features based on the given filter amplitude. The effect is controlled by the <computeroutput>scale</computeroutput> parameter, and the <computeroutput>ir</computeroutput> parameter defines the filtering radius for computing the array gradients.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap or image to be processed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Filter amplitude that determines the extent of steepening or flattening. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, expected in the range [0, 1]. If provided, steepening is applied according to this mask. If not provided, the entire array is processed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Filtering radius of the array gradients, which influences the extent of the effect.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_steepen.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale<sp/>=<sp/>0.05f;<sp/></highlight><highlight class="comment">//<sp/>not<sp/>in<sp/>pixels</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a38fb422e7a9cd383d40c9a25a06767d5" kindref="member">hmap::steepen</ref>(z1,<sp/>scale);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>using<sp/>a<sp/>negative<sp/>scale<sp/>will<sp/>&quot;flatten&quot;<sp/>the<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a38fb422e7a9cd383d40c9a25a06767d5" kindref="member">hmap::steepen</ref>(z2,<sp/>-scale);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_steepen.png&quot;</highlight><highlight class="normal">,<sp/>{z,<sp/>z1,<sp/>z2},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_steepen.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="1163" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="1163" bodyend="1172" declfile="HighMap/include/highmap/filters.hpp" declline="2100" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a3dac1291a901a399f36a17476859353a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::steepen</definition>
        <argsstring>(Array &amp;array, float scale, const Array *p_mask, int ir=8)</argsstring>
        <name>steepen</name>
        <qualifiedname>hmap::steepen</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
          <defval>8</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="1174" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="1174" bodyend="1184" declfile="HighMap/include/highmap/filters.hpp" declline="2101" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a8a7a083e583afe812239d1fe6aa479cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::steepen_convective</definition>
        <argsstring>(Array &amp;array, float angle, int iterations=1, int ir=0, float dt=0.1f)</argsstring>
        <name>steepen_convective</name>
        <qualifiedname>hmap::steepen_convective</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>float</type>
          <declname>dt</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Steepen array values by applying a nonlinear convection operator in a given direction. </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies a nonlinear convection operator to the input array, simulating the effect described by Burger&apos;s equation. The steepening effect is applied in the specified direction (angle) and is controlled by several parameters including the number of iterations, smoothing radius, and time step. The input array values are expected to be in the range [-1, 1].</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array with elements expected to be in the range [-1, 1]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Steepening direction in degrees. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iterations to perform the convection process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Smoothing radius applied to the array values before differentiation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dt</parametername>
</parameternamelist>
<parameterdescription>
<para>Time step for the convection process, can be chosen smaller than 1 for finer tuning of the steepening effect. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, expected in the range [0, 1]. If provided, steepening is applied according to this mask. If not provided, the entire array is processed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_steepen_convective.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref><sp/>=<sp/>30.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>iterations<sp/>=<sp/>3;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>ir<sp/>=<sp/>16;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a8a7a083e583afe812239d1fe6aa479cd" kindref="member">hmap::steepen_convective</ref>(z1,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>iterations,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z1.infos();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_steepen_convective.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_steepen_convective.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="1186" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="1186" bodyend="1217" declfile="HighMap/include/highmap/filters.hpp" declline="2134" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ab46e625ea919327a4e2899dd53fff18d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::steepen_convective</definition>
        <argsstring>(Array &amp;array, float angle, const Array *p_mask, int iterations=1, int ir=0, float dt=0.1f)</argsstring>
        <name>steepen_convective</name>
        <qualifiedname>hmap::steepen_convective</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>float</type>
          <declname>dt</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="1219" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="1219" bodyend="1234" declfile="HighMap/include/highmap/filters.hpp" declline="2140" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a5a852e7e8cb38a8c3231d4867995ae1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::terrace</definition>
        <argsstring>(Array &amp;array, uint seed, int nlevels, float gain=0.9f, float noise_ratio=0.f, const Array *p_noise=nullptr, float vmin=0.f, float vmax=-1.f)</argsstring>
        <name>terrace</name>
        <qualifiedname>hmap::terrace</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nlevels</declname>
        </param>
        <param>
          <type>float</type>
          <declname>gain</declname>
          <defval>0.9<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>noise_ratio</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>float</type>
          <declname>vmin</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>vmax</declname>
          <defval>-1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Applies a terrace effect to the values in an array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function adjusts the values in the <computeroutput>array</computeroutput> by applying a terrace or stepped effect, often used for terrain generation or other natural-looking height variations. The terrace effect is controlled by several parameters such as the number of levels, gain, noise ratio, and optional min/max range. The noise is applied to levels for added randomness, and a gain function is applied to smooth the transitions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The array of values to modify with the terrace effect. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Seed value for random number generation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nlevels</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of terrace levels to apply. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gain</parametername>
</parameternamelist>
<parameterdescription>
<para>Gain factor for controlling the sharpness of the terrace levels, in [0, 1]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>noise_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Ratio of noise applied to each terrace level, except the first and last. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional noise array to introduce additional variation per element. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmin</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum value for terracing; if less than <computeroutput>vmax</computeroutput>, will be auto-determined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmax</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum value for terracing; if less than <computeroutput>vmin</computeroutput>, will be auto-determined.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>If <computeroutput>p_noise</computeroutput> is provided, each value in <computeroutput>array</computeroutput> is transformed using both the original value and the corresponding noise value from <computeroutput>p_noise</computeroutput>.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_terrace.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed++);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>nlevels<sp/>=<sp/>5;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref><sp/>=<sp/>0.9f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>noise_ratio<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zp<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a5a852e7e8cb38a8c3231d4867995ae1c" kindref="member">hmap::terrace</ref>(zp,<sp/>seed,<sp/>nlevels,<sp/>&amp;z,<sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref>,<sp/>noise_ratio);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_terrace.png&quot;</highlight><highlight class="normal">,<sp/>{z,<sp/>zp},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_terrace.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="1236" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="1236" bodyend="1300" declfile="HighMap/include/highmap/filters.hpp" declline="2180" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a878694830f25c7c79f4d9a0a723a5148" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::terrace</definition>
        <argsstring>(Array &amp;array, uint seed, int nlevels, const Array *p_mask, float gain=0.9f, float noise_ratio=0.f, const Array *p_noise=nullptr, float vmin=0.f, float vmax=-1.f)</argsstring>
        <name>terrace</name>
        <qualifiedname>hmap::terrace</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nlevels</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>float</type>
          <declname>gain</declname>
          <defval>0.9<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>noise_ratio</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>float</type>
          <declname>vmin</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>vmax</declname>
          <defval>-1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Applies a terrace effect to an array with optional masking. </para>
        </briefdescription>
        <detaileddescription>
<para>This overloaded version of the terrace function modifies <computeroutput>array</computeroutput> based on the terrace levels, gain, noise ratio, and an optional mask array. If a mask is provided, the terrace effect is applied conditionally based on the mask values.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The array of values to modify with the terrace effect. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Seed value for random number generation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nlevels</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of terrace levels to apply. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional mask array. If provided, blends the terrace effect with original values based on the mask. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gain</parametername>
</parameternamelist>
<parameterdescription>
<para>Gain factor for controlling the sharpness of the terrace levels, in [0, 1]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>noise_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Ratio of noise applied to each terrace level, except the first and last. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional noise array to introduce additional variation per element. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmin</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum value for terracing; if less than <computeroutput>vmax</computeroutput>, will be auto-determined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmax</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum value for terracing; if less than <computeroutput>vmin</computeroutput>, will be auto-determined.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function:<itemizedlist>
<listitem><para>If no mask is provided, directly applies the terrace effect using the first terrace overload.</para>
</listitem><listitem><para>If a mask is provided, creates a temporary copy of <computeroutput>array</computeroutput>, applies the terrace effect to it, and then interpolates between <computeroutput>array</computeroutput> and the modified copy based on mask values.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>The mask array allows for blending the terrace effect with the original array for more localized effects.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_terrace.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed++);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>nlevels<sp/>=<sp/>5;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref><sp/>=<sp/>0.9f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>noise_ratio<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zp<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a5a852e7e8cb38a8c3231d4867995ae1c" kindref="member">hmap::terrace</ref>(zp,<sp/>seed,<sp/>nlevels,<sp/>&amp;z,<sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref>,<sp/>noise_ratio);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_terrace.png&quot;</highlight><highlight class="normal">,<sp/>{z,<sp/>zp},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_terrace.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="1302" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="1302" bodyend="1320" declfile="HighMap/include/highmap/filters.hpp" declline="2229" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a473007073da159b88b14711dbd6553fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::tessellate</definition>
        <argsstring>(Array &amp;array, uint seed, float node_density=0.001f, const Array *p_weight=nullptr)</argsstring>
        <name>tessellate</name>
        <qualifiedname>hmap::tessellate</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>float</type>
          <declname>node_density</declname>
          <defval>0.001<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_weight</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Apply tessellation to the array with random node placement. </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies tessellation to the input array, creating a denser mesh by randomly distributing nodes based on the specified node density. The <computeroutput>seed</computeroutput> parameter allows for controlling the randomness of the node placement, and the <computeroutput>p_weight</computeroutput> reference is used to adjust the density distribution.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to which tessellation will be applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed number to initialize the node placement. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node_density</parametername>
</parameternamelist>
<parameterdescription>
<para>Node density as a ratio relative to the number of cells in the input array. Determines the number of nodes to be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional reference to the density distribution array, expected in the range [0, 1]. If provided, tessellation is influenced by this distribution. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Output array after tessellation is applied.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_tessellate.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>uniform</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/><ref refid="namespacehmap_1a473007073da159b88b14711dbd6553fb" kindref="member">hmap::tessellate</ref>(z1,<sp/>seed++,<sp/>0.005f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>density<sp/>driven<sp/>by<sp/>inverse<sp/>gradient<sp/>norm</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>d<sp/>=<sp/><ref refid="namespacehmap_1a5f58c4149344b401d82f0be3c3807156" kindref="member">hmap::gradient_norm</ref>(z1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(d,<sp/>0.01f,<sp/>1.f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>d<sp/>=<sp/>1.f<sp/>/<sp/>(d<sp/>*<sp/>d);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(d);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z3<sp/>=<sp/><ref refid="namespacehmap_1a473007073da159b88b14711dbd6553fb" kindref="member">hmap::tessellate</ref>(z1,<sp/>seed++,<sp/>0.005f,<sp/>&amp;d);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_tessellate.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z1,<sp/>z2,<sp/>z3},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_tessellate.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/tesselate.cpp" line="17" column="7" bodyfile="HighMap/src/filters/tesselate.cpp" bodystart="17" bodyend="60" declfile="HighMap/include/highmap/filters.hpp" declline="2263" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ac95c3b559d18eb6ef17b3f740ce5e67f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::wrinkle</definition>
        <argsstring>(Array &amp;array, float wrinkle_amplitude, const Array *p_mask, float wrinkle_angle=0.f, float displacement_amplitude=1.f, int ir=0, float kw=2.f, uint seed=1, int octaves=8, float weight=0.7f, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>wrinkle</name>
        <qualifiedname>hmap::wrinkle</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>wrinkle_amplitude</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>float</type>
          <declname>wrinkle_angle</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>displacement_amplitude</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>float</type>
          <declname>kw</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>octaves</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>float</type>
          <declname>weight</declname>
          <defval>0.7<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Apply wrinkle effect to the array, creating wrinkled or bumpy features. </para>
        </briefdescription>
        <detaileddescription>
<para>This function adds wrinkle-like features to the input array. The <computeroutput>wrinkle_amplitude</computeroutput> controls the intensity of the wrinkling effect, while other parameters such as <computeroutput>displacement_amplitude</computeroutput>, <computeroutput>ir</computeroutput>, <computeroutput>kw</computeroutput>, <computeroutput>seed</computeroutput>, <computeroutput>octaves</computeroutput>, and <computeroutput>weight</computeroutput> control various aspects of the underlying noise and wrinkle generation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to which wrinkles will be applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wrinkle_amplitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Amplitude of the wrinkle effect. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional filter mask, expected in the range [0, 1]. If provided, the wrinkle effect is applied according to this mask. If not provided, the entire array is processed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wrinkle_angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Overall rotation angle (in degree). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>displacement_amplitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Drives the displacement of the wrinkles. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Smooth filter radius applied during wrinkle generation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>Underlying primitive wavenumber, affecting the frequency of wrinkles. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed number for generating underlying primitive noise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>octaves</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of octaves used in the underlying primitive noise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight</parametername>
</parameternamelist>
<parameterdescription>
<para>Weight of the underlying primitive noise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Bounding box for the generated wrinkles, default is {0.f, 1.f, 0.f, 1.f}.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_wrinkle.png"></programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_wrinkle.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="1357" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="1357" bodyend="1395" declfile="HighMap/include/highmap/filters.hpp" declline="2304" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aa2d7277ba1c9b10d75e5ba1d38ac7d80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::wrinkle</definition>
        <argsstring>(Array &amp;array, float wrinkle_amplitude, float wrinkle_angle=0.f, float displacement_amplitude=1.f, int ir=0, float kw=2.f, uint seed=1, int octaves=8, float weight=0.7f, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>wrinkle</name>
        <qualifiedname>hmap::wrinkle</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>wrinkle_amplitude</declname>
        </param>
        <param>
          <type>float</type>
          <declname>wrinkle_angle</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>displacement_amplitude</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>float</type>
          <declname>kw</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>octaves</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>float</type>
          <declname>weight</declname>
          <defval>0.7<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/filters.cpp" line="1322" column="6" bodyfile="HighMap/src/filters/filters.cpp" bodystart="1322" bodyend="1355" declfile="HighMap/include/highmap/filters.hpp" declline="2316" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a17514d1658d2a065892f061864a538ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classhmap_1_1NoiseFunction" kindref="compound">hmap::NoiseFunction</ref> &gt;</type>
        <definition>std::unique_ptr&lt; NoiseFunction &gt; hmap::create_noise_function_from_type</definition>
        <argsstring>(NoiseType noise_type, Vec2&lt; float &gt; kw, uint seed)</argsstring>
        <name>create_noise_function_from_type</name>
        <qualifiedname>hmap::create_noise_function_from_type</qualifiedname>
        <param>
          <type><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195" kindref="member">NoiseType</ref></type>
          <declname>noise_type</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>kw</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <briefdescription>
<para>Create a noise function based on the specified noise type. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates an instance of a noise function corresponding to the specified <computeroutput>noise_type</computeroutput>. It initializes the noise function with the given frequency scaling vector (<computeroutput>kw</computeroutput>) and random seed (<computeroutput>seed</computeroutput>).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>noise_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of noise function to create (e.g., PERLIN, SIMPLEX2, etc.). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>The frequency scaling vector to be used for the noise function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>The random seed for noise generation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput>std::unique_ptr</computeroutput> to the created noise function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/functions/noise_functions.cpp" line="327" column="17" bodyfile="HighMap/src/primitives/functions/noise_functions.cpp" bodystart="327" bodyend="370" declfile="HighMap/include/highmap/functions.hpp" declline="1750" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1abd7c616c225d31eb2fd4e3ff023e3ed5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Cloud" kindref="compound">Cloud</ref></type>
        <definition>Cloud hmap::merge_cloud</definition>
        <argsstring>(const Cloud &amp;cloud1, const Cloud &amp;cloud2)</argsstring>
        <name>merge_cloud</name>
        <qualifiedname>hmap::merge_cloud</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Cloud" kindref="compound">Cloud</ref> &amp;</type>
          <declname>cloud1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Cloud" kindref="compound">Cloud</ref> &amp;</type>
          <declname>cloud2</declname>
        </param>
        <briefdescription>
<para>Merges two point clouds into one. </para>
        </briefdescription>
        <detaileddescription>
<para>This function combines two separate point clouds into a single cloud by appending the points from the second cloud to the first. The resulting cloud contains all points from both input clouds.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cloud1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first point cloud to be merged. This cloud will be the base cloud to which the points from the second cloud are added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cloud2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second point cloud whose points will be appended to the first cloud.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Cloud" kindref="compound">Cloud</ref> The resulting point cloud that includes all points from both <computeroutput>cloud1</computeroutput> and <computeroutput>cloud2</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/cloud.cpp" line="494" column="7" bodyfile="HighMap/src/geometry/cloud.cpp" bodystart="494" bodyend="509" declfile="HighMap/include/highmap/geometry/cloud.hpp" declline="530" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ab085d07bc0e897729ca16c0dd2035fe1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hmap::convert_length_to_pixel</definition>
        <argsstring>(float x, int nx, bool lim_inf=true, bool lim_sup=false, float scale=1.f)</argsstring>
        <name>convert_length_to_pixel</name>
        <qualifiedname>hmap::convert_length_to_pixel</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>lim_inf</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>lim_sup</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>float</type>
          <declname>scale</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Converts a length value to a pixel index in a discretized space. </para>
        </briefdescription>
        <detaileddescription>
<para>This function maps a floating-point length <computeroutput>x</computeroutput> to an integer pixel index, considering the total number of pixels <computeroutput>nx</computeroutput> and a scaling factor <computeroutput>scale</computeroutput>. Optionally, it can enforce lower and upper limits on the output index.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The length value to be converted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nx</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of pixels in the discretized space. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lim_inf</parametername>
</parameternamelist>
<parameterdescription>
<para>If nonzero, enforces a minimum index of 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lim_sup</parametername>
</parameternamelist>
<parameterdescription>
<para>If nonzero, enforces a maximum index of <computeroutput>nx - 1</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>The scaling factor relating the length to the pixel space. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The computed pixel index. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/grid.cpp" line="15" column="5" bodyfile="HighMap/src/geometry/grid.cpp" bodystart="15" bodyend="25" declfile="HighMap/include/highmap/geometry/grids.hpp" declline="42" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ac774958287179e45c9915027d9351a1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::expand_grid</definition>
        <argsstring>(std::vector&lt; float &gt; &amp;x, std::vector&lt; float &gt; &amp;y, std::vector&lt; float &gt; &amp;value, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>expand_grid</name>
        <qualifiedname>hmap::expand_grid</qualifiedname>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Expand grid by translating and copying the values of the current bounding box to the 8 first neighboring bounding boxes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>x</computeroutput> coordinates. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>y</computeroutput> coordinates. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Bounding box. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/grid.cpp" line="27" column="6" bodyfile="HighMap/src/geometry/grid.cpp" bodystart="27" bodyend="53" declfile="HighMap/include/highmap/geometry/grids.hpp" declline="56" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ae36e2bd1ea48979ff888771814b093e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::expand_grid_boundaries</definition>
        <argsstring>(std::vector&lt; float &gt; &amp;x, std::vector&lt; float &gt; &amp;y, std::vector&lt; float &gt; &amp;value, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f}, float boundary_value=0.f)</argsstring>
        <name>expand_grid_boundaries</name>
        <qualifiedname>hmap::expand_grid_boundaries</qualifiedname>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type>float</type>
          <declname>boundary_value</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Expand the grid by adding points on the boundaries of the bounding box. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>x</computeroutput> coordinates. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>y</computeroutput> coordinates. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Bounding box. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>corner_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value at the boundary points. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/grid.cpp" line="55" column="6" bodyfile="HighMap/src/geometry/grid.cpp" bodystart="55" bodyend="87" declfile="HighMap/include/highmap/geometry/grids.hpp" declline="70" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a1f2ad9d57b6c0bdd3eb726beb01281d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::expand_grid_corners</definition>
        <argsstring>(std::vector&lt; float &gt; &amp;x, std::vector&lt; float &gt; &amp;y, std::vector&lt; float &gt; &amp;value, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f}, float corner_value=0.f)</argsstring>
        <name>expand_grid_corners</name>
        <qualifiedname>hmap::expand_grid_corners</qualifiedname>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type>float</type>
          <declname>corner_value</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Expand the grid by adding four points at the corner of the bounding box. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>x</computeroutput> coordinates. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>y</computeroutput> coordinates. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Bounding box. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>corner_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value at the four corner points. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/grid.cpp" line="89" column="6" bodyfile="HighMap/src/geometry/grid.cpp" bodystart="89" bodyend="107" declfile="HighMap/include/highmap/geometry/grids.hpp" declline="85" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1addca3b204d0b0ef9120cf3606cb3f53a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::grid_from_array</definition>
        <argsstring>(Array &amp;array, std::vector&lt; float &gt; &amp;x, std::vector&lt; float &gt; &amp;y, std::vector&lt; float &gt; &amp;value, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f}, float threshold=0.f)</argsstring>
        <name>grid_from_array</name>
        <qualifiedname>hmap::grid_from_array</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type>float</type>
          <declname>threshold</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>x</computeroutput> coordinates (output). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>y</computeroutput> coordinates (output). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Bounding box. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>Theshold &apos;background&apos; value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_grid_from_array.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a2fe434844b8b2c091b589cbc4fa81db1" kindref="member">hmap::white_sparse</ref>(shape,<sp/>0.1f,<sp/>1.f,<sp/>5e-4f,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>x,<sp/>y,<sp/>value;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec4" kindref="compound">hmap::Vec4&lt;float&gt;</ref><sp/><sp/>bbox<sp/>=<sp/>{0.f,<sp/>1.f,<sp/>0.f,<sp/>1.f};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1addca3b204d0b0ef9120cf3606cb3f53a" kindref="member">hmap::grid_from_array</ref>(z,<sp/>x,<sp/>y,<sp/>value,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Cloud" kindref="compound">hmap::Cloud</ref><sp/>cloud<sp/>=<sp/><ref refid="classhmap_1_1Cloud" kindref="compound">hmap::Cloud</ref>(x,<sp/>y,<sp/>value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zc<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(shape);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cloud.<ref refid="classhmap_1_1Cloud_1ad83d71a8729a0e4fcce993c0141275ee" kindref="member">to_array</ref>(zc,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_grid_from_array.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369ae91cb25d4df330517ac69b5f0f2c3e0c" kindref="member">hmap::Cmap::NIPY_SPECTRAL</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_grid_from_array.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/grid.cpp" line="109" column="6" bodyfile="HighMap/src/geometry/grid.cpp" bodystart="109" bodyend="134" declfile="HighMap/include/highmap/geometry/grids.hpp" declline="105" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a5325e50550ce04f027ffa3c6b2a3ef53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::grid_xy_vector</definition>
        <argsstring>(std::vector&lt; float &gt; &amp;x, std::vector&lt; float &gt; &amp;y, Vec2&lt; int &gt; shape, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f}, bool endpoint=false)</argsstring>
        <name>grid_xy_vector</name>
        <qualifiedname>hmap::grid_xy_vector</qualifiedname>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>endpoint</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Return x and y coordinates of a regular grid, as two 1D vectors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x[out]</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector x. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y[out]</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector y. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>Shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Bounding box. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endpoint</parametername>
</parameternamelist>
<parameterdescription>
<para>Include or not the endpoint. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/grid.cpp" line="136" column="6" bodyfile="HighMap/src/geometry/grid.cpp" bodystart="136" bodyend="144" declfile="HighMap/include/highmap/geometry/grids.hpp" declline="120" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a1b302517681613c5b82b06f55237fb98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::random_grid</definition>
        <argsstring>(std::vector&lt; float &gt; &amp;x, std::vector&lt; float &gt; &amp;y, std::vector&lt; float &gt; &amp;value, uint seed, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>random_grid</name>
        <qualifiedname>hmap::random_grid</qualifiedname>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Generate a random grid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x[out]</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>x</computeroutput> coordinates (output). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y[out]</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>y</computeroutput> coordinates (output). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value[out]</parametername>
</parameternamelist>
<parameterdescription>
<para>Random value, in [0, 1], at (x, y). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Bounding box. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/grid.cpp" line="162" column="6" bodyfile="HighMap/src/geometry/grid.cpp" bodystart="162" bodyend="178" declfile="HighMap/include/highmap/geometry/grids.hpp" declline="134" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ab5a98f96f35de7ff88e55553a986e7c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::random_grid</definition>
        <argsstring>(std::vector&lt; float &gt; &amp;x, std::vector&lt; float &gt; &amp;y, uint seed, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>random_grid</name>
        <qualifiedname>hmap::random_grid</qualifiedname>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/grid.cpp" line="146" column="6" bodyfile="HighMap/src/geometry/grid.cpp" bodystart="146" bodyend="160" declfile="HighMap/include/highmap/geometry/grids.hpp" declline="140" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a9871f7fdc4cefc81ca452a107751b0f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::random_grid</definition>
        <argsstring>(std::vector&lt; float &gt; &amp;x, std::vector&lt; float &gt; &amp;y, std::vector&lt; float &gt; &amp;value, uint seed, Vec2&lt; float &gt; delta, Vec2&lt; float &gt; stagger_ratio, Vec2&lt; float &gt; jitter_ratio, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>random_grid</name>
        <qualifiedname>hmap::random_grid</qualifiedname>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>delta</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>stagger_ratio</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>jitter_ratio</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Generate a random grid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x[out]</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>x</computeroutput> coordinates (output). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y[out]</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>y</computeroutput> coordinates (output). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value[out]</parametername>
</parameternamelist>
<parameterdescription>
<para>Random value, in [0, 1], at (x, y). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Point" kindref="compound">Point</ref> spacing in x and y directions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stagger_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Point" kindref="compound">Point</ref> offset in x and y directions for every two lines (to do a staggered grid), in [0, 1]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>jitter</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Point" kindref="compound">Point</ref> jittering (noise) in x and y directions, in [0, 1]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Bounding box.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_random_grid.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec4" kindref="compound">hmap::Vec4&lt;float&gt;</ref><sp/>bbox<sp/>=<sp/>{-1.f,<sp/>2.f,<sp/>0.f,<sp/>3.f};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>x,<sp/>y,<sp/>v;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>delta<sp/>=<sp/>{0.1f,<sp/>0.2f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>stagger_ratio<sp/>=<sp/>{0.5f,<sp/>0.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>jitter_ratio<sp/>=<sp/>{0.3f,<sp/>0.3f};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1b302517681613c5b82b06f55237fb98" kindref="member">hmap::random_grid</ref>(x,<sp/>y,<sp/>v,<sp/>seed,<sp/>delta,<sp/>stagger_ratio,<sp/>jitter_ratio,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>generate<sp/>png</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Cloud" kindref="compound">hmap::Cloud</ref><sp/>cloud<sp/>=<sp/><ref refid="classhmap_1_1Cloud" kindref="compound">hmap::Cloud</ref>(x,<sp/>y,<sp/>v);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>array<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(shape);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cloud.<ref refid="classhmap_1_1Cloud_1ad83d71a8729a0e4fcce993c0141275ee" kindref="member">to_array</ref>(array,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>array.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_random_grid.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_random_grid.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/grid.cpp" line="180" column="6" bodyfile="HighMap/src/geometry/grid.cpp" bodystart="180" bodyend="240" declfile="HighMap/include/highmap/geometry/grids.hpp" declline="164" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a6e4da549ca29a6c78c0c19dd3b8714d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::random_grid_density</definition>
        <argsstring>(std::vector&lt; float &gt; &amp;x, std::vector&lt; float &gt; &amp;y, const Array &amp;density, uint seed, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>random_grid_density</name>
        <qualifiedname>hmap::random_grid_density</qualifiedname>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>density</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>density</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/grid.cpp" line="242" column="6" bodyfile="HighMap/src/geometry/grid.cpp" bodystart="242" bodyend="272" declfile="HighMap/include/highmap/geometry/grids.hpp" declline="181" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a43b619bc125fb2379db0cd5f469acf68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::random_grid_jittered</definition>
        <argsstring>(std::vector&lt; float &gt; &amp;x, std::vector&lt; float &gt; &amp;y, float scale, uint seed, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>random_grid_jittered</name>
        <qualifiedname>hmap::random_grid_jittered</qualifiedname>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Generate a jittered random grid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x[out]</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>x</computeroutput> coordinates (output). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y[out]</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>y</computeroutput> coordinates (output). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Jittering scale, in [0, 1]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Bounding box. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/grid.cpp" line="274" column="6" bodyfile="HighMap/src/geometry/grid.cpp" bodystart="274" bodyend="299" declfile="HighMap/include/highmap/geometry/grids.hpp" declline="195" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a872f3c8ff3b20a1a78dcf4eb2d9290ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::remove_grid_points_outside_bbox</definition>
        <argsstring>(std::vector&lt; float &gt; &amp;x, std::vector&lt; float &gt; &amp;y, std::vector&lt; float &gt; &amp;value, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>remove_grid_points_outside_bbox</name>
        <qualifiedname>hmap::remove_grid_points_outside_bbox</qualifiedname>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Remove grid points that are outside a given bounding box. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>x</computeroutput> coordinates. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>y</computeroutput> coordinates. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Values at points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Bounding box. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/grid.cpp" line="301" column="6" bodyfile="HighMap/src/geometry/grid.cpp" bodystart="301" bodyend="321" declfile="HighMap/include/highmap/geometry/grids.hpp" declline="208" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a62470967e02836ce5e6e65607729f954" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::rescale_grid_to_unit_square</definition>
        <argsstring>(std::vector&lt; float &gt; &amp;x, std::vector&lt; float &gt; &amp;y, Vec4&lt; float &gt; bbox)</argsstring>
        <name>rescale_grid_to_unit_square</name>
        <qualifiedname>hmap::rescale_grid_to_unit_square</qualifiedname>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
        </param>
        <briefdescription>
<para>Rescale coordinate (x, y) so that they fit in a unit-square box based on a given initial bounding box. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x[in</parametername>
<parametername>out]</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>x</computeroutput> coordinates (output). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y[in</parametername>
<parametername>out]</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>y</computeroutput> coordinates (output). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial bounding box. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/grid.cpp" line="343" column="6" bodyfile="HighMap/src/geometry/grid.cpp" bodystart="343" bodyend="352" declfile="HighMap/include/highmap/geometry/grids.hpp" declline="220" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a7ba4bc3a43f42b6a4bf00e94e86064ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::dig_path</definition>
        <argsstring>(Array &amp;z, Path &amp;path, int width=1, int decay=2, int flattening_radius=16, bool force_downhill=false, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f}, float depth=0.f)</argsstring>
        <name>dig_path</name>
        <qualifiedname>hmap::dig_path</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Path" kindref="compound">Path</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>decay</declname>
          <defval>2</defval>
        </param>
        <param>
          <type>int</type>
          <declname>flattening_radius</declname>
          <defval>16</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>force_downhill</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type>float</type>
          <declname>depth</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Dig a path on a heightmap. </para>
        </briefdescription>
        <detaileddescription>
<para>This function modifies a heightmap array by &quot;digging&quot; a path into it based on the provided path. The path is represented by a <computeroutput><ref refid="classhmap_1_1Path" kindref="compound">Path</ref></computeroutput> object, and the function adjusts the height values in the <computeroutput>z</computeroutput> array to create the appearance of a dug path. The width, border decay, and flattening radius parameters control the characteristics of the dig. Optionally, the path can be forced to have a monotonically decreasing elevation.</para>
<para><bold>Example</bold> <programlisting filename="ex_dig_path.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec4" kindref="compound">hmap::Vec4&lt;float&gt;</ref><sp/>bbox<sp/>=<sp/>{1.f,<sp/>2.f,<sp/>-0.5f,<sp/>0.5f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Path" kindref="compound">hmap::Path</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/><ref refid="classhmap_1_1Path" kindref="compound">hmap::Path</ref>(5,<sp/>seed,<sp/>{1.1f,<sp/>1.9f,<sp/>-0.4,<sp/>0.4f});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>path.<ref refid="classhmap_1_1Path_1a2ea3482a302d8ef30084fd39e57715de" kindref="member">closed</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>path.<ref refid="classhmap_1_1Path_1ad68abaa80879402c3758e24626acfb53" kindref="member">reorder_nns</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>path.<ref refid="classhmap_1_1Path_1a5bc0253d1ce863a772b3ac77aaf41b91" kindref="member">dijkstra</ref>(z,<sp/>bbox,<sp/>0,<sp/>0.9f,<sp/>1.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(shape);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>path.<ref refid="classhmap_1_1Path_1a3b90d30abcdc4da9e381957d76c5d8db" kindref="member">to_array</ref>(z1,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>width<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>pixels</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>decay<sp/>=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>flattening_radius<sp/>=<sp/>16;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>force_downhill<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a7ba4bc3a43f42b6a4bf00e94e86064ff" kindref="member">hmap::dig_path</ref>(z2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decay,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flattening_radius,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>force_downhill,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z3<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>force_downhill<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a7ba4bc3a43f42b6a4bf00e94e86064ff" kindref="member">hmap::dig_path</ref>(z3,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decay,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flattening_radius,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>force_downhill,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_dig_path.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1,<sp/>z2,<sp/>z3},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_dig_path.png"></image>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap to be modified. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to be dug into the heightmap, with coordinates with respect to a unit-square. The path will be processed to create the dig effect. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>Radius of the path width in pixels. This determines how wide the dug path will be. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decay</parametername>
</parameternamelist>
<parameterdescription>
<para>Radius of the path border decay in pixels. This controls how quickly the effect of the path fades out towards the edges. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flattening_radius</parametername>
</parameternamelist>
<parameterdescription>
<para>Radius used to flatten the elevation of the path, creating a smooth transition. This is measured in pixels. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>force_downhill</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>true</computeroutput>, the path&apos;s elevation will be forced to decrease monotonically, creating a downhill effect. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Bounding box specifying the region of the heightmap to consider for the digging operation. It defines the area where the path is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depth</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional depth parameter to specify the maximum depth of the dig. If not provided, the default depth of 0.f is used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/path.cpp" line="906" column="6" bodyfile="HighMap/src/geometry/path.cpp" bodystart="906" bodyend="954" declfile="HighMap/include/highmap/geometry/path.hpp" declline="843" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a6d536f0d67ade56c6a60927d8c8e9720" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::dig_river</definition>
        <argsstring>(Array &amp;z, const std::vector&lt; Path &gt; &amp;path_list, float riverbank_talus, int river_width=0, int merging_width=0, float depth=0.f, float riverbed_talus=0.f, float noise_ratio=0.9f, uint seed=0, Array *p_mask=nullptr)</argsstring>
        <name>dig_river</name>
        <qualifiedname>hmap::dig_river</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classhmap_1_1Path" kindref="compound">Path</ref> &gt; &amp;</type>
          <declname>path_list</declname>
        </param>
        <param>
          <type>float</type>
          <declname>riverbank_talus</declname>
        </param>
        <param>
          <type>int</type>
          <declname>river_width</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>merging_width</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>float</type>
          <declname>depth</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>riverbed_talus</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>noise_ratio</declname>
          <defval>0.9<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Modifies the elevation array to carve a river along a specified path. </para>
        </briefdescription>
        <detaileddescription>
<para>This function adjusts the elevation values in the input array <computeroutput>z</computeroutput> to simulate a river along the provided <computeroutput>path</computeroutput>. It incorporates parameters for riverbed and riverbank slopes, noise effects, and merging behavior to create a realistic river profile.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The input 2D array representing the elevation map. This array will be modified in place. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path along which the river is to be carved, represented as a sequence of points, with coordinates with respect to a unit-square. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>riverbank_talus</parametername>
</parameternamelist>
<parameterdescription>
<para>The slope of the riverbank, controlling how steep the river&apos;s edges are. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>merging_ir</parametername>
</parameternamelist>
<parameterdescription>
<para>The merging radius, specifying how far the effects of multiple rivers combine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>riverbed_talus</parametername>
</parameternamelist>
<parameterdescription>
<para>The slope of the riverbed, controlling how steep the riverbed is (default: 0.0). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>noise_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>The proportion of random noise applied to the river&apos;s shape for realism (default: 0.9). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>The seed for the random noise generator, ensuring reproducibility (default: 0).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_flow_stream.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>ij_start(100,<sp/>128);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Path" kindref="compound">hmap::Path</ref><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/><ref refid="namespacehmap_1a5adb98e67f89036317df083dd2123a1e" kindref="member">hmap::flow_stream</ref>(z,<sp/>ij_start);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec4" kindref="compound">hmap::Vec4&lt;float&gt;</ref><sp/>bbox(0.f,<sp/>1.f,<sp/>0.f,<sp/>1.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zv(shape);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>path.<ref refid="classhmap_1_1Path_1a3b90d30abcdc4da9e381957d76c5d8db" kindref="member">to_array</ref>(zv,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zd1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>riverbank_talus<sp/>=<sp/>1.f<sp/>/<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>river_width<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>merging_width<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>depth<sp/>=<sp/>0.01f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>riverbed_talus<sp/>=<sp/>0.2<sp/>/<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noise_ratio<sp/>=<sp/>0.9f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>mask;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a6d536f0d67ade56c6a60927d8c8e9720" kindref="member">hmap::dig_river</ref>(zd1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{path},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>riverbank_talus,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>river_width,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>merging_width,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>depth,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>riverbed_talus,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noise_ratio,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;mask);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>multiple<sp/>streams</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>ij_start2(128,<sp/>180);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Path" kindref="compound">hmap::Path</ref><sp/><sp/><sp/><sp/><sp/><sp/>path2<sp/>=<sp/><ref refid="namespacehmap_1a5adb98e67f89036317df083dd2123a1e" kindref="member">hmap::flow_stream</ref>(z,<sp/>ij_start2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zd2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a6d536f0d67ade56c6a60927d8c8e9720" kindref="member">hmap::dig_river</ref>(zd2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{path,<sp/>path2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>riverbank_talus,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>river_width,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>merging_width,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>depth,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>riverbed_talus,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noise_ratio,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;mask);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>zd2.<ref refid="classhmap_1_1Array_1ad7018857827d8e8d263516bbbd77630f" kindref="member">to_png_grayscale</ref>(</highlight><highlight class="stringliteral">&quot;out.png&quot;</highlight><highlight class="normal">,<sp/>CV_16U);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_flow_stream.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zv,<sp/>zd1,<sp/>zd2,<sp/>mask},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_flow_stream.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/path.cpp" line="956" column="6" bodyfile="HighMap/src/geometry/path.cpp" bodystart="956" bodyend="1022" declfile="HighMap/include/highmap/geometry/path.hpp" declline="882" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a31b3cde3ce1fa52f1856b962f4443d49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::dig_river</definition>
        <argsstring>(Array &amp;z, const Path &amp;path, float riverbank_talus, int river_width=0, int merging_width=0, float depth=0.f, float riverbed_talus=0.f, float noise_ratio=0.9f, uint seed=0, Array *p_mask=nullptr)</argsstring>
        <name>dig_river</name>
        <qualifiedname>hmap::dig_river</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Path" kindref="compound">Path</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>float</type>
          <declname>riverbank_talus</declname>
        </param>
        <param>
          <type>int</type>
          <declname>river_width</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>merging_width</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>float</type>
          <declname>depth</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>riverbed_talus</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>noise_ratio</declname>
          <defval>0.9<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/path.cpp" line="1024" column="6" bodyfile="HighMap/src/geometry/path.cpp" bodystart="1024" bodyend="1047" declfile="HighMap/include/highmap/geometry/path.hpp" declline="893" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::angle</definition>
        <argsstring>(const Point &amp;p1, const Point &amp;p2)</argsstring>
        <name>angle</name>
        <qualifiedname>hmap::angle</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Computes the angle between two points relative to the x-axis. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the angle formed by the vector from <computeroutput>p1</computeroutput> to <computeroutput>p2</computeroutput> with respect to the x-axis. The angle is measured in radians and is oriented in the counter-clockwise direction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p1</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting point of the vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p2</parametername>
</parameternamelist>
<parameterdescription>
<para>The ending point of the vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The angle in radians between the vector formed by <computeroutput>p1</computeroutput> to <computeroutput>p2</computeroutput> and the x-axis. The angle is in the range [-π, π]. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/points.cpp" line="42" column="7" bodyfile="HighMap/src/geometry/points.cpp" bodystart="42" bodyend="45" declfile="HighMap/include/highmap/geometry/point.hpp" declline="197" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a1f02679c93973b91046f26960bf266d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::angle</definition>
        <argsstring>(const Point &amp;p0, const Point &amp;p1, const Point &amp;p2)</argsstring>
        <name>angle</name>
        <qualifiedname>hmap::angle</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Computes the angle formed by three points with the reference point as the origin. </para>
        </briefdescription>
        <detaileddescription>
<para>Given three points ( p0 ), ( p1 ), and ( p2 ), this function calculates the angle formed between the vectors ( p0 \rightarrow p2 ) and ( p0 \rightarrow p1 ). The angle is oriented in the 2D plane and measured in radians.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p0</parametername>
</parameternamelist>
<parameterdescription>
<para>The reference point (origin of the angle measurement). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first point defining the angle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second point defining the angle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The angle between the vectors ( p0 \rightarrow p2 ) and ( p0 \rightarrow p1 ) in radians.</para>
</simplesect>
<simplesect kind="note"><para>The angle is calculated using the 2D vectors defined by ( p0 \rightarrow p1 ) and ( p0 \rightarrow p2 ). The result will be in the range ([-π, π]). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/points.cpp" line="47" column="7" bodyfile="HighMap/src/geometry/points.cpp" bodystart="47" bodyend="69" declfile="HighMap/include/highmap/geometry/point.hpp" declline="218" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a81ad5d7feec9716598307f4de02d47de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::cross_product</definition>
        <argsstring>(const Point &amp;p0, const Point &amp;p1, const Point &amp;p2)</argsstring>
        <name>cross_product</name>
        <qualifiedname>hmap::cross_product</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Computes the 2D cross product of vectors formed by three points. </para>
        </briefdescription>
        <detaileddescription>
<para>Given three points p0, p1, and p2 in 2D space, this function computes the scalar cross product of the vectors (p1 - p0) and (p2 - p0). In 2D, the cross product is a scalar value and is often used to determine the orientation of the three points or the signed area of the parallelogram they form.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p0</parametername>
</parameternamelist>
<parameterdescription>
<para>The first point, which serves as the common origin of the two vectors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p1</parametername>
</parameternamelist>
<parameterdescription>
<para>The second point, forming the first vector p1 - p0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p2</parametername>
</parameternamelist>
<parameterdescription>
<para>The third point, forming the second vector p2 - p0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The scalar value of the 2D cross product.<itemizedlist>
<listitem><para>Positive if the points p0, p1, p2 are oriented counterclockwise.</para>
</listitem><listitem><para>Negative if they are oriented clockwise.</para>
</listitem><listitem><para>Zero if the points are collinear. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/points.cpp" line="71" column="7" bodyfile="HighMap/src/geometry/points.cpp" bodystart="71" bodyend="81" declfile="HighMap/include/highmap/geometry/point.hpp" declline="237" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a30122e874f6a99af65954458cc9e4de9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::curvature</definition>
        <argsstring>(const Point &amp;p1, const Point &amp;p2, const Point &amp;p3)</argsstring>
        <name>curvature</name>
        <qualifiedname>hmap::curvature</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &amp;</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
<para>Calculates the curvature formed by three points in 2D space. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first point of the triangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second point of the triangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p3</parametername>
</parameternamelist>
<parameterdescription>
<para>The third point of the triangle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The curvature. Returns 0 if the points are collinear. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/points.cpp" line="83" column="7" bodyfile="HighMap/src/geometry/points.cpp" bodystart="83" bodyend="91" declfile="HighMap/include/highmap/geometry/point.hpp" declline="247" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a567410971127d39a9e3c2d7b75364def" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::distance</definition>
        <argsstring>(const Point &amp;p1, const Point &amp;p2)</argsstring>
        <name>distance</name>
        <qualifiedname>hmap::distance</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Calculates the distance between two points. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes the Euclidean distance between two points in 2D space.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second point. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The distance between the two points. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/points.cpp" line="93" column="7" bodyfile="HighMap/src/geometry/points.cpp" bodystart="93" bodyend="98" declfile="HighMap/include/highmap/geometry/point.hpp" declline="258" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ac5cbdd19410027f3d4e26fd68fd9bdb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Point" kindref="compound">Point</ref></type>
        <definition>Point hmap::interp_bezier</definition>
        <argsstring>(const Point &amp;p_start, const Point &amp;p_ctrl_start, const Point &amp;p_ctrl_end, const Point &amp;p_end, float t)</argsstring>
        <name>interp_bezier</name>
        <qualifiedname>hmap::interp_bezier</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &amp;</type>
          <declname>p_start</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &amp;</type>
          <declname>p_ctrl_start</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &amp;</type>
          <declname>p_ctrl_end</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &amp;</type>
          <declname>p_end</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Performs a cubic Bezier interpolation. </para>
        </briefdescription>
        <detaileddescription>
<para>Interpolates a point on a cubic Bezier curve defined by the control points <computeroutput>p_start</computeroutput>, <computeroutput>p_ctrl_start</computeroutput>, <computeroutput>p_ctrl_end</computeroutput>, and <computeroutput>p_end</computeroutput>, using the parameter <computeroutput>t</computeroutput>. The parameter <computeroutput>t</computeroutput> should be within the range [0, 1], where <computeroutput>t = 0</computeroutput> corresponds to the start point <computeroutput>p_start</computeroutput> and <computeroutput>t = 1</computeroutput> corresponds to the end point <computeroutput>p_end</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_start</parametername>
</parameternamelist>
<parameterdescription>
<para>The first control point (start point). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_ctrl_start</parametername>
</parameternamelist>
<parameterdescription>
<para>The second control point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_ctrl_end</parametername>
</parameternamelist>
<parameterdescription>
<para>The third control point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_end</parametername>
</parameternamelist>
<parameterdescription>
<para>The fourth control point (end point). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The interpolation parameter, ranging from 0 to 1. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The interpolated point on the Bezier curve.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_point_interp.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>x<sp/>=<sp/>{0.f,<sp/>0.1f,<sp/>0.5f,<sp/>0.7f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>y<sp/>=<sp/>{0.2f,<sp/>0.1f,<sp/>0.5f,<sp/>0.6f};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>generate<sp/>4<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec4" kindref="compound">hmap::Vec4&lt;float&gt;</ref><sp/>bbox<sp/>=<sp/>{-1.f,<sp/>0.f,<sp/>0.5f,<sp/>1.5f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Path" kindref="compound">hmap::Path</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/><ref refid="classhmap_1_1Path" kindref="compound">hmap::Path</ref>(4,<sp/>2,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>path.<ref refid="classhmap_1_1Path_1ad68abaa80879402c3758e24626acfb53" kindref="member">reorder_nns</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>path.<ref refid="classhmap_1_1Cloud_1aefea3d749a554df8a23ec38af5acb415" kindref="member">print</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Point" kindref="compound">hmap::Point</ref><sp/>p0<sp/>=<sp/>path.<ref refid="classhmap_1_1Cloud_1aad75fb7bcfa7a2c3f139d2e3d3d6cc54" kindref="member">points</ref>[0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Point" kindref="compound">hmap::Point</ref><sp/>p1<sp/>=<sp/>path.<ref refid="classhmap_1_1Cloud_1aad75fb7bcfa7a2c3f139d2e3d3d6cc54" kindref="member">points</ref>[1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Point" kindref="compound">hmap::Point</ref><sp/>p2<sp/>=<sp/>path.<ref refid="classhmap_1_1Cloud_1aad75fb7bcfa7a2c3f139d2e3d3d6cc54" kindref="member">points</ref>[2];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Point" kindref="compound">hmap::Point</ref><sp/>p3<sp/>=<sp/>path.<ref refid="classhmap_1_1Cloud_1aad75fb7bcfa7a2c3f139d2e3d3d6cc54" kindref="member">points</ref>[3];</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>interpolate</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>npts<sp/>=<sp/>50;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>t<sp/>=<sp/><ref refid="namespacehmap_1a3957ac4ae673f8ad402b5dd71e99b015" kindref="member">hmap::linspace</ref>(0.f,<sp/>1.f,<sp/>npts);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Point&gt;<sp/>points_bezier<sp/>=<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Point&gt;<sp/>points_bspline<sp/>=<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Point&gt;<sp/>points_catmullrom<sp/>=<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;t_<sp/>:<sp/>t)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>points_bezier.push_back(<ref refid="namespacehmap_1ac5cbdd19410027f3d4e26fd68fd9bdb7" kindref="member">hmap::interp_bezier</ref>(p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>t_));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>points_bspline.push_back(<ref refid="namespacehmap_1af148c924b422baa2e359e0788b7392d0" kindref="member">hmap::interp_bspline</ref>(p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>t_));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>points_catmullrom.push_back(<ref refid="namespacehmap_1ac7a93fe9501041332e1ff7a128742c6f" kindref="member">hmap::interp_catmullrom</ref>(p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>t_));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>plots</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(512,<sp/>512));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>path.<ref refid="classhmap_1_1Path_1a3b90d30abcdc4da9e381957d76c5d8db" kindref="member">to_array</ref>(z,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Path" kindref="compound">hmap::Path</ref>(points_bezier).<ref refid="classhmap_1_1Path_1a3b90d30abcdc4da9e381957d76c5d8db" kindref="member">to_array</ref>(z,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Path" kindref="compound">hmap::Path</ref>(points_bspline).<ref refid="classhmap_1_1Path_1a3b90d30abcdc4da9e381957d76c5d8db" kindref="member">to_array</ref>(z,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Path" kindref="compound">hmap::Path</ref>(points_catmullrom).<ref refid="classhmap_1_1Path_1a3b90d30abcdc4da9e381957d76c5d8db" kindref="member">to_array</ref>(z,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_point_interp.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_point_interp.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/points.cpp" line="100" column="7" bodyfile="HighMap/src/geometry/points.cpp" bodystart="100" bodyend="114" declfile="HighMap/include/highmap/geometry/point.hpp" declline="282" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1af148c924b422baa2e359e0788b7392d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Point" kindref="compound">Point</ref></type>
        <definition>Point hmap::interp_bspline</definition>
        <argsstring>(const Point &amp;p0, const Point &amp;p1, const Point &amp;p2, const Point &amp;p3, float t)</argsstring>
        <name>interp_bspline</name>
        <qualifiedname>hmap::interp_bspline</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &amp;</type>
          <declname>p3</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Performs a cubic B-spline interpolation. </para>
        </briefdescription>
        <detaileddescription>
<para>Interpolates a point on a cubic B-spline curve using the control points <computeroutput>p0</computeroutput>, <computeroutput>p1</computeroutput>, <computeroutput>p2</computeroutput>, and <computeroutput>p3</computeroutput>. The points <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> define the segment of the curve to be interpolated, while <computeroutput>p0</computeroutput> and <computeroutput>p3</computeroutput> are used as additional control points. The parameter <computeroutput>t</computeroutput> should be within the range [0, 1], where <computeroutput>t = 0</computeroutput> corresponds to the start point <computeroutput>p1</computeroutput> and <computeroutput>t = 1</computeroutput> corresponds to the end point <computeroutput>p2</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p0</parametername>
</parameternamelist>
<parameterdescription>
<para>The first control point (influence for the start point). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p1</parametername>
</parameternamelist>
<parameterdescription>
<para>The second control point (start point of the segment). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p2</parametername>
</parameternamelist>
<parameterdescription>
<para>The third control point (end point of the segment). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p3</parametername>
</parameternamelist>
<parameterdescription>
<para>The fourth control point (influence for the end point). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The interpolation parameter, ranging from 0 to 1. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The interpolated point on the B-spline curve.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_point_interp.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>x<sp/>=<sp/>{0.f,<sp/>0.1f,<sp/>0.5f,<sp/>0.7f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>y<sp/>=<sp/>{0.2f,<sp/>0.1f,<sp/>0.5f,<sp/>0.6f};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>generate<sp/>4<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec4" kindref="compound">hmap::Vec4&lt;float&gt;</ref><sp/>bbox<sp/>=<sp/>{-1.f,<sp/>0.f,<sp/>0.5f,<sp/>1.5f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Path" kindref="compound">hmap::Path</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/><ref refid="classhmap_1_1Path" kindref="compound">hmap::Path</ref>(4,<sp/>2,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>path.<ref refid="classhmap_1_1Path_1ad68abaa80879402c3758e24626acfb53" kindref="member">reorder_nns</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>path.<ref refid="classhmap_1_1Cloud_1aefea3d749a554df8a23ec38af5acb415" kindref="member">print</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Point" kindref="compound">hmap::Point</ref><sp/>p0<sp/>=<sp/>path.<ref refid="classhmap_1_1Cloud_1aad75fb7bcfa7a2c3f139d2e3d3d6cc54" kindref="member">points</ref>[0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Point" kindref="compound">hmap::Point</ref><sp/>p1<sp/>=<sp/>path.<ref refid="classhmap_1_1Cloud_1aad75fb7bcfa7a2c3f139d2e3d3d6cc54" kindref="member">points</ref>[1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Point" kindref="compound">hmap::Point</ref><sp/>p2<sp/>=<sp/>path.<ref refid="classhmap_1_1Cloud_1aad75fb7bcfa7a2c3f139d2e3d3d6cc54" kindref="member">points</ref>[2];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Point" kindref="compound">hmap::Point</ref><sp/>p3<sp/>=<sp/>path.<ref refid="classhmap_1_1Cloud_1aad75fb7bcfa7a2c3f139d2e3d3d6cc54" kindref="member">points</ref>[3];</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>interpolate</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>npts<sp/>=<sp/>50;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>t<sp/>=<sp/><ref refid="namespacehmap_1a3957ac4ae673f8ad402b5dd71e99b015" kindref="member">hmap::linspace</ref>(0.f,<sp/>1.f,<sp/>npts);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Point&gt;<sp/>points_bezier<sp/>=<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Point&gt;<sp/>points_bspline<sp/>=<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Point&gt;<sp/>points_catmullrom<sp/>=<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;t_<sp/>:<sp/>t)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>points_bezier.push_back(<ref refid="namespacehmap_1ac5cbdd19410027f3d4e26fd68fd9bdb7" kindref="member">hmap::interp_bezier</ref>(p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>t_));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>points_bspline.push_back(<ref refid="namespacehmap_1af148c924b422baa2e359e0788b7392d0" kindref="member">hmap::interp_bspline</ref>(p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>t_));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>points_catmullrom.push_back(<ref refid="namespacehmap_1ac7a93fe9501041332e1ff7a128742c6f" kindref="member">hmap::interp_catmullrom</ref>(p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>t_));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>plots</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(512,<sp/>512));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>path.<ref refid="classhmap_1_1Path_1a3b90d30abcdc4da9e381957d76c5d8db" kindref="member">to_array</ref>(z,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Path" kindref="compound">hmap::Path</ref>(points_bezier).<ref refid="classhmap_1_1Path_1a3b90d30abcdc4da9e381957d76c5d8db" kindref="member">to_array</ref>(z,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Path" kindref="compound">hmap::Path</ref>(points_bspline).<ref refid="classhmap_1_1Path_1a3b90d30abcdc4da9e381957d76c5d8db" kindref="member">to_array</ref>(z,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Path" kindref="compound">hmap::Path</ref>(points_catmullrom).<ref refid="classhmap_1_1Path_1a3b90d30abcdc4da9e381957d76c5d8db" kindref="member">to_array</ref>(z,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_point_interp.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_point_interp.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/points.cpp" line="116" column="7" bodyfile="HighMap/src/geometry/points.cpp" bodystart="116" bodyend="129" declfile="HighMap/include/highmap/geometry/point.hpp" declline="311" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ac7a93fe9501041332e1ff7a128742c6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Point" kindref="compound">Point</ref></type>
        <definition>Point hmap::interp_catmullrom</definition>
        <argsstring>(const Point &amp;p0, const Point &amp;p1, const Point &amp;p2, const Point &amp;p3, float t)</argsstring>
        <name>interp_catmullrom</name>
        <qualifiedname>hmap::interp_catmullrom</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &amp;</type>
          <declname>p3</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Performs a Catmull-Rom spline interpolation. </para>
        </briefdescription>
        <detaileddescription>
<para>Interpolates a point on a Catmull-Rom spline defined by the points <computeroutput>p0</computeroutput>, <computeroutput>p1</computeroutput>, <computeroutput>p2</computeroutput>, and <computeroutput>p3</computeroutput>. The points <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> define the segment of the curve to be interpolated, while <computeroutput>p0</computeroutput> and <computeroutput>p3</computeroutput> are used as additional control points. The parameter <computeroutput>t</computeroutput> should be within the range [0, 1], where <computeroutput>t = 0</computeroutput> corresponds to the start point <computeroutput>p1</computeroutput> and <computeroutput>t = 1</computeroutput> corresponds to the end point <computeroutput>p2</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p0</parametername>
</parameternamelist>
<parameterdescription>
<para>The first control point (influence for the start point). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p1</parametername>
</parameternamelist>
<parameterdescription>
<para>The second control point (start point of the segment). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p2</parametername>
</parameternamelist>
<parameterdescription>
<para>The third control point (end point of the segment). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p3</parametername>
</parameternamelist>
<parameterdescription>
<para>The fourth control point (influence for the end point). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The interpolation parameter, ranging from 0 to 1. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The interpolated point on the Catmull-Rom spline.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_point_interp.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>x<sp/>=<sp/>{0.f,<sp/>0.1f,<sp/>0.5f,<sp/>0.7f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>y<sp/>=<sp/>{0.2f,<sp/>0.1f,<sp/>0.5f,<sp/>0.6f};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>generate<sp/>4<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec4" kindref="compound">hmap::Vec4&lt;float&gt;</ref><sp/>bbox<sp/>=<sp/>{-1.f,<sp/>0.f,<sp/>0.5f,<sp/>1.5f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Path" kindref="compound">hmap::Path</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/><ref refid="classhmap_1_1Path" kindref="compound">hmap::Path</ref>(4,<sp/>2,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>path.<ref refid="classhmap_1_1Path_1ad68abaa80879402c3758e24626acfb53" kindref="member">reorder_nns</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>path.<ref refid="classhmap_1_1Cloud_1aefea3d749a554df8a23ec38af5acb415" kindref="member">print</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Point" kindref="compound">hmap::Point</ref><sp/>p0<sp/>=<sp/>path.<ref refid="classhmap_1_1Cloud_1aad75fb7bcfa7a2c3f139d2e3d3d6cc54" kindref="member">points</ref>[0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Point" kindref="compound">hmap::Point</ref><sp/>p1<sp/>=<sp/>path.<ref refid="classhmap_1_1Cloud_1aad75fb7bcfa7a2c3f139d2e3d3d6cc54" kindref="member">points</ref>[1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Point" kindref="compound">hmap::Point</ref><sp/>p2<sp/>=<sp/>path.<ref refid="classhmap_1_1Cloud_1aad75fb7bcfa7a2c3f139d2e3d3d6cc54" kindref="member">points</ref>[2];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Point" kindref="compound">hmap::Point</ref><sp/>p3<sp/>=<sp/>path.<ref refid="classhmap_1_1Cloud_1aad75fb7bcfa7a2c3f139d2e3d3d6cc54" kindref="member">points</ref>[3];</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>interpolate</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>npts<sp/>=<sp/>50;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>t<sp/>=<sp/><ref refid="namespacehmap_1a3957ac4ae673f8ad402b5dd71e99b015" kindref="member">hmap::linspace</ref>(0.f,<sp/>1.f,<sp/>npts);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Point&gt;<sp/>points_bezier<sp/>=<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Point&gt;<sp/>points_bspline<sp/>=<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Point&gt;<sp/>points_catmullrom<sp/>=<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;t_<sp/>:<sp/>t)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>points_bezier.push_back(<ref refid="namespacehmap_1ac5cbdd19410027f3d4e26fd68fd9bdb7" kindref="member">hmap::interp_bezier</ref>(p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>t_));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>points_bspline.push_back(<ref refid="namespacehmap_1af148c924b422baa2e359e0788b7392d0" kindref="member">hmap::interp_bspline</ref>(p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>t_));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>points_catmullrom.push_back(<ref refid="namespacehmap_1ac7a93fe9501041332e1ff7a128742c6f" kindref="member">hmap::interp_catmullrom</ref>(p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>t_));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>plots</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(512,<sp/>512));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>path.<ref refid="classhmap_1_1Path_1a3b90d30abcdc4da9e381957d76c5d8db" kindref="member">to_array</ref>(z,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Path" kindref="compound">hmap::Path</ref>(points_bezier).<ref refid="classhmap_1_1Path_1a3b90d30abcdc4da9e381957d76c5d8db" kindref="member">to_array</ref>(z,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Path" kindref="compound">hmap::Path</ref>(points_bspline).<ref refid="classhmap_1_1Path_1a3b90d30abcdc4da9e381957d76c5d8db" kindref="member">to_array</ref>(z,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Path" kindref="compound">hmap::Path</ref>(points_catmullrom).<ref refid="classhmap_1_1Path_1a3b90d30abcdc4da9e381957d76c5d8db" kindref="member">to_array</ref>(z,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_point_interp.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_point_interp.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/points.cpp" line="131" column="7" bodyfile="HighMap/src/geometry/points.cpp" bodystart="131" bodyend="143" declfile="HighMap/include/highmap/geometry/point.hpp" declline="340" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aab4ce9b01f013efdc3dd817da4177737" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Point" kindref="compound">Point</ref></type>
        <definition>Point hmap::interp_decasteljau</definition>
        <argsstring>(const std::vector&lt; Point &gt; &amp;points, float t)</argsstring>
        <name>interp_decasteljau</name>
        <qualifiedname>hmap::interp_decasteljau</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &gt; &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Performs a De Casteljau algorithm-based interpolation for Bezier curves. </para>
        </briefdescription>
        <detaileddescription>
<para>Interpolates a point on a Bézier curve defined by a set of control points using De Casteljau&apos;s algorithm. The algorithm is recursive and provides a stable and numerically robust method to evaluate Bézier curves at a given parameter <computeroutput>t</computeroutput>.</para>
<para>The parameter <computeroutput>t</computeroutput> should be within the range [0, 1], where <computeroutput>t = 0</computeroutput> corresponds to the first control point and <computeroutput>t = 1</computeroutput> corresponds to the last control point.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of control points defining the Bézier curve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The interpolation parameter, ranging from 0 to 1. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The interpolated point on the Bézier curve.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_point_interp.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>x<sp/>=<sp/>{0.f,<sp/>0.1f,<sp/>0.5f,<sp/>0.7f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>y<sp/>=<sp/>{0.2f,<sp/>0.1f,<sp/>0.5f,<sp/>0.6f};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>generate<sp/>4<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec4" kindref="compound">hmap::Vec4&lt;float&gt;</ref><sp/>bbox<sp/>=<sp/>{-1.f,<sp/>0.f,<sp/>0.5f,<sp/>1.5f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Path" kindref="compound">hmap::Path</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/><ref refid="classhmap_1_1Path" kindref="compound">hmap::Path</ref>(4,<sp/>2,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>path.<ref refid="classhmap_1_1Path_1ad68abaa80879402c3758e24626acfb53" kindref="member">reorder_nns</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>path.<ref refid="classhmap_1_1Cloud_1aefea3d749a554df8a23ec38af5acb415" kindref="member">print</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Point" kindref="compound">hmap::Point</ref><sp/>p0<sp/>=<sp/>path.<ref refid="classhmap_1_1Cloud_1aad75fb7bcfa7a2c3f139d2e3d3d6cc54" kindref="member">points</ref>[0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Point" kindref="compound">hmap::Point</ref><sp/>p1<sp/>=<sp/>path.<ref refid="classhmap_1_1Cloud_1aad75fb7bcfa7a2c3f139d2e3d3d6cc54" kindref="member">points</ref>[1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Point" kindref="compound">hmap::Point</ref><sp/>p2<sp/>=<sp/>path.<ref refid="classhmap_1_1Cloud_1aad75fb7bcfa7a2c3f139d2e3d3d6cc54" kindref="member">points</ref>[2];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Point" kindref="compound">hmap::Point</ref><sp/>p3<sp/>=<sp/>path.<ref refid="classhmap_1_1Cloud_1aad75fb7bcfa7a2c3f139d2e3d3d6cc54" kindref="member">points</ref>[3];</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>interpolate</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>npts<sp/>=<sp/>50;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>t<sp/>=<sp/><ref refid="namespacehmap_1a3957ac4ae673f8ad402b5dd71e99b015" kindref="member">hmap::linspace</ref>(0.f,<sp/>1.f,<sp/>npts);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Point&gt;<sp/>points_bezier<sp/>=<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Point&gt;<sp/>points_bspline<sp/>=<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Point&gt;<sp/>points_catmullrom<sp/>=<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;t_<sp/>:<sp/>t)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>points_bezier.push_back(<ref refid="namespacehmap_1ac5cbdd19410027f3d4e26fd68fd9bdb7" kindref="member">hmap::interp_bezier</ref>(p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>t_));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>points_bspline.push_back(<ref refid="namespacehmap_1af148c924b422baa2e359e0788b7392d0" kindref="member">hmap::interp_bspline</ref>(p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>t_));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>points_catmullrom.push_back(<ref refid="namespacehmap_1ac7a93fe9501041332e1ff7a128742c6f" kindref="member">hmap::interp_catmullrom</ref>(p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>t_));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>plots</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(512,<sp/>512));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>path.<ref refid="classhmap_1_1Path_1a3b90d30abcdc4da9e381957d76c5d8db" kindref="member">to_array</ref>(z,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Path" kindref="compound">hmap::Path</ref>(points_bezier).<ref refid="classhmap_1_1Path_1a3b90d30abcdc4da9e381957d76c5d8db" kindref="member">to_array</ref>(z,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Path" kindref="compound">hmap::Path</ref>(points_bspline).<ref refid="classhmap_1_1Path_1a3b90d30abcdc4da9e381957d76c5d8db" kindref="member">to_array</ref>(z,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Path" kindref="compound">hmap::Path</ref>(points_catmullrom).<ref refid="classhmap_1_1Path_1a3b90d30abcdc4da9e381957d76c5d8db" kindref="member">to_array</ref>(z,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_point_interp.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_point_interp.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/points.cpp" line="145" column="7" bodyfile="HighMap/src/geometry/points.cpp" bodystart="145" bodyend="154" declfile="HighMap/include/highmap/geometry/point.hpp" declline="369" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a61b30a7773960b38e0a231e240a64af6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
        <definition>Vec4&lt; float &gt; hmap::intersect_bounding_boxes</definition>
        <argsstring>(const Vec4&lt; float &gt; &amp;bbox1, const Vec4&lt; float &gt; &amp;bbox2)</argsstring>
        <name>intersect_bounding_boxes</name>
        <qualifiedname>hmap::intersect_bounding_boxes</qualifiedname>
        <param>
          <type>const <ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt; &amp;</type>
          <declname>bbox1</declname>
        </param>
        <param>
          <type>const <ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt; &amp;</type>
          <declname>bbox2</declname>
        </param>
        <briefdescription>
<para>Determines the intersection of two bounding boxes. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the intersection of two bounding boxes, <computeroutput>bbox1</computeroutput> and <computeroutput>bbox2</computeroutput>. If they intersect, it returns the intersecting bounding box. If they are disjoint, it returns <computeroutput>std::nullopt</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bbox1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first bounding box defined as <computeroutput><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt;float&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second bounding box defined as <computeroutput><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt;float&gt;</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <computeroutput>std::optional&lt;<ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt;float&gt;&gt;</computeroutput> containing the intersecting bounding box if an intersection exists; <computeroutput>std::nullopt</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/points.cpp" line="156" column="6" bodyfile="HighMap/src/geometry/points.cpp" bodystart="156" bodyend="173" declfile="HighMap/include/highmap/geometry/point.hpp" declline="384" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a0c5a341999c6f1b64fd04f2a6bd6dd66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hmap::is_point_within_bounding_box</definition>
        <argsstring>(Point p, Vec4&lt; float &gt; bbox)</argsstring>
        <name>is_point_within_bounding_box</name>
        <qualifiedname>hmap::is_point_within_bounding_box</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Point" kindref="compound">Point</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
        </param>
        <briefdescription>
<para>Checks if a point is within a specified bounding box. </para>
        </briefdescription>
        <detaileddescription>
<para>This function determines if a given point <computeroutput>p</computeroutput> lies within the rectangular bounding box defined by <computeroutput>bbox</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to check, represented as a <computeroutput><ref refid="classhmap_1_1Point" kindref="compound">Point</ref></computeroutput> with <computeroutput>x</computeroutput> and <computeroutput>y</computeroutput> coordinates. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>The bounding box defined as a <computeroutput><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt;float&gt;</computeroutput>, where <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput> are the horizontal boundaries (min and max x), and <computeroutput>c</computeroutput> and <computeroutput>d</computeroutput> are the vertical boundaries (min and max y). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the point is within the bounding box; <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/points.cpp" line="175" column="6" bodyfile="HighMap/src/geometry/points.cpp" bodystart="175" bodyend="178" declfile="HighMap/include/highmap/geometry/point.hpp" declline="401" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1abcecf8666a7291e978c81ba31eae37a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hmap::is_point_within_bounding_box</definition>
        <argsstring>(float x, float y, Vec4&lt; float &gt; bbox)</argsstring>
        <name>is_point_within_bounding_box</name>
        <qualifiedname>hmap::is_point_within_bounding_box</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
        </param>
        <briefdescription>
<para>Checks if a point is within a specified bounding box. </para>
        </briefdescription>
        <detaileddescription>
<para>This function determines if a point with coordinates <computeroutput>(x, y)</computeroutput> lies within the rectangular bounding box defined by <computeroutput>bbox</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The x-coordinate of the point to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The y-coordinate of the point to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>The bounding box defined as a <computeroutput><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt;float&gt;</computeroutput>, where <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput> are the horizontal boundaries (min and max x), and <computeroutput>c</computeroutput> and <computeroutput>d</computeroutput> are the vertical boundaries (min and max y). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the point is within the bounding box; <computeroutput>false</computeroutput> otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/points.cpp" line="180" column="6" bodyfile="HighMap/src/geometry/points.cpp" bodystart="180" bodyend="183" declfile="HighMap/include/highmap/geometry/point.hpp" declline="417" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ac14815cf025b7430d31d08125a5c6f0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Point" kindref="compound">Point</ref></type>
        <definition>Point hmap::lerp</definition>
        <argsstring>(const Point &amp;p1, const Point &amp;p2, float t)</argsstring>
        <name>lerp</name>
        <qualifiedname>hmap::lerp</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Linearly interpolates between two points. </para>
        </briefdescription>
        <detaileddescription>
<para>This function performs linear interpolation between two points based on a given factor. The interpolation factor <computeroutput>t</computeroutput> should be in the range [0, 1], where 0 corresponds to the first point and 1 corresponds to the second point.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p1</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p2</parametername>
</parameternamelist>
<parameterdescription>
<para>The ending point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The interpolation factor (0 &lt;= t &lt;= 1). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The interpolated point between <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput>.</para>
</simplesect>
<simplesect kind="note"><para>If <computeroutput>t</computeroutput> is outside the range [0, 1], the function will still return a point outside the segment defined by <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/points.cpp" line="185" column="7" bodyfile="HighMap/src/geometry/points.cpp" bodystart="185" bodyend="188" declfile="HighMap/include/highmap/geometry/point.hpp" declline="434" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a520a1e42c4e492e81b334914807abc22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Point" kindref="compound">Point</ref></type>
        <definition>Point hmap::midpoint</definition>
        <argsstring>(const Point &amp;p1, const Point &amp;p2, int orientation, float distance_ratio, float t=0.5f)</argsstring>
        <name>midpoint</name>
        <qualifiedname>hmap::midpoint</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>orientation</declname>
        </param>
        <param>
          <type>float</type>
          <declname>distance_ratio</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Computes the midpoint displacement in 1D with a perpendicular displacement. </para>
        </briefdescription>
        <detaileddescription>
<para>This function generates a midpoint between two points <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> based on a linear interpolation parameter <computeroutput>t</computeroutput>. It then displaces this midpoint in the direction perpendicular to the line segment formed by <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput>. The displacement distance is determined by the <computeroutput>distance_ratio</computeroutput> parameter and the <computeroutput>orientation</computeroutput> (which can be -1 or 1).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>orientation</parametername>
</parameternamelist>
<parameterdescription>
<para>Determines the direction of the perpendicular displacement.<itemizedlist>
<listitem><para>A value of <computeroutput>1</computeroutput> displaces the midpoint in the positive perpendicular direction.</para>
</listitem><listitem><para>A value of <computeroutput>-1</computeroutput> displaces the midpoint in the negative perpendicular direction. </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distance_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>The ratio of the displacement distance relative to the length of the line segment <computeroutput>p1p2</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The interpolation factor (default is 0.5) for computing the midpoint between <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput>, before the displacement. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="classhmap_1_1Point" kindref="compound">Point</ref></computeroutput> representing the displaced midpoint. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/points.cpp" line="190" column="7" bodyfile="HighMap/src/geometry/points.cpp" bodystart="190" bodyend="217" declfile="HighMap/include/highmap/geometry/point.hpp" declline="461" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a69877ef43645c767daa0735fde59821c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::sort_points</definition>
        <argsstring>(std::vector&lt; Point &gt; &amp;points)</argsstring>
        <name>sort_points</name>
        <qualifiedname>hmap::sort_points</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &gt; &amp;</type>
          <declname>points</declname>
        </param>
        <briefdescription>
<para>Sorts a vector of points in ascending order based on their coordinates. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sorts the provided vector of <computeroutput><ref refid="classhmap_1_1Point" kindref="compound">Point</ref></computeroutput> objects first by the x-coordinate and then by the y-coordinate in ascending order. The sorting is done in-place.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of <computeroutput><ref refid="classhmap_1_1Point" kindref="compound">Point</ref></computeroutput> objects to be sorted. The vector is modified directly with the points arranged in ascending order. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/points.cpp" line="231" column="6" bodyfile="HighMap/src/geometry/points.cpp" bodystart="231" bodyend="234" declfile="HighMap/include/highmap/geometry/point.hpp" declline="478" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a9249226d73f4396157c1c6415ebf3a7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::triangle_area</definition>
        <argsstring>(const Point &amp;p1, const Point &amp;p2, const Point &amp;p3)</argsstring>
        <name>triangle_area</name>
        <qualifiedname>hmap::triangle_area</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &amp;</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
<para>Calculates the area of a triangle formed by three points in 2D space. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the determinant method to compute the absolute area of a triangle given three points (p1, p2, p3). It assumes the points are specified as 2D coordinates.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first point of the triangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second point of the triangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p3</parametername>
</parameternamelist>
<parameterdescription>
<para>The third point of the triangle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The area of the triangle as a floating-point value. Returns 0 if the points are collinear. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/points.cpp" line="236" column="7" bodyfile="HighMap/src/geometry/points.cpp" bodystart="236" bodyend="240" declfile="HighMap/include/highmap/geometry/point.hpp" declline="493" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a4910efa1a82d5dd66d7d02a87fab7e7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
        <definition>Vec4&lt; float &gt; hmap::unit_square_bbox</definition>
        <argsstring>()</argsstring>
        <name>unit_square_bbox</name>
        <qualifiedname>hmap::unit_square_bbox</qualifiedname>
        <briefdescription>
<para>Constructs a 4D bounding box for a unit square. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns a <ref refid="structhmap_1_1Vec4" kindref="compound">Vec4&lt;float&gt;</ref> object representing the bounding box of a unit square, with components (min_x, max_x, min_y, max_y) set to (0.f, 1.f, 0.f, 1.f).</para>
<para><simplesect kind="return"><para><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4&lt;float&gt;</ref> A 4D vector representing the unit square&apos;s bounding box. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/points.cpp" line="219" column="6" bodyfile="HighMap/src/geometry/points.cpp" bodystart="219" bodyend="222" declfile="HighMap/include/highmap/geometry/point.hpp" declline="504" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ab0755dccfcae2b02a211c091e33f79a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt; float &gt; hmap::gradient1d</definition>
        <argsstring>(const std::vector&lt; float &gt; &amp;v)</argsstring>
        <name>gradient1d</name>
        <qualifiedname>hmap::gradient1d</qualifiedname>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Compute the gradient of a 1D vector. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the gradient of a 1D vector by computing the difference between successive elements.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Input vector of floats. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;float&gt; Vector of gradient values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/operator/vector.cpp" line="16" column="13" bodyfile="HighMap/src/operator/vector.cpp" bodystart="16" bodyend="29" declfile="HighMap/include/highmap/gradient.hpp" declline="33" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ae23a30f7964baacd6d0457c288fd3598" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gradient_angle</definition>
        <argsstring>(const Array &amp;array, bool downward=false)</argsstring>
        <name>gradient_angle</name>
        <qualifiedname>hmap::gradient_angle</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>downward</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Compute the polar angle of the gradient of a 2D array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the gradient angle of a 2D array, which represents the direction of the steepest ascent. The angle is measured in radians and falls within the range [-π, π]. The direction can be inverted if the <computeroutput>downward</computeroutput> flag is set to true.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input 2D array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>downward</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, invert the direction of the gradient. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Gradient angles in radians. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/gradient/gradient.cpp" line="60" column="7" bodyfile="HighMap/src/gradient/gradient.cpp" bodystart="60" bodyend="79" declfile="HighMap/include/highmap/gradient.hpp" declline="47" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a5f58c4149344b401d82f0be3c3807156" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gradient_norm</definition>
        <argsstring>(const Array &amp;array, Array *p_dx=nullptr, Array *p_dy=nullptr)</argsstring>
        <name>gradient_norm</name>
        <qualifiedname>hmap::gradient_norm</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_dx</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_dy</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Compute the gradient norm of a 2D array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the gradient norm (magnitude) of a 2D array. Optionally, the x and y gradients can be computed and stored in <computeroutput>p_dx</computeroutput> and <computeroutput>p_dy</computeroutput> respectively.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input 2D array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_dx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> where the x-gradient will be stored (optional). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_dy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> where the y-gradient will be stored (optional). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Gradient norm (magnitude).</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_gradient_norm.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dz<sp/>=<sp/><ref refid="namespacehmap_1a5f58c4149344b401d82f0be3c3807156" kindref="member">hmap::gradient_norm</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dz_p<sp/>=<sp/><ref refid="namespacehmap_1ab02a5e564763a35cd3baa727b825db4a" kindref="member">hmap::gradient_norm_prewitt</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dz_c<sp/>=<sp/><ref refid="namespacehmap_1a522e28e6f997165bb492aa68327556d9" kindref="member">hmap::gradient_norm_scharr</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dz_s<sp/>=<sp/><ref refid="namespacehmap_1ad0956aa203f9962dba258a91543d2969" kindref="member">hmap::gradient_norm_sobel</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_gradient_norm.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{dz,<sp/>dz_p,<sp/>dz_c,<sp/>dz_s},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_gradient_norm.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/gradient/gradient.cpp" line="81" column="7" bodyfile="HighMap/src/gradient/gradient.cpp" bodystart="81" bodyend="92" declfile="HighMap/include/highmap/gradient.hpp" declline="69" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ab02a5e564763a35cd3baa727b825db4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gradient_norm_prewitt</definition>
        <argsstring>(const Array &amp;array, Array *p_dx=nullptr, Array *p_dy=nullptr)</argsstring>
        <name>gradient_norm_prewitt</name>
        <qualifiedname>hmap::gradient_norm_prewitt</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_dx</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_dy</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Compute the gradient norm of a 2D array using the Prewitt filter. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the gradient norm (magnitude) using the Prewitt filter for gradient computation. Optionally, the x and y gradients can be computed and stored in <computeroutput>p_dx</computeroutput> and <computeroutput>p_dy</computeroutput> respectively.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input 2D array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_dx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> where the x-gradient will be stored (optional). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_dy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> where the y-gradient will be stored (optional). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Gradient norm (magnitude).</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_gradient_norm.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dz<sp/>=<sp/><ref refid="namespacehmap_1a5f58c4149344b401d82f0be3c3807156" kindref="member">hmap::gradient_norm</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dz_p<sp/>=<sp/><ref refid="namespacehmap_1ab02a5e564763a35cd3baa727b825db4a" kindref="member">hmap::gradient_norm_prewitt</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dz_c<sp/>=<sp/><ref refid="namespacehmap_1a522e28e6f997165bb492aa68327556d9" kindref="member">hmap::gradient_norm_scharr</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dz_s<sp/>=<sp/><ref refid="namespacehmap_1ad0956aa203f9962dba258a91543d2969" kindref="member">hmap::gradient_norm_sobel</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_gradient_norm.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{dz,<sp/>dz_p,<sp/>dz_c,<sp/>dz_s},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_gradient_norm.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/gradient/gradient.cpp" line="94" column="7" bodyfile="HighMap/src/gradient/gradient.cpp" bodystart="94" bodyend="104" declfile="HighMap/include/highmap/gradient.hpp" declline="93" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a522e28e6f997165bb492aa68327556d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gradient_norm_scharr</definition>
        <argsstring>(const Array &amp;array, Array *p_dx=nullptr, Array *p_dy=nullptr)</argsstring>
        <name>gradient_norm_scharr</name>
        <qualifiedname>hmap::gradient_norm_scharr</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_dx</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_dy</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Compute the gradient norm of a 2D array using the Scharr filter. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the gradient norm (magnitude) using the Scharr filter for gradient computation. Optionally, the x and y gradients can be computed and stored in <computeroutput>p_dx</computeroutput> and <computeroutput>p_dy</computeroutput> respectively.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input 2D array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_dx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> where the x-gradient will be stored (optional). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_dy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> where the y-gradient will be stored (optional). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Gradient norm (magnitude). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/gradient/gradient.cpp" line="120" column="7" bodyfile="HighMap/src/gradient/gradient.cpp" bodystart="120" bodyend="130" declfile="HighMap/include/highmap/gradient.hpp" declline="111" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ad0956aa203f9962dba258a91543d2969" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gradient_norm_sobel</definition>
        <argsstring>(const Array &amp;array, Array *p_dx=nullptr, Array *p_dy=nullptr)</argsstring>
        <name>gradient_norm_sobel</name>
        <qualifiedname>hmap::gradient_norm_sobel</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_dx</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_dy</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Compute the gradient norm of a 2D array using the Sobel filter. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the gradient norm (magnitude) using the Sobel filter for gradient computation. Optionally, the x and y gradients can be computed and stored in <computeroutput>p_dx</computeroutput> and <computeroutput>p_dy</computeroutput> respectively.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input 2D array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_dx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> where the x-gradient will be stored (optional). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_dy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> where the y-gradient will be stored (optional). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Gradient norm (magnitude). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/gradient/gradient.cpp" line="107" column="7" bodyfile="HighMap/src/gradient/gradient.cpp" bodystart="107" bodyend="117" declfile="HighMap/include/highmap/gradient.hpp" declline="129" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a618fb6d396a832c3dd1f053bfd27eed4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gradient_talus</definition>
        <argsstring>(const Array &amp;array)</argsstring>
        <name>gradient_talus</name>
        <qualifiedname>hmap::gradient_talus</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Compute the gradient talus slope of a 2D array. </para>
        </briefdescription>
        <detaileddescription>
<para>The talus slope is defined as the largest elevation difference between a cell and its immediate neighbors. This function computes the talus slope for the given 2D array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input 2D array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Gradient talus slope.</para>
</simplesect>
<simplesect kind="see"><para>Thermal <ref refid="namespacehmap_1a9cf7773f6141162bf60708a93acdfcee" kindref="member">erosion</ref>: <computeroutput><ref refid="namespacehmap_1ab6221592aa07d117715b474afab7db1c" kindref="member">thermal</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/gradient/gradient.cpp" line="174" column="7" bodyfile="HighMap/src/gradient/gradient.cpp" bodystart="174" bodyend="179" declfile="HighMap/include/highmap/gradient.hpp" declline="145" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aba851d370796b7b6654e681339561eb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gradient_talus</definition>
        <argsstring>(const Array &amp;array, Array &amp;talus)</argsstring>
        <name>gradient_talus</name>
        <qualifiedname>hmap::gradient_talus</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>talus</declname>
        </param>
        <briefdescription>
<para>Compute the gradient talus slope and store it in the provided array. </para>
        </briefdescription>
        <detaileddescription>
<para>This overload computes the gradient talus slope of a 2D array and stores the result in the given <computeroutput>talus</computeroutput> array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input 2D array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus</parametername>
</parameternamelist>
<parameterdescription>
<para>Output array where the gradient talus slope will be stored. This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/gradient/gradient.cpp" line="181" column="6" bodyfile="HighMap/src/gradient/gradient.cpp" bodystart="181" bodyend="200" declfile="HighMap/include/highmap/gradient.hpp" declline="156" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a11d438a3f643427c957d160b7c1a04de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gradient_x</definition>
        <argsstring>(const Array &amp;array)</argsstring>
        <name>gradient_x</name>
        <qualifiedname>hmap::gradient_x</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Compute the gradient in the x-direction of a 2D array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the gradient in the x-direction (i.e., horizontal gradient) for the given 2D array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input 2D array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Gradient in the x-direction. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/gradient/gradient.cpp" line="132" column="7" bodyfile="HighMap/src/gradient/gradient.cpp" bodystart="132" bodyend="137" declfile="HighMap/include/highmap/gradient.hpp" declline="167" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a11c1600c2d67387c1b037fadcca9a069" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gradient_x</definition>
        <argsstring>(const Array &amp;array, Array &amp;dx)</argsstring>
        <name>gradient_x</name>
        <qualifiedname>hmap::gradient_x</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>dx</declname>
        </param>
        <briefdescription>
<para>Compute the gradient in the x-direction of a 2D array and store it. </para>
        </briefdescription>
        <detaileddescription>
<para>This overload calculates the gradient in the x-direction and stores the result in the provided <computeroutput>dx</computeroutput> array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input 2D array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para>Output array where the gradient in the x-direction will be stored. This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/gradient/gradient.cpp" line="139" column="6" bodyfile="HighMap/src/gradient/gradient.cpp" bodystart="139" bodyend="151" declfile="HighMap/include/highmap/gradient.hpp" declline="179" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a8dbef7ccc1936646831eb5a24db58d81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gradient_y</definition>
        <argsstring>(const Array &amp;array)</argsstring>
        <name>gradient_y</name>
        <qualifiedname>hmap::gradient_y</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Compute the gradient in the y-direction of a 2D array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the gradient in the y-direction (i.e., vertical gradient) for the given 2D array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input 2D array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Gradient in the y-direction. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/gradient/gradient.cpp" line="153" column="7" bodyfile="HighMap/src/gradient/gradient.cpp" bodystart="153" bodyend="158" declfile="HighMap/include/highmap/gradient.hpp" declline="190" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a6032811e40d11b8957dc48d98711acf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::gradient_y</definition>
        <argsstring>(const Array &amp;array, Array &amp;dy)</argsstring>
        <name>gradient_y</name>
        <qualifiedname>hmap::gradient_y</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>dy</declname>
        </param>
        <briefdescription>
<para>Compute the gradient in the y-direction of a 2D array and store it. </para>
        </briefdescription>
        <detaileddescription>
<para>This overload calculates the gradient in the y-direction and stores the result in the provided <computeroutput>dy</computeroutput> array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input 2D array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dy</parametername>
</parameternamelist>
<parameterdescription>
<para>Output array where the gradient in the y-direction will be stored. This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/gradient/gradient.cpp" line="160" column="6" bodyfile="HighMap/src/gradient/gradient.cpp" bodystart="160" bodyend="172" declfile="HighMap/include/highmap/gradient.hpp" declline="202" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a893bb80f635c4711c075e078cde18cf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::laplacian</definition>
        <argsstring>(const Array &amp;array)</argsstring>
        <name>laplacian</name>
        <qualifiedname>hmap::laplacian</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Compute the Laplacian of a 2D array. </para>
        </briefdescription>
        <detaileddescription>
<para>The Laplacian is a measure of the second-order spatial derivative of the input array. This function computes the Laplacian for the given 2D array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input 2D array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Laplacian of the input array. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/gradient/gradient.cpp" line="202" column="7" bodyfile="HighMap/src/gradient/gradient.cpp" bodystart="202" bodyend="213" declfile="HighMap/include/highmap/gradient.hpp" declline="213" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aef53e65fc9b8bc74c342367b0034cfa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor hmap::normal_map</definition>
        <argsstring>(const Array &amp;array)</argsstring>
        <name>normal_map</name>
        <qualifiedname>hmap::normal_map</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Generates a normal map from a given 2D array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the normal vectors for each element in the 2D array and returns them as a tensor. The normal map is commonly used in image processing and 3D graphics to represent surface orientations based on height values.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>A 2D array representing the height values from which normals are computed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A tensor containing the normal vectors for each position in the input array. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/gradient/normal_map.cpp" line="12" column="8" bodyfile="HighMap/src/gradient/normal_map.cpp" bodystart="12" bodyend="30" declfile="HighMap/include/highmap/gradient.hpp" declline="228" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a26a0e82cf03ec259e3efae1ea84286db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::normal_map_to_heightmap</definition>
        <argsstring>(const Tensor &amp;nmap)</argsstring>
        <name>normal_map_to_heightmap</name>
        <qualifiedname>hmap::normal_map_to_heightmap</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>nmap</declname>
        </param>
        <briefdescription>
<para>Converts a normal map to a heightmap using direct summation of gradients. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes a heightmap from a given normal map (<computeroutput>nmap</computeroutput>) by integrating gradients derived from the normal map in two passes. The result is the average of two independent integrations to reduce artifacts from directional bias.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nmap</parametername>
</parameternamelist>
<parameterdescription>
<para>A 3D tensor representing the normal map. It should have three channels (X, Y, Z) and a shape of (width, height, 3). The values are assumed to be in the range [0, 1].</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> object representing the computed heightmap with the same spatial dimensions as the input normal map (width, height).</para>
</simplesect>
<simplesect kind="note"><para><itemizedlist>
<listitem><para>The algorithm assumes the normal map values are normalized between 0 and 1.</para>
</listitem><listitem><para>Two heightmaps (<computeroutput>z1</computeroutput> and <computeroutput>z2</computeroutput>) are computed using different traversal orders, and the final result is their average to reduce directional bias.</para>
</listitem><listitem><para><bold>Example</bold> <programlisting filename="ex_normal_map_to_heightmap.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Tensor" kindref="compound">hmap::Tensor</ref><sp/>nmap<sp/>=<sp/><ref refid="namespacehmap_1aef53e65fc9b8bc74c342367b0034cfa7" kindref="member">hmap::normal_map</ref>(z1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>rebuild<sp/>input<sp/>elevation<sp/>field<sp/>from<sp/>normal<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/><ref refid="namespacehmap_1a26a0e82cf03ec259e3efae1ea84286db" kindref="member">hmap::normal_map_to_heightmap</ref>(nmap);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_normal_map_to_heightmap.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z1,<sp/>z2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</listitem></itemizedlist>
</para>
</simplesect>
<bold>Result</bold> <image type="html" name="ex_normal_map_to_heightmap.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/gradient/normal_map.cpp" line="32" column="7" bodyfile="HighMap/src/gradient/normal_map.cpp" bodystart="32" bodyend="63" declfile="HighMap/include/highmap/gradient.hpp" declline="257" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a6e66245d2cf9c7944ed35a1010c54f77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::phase_field</definition>
        <argsstring>(const Array &amp;array, float kw, int width, uint seed, float noise_amp=0.f, int prefilter_ir=-1, float density_factor=1.f, bool rotate90=false, Array *p_gnoise_x=nullptr, Array *p_gnoise_y=nullptr)</argsstring>
        <name>phase_field</name>
        <qualifiedname>hmap::phase_field</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>kw</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>float</type>
          <declname>noise_amp</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>prefilter_ir</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>float</type>
          <declname>density_factor</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>rotate90</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_gnoise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_gnoise_y</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Computes a phase field using spatially varying Gabor noise based on the input heightmap. </para>
        </briefdescription>
        <detaileddescription>
<para>This function generates a 2D phase field by combining gradient angles from the input array and Gabor noise, which is spatially distributed with varying parameters. The resulting phase field can be used for procedural terrain generation or other simulations.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">array</parametername>
</parameternamelist>
<parameterdescription>
<para>The input 2D heightmap array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">kw</parametername>
</parameternamelist>
<parameterdescription>
<para>Wave number for the Gabor kernel, determining the frequency of the noise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">width</parametername>
</parameternamelist>
<parameterdescription>
<para>Width of the Gabor kernel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed for reproducible Gabor noise generation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">noise_amp</parametername>
</parameternamelist>
<parameterdescription>
<para>Noise amplitude added to the phase field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">prefilter_ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Kernel radius for pre-smoothing the input array. If negative, a default value is computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">density_factor</parametername>
</parameternamelist>
<parameterdescription>
<para>Factor controlling the density of the noise points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rotate90</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean flag to rotate the gradient angles by 90 degrees. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">p_gnoise_x</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to store the generated Gabor noise in the X direction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">p_gnoise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to store the generated Gabor noise in the Y direction.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A 2D array representing the computed phase field.</para>
</simplesect>
<itemizedlist>
<listitem><para><bold>Example</bold> <programlisting filename="ex_phase_field.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195ac5113a637d69eb3c549e6d561da167ed" kindref="member">hmap::NoiseType::SIMPLEX2</ref>,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kp<sp/>=<sp/>4.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>width<sp/>=<sp/>64;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>density<sp/>=<sp/>4.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/>rotate90<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>phi0<sp/>=<sp/><ref refid="namespacehmap_1a6e66245d2cf9c7944ed35a1010c54f77" kindref="member">hmap::phase_field</ref>(z,<sp/>kp,<sp/>width,<sp/>++seed,<sp/>-1,<sp/>density);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>phi1<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a6e66245d2cf9c7944ed35a1010c54f77" kindref="member">hmap::phase_field</ref>(z,<sp/>kp,<sp/>width,<sp/>++seed,<sp/>-1,<sp/>density,<sp/>rotate90);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(phi0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(phi1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_phase_field.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>phi0,<sp/>phi1},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</listitem></itemizedlist>
</para>
<para><bold>Result</bold> <image type="html" name="ex_phase_field.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/gradient/phase_field.cpp" line="16" column="7" bodyfile="HighMap/src/gradient/phase_field.cpp" bodystart="16" bodyend="88" declfile="HighMap/include/highmap/gradient.hpp" declline="294" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a3f8dc201377b61428eba8daa4a03a65f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::unwrap_phase</definition>
        <argsstring>(const Array &amp;alpha)</argsstring>
        <name>unwrap_phase</name>
        <qualifiedname>hmap::unwrap_phase</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
<para>Unwraps a 2D phase array to correct discontinuities in phase data. </para>
        </briefdescription>
        <detaileddescription>
<para>This function unwraps phase values in the given array, ensuring that discontinuities exceeding <formula id="2">$ \pi $</formula> are adjusted to provide a continuous phase result.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>A 2D array of wrapped phase values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A 2D array of unwrapped phase values.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_unwrap_phase.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>unwrapped<sp/>reference</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>alpha0<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(alpha0,<sp/>0.f,<sp/>4.f<sp/>*<sp/>M_PI);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>wrap<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>alpha<sp/>=<sp/>alpha0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;v<sp/>:<sp/>alpha.vector)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>std::fmod(v,<sp/>2.f<sp/>*<sp/>M_PI);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>unwrap<sp/>(and<sp/>shift<sp/>zero<sp/>reference)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>alpha_uw<sp/>=<sp/><ref refid="namespacehmap_1a3f8dc201377b61428eba8daa4a03a65f" kindref="member">hmap::unwrap_phase</ref>(alpha);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>alpha_uw<sp/>=<sp/>alpha_uw<sp/>-<sp/>alpha_uw.<ref refid="classhmap_1_1Array_1a56c77f78e4864f5c6f2cbd6de8100556" kindref="member">min</ref>()<sp/>+<sp/>alpha0.<ref refid="classhmap_1_1Array_1a56c77f78e4864f5c6f2cbd6de8100556" kindref="member">min</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_unwrap_phase.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{alpha0,<sp/>alpha,<sp/>alpha_uw},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_unwrap_phase.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/gradient/unwrap_phase.cpp" line="14" column="7" bodyfile="HighMap/src/gradient/unwrap_phase.cpp" bodystart="14" bodyend="68" declfile="HighMap/include/highmap/gradient.hpp" declline="321" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a054b11b366d585ac3d228619d9cb5928" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structhmap_1_1HeightmapRGBA" kindref="compound">HeightmapRGBA</ref></type>
        <definition>HeightmapRGBA hmap::mix_heightmap_rgba</definition>
        <argsstring>(HeightmapRGBA &amp;rgba1, HeightmapRGBA &amp;rgba2, bool use_sqrt_avg=true)</argsstring>
        <name>mix_heightmap_rgba</name>
        <qualifiedname>hmap::mix_heightmap_rgba</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1HeightmapRGBA" kindref="compound">HeightmapRGBA</ref> &amp;</type>
          <declname>rgba1</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1HeightmapRGBA" kindref="compound">HeightmapRGBA</ref> &amp;</type>
          <declname>rgba2</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_sqrt_avg</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rgba1</parametername>
</parameternamelist>
<parameterdescription>
<para>1st RGBA heightmap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rgba2</parametername>
</parameternamelist>
<parameterdescription>
<para>2st RGBA heightmap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_sqrt_avg</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to use or not square averaging. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RGBA heightmap. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/heightmap/heightmap_rgba.cpp" line="205" column="15" bodyfile="HighMap/src/heightmap/heightmap_rgba.cpp" bodystart="205" bodyend="280" declfile="HighMap/include/highmap/heightmap.hpp" declline="56" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ab5bf9c7f8dd053e585c61c1fdb532b7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structhmap_1_1HeightmapRGBA" kindref="compound">HeightmapRGBA</ref></type>
        <definition>HeightmapRGBA hmap::mix_heightmap_rgba</definition>
        <argsstring>(std::vector&lt; HeightmapRGBA * &gt; p_rgba_list, bool use_sqrt_avg=true)</argsstring>
        <name>mix_heightmap_rgba</name>
        <qualifiedname>hmap::mix_heightmap_rgba</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="structhmap_1_1HeightmapRGBA" kindref="compound">HeightmapRGBA</ref> * &gt;</type>
          <declname>p_rgba_list</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_sqrt_avg</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rgba_plist</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> reference list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_sqrt_avg</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to use or not square averaging. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RGBA heightmap. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/heightmap/heightmap_rgba.cpp" line="282" column="15" bodyfile="HighMap/src/heightmap/heightmap_rgba.cpp" bodystart="282" bodyend="300" declfile="HighMap/include/highmap/heightmap.hpp" declline="59" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a2751ce7799f172484dd06a1b72d168da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structhmap_1_1HeightmapRGBA" kindref="compound">HeightmapRGBA</ref></type>
        <definition>HeightmapRGBA hmap::mix_normal_map_rgba</definition>
        <argsstring>(HeightmapRGBA &amp;nmap_base, HeightmapRGBA &amp;nmap_detail, float detail_scaling=1.f, NormalMapBlendingMethod blending_method=NormalMapBlendingMethod::NMAP_DERIVATIVE)</argsstring>
        <name>mix_normal_map_rgba</name>
        <qualifiedname>hmap::mix_normal_map_rgba</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1HeightmapRGBA" kindref="compound">HeightmapRGBA</ref> &amp;</type>
          <declname>nmap_base</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1HeightmapRGBA" kindref="compound">HeightmapRGBA</ref> &amp;</type>
          <declname>nmap_detail</declname>
        </param>
        <param>
          <type>float</type>
          <declname>detail_scaling</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="namespacehmap_1abc952321c99ec11d60b4037e3d27db9b" kindref="member">NormalMapBlendingMethod</ref></type>
          <declname>blending_method</declname>
          <defval><ref refid="namespacehmap_1abc952321c99ec11d60b4037e3d27db9ba97d5a1740991179c436482de8c1c1f34" kindref="member">NormalMapBlendingMethod::NMAP_DERIVATIVE</ref></defval>
        </param>
        <briefdescription>
<para>Mixes two normal maps in RGBA format to create a blended normal map. </para>
        </briefdescription>
        <detaileddescription>
<para>This function blends a base normal map and a detail normal map using a specified blending method. The detail map can be scaled to control the intensity of its effect.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nmap_base</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the base normal map in RGBA format. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nmap_detail</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the detail normal map in RGBA format. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>detail_scaling</parametername>
</parameternamelist>
<parameterdescription>
<para>Scaling factor for the detail normal map intensity in [-1.f, 1.f]. Default is 1.0f. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blending_method</parametername>
</parameternamelist>
<parameterdescription>
<para>Method to blend the two normal maps. Options are specified by the NormalMapBlendingMethod enum (e.g., NMAP_DERIVATIVE).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A HeightMapRGBA object that contains the result of blending the base and detail normal maps.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_mix_normal_map_rgba.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>tiling<sp/>=<sp/>{4,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap<sp/>=<sp/>0.25f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{16.f,<sp/>16.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>generate<sp/>normal<sp/>maps<sp/>as<sp/>RGBA<sp/>heightmaps</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1a9880bdc35440162c24103a5df4c137a6" kindref="member">cone</ref>(shape);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/>0.1f<sp/>*<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>kw,<sp/>seed++);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Tensor" kindref="compound">hmap::Tensor</ref><sp/>n1<sp/>=<sp/><ref refid="namespacehmap_1aef53e65fc9b8bc74c342367b0034cfa7" kindref="member">hmap::normal_map</ref>(z1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Tensor" kindref="compound">hmap::Tensor</ref><sp/>n2<sp/>=<sp/><ref refid="namespacehmap_1aef53e65fc9b8bc74c342367b0034cfa7" kindref="member">hmap::normal_map</ref>(z2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>h1<sp/>=<sp/><ref refid="structhmap_1_1HeightmapRGBA" kindref="compound">hmap::HeightmapRGBA</ref>(shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tiling,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n1.<ref refid="classhmap_1_1Tensor_1a59e7ac9122e705d05f6e8b00a26ef738" kindref="member">get_slice</ref>(0),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n1.<ref refid="classhmap_1_1Tensor_1a59e7ac9122e705d05f6e8b00a26ef738" kindref="member">get_slice</ref>(1),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n1.<ref refid="classhmap_1_1Tensor_1a59e7ac9122e705d05f6e8b00a26ef738" kindref="member">get_slice</ref>(2),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(shape,<sp/>1.f));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>h2<sp/>=<sp/><ref refid="structhmap_1_1HeightmapRGBA" kindref="compound">hmap::HeightmapRGBA</ref>(shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tiling,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n2.<ref refid="classhmap_1_1Tensor_1a59e7ac9122e705d05f6e8b00a26ef738" kindref="member">get_slice</ref>(0),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n2.<ref refid="classhmap_1_1Tensor_1a59e7ac9122e705d05f6e8b00a26ef738" kindref="member">get_slice</ref>(1),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n2.<ref refid="classhmap_1_1Tensor_1a59e7ac9122e705d05f6e8b00a26ef738" kindref="member">get_slice</ref>(2),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(shape,<sp/>1.f));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scaling<sp/>=<sp/>1.f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ha<sp/>=<sp/><ref refid="namespacehmap_1a2751ce7799f172484dd06a1b72d168da" kindref="member">mix_normal_map_rgba</ref>(h1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scaling,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1abc952321c99ec11d60b4037e3d27db9bac248af7dd230247485e3c09a663cedd0" kindref="member">hmap::NormalMapBlendingMethod::NMAP_LINEAR</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hb<sp/>=<sp/><ref refid="namespacehmap_1a2751ce7799f172484dd06a1b72d168da" kindref="member">mix_normal_map_rgba</ref>(h1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scaling,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1abc952321c99ec11d60b4037e3d27db9ba97d5a1740991179c436482de8c1c1f34" kindref="member">hmap::NormalMapBlendingMethod::NMAP_DERIVATIVE</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hc<sp/>=<sp/><ref refid="namespacehmap_1a2751ce7799f172484dd06a1b72d168da" kindref="member">mix_normal_map_rgba</ref>(h1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scaling,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1abc952321c99ec11d60b4037e3d27db9ba25b053ebbd8db9d348737e6f343c61bf" kindref="member">hmap::NormalMapBlendingMethod::NMAP_UDN</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hd<sp/>=<sp/><ref refid="namespacehmap_1a2751ce7799f172484dd06a1b72d168da" kindref="member">mix_normal_map_rgba</ref>(h1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scaling,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1abc952321c99ec11d60b4037e3d27db9ba54fd5928677cd19616ec52d6d59d4c60" kindref="member">hmap::NormalMapBlendingMethod::NMAP_UNITY</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>he<sp/>=<sp/><ref refid="namespacehmap_1a2751ce7799f172484dd06a1b72d168da" kindref="member">mix_normal_map_rgba</ref>(h1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scaling,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1abc952321c99ec11d60b4037e3d27db9ba6ba5e07d11326f7567d533f169321e37" kindref="member">hmap::NormalMapBlendingMethod::NMAP_WHITEOUT</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>h1.to_png(</highlight><highlight class="stringliteral">&quot;ex_mix_normal_map_rgba0.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>h2.to_png(</highlight><highlight class="stringliteral">&quot;ex_mix_normal_map_rgba1.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ha.to_png(</highlight><highlight class="stringliteral">&quot;ex_mix_normal_map_rgba2.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>hb.to_png(</highlight><highlight class="stringliteral">&quot;ex_mix_normal_map_rgba3.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>hc.to_png(</highlight><highlight class="stringliteral">&quot;ex_mix_normal_map_rgba4.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>hd.to_png(</highlight><highlight class="stringliteral">&quot;ex_mix_normal_map_rgba5.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>he.to_png(</highlight><highlight class="stringliteral">&quot;ex_mix_normal_map_rgba6.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_mix_normal_map_rgba0.png"></image>
 <image type="html" name="ex_mix_normal_map_rgba1.png"></image>
 <image type="html" name="ex_mix_normal_map_rgba2.png"></image>
 <image type="html" name="ex_mix_normal_map_rgba3.png"></image>
 <image type="html" name="ex_mix_normal_map_rgba4.png"></image>
 <image type="html" name="ex_mix_normal_map_rgba5.png"></image>
 <image type="html" name="ex_mix_normal_map_rgba6.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/heightmap/heightmap_rgba.cpp" line="302" column="15" bodyfile="HighMap/src/heightmap/heightmap_rgba.cpp" bodystart="302" bodyend="429" declfile="HighMap/include/highmap/heightmap.hpp" declline="692" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a0c5529e52be9242f4e2587d043ece704" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::fill</definition>
        <argsstring>(Heightmap &amp;h, Heightmap *p_noise_x, Heightmap *p_noise_y, std::function&lt; Array(Vec2&lt; int &gt;, Vec4&lt; float &gt;, Array *p_noise_x, Array *p_noise_y)&gt; nullary_op)</argsstring>
        <name>fill</name>
        <qualifiedname>hmap::fill</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> *</type>
          <declname>p_noise_x</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> *</type>
          <declname>p_noise_y</declname>
        </param>
        <param>
          <type>std::function&lt; <ref refid="classhmap_1_1Array" kindref="compound">Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;, <ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;, <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *p_noise_x, <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *p_noise_y)&gt;</type>
          <declname>nullary_op</declname>
        </param>
        <briefdescription>
<para>Fills the heightmap using the provided noise maps and operation. </para>
        </briefdescription>
        <detaileddescription>
<para>This function fills the heightmap <computeroutput>h</computeroutput> using the noise maps <computeroutput>p_noise_x</computeroutput> and <computeroutput>p_noise_y</computeroutput> and the provided <computeroutput>nullary_op</computeroutput> function. The <computeroutput>nullary_op</computeroutput> function is expected to take a <computeroutput><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt;int&gt;</computeroutput> and <computeroutput><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt;float&gt;</computeroutput> as input and return an <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> using the noise maps.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>The heightmap to be filled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the noise map for the x-axis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the noise map for the y-axis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nullary_op</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation to be applied for filling the heightmap.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_heightmap_fill.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>tiling<sp/>=<sp/>{4,<sp/>2};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap<sp/>=<sp/>0.25;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::string<sp/><sp/><sp/><sp/><sp/><sp/><sp/>fname;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Heightmap" kindref="compound">hmap::Heightmap</ref><sp/>h<sp/>=<sp/><ref refid="classhmap_1_1Heightmap" kindref="compound">hmap::Heightmap</ref>(shape,<sp/>tiling,<sp/>overlap);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a6d8728c019a17094c326f31501ea5482" kindref="member">hmap::transform</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{&amp;h},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[kw,<sp/>seed](std::vector&lt;hmap::Array<sp/>*&gt;<sp/>p_arrays,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhmap_1_1Vec4" kindref="compound">hmap::Vec4&lt;float&gt;</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bbox)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>*pa_out<sp/>=<sp/>p_arrays[0];</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pa_out<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab36df744301ada377d4a3f3a34bca77fac40707c2538151422af1c84dfd46252b" kindref="member">hmap::TransformMode::DISTRIBUTED</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>fname<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ex_heightmap_fill&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(count++)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>h.<ref refid="classhmap_1_1Heightmap_1a03097c67e4ea2448e202ee1f43b77961" kindref="member">to_array</ref>().<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(fname.c_str(),<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_heightmap_fill0.png"></image>
 <image type="html" name="ex_heightmap_fill1.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="718" column="7" declfile="HighMap/include/highmap/heightmap.hpp" declline="718" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a3751517b263e1178a1ab3a2378d77dfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::fill</definition>
        <argsstring>(Heightmap &amp;h, Heightmap &amp;hin, Heightmap *p_noise_x, Heightmap *p_noise_y, std::function&lt; Array(hmap::Array &amp;, Vec2&lt; int &gt;, Vec4&lt; float &gt;, hmap::Array *, hmap::Array *)&gt; nullary_op)</argsstring>
        <name>fill</name>
        <qualifiedname>hmap::fill</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>hin</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> *</type>
          <declname>p_noise_x</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> *</type>
          <declname>p_noise_y</declname>
        </param>
        <param>
          <type>std::function&lt; <ref refid="classhmap_1_1Array" kindref="compound">Array</ref>(<ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref> &amp;, <ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;, <ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;, <ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref> *, <ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref> *)&gt;</type>
          <declname>nullary_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/heightmap/heightmap_transform.cpp" line="66" column="6" bodyfile="HighMap/src/heightmap/heightmap_transform.cpp" bodystart="66" bodyend="94" declfile="HighMap/include/highmap/heightmap.hpp" declline="726" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ad4261372b2cfa77557684f8d15c3ce39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::fill</definition>
        <argsstring>(Heightmap &amp;h, Heightmap *p_noise_x, Heightmap *p_noise_y, Heightmap *p_stretching, std::function&lt; Array(Vec2&lt; int &gt;, Vec4&lt; float &gt;, hmap::Array *, hmap::Array *, hmap::Array *)&gt; nullary_op)</argsstring>
        <name>fill</name>
        <qualifiedname>hmap::fill</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> *</type>
          <declname>p_noise_x</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> *</type>
          <declname>p_noise_y</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> *</type>
          <declname>p_stretching</declname>
        </param>
        <param>
          <type>std::function&lt; <ref refid="classhmap_1_1Array" kindref="compound">Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;, <ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;, <ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref> *, <ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref> *, <ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref> *)&gt;</type>
          <declname>nullary_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/heightmap/heightmap_transform.cpp" line="96" column="6" bodyfile="HighMap/src/heightmap/heightmap_transform.cpp" bodystart="96" bodyend="125" declfile="HighMap/include/highmap/heightmap.hpp" declline="736" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1afaa31506353c8fe10a751a0cbf992c33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::fill</definition>
        <argsstring>(Heightmap &amp;h, Heightmap *p_noise, std::function&lt; Array(Vec2&lt; int &gt;, Vec4&lt; float &gt;, Array *p_noise)&gt; nullary_op)</argsstring>
        <name>fill</name>
        <qualifiedname>hmap::fill</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> *</type>
          <declname>p_noise</declname>
        </param>
        <param>
          <type>std::function&lt; <ref refid="classhmap_1_1Array" kindref="compound">Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;, <ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;, <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *p_noise)&gt;</type>
          <declname>nullary_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="747" column="7" declfile="HighMap/include/highmap/heightmap.hpp" declline="747" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a3e1330c25846f757ce15146d8fba4724" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::fill</definition>
        <argsstring>(Heightmap &amp;h, std::function&lt; Array(Vec2&lt; int &gt;, Vec4&lt; float &gt;)&gt; nullary_op)</argsstring>
        <name>fill</name>
        <qualifiedname>hmap::fill</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>std::function&lt; <ref refid="classhmap_1_1Array" kindref="compound">Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;, <ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;)&gt;</type>
          <declname>nullary_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/heightmap/heightmap_transform.cpp" line="28" column="6" bodyfile="HighMap/src/heightmap/heightmap_transform.cpp" bodystart="28" bodyend="38" declfile="HighMap/include/highmap/heightmap.hpp" declline="753" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a808d4ce63d0da9e4bab0f204991d88b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::fill</definition>
        <argsstring>(Heightmap &amp;h, std::function&lt; Array(Vec2&lt; int &gt;)&gt; nullary_op)</argsstring>
        <name>fill</name>
        <qualifiedname>hmap::fill</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>std::function&lt; <ref refid="classhmap_1_1Array" kindref="compound">Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;)&gt;</type>
          <declname>nullary_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/heightmap/heightmap_transform.cpp" line="16" column="6" bodyfile="HighMap/src/heightmap/heightmap_transform.cpp" bodystart="16" bodyend="26" declfile="HighMap/include/highmap/heightmap.hpp" declline="758" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a6d8728c019a17094c326f31501ea5482" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::transform</definition>
        <argsstring>(Heightmap &amp;h, std::function&lt; void(Array &amp;)&gt; unary_op)</argsstring>
        <name>transform</name>
        <qualifiedname>hmap::transform</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;)&gt;</type>
          <declname>unary_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/heightmap/heightmap_transform.cpp" line="177" column="6" bodyfile="HighMap/src/heightmap/heightmap_transform.cpp" bodystart="177" bodyend="187" declfile="HighMap/include/highmap/heightmap.hpp" declline="761" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1afd9639dca483f8e95f83f58e7171c8ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::transform</definition>
        <argsstring>(Heightmap &amp;h, std::function&lt; void(Array &amp;, Vec4&lt; float &gt;)&gt; unary_op)</argsstring>
        <name>transform</name>
        <qualifiedname>hmap::transform</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;, <ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;)&gt;</type>
          <declname>unary_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/heightmap/heightmap_transform.cpp" line="189" column="6" bodyfile="HighMap/src/heightmap/heightmap_transform.cpp" bodystart="189" bodyend="199" declfile="HighMap/include/highmap/heightmap.hpp" declline="764" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a0c9955183689e50bb323cb74e14d47ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::transform</definition>
        <argsstring>(Heightmap &amp;h, Heightmap *p_noise_x, std::function&lt; void(Array &amp;, Vec4&lt; float &gt;, Array *)&gt; unary_op)</argsstring>
        <name>transform</name>
        <qualifiedname>hmap::transform</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> *</type>
          <declname>p_noise_x</declname>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;, <ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;, <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *)&gt;</type>
          <declname>unary_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/heightmap/heightmap_transform.cpp" line="201" column="6" bodyfile="HighMap/src/heightmap/heightmap_transform.cpp" bodystart="201" bodyend="220" declfile="HighMap/include/highmap/heightmap.hpp" declline="768" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a8097627251f8fca6407bf397bbdb2eeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::transform</definition>
        <argsstring>(Heightmap &amp;h, Heightmap *p_noise_x, Heightmap *p_noise_y, std::function&lt; void(Array &amp;, Vec4&lt; float &gt;, Array *, Array *)&gt; unary_op)</argsstring>
        <name>transform</name>
        <qualifiedname>hmap::transform</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> *</type>
          <declname>p_noise_x</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> *</type>
          <declname>p_noise_y</declname>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;, <ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;, <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *, <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *)&gt;</type>
          <declname>unary_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/heightmap/heightmap_transform.cpp" line="222" column="6" bodyfile="HighMap/src/heightmap/heightmap_transform.cpp" bodystart="222" bodyend="245" declfile="HighMap/include/highmap/heightmap.hpp" declline="773" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a7834b788b003e00411db069fe53dd8da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::transform</definition>
        <argsstring>(Heightmap &amp;h, std::function&lt; void(Array &amp;, Vec2&lt; float &gt;, Vec2&lt; float &gt;)&gt; unary_op)</argsstring>
        <name>transform</name>
        <qualifiedname>hmap::transform</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;, <ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;, <ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;)&gt;</type>
          <declname>unary_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/heightmap.hpp" line="779" column="7" declfile="HighMap/include/highmap/heightmap.hpp" declline="779" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a3124c0500ac67c3c6bafc77c6486d7a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::transform</definition>
        <argsstring>(Heightmap &amp;h, Heightmap *p_mask, std::function&lt; void(Array &amp;, Array *)&gt; unary_op)</argsstring>
        <name>transform</name>
        <qualifiedname>hmap::transform</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;, <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *)&gt;</type>
          <declname>unary_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/heightmap/heightmap_transform.cpp" line="247" column="6" bodyfile="HighMap/src/heightmap/heightmap_transform.cpp" bodystart="247" bodyend="262" declfile="HighMap/include/highmap/heightmap.hpp" declline="784" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aed492e4ecec2a21b7525e06760c99e48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::transform</definition>
        <argsstring>(Heightmap &amp;h, hmap::Heightmap *p_1, hmap::Heightmap *p_2, hmap::Heightmap *p_3, hmap::Heightmap *p_4, hmap::Heightmap *p_5, std::function&lt; void(Array &amp;, Array *, Array *, Array *, Array *, Array *)&gt; unary_op)</argsstring>
        <name>transform</name>
        <qualifiedname>hmap::transform</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">hmap::Heightmap</ref> *</type>
          <declname>p_1</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">hmap::Heightmap</ref> *</type>
          <declname>p_2</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">hmap::Heightmap</ref> *</type>
          <declname>p_3</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">hmap::Heightmap</ref> *</type>
          <declname>p_4</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">hmap::Heightmap</ref> *</type>
          <declname>p_5</declname>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;, <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *, <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *, <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *, <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *, <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *)&gt;</type>
          <declname>unary_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/heightmap/heightmap_transform.cpp" line="290" column="6" bodyfile="HighMap/src/heightmap/heightmap_transform.cpp" bodystart="290" bodyend="322" declfile="HighMap/include/highmap/heightmap.hpp" declline="789" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aa7a794c92aebf181390461a3d8f85721" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::transform</definition>
        <argsstring>(Heightmap &amp;h, hmap::Heightmap *p_1, hmap::Heightmap *p_2, hmap::Heightmap *p_3, std::function&lt; void(Array &amp;, Array *, Array *, Array *)&gt; unary_op)</argsstring>
        <name>transform</name>
        <qualifiedname>hmap::transform</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">hmap::Heightmap</ref> *</type>
          <declname>p_1</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">hmap::Heightmap</ref> *</type>
          <declname>p_2</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">hmap::Heightmap</ref> *</type>
          <declname>p_3</declname>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;, <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *, <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *, <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *)&gt;</type>
          <declname>unary_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/heightmap/heightmap_transform.cpp" line="264" column="6" bodyfile="HighMap/src/heightmap/heightmap_transform.cpp" bodystart="264" bodyend="288" declfile="HighMap/include/highmap/heightmap.hpp" declline="799" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a8189a2f0b773b7883777e6601f247634" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::transform</definition>
        <argsstring>(Heightmap &amp;h, hmap::Heightmap *p_1, hmap::Heightmap *p_2, std::function&lt; void(Array &amp;, Array *, Array *)&gt; unary_op)</argsstring>
        <name>transform</name>
        <qualifiedname>hmap::transform</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">hmap::Heightmap</ref> *</type>
          <declname>p_1</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">hmap::Heightmap</ref> *</type>
          <declname>p_2</declname>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;, <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *, <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *)&gt;</type>
          <declname>unary_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/heightmap/heightmap_transform.cpp" line="324" column="6" bodyfile="HighMap/src/heightmap/heightmap_transform.cpp" bodystart="324" bodyend="345" declfile="HighMap/include/highmap/heightmap.hpp" declline="806" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a02f88b129d0c61ec241c54333a617109" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::transform</definition>
        <argsstring>(Heightmap &amp;h1, Heightmap &amp;h2, std::function&lt; void(Array &amp;, Array &amp;)&gt; binary_op)</argsstring>
        <name>transform</name>
        <qualifiedname>hmap::transform</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;, <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;)&gt;</type>
          <declname>binary_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/heightmap/heightmap_transform.cpp" line="347" column="6" bodyfile="HighMap/src/heightmap/heightmap_transform.cpp" bodystart="347" bodyend="361" declfile="HighMap/include/highmap/heightmap.hpp" declline="812" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a59b8719b8ab27bf954ebaa961e25c2e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::transform</definition>
        <argsstring>(Heightmap &amp;h1, Heightmap &amp;h2, std::function&lt; void(Array &amp;, Array &amp;, Vec4&lt; float &gt;)&gt; binary_op)</argsstring>
        <name>transform</name>
        <qualifiedname>hmap::transform</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;, <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;, <ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;)&gt;</type>
          <declname>binary_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/heightmap/heightmap_transform.cpp" line="363" column="6" bodyfile="HighMap/src/heightmap/heightmap_transform.cpp" bodystart="363" bodyend="378" declfile="HighMap/include/highmap/heightmap.hpp" declline="816" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a32d77f6607e40ad1429906e5e9e08e17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::transform</definition>
        <argsstring>(Heightmap &amp;h1, Heightmap &amp;h2, Heightmap &amp;h3, std::function&lt; void(Array &amp;, Array &amp;, Array &amp;)&gt; ternary_op)</argsstring>
        <name>transform</name>
        <qualifiedname>hmap::transform</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h3</declname>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;, <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;, <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;)&gt;</type>
          <declname>ternary_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/heightmap/heightmap_transform.cpp" line="380" column="6" bodyfile="HighMap/src/heightmap/heightmap_transform.cpp" bodystart="380" bodyend="396" declfile="HighMap/include/highmap/heightmap.hpp" declline="821" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a9ee71d4c48644e9f0e29601eb0636b07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::transform</definition>
        <argsstring>(Heightmap &amp;h1, Heightmap &amp;h2, Heightmap &amp;h3, std::function&lt; void(Array &amp;, Array &amp;, Array &amp;, Vec4&lt; float &gt;)&gt; ternary_op)</argsstring>
        <name>transform</name>
        <qualifiedname>hmap::transform</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h3</declname>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;, <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;, <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;, <ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;)&gt;</type>
          <declname>ternary_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/heightmap/heightmap_transform.cpp" line="398" column="6" bodyfile="HighMap/src/heightmap/heightmap_transform.cpp" bodystart="398" bodyend="416" declfile="HighMap/include/highmap/heightmap.hpp" declline="827" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a23b3861a8be80a910c10401284fe9e59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::transform</definition>
        <argsstring>(Heightmap &amp;h_out, Heightmap &amp;h1, std::function&lt; Array(Array &amp;)&gt; unary_op)</argsstring>
        <name>transform</name>
        <qualifiedname>hmap::transform</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h_out</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>std::function&lt; <ref refid="classhmap_1_1Array" kindref="compound">Array</ref>(<ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;)&gt;</type>
          <declname>unary_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/heightmap/heightmap_transform.cpp" line="146" column="6" bodyfile="HighMap/src/heightmap/heightmap_transform.cpp" bodystart="146" bodyend="158" declfile="HighMap/include/highmap/heightmap.hpp" declline="834" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a529a8a23044dcdd9ed0fb7f0e628d4c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::transform</definition>
        <argsstring>(Heightmap &amp;h_out, Heightmap &amp;h1, Heightmap &amp;h2, std::function&lt; Array(Array &amp;, Array &amp;)&gt; binary_op)</argsstring>
        <name>transform</name>
        <qualifiedname>hmap::transform</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h_out</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <param>
          <type>std::function&lt; <ref refid="classhmap_1_1Array" kindref="compound">Array</ref>(<ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;, <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;)&gt;</type>
          <declname>binary_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/heightmap/heightmap_transform.cpp" line="160" column="6" bodyfile="HighMap/src/heightmap/heightmap_transform.cpp" bodystart="160" bodyend="175" declfile="HighMap/include/highmap/heightmap.hpp" declline="838" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a31d9bb3f85a02d60bd03e8bb6ef4f4f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::transform</definition>
        <argsstring>(Heightmap &amp;h1, Heightmap &amp;h2, Heightmap &amp;h3, Heightmap &amp;h4, std::function&lt; void(Array &amp;, Array &amp;, Array &amp;, Array &amp;)&gt; ternary_op)</argsstring>
        <name>transform</name>
        <qualifiedname>hmap::transform</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h3</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h4</declname>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;, <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;, <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;, <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;)&gt;</type>
          <declname>ternary_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/heightmap/heightmap_transform.cpp" line="418" column="6" bodyfile="HighMap/src/heightmap/heightmap_transform.cpp" bodystart="418" bodyend="437" declfile="HighMap/include/highmap/heightmap.hpp" declline="843" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aa6f9b7363268c106d5154d7370053c35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::transform</definition>
        <argsstring>(Heightmap &amp;h1, Heightmap &amp;h2, Heightmap &amp;h3, Heightmap &amp;h4, Heightmap &amp;h5, Heightmap &amp;h6, std::function&lt; void(Array &amp;, Array &amp;, Array &amp;, Array &amp;, Array &amp;, Array &amp;)&gt; op)</argsstring>
        <name>transform</name>
        <qualifiedname>hmap::transform</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h3</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h4</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h5</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h6</declname>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;, <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;, <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;, <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;, <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;, <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;)&gt;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/heightmap/heightmap_transform.cpp" line="439" column="6" bodyfile="HighMap/src/heightmap/heightmap_transform.cpp" bodystart="439" bodyend="463" declfile="HighMap/include/highmap/heightmap.hpp" declline="850" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a086b4d007e08e88d2fc1166e67c524ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::transform</definition>
        <argsstring>(std::vector&lt; Heightmap * &gt; p_hmaps, std::function&lt; void(const std::vector&lt; Array * &gt;, const hmap::Vec2&lt; int &gt;, const hmap::Vec4&lt; float &gt;)&gt; op, TransformMode transform_mode=TransformMode::DISTRIBUTED)</argsstring>
        <name>transform</name>
        <qualifiedname>hmap::transform</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> * &gt;</type>
          <declname>p_hmaps</declname>
        </param>
        <param>
          <type>std::function&lt; void(const std::vector&lt; <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> * &gt;, const <ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2</ref>&lt; int &gt;, const <ref refid="structhmap_1_1Vec4" kindref="compound">hmap::Vec4</ref>&lt; float &gt;)&gt;</type>
          <declname>op</declname>
        </param>
        <param>
          <type><ref refid="namespacehmap_1ab36df744301ada377d4a3f3a34bca77f" kindref="member">TransformMode</ref></type>
          <declname>transform_mode</declname>
          <defval><ref refid="namespacehmap_1ab36df744301ada377d4a3f3a34bca77fac40707c2538151422af1c84dfd46252b" kindref="member">TransformMode::DISTRIBUTED</ref></defval>
        </param>
        <briefdescription>
<para>Applies a transformation operation to a collection of heightmaps. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_hmaps</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of pointers to <ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> objects to be transformed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>A function that defines the transformation operation. It takes a vector of <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> pointers, a <ref refid="structhmap_1_1Vec2" kindref="compound">Vec2&lt;int&gt;</ref> representing dimensions, and a <ref refid="structhmap_1_1Vec4" kindref="compound">Vec4&lt;float&gt;</ref> representing transformation parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transform_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The mode of transformation to be applied. Default is <ref refid="namespacehmap_1ab36df744301ada377d4a3f3a34bca77fac40707c2538151422af1c84dfd46252b" kindref="member">TransformMode::DISTRIBUTED</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/heightmap/transform.cpp" line="17" column="6" bodyfile="HighMap/src/heightmap/transform.cpp" bodystart="17" bodyend="98" declfile="HighMap/include/highmap/heightmap.hpp" declline="872" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a3438427cf944820ce19e7ca9ce438985" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::transform</definition>
        <argsstring>(std::vector&lt; Heightmap * &gt; p_hmaps, std::function&lt; void(const std::vector&lt; Array * &gt;)&gt; op, TransformMode transform_mode=TransformMode::DISTRIBUTED)</argsstring>
        <name>transform</name>
        <qualifiedname>hmap::transform</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> * &gt;</type>
          <declname>p_hmaps</declname>
        </param>
        <param>
          <type>std::function&lt; void(const std::vector&lt; <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> * &gt;)&gt;</type>
          <declname>op</declname>
        </param>
        <param>
          <type><ref refid="namespacehmap_1ab36df744301ada377d4a3f3a34bca77f" kindref="member">TransformMode</ref></type>
          <declname>transform_mode</declname>
          <defval><ref refid="namespacehmap_1ab36df744301ada377d4a3f3a34bca77fac40707c2538151422af1c84dfd46252b" kindref="member">TransformMode::DISTRIBUTED</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/heightmap/transform.cpp" line="100" column="6" bodyfile="HighMap/src/heightmap/transform.cpp" bodystart="100" bodyend="110" declfile="HighMap/include/highmap/heightmap.hpp" declline="878" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a2e0533063a77bfc047472d1d85f3f63c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::d8_compute_ndip</definition>
        <argsstring>(const Array &amp;d8)</argsstring>
        <name>d8_compute_ndip</name>
        <qualifiedname>hmap::d8_compute_ndip</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>d8</declname>
        </param>
        <briefdescription>
<para>Computes the number of drainage paths for each cell based on the D8 flow direction model. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the number of neighboring cells that have flow directions pointing to the current cell according to the D8 model. The result is an array where each cell contains the count of its incoming flow directions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d8</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the flow directions according to the D8 model. Each cell value indicates the direction of flow according to the D8 convention. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> An array where each cell contains the number of incoming flow directions pointing to it. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/hydrology/flow_accumulation_d8.cpp" line="27" column="7" bodyfile="HighMap/src/hydrology/flow_accumulation_d8.cpp" bodystart="27" bodyend="47" declfile="HighMap/include/highmap/hydrology.hpp" declline="46" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ae42a874864d2d8f1a7b580f428395c01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::find_flow_sinks</definition>
        <argsstring>(const Array &amp;z, std::vector&lt; int &gt; &amp;is, std::vector&lt; int &gt; &amp;js)</argsstring>
        <name>find_flow_sinks</name>
        <qualifiedname>hmap::find_flow_sinks</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>js</declname>
        </param>
        <briefdescription>
<para>Identifies the indices of flow sinks within the heightmap. </para>
        </briefdescription>
        <detaileddescription>
<para>This function locates the cells in the heightmap that are flow sinks (cells with no outflow) and returns their indices. Flow sinks are cells that do not direct flow to any other cell.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>Output vector containing the row indices <computeroutput>i</computeroutput> of the flow sinks. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>js</parametername>
</parameternamelist>
<parameterdescription>
<para>Output vector containing the column indices <computeroutput>j</computeroutput> of the flow sinks.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_find_flow_sinks.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195ac5113a637d69eb3c549e6d561da167ed" kindref="member">hmap::NoiseType::SIMPLEX2</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>is,<sp/>js;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1ae42a874864d2d8f1a7b580f428395c01" kindref="member">hmap::find_flow_sinks</ref>(z,<sp/>is,<sp/>js);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>is.size();<sp/>k++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>is[k]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>js[k]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/hydrology/find_flow_sinks.cpp" line="10" column="6" bodyfile="HighMap/src/hydrology/find_flow_sinks.cpp" bodystart="10" bodyend="38" declfile="HighMap/include/highmap/hydrology.hpp" declline="62" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ab16a99babd0993758f39dee7027ae6b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::flooding_from_point</definition>
        <argsstring>(const Array &amp;z, const int i, const int j)</argsstring>
        <name>flooding_from_point</name>
        <qualifiedname>hmap::flooding_from_point</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/hydrology/flooding_from_point.cpp" line="12" column="7" bodyfile="HighMap/src/hydrology/flooding_from_point.cpp" bodystart="12" bodyend="47" declfile="HighMap/include/highmap/hydrology.hpp" declline="66" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a76afe239eb272a96e4831820a0281807" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::flooding_from_point</definition>
        <argsstring>(const Array &amp;z, const std::vector&lt; int &gt; &amp;i, const std::vector&lt; int &gt; &amp;j)</argsstring>
        <name>flooding_from_point</name>
        <qualifiedname>hmap::flooding_from_point</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/hydrology/flooding_from_point.cpp" line="49" column="7" bodyfile="HighMap/src/hydrology/flooding_from_point.cpp" bodystart="49" bodyend="59" declfile="HighMap/include/highmap/hydrology.hpp" declline="68" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a27b43e17baebd07ebb43808ca0dceb42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::flow_accumulation_d8</definition>
        <argsstring>(const Array &amp;z)</argsstring>
        <name>flow_accumulation_d8</name>
        <qualifiedname>hmap::flow_accumulation_d8</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Computes the flow accumulation for each cell using the D8 flow direction model. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the flow accumulation for each cell in the heightmap based on the D8 flow direction model Zhou2019. Flow accumulation represents the total amount of flow that accumulates at each cell from upstream cells.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> An array where each cell contains the computed flow accumulation.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_flow_accumulation_d8.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>facc<sp/>=<sp/><ref refid="namespacehmap_1a27b43e17baebd07ebb43808ca0dceb42" kindref="member">hmap::flow_accumulation_d8</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_flow_accumulation_d80.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>facc.to_png(</highlight><highlight class="stringliteral">&quot;ex_flow_accumulation_d81.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a320107cf3138d908a78d3c6d97705717" kindref="member">hmap::Cmap::HOT</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_flow_accumulation_d80.png"></image>
 <image type="html" name="ex_flow_accumulation_d81.png"></image>
</para>
<para><simplesect kind="see"><para><ref refid="namespacehmap_1af8f580c9d50a07585257569bd1160891" kindref="member">flow_direction_d8</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/hydrology/flow_accumulation_d8.cpp" line="49" column="7" bodyfile="HighMap/src/hydrology/flow_accumulation_d8.cpp" bodystart="49" bodyend="98" declfile="HighMap/include/highmap/hydrology.hpp" declline="94" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a58ba4910af868f70849f343e0c73adf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::flow_accumulation_dinf</definition>
        <argsstring>(const Array &amp;z, float talus_ref)</argsstring>
        <name>flow_accumulation_dinf</name>
        <qualifiedname>hmap::flow_accumulation_dinf</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus_ref</declname>
        </param>
        <briefdescription>
<para>Computes the flow accumulation for each cell using the Multiple Flow Direction (MFD) model. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the flow accumulation for each cell based on the MFD model Qin2007. Flow accumulation represents the total amount of flow that accumulates at each cell from upstream cells. The flow-partition exponent is locally defined using a reference talus value, where smaller values of <computeroutput>talus_ref</computeroutput> will lead to narrower flow streams. The maximum talus value of the heightmap can be used as a reference.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus_ref</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference talus used to locally define the flow-partition exponent. Small values will result in thinner flow streams. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> An array where each cell contains the computed flow accumulation.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_flow_accumulation_dinf.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>talus<sp/>=<sp/><ref refid="namespacehmap_1a618fb6d396a832c3dd1f053bfd27eed4" kindref="member">hmap::gradient_talus</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>facc<sp/>=<sp/><ref refid="namespacehmap_1a58ba4910af868f70849f343e0c73adf3" kindref="member">hmap::flow_accumulation_dinf</ref>(z,<sp/>talus.<ref refid="classhmap_1_1Array_1a68aac609ccba8f581da1cdf5cee671b9" kindref="member">max</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>very<sp/>high<sp/>values<sp/>are<sp/>less<sp/>relevant</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1ae239201a0a4193e1ce78bdf1fce4c151" kindref="member">hmap::clamp_max</ref>(facc,<sp/>100.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_flow_accumulation_dinf0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>facc.to_png(</highlight><highlight class="stringliteral">&quot;ex_flow_accumulation_dinf1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a320107cf3138d908a78d3c6d97705717" kindref="member">hmap::Cmap::HOT</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_flow_accumulation_dinf0.png"></image>
 <image type="html" name="ex_flow_accumulation_dinf1.png"></image>
</para>
<para><simplesect kind="see"><para><ref refid="namespacehmap_1a819fc20190d598c4664d442ee824fc96" kindref="member">flow_direction_dinf</ref>, <ref refid="namespacehmap_1a27b43e17baebd07ebb43808ca0dceb42" kindref="member">flow_accumulation_d8</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/hydrology/flow_accumulation_dinf.cpp" line="36" column="7" bodyfile="HighMap/src/hydrology/flow_accumulation_dinf.cpp" bodystart="36" bodyend="105" declfile="HighMap/include/highmap/hydrology.hpp" declline="122" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1af8f580c9d50a07585257569bd1160891" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::flow_direction_d8</definition>
        <argsstring>(const Array &amp;z)</argsstring>
        <name>flow_direction_d8</name>
        <qualifiedname>hmap::flow_direction_d8</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Computes the flow direction from each cell to its downslope neighbor using the D8 model. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the direction of flow for each cell in the heightmap using the D8 flow direction model Greenlee1987. The D8 model defines eight possible flow directions as follows: <verbatim>5 6 7 4 . 0 3 2 1
* </verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> An array where each cell contains the flow direction according to the D8 nomenclature.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacehmap_1a27b43e17baebd07ebb43808ca0dceb42" kindref="member">flow_accumulation_d8</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/hydrology/flow_accumulation_d8.cpp" line="100" column="7" bodyfile="HighMap/src/hydrology/flow_accumulation_d8.cpp" bodystart="100" bodyend="130" declfile="HighMap/include/highmap/hydrology.hpp" declline="140" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a819fc20190d598c4664d442ee824fc96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &gt;</type>
        <definition>std::vector&lt; Array &gt; hmap::flow_direction_dinf</definition>
        <argsstring>(const Array &amp;z, float talus_ref)</argsstring>
        <name>flow_direction_dinf</name>
        <qualifiedname>hmap::flow_direction_dinf</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus_ref</declname>
        </param>
        <briefdescription>
<para>Computes the flow direction and weights for each direction using the Multiple Flow Direction (MFD) model. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the flow direction for each cell and provides the weight for each possible flow direction using the MFD model Qin2007. The flow-partition exponent is determined using a reference talus value. Smaller values of <computeroutput>talus_ref</computeroutput> will lead to thinner flow streams. The maximum talus value of the heightmap can be used as a reference.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus_ref</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference talus used to locally define the flow-partition exponent. Smaller values will result in thinner flow streams. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;Array&gt; A vector of arrays, each containing the weights for flow directions at every cell. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/hydrology/flow_accumulation_dinf.cpp" line="107" column="13" bodyfile="HighMap/src/hydrology/flow_accumulation_dinf.cpp" bodystart="107" bodyend="147" declfile="HighMap/include/highmap/hydrology.hpp" declline="159" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a5adb98e67f89036317df083dd2123a1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Path" kindref="compound">Path</ref></type>
        <definition>Path hmap::flow_stream</definition>
        <argsstring>(const Array &amp;z, const Vec2&lt; int &gt; ij_start, const float elevation_ratio=0.5f, const float distance_exponent=2.f, const float upward_penalization=100.f)</argsstring>
        <name>flow_stream</name>
        <qualifiedname>hmap::flow_stream</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const <ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>ij_start</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>elevation_ratio</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const float</type>
          <declname>distance_exponent</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const float</type>
          <declname>upward_penalization</declname>
          <defval>100.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Computes the optimal flow path from a starting point to the boundary of a given elevation array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function finds the flow path on a grid represented by the input array <computeroutput>z</computeroutput>, starting from the given point <computeroutput>ij_start</computeroutput>. It identifies the best path to the boundary, minimizing upward elevation penalties while accounting for distance and elevation factors.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The input 2D array representing elevation values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ij_start</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting point as a 2D vector of indices (i, j) within the array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elevation_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Weight for elevation difference in the cost function (default: 0.5). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distance_exponent</parametername>
</parameternamelist>
<parameterdescription>
<para>Exponent for the distance term in the cost function (default: 2.0). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upward_penalization</parametername>
</parameternamelist>
<parameterdescription>
<para>Penalty factor for upward elevation changes (default: 100.0). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="classhmap_1_1Path" kindref="compound">Path</ref> object representing the optimal flow path with normalized x and y coordinates and corresponding elevations.</para>
</simplesect>
The output path consists of:<itemizedlist>
<listitem><para>Normalized x-coordinates along the path.</para>
</listitem><listitem><para>Normalized y-coordinates along the path.</para>
</listitem><listitem><para>Elevation values corresponding to each point on the path.</para>
</listitem></itemizedlist>
</para>
<para><bold>Example</bold> <programlisting filename="ex_flow_stream.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>ij_start(100,<sp/>128);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Path" kindref="compound">hmap::Path</ref><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/><ref refid="namespacehmap_1a5adb98e67f89036317df083dd2123a1e" kindref="member">hmap::flow_stream</ref>(z,<sp/>ij_start);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec4" kindref="compound">hmap::Vec4&lt;float&gt;</ref><sp/>bbox(0.f,<sp/>1.f,<sp/>0.f,<sp/>1.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zv(shape);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>path.<ref refid="classhmap_1_1Path_1a3b90d30abcdc4da9e381957d76c5d8db" kindref="member">to_array</ref>(zv,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zd1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>riverbank_talus<sp/>=<sp/>1.f<sp/>/<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>river_width<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>merging_width<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>depth<sp/>=<sp/>0.01f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>riverbed_talus<sp/>=<sp/>0.2<sp/>/<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noise_ratio<sp/>=<sp/>0.9f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>mask;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a6d536f0d67ade56c6a60927d8c8e9720" kindref="member">hmap::dig_river</ref>(zd1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{path},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>riverbank_talus,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>river_width,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>merging_width,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>depth,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>riverbed_talus,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noise_ratio,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;mask);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>multiple<sp/>streams</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>ij_start2(128,<sp/>180);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Path" kindref="compound">hmap::Path</ref><sp/><sp/><sp/><sp/><sp/><sp/>path2<sp/>=<sp/><ref refid="namespacehmap_1a5adb98e67f89036317df083dd2123a1e" kindref="member">hmap::flow_stream</ref>(z,<sp/>ij_start2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zd2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a6d536f0d67ade56c6a60927d8c8e9720" kindref="member">hmap::dig_river</ref>(zd2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{path,<sp/>path2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>riverbank_talus,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>river_width,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>merging_width,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>depth,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>riverbed_talus,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noise_ratio,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;mask);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>zd2.<ref refid="classhmap_1_1Array_1ad7018857827d8e8d263516bbbd77630f" kindref="member">to_png_grayscale</ref>(</highlight><highlight class="stringliteral">&quot;out.png&quot;</highlight><highlight class="normal">,<sp/>CV_16U);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_flow_stream.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zv,<sp/>zd1,<sp/>zd2,<sp/>mask},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_flow_stream.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/hydrology/flow_stream.cpp" line="46" column="6" bodyfile="HighMap/src/hydrology/flow_stream.cpp" bodystart="46" bodyend="117" declfile="HighMap/include/highmap/hydrology.hpp" declline="194" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a97ba5dfaa6625b654a8010ed7d2f3465" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::generate_riverbed</definition>
        <argsstring>(const Path &amp;path, Vec2&lt; int &gt; shape, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f}, bool bezier_smoothing=false, float depth_start=0.01f, float depth_end=1.f, float slope_start=64.f, float slope_end=32.f, float shape_exponent_start=1.f, float shape_exponent_end=10.f, float k_smoothing=0.5f, int post_filter_ir=0, Array *p_noise_x=nullptr, Array *p_noise_y=nullptr, Array *p_noise_r=nullptr)</argsstring>
        <name>generate_riverbed</name>
        <qualifiedname>hmap::generate_riverbed</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Path" kindref="compound">Path</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>bezier_smoothing</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>float</type>
          <declname>depth_start</declname>
          <defval>0.01<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>depth_end</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>slope_start</declname>
          <defval>64.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>slope_end</declname>
          <defval>32.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>shape_exponent_start</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>shape_exponent_end</declname>
          <defval>10.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>k_smoothing</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>post_filter_ir</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_r</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Generates a 2D array representing a riverbed based on a specified path. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates a scalar depth field (<computeroutput>dz</computeroutput>) for a riverbed shape using a path, which can optionally be smoothed with Bezier curves. It supports noise perturbation and post-filtering to adjust the riverbed&apos;s features.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The input path defining the riverbed&apos;s trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensions of the output array (width, height). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>The bounding box for the output grid in world coordinates. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bezier_smoothing</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to enable or disable Bezier smoothing of the path. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depth_start</parametername>
</parameternamelist>
<parameterdescription>
<para>The depth at the start of the riverbed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depth_end</parametername>
</parameternamelist>
<parameterdescription>
<para>The depth at the end of the riverbed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slope_start</parametername>
</parameternamelist>
<parameterdescription>
<para>The slope multiplier at the start of the riverbed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slope_end</parametername>
</parameternamelist>
<parameterdescription>
<para>The slope multiplier at the end of the riverbed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shape_exponent_start</parametername>
</parameternamelist>
<parameterdescription>
<para>The shape exponent at the start of the riverbed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shape_exponent_end</parametername>
</parameternamelist>
<parameterdescription>
<para>The shape exponent at the end of the riverbed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k_smoothing</parametername>
</parameternamelist>
<parameterdescription>
<para>The smoothing factor for the riverbed shape adjustments. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>post_filter_ir</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the post-filtering operation for smoothing the output. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to a noise array for perturbing the x-coordinates. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to a noise array for perturbing the y-coordinates. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_r</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to a noise array for perturbing the radial function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A 2D array representing the calculated riverbed depth field.</para>
</simplesect>
<simplesect kind="note"><para>The function requires the path to have at least two points. If the path has fewer points, an empty array is returned with the given shape.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_generate_riverbed.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref><sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>base<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec4" kindref="compound">hmap::Vec4&lt;float&gt;</ref><sp/>bbox<sp/>=<sp/>{1.f,<sp/>2.f,<sp/>-0.5f,<sp/>0.5f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Path" kindref="compound">hmap::Path</ref><sp/>path<sp/>=<sp/><ref refid="classhmap_1_1Path" kindref="compound">hmap::Path</ref>(4,<sp/>seed,<sp/>bbox.<ref refid="structhmap_1_1Vec4_1a080d1200616967db1349c9b912b1186c" kindref="member">adjust</ref>(0.2f,<sp/>-0.2f,<sp/>0.2f,<sp/>-0.2f));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>path.<ref refid="classhmap_1_1Path_1ad68abaa80879402c3758e24626acfb53" kindref="member">reorder_nns</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>path.<ref refid="classhmap_1_1Path_1a22ef6d9852530fbb2b747c8b22ba9546" kindref="member">fractalize</ref>(8,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>path.<ref refid="classhmap_1_1Cloud_1a9071aba6d7344639eede19e54ec3e7cb" kindref="member">set_values_from_array</ref>(<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zp<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(shape);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>path.<ref refid="classhmap_1_1Path_1a3b90d30abcdc4da9e381957d76c5d8db" kindref="member">to_array</ref>(zp,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>dz<sp/>=<sp/><ref refid="namespacehmap_1a97ba5dfaa6625b654a8010ed7d2f3465" kindref="member">hmap::generate_riverbed</ref>(path,<sp/>shape,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(dz);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>dz.<ref refid="classhmap_1_1Array_1ad7018857827d8e8d263516bbbd77630f" kindref="member">to_png_grayscale</ref>(</highlight><highlight class="stringliteral">&quot;out.png&quot;</highlight><highlight class="normal">,<sp/>CV_16U);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>dz.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;out1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_generate_riverbed.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{zp,<sp/>dz},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_generate_riverbed.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/hydrology/generate_riverbed.cpp" line="16" column="7" bodyfile="HighMap/src/hydrology/generate_riverbed.cpp" bodystart="16" bodyend="85" declfile="HighMap/include/highmap/hydrology.hpp" declline="246" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a3f38b7faedc76835a0a902eb48e3d94b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string hmap::zfill</definition>
        <argsstring>(const std::string &amp;str, int n_zero)</argsstring>
        <name>zfill</name>
        <qualifiedname>hmap::zfill</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_zero</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/utils/string_utils.cpp" line="9" column="13" bodyfile="HighMap/src/utils/string_utils.cpp" bodystart="9" bodyend="12" declfile="HighMap/include/highmap/internal/string_utils.hpp" declline="18" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a0b7db6f8ce57fcdeca7ca1e3b7d1e686" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t hmap::upperbound_right</definition>
        <argsstring>(const std::vector&lt; float &gt; &amp;v, float value)</argsstring>
        <name>upperbound_right</name>
        <qualifiedname>hmap::upperbound_right</qualifiedname>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/operator/vector_utils.cpp" line="27" column="8" bodyfile="HighMap/src/operator/vector_utils.cpp" bodystart="27" bodyend="37" declfile="HighMap/include/highmap/internal/vector_utils.hpp" declline="26" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a8be122241fa42b0f6a7ef67106391780" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; size_t &gt;</type>
        <definition>std::vector&lt; size_t &gt; hmap::argsort</definition>
        <argsstring>(const std::vector&lt; float &gt; &amp;v)</argsstring>
        <name>argsort</name>
        <qualifiedname>hmap::argsort</qualifiedname>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/operator/vector_utils.cpp" line="16" column="13" bodyfile="HighMap/src/operator/vector_utils.cpp" bodystart="16" bodyend="25" declfile="HighMap/include/highmap/internal/vector_utils.hpp" declline="28" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ad122242a8f8cf308215faee96c9471ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void hmap::reindex_vector</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;v, std::vector&lt; size_t &gt; &amp;idx)</argsstring>
        <name>reindex_vector</name>
        <qualifiedname>hmap::reindex_vector</qualifiedname>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; &amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/internal/vector_utils.hpp" line="31" column="6" bodyfile="HighMap/include/highmap/internal/vector_utils.hpp" bodystart="31" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ac95d63662a6878f27011c0b4c7c70078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::vector_unique_values</definition>
        <argsstring>(std::vector&lt; float &gt; &amp;v)</argsstring>
        <name>vector_unique_values</name>
        <qualifiedname>hmap::vector_unique_values</qualifiedname>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/operator/vector_utils.cpp" line="42" column="6" bodyfile="HighMap/src/operator/vector_utils.cpp" bodystart="42" bodyend="49" declfile="HighMap/include/highmap/internal/vector_utils.hpp" declline="39" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ae91029283452ab6d8276e3745a476b48" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::bilinear_interp</definition>
        <argsstring>(float f00, float f10, float f01, float f11, float u, float v)</argsstring>
        <name>bilinear_interp</name>
        <qualifiedname>hmap::bilinear_interp</qualifiedname>
        <param>
          <type>float</type>
          <declname>f00</declname>
        </param>
        <param>
          <type>float</type>
          <declname>f10</declname>
        </param>
        <param>
          <type>float</type>
          <declname>f01</declname>
        </param>
        <param>
          <type>float</type>
          <declname>f11</declname>
        </param>
        <param>
          <type>float</type>
          <declname>u</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Compute the bilinear interpolated value from four input values. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the interpolated value at a point within a grid using bilinear interpolation based on four surrounding values.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f00</parametername>
</parameternamelist>
<parameterdescription>
<para>Value at (u, v) = (0, 0). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f10</parametername>
</parameternamelist>
<parameterdescription>
<para>Value at (u, v) = (1, 0). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f01</parametername>
</parameternamelist>
<parameterdescription>
<para>Value at (u, v) = (0, 1). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f11</parametername>
</parameternamelist>
<parameterdescription>
<para>Value at (u, v) = (1, 1). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>The interpolation parameter in the x-direction, expected in [0, 1). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>The interpolation parameter in the y-direction, expected in [0, 1). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float The bilinear interpolated value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/interpolate2d.hpp" line="66" column="14" bodyfile="HighMap/include/highmap/interpolate2d.hpp" bodystart="66" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aee026d8b23196038c2b16c370b743889" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::cubic_interpolate</definition>
        <argsstring>(float p[4], float x)</argsstring>
        <name>cubic_interpolate</name>
        <qualifiedname>hmap::cubic_interpolate</qualifiedname>
        <param>
          <type>float</type>
          <declname>p</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/interpolate2d.hpp" line="79" column="14" bodyfile="HighMap/include/highmap/interpolate2d.hpp" bodystart="79" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a62fb974ae1d78c0c4ebb4267dc9c8204" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::interpolate2d</definition>
        <argsstring>(Vec2&lt; int &gt; shape, const std::vector&lt; float &gt; &amp;x, const std::vector&lt; float &gt; &amp;y, const std::vector&lt; float &gt; &amp;values, InterpolationMethod2D interpolation_method, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, const Array *p_stretching=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>interpolate2d</name>
        <qualifiedname>hmap::interpolate2d</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type><ref refid="namespacehmap_1a5bfab5d68e822294ff90fde21b85f581" kindref="member">InterpolationMethod2D</ref></type>
          <declname>interpolation_method</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Generic 2D interpolation function. </para>
        </briefdescription>
        <detaileddescription>
<para>This function performs interpolation on a 2D grid using the specified interpolation method. It can optionally apply noise and stretching to the input data before interpolation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>Output array shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x coordinates of the input values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>y coordinates of the input values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>values</parametername>
</parameternamelist>
<parameterdescription>
<para>Input values at (x, y). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interpolation_method</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolation method (see <ref refid="namespacehmap_1a5bfab5d68e822294ff90fde21b85f581" kindref="member">InterpolationMethod2D</ref>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the input noise array in the x direction (optional). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the input noise array in the y direction (optional). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_stretching</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the local wavenumber multiplier array (optional). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box (default: {0.f, 1.f, 0.f, 1.f}). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Output array with interpolated values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/interpolate/interpolate2d.cpp" line="16" column="7" bodyfile="HighMap/src/interpolate/interpolate2d.cpp" bodystart="16" bodyend="49" declfile="HighMap/include/highmap/interpolate2d.hpp" declline="110" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a608687504dfc1cf55afe6f1db6a90335" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::interpolate2d_nearest</definition>
        <argsstring>(Vec2&lt; int &gt; shape, const std::vector&lt; float &gt; &amp;x, const std::vector&lt; float &gt; &amp;y, const std::vector&lt; float &gt; &amp;values, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, const Array *p_stretching=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>interpolate2d_nearest</name>
        <qualifiedname>hmap::interpolate2d_nearest</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>2D interpolation using the nearest neighbor method. </para>
        </briefdescription>
        <detaileddescription>
<para>This function performs 2D interpolation by assigning the value of the nearest point to each point in the output grid.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>Output array shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x coordinates of the input values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>y coordinates of the input values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>values</parametername>
</parameternamelist>
<parameterdescription>
<para>Input values at (x, y). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the input noise array in the x direction (optional). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the input noise array in the y direction (optional). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_stretching</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the local wavenumber multiplier array (optional). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box (default: {0.f, 1.f, 0.f, 1.f}). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Output array with interpolated values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/interpolate/interpolate2d.cpp" line="51" column="7" bodyfile="HighMap/src/interpolate/interpolate2d.cpp" bodystart="51" bodyend="88" declfile="HighMap/include/highmap/interpolate2d.hpp" declline="139" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a87e9a2e5fc78594e8d88522366ff5396" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::interpolate2d_delaunay</definition>
        <argsstring>(Vec2&lt; int &gt; shape, const std::vector&lt; float &gt; &amp;x, const std::vector&lt; float &gt; &amp;y, const std::vector&lt; float &gt; &amp;values, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, const Array *p_stretching=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>interpolate2d_delaunay</name>
        <qualifiedname>hmap::interpolate2d_delaunay</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>2D interpolation using the Delaunay triangulation method. </para>
        </briefdescription>
        <detaileddescription>
<para>This function performs 2D interpolation by generating a Delaunay triangulation of the input points and interpolating the values within each triangle.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>Output array shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x coordinates of the input values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>y coordinates of the input values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>values</parametername>
</parameternamelist>
<parameterdescription>
<para>Input values at (x, y). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the input noise array in the x direction (optional). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the input noise array in the y direction (optional). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_stretching</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the local wavenumber multiplier array (optional). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box (default: {0.f, 1.f, 0.f, 1.f}). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Output array with interpolated values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/interpolate/interpolate2d.cpp" line="90" column="7" bodyfile="HighMap/src/interpolate/interpolate2d.cpp" bodystart="90" bodyend="164" declfile="HighMap/include/highmap/interpolate2d.hpp" declline="168" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a0039057c9e4adf1498fa0a91b94d7fb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::flatten_heightmap</definition>
        <argsstring>(Heightmap &amp;h_source1, const Heightmap &amp;h_source2, const CoordFrame &amp;t_source1, const CoordFrame &amp;t_source2)</argsstring>
        <name>flatten_heightmap</name>
        <qualifiedname>hmap::flatten_heightmap</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h_source1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h_source2</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1CoordFrame" kindref="compound">CoordFrame</ref> &amp;</type>
          <declname>t_source1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1CoordFrame" kindref="compound">CoordFrame</ref> &amp;</type>
          <declname>t_source2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/interpolate/interpolate_heightmap.cpp" line="13" column="6" bodyfile="HighMap/src/interpolate/interpolate_heightmap.cpp" bodystart="13" bodyend="59" declfile="HighMap/include/highmap/interpolate_array.hpp" declline="20" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a2ecd308a993a3d85640aea025e02f3b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::flatten_heightmap</definition>
        <argsstring>(const Heightmap &amp;h_source1, const Heightmap &amp;h_source2, Heightmap &amp;h_target, const CoordFrame &amp;t_source1, const CoordFrame &amp;t_source2, const CoordFrame &amp;t_target)</argsstring>
        <name>flatten_heightmap</name>
        <qualifiedname>hmap::flatten_heightmap</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h_source1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h_source2</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h_target</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1CoordFrame" kindref="compound">CoordFrame</ref> &amp;</type>
          <declname>t_source1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1CoordFrame" kindref="compound">CoordFrame</ref> &amp;</type>
          <declname>t_source2</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1CoordFrame" kindref="compound">CoordFrame</ref> &amp;</type>
          <declname>t_target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/interpolate/interpolate_heightmap.cpp" line="61" column="6" bodyfile="HighMap/src/interpolate/interpolate_heightmap.cpp" bodystart="61" bodyend="111" declfile="HighMap/include/highmap/interpolate_array.hpp" declline="26" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a17f8f7249f91ef9bbcc0b1b5e38e20f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::flatten_heightmap</definition>
        <argsstring>(const std::vector&lt; const Heightmap * &gt; &amp;h_sources, Heightmap &amp;h_target, const std::vector&lt; const CoordFrame * &gt; &amp;t_sources, const CoordFrame &amp;t_target)</argsstring>
        <name>flatten_heightmap</name>
        <qualifiedname>hmap::flatten_heightmap</qualifiedname>
        <param>
          <type>const std::vector&lt; const <ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> * &gt; &amp;</type>
          <declname>h_sources</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h_target</declname>
        </param>
        <param>
          <type>const std::vector&lt; const <ref refid="classhmap_1_1CoordFrame" kindref="compound">CoordFrame</ref> * &gt; &amp;</type>
          <declname>t_sources</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1CoordFrame" kindref="compound">CoordFrame</ref> &amp;</type>
          <declname>t_target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/interpolate/interpolate_heightmap.cpp" line="113" column="6" bodyfile="HighMap/src/interpolate/interpolate_heightmap.cpp" bodystart="113" bodyend="131" declfile="HighMap/include/highmap/interpolate_array.hpp" declline="33" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ab01933c8ca8896b3393d076289024158" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::interpolate_array_bicubic</definition>
        <argsstring>(const Array &amp;source, Array &amp;target)</argsstring>
        <name>interpolate_array_bicubic</name>
        <qualifiedname>hmap::interpolate_array_bicubic</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/interpolate/interpolate_array.cpp" line="14" column="6" bodyfile="HighMap/src/interpolate/interpolate_array.cpp" bodystart="14" bodyend="20" declfile="HighMap/include/highmap/interpolate_array.hpp" declline="38" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a1cdbdd6cb012995c4f4a943fd6754d48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::interpolate_array_bicubic</definition>
        <argsstring>(const Array &amp;source, Array &amp;target, const Vec4&lt; float &gt; &amp;bbox_source, const Vec4&lt; float &gt; &amp;bbox_target)</argsstring>
        <name>interpolate_array_bicubic</name>
        <qualifiedname>hmap::interpolate_array_bicubic</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const <ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt; &amp;</type>
          <declname>bbox_source</declname>
        </param>
        <param>
          <type>const <ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt; &amp;</type>
          <declname>bbox_target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/interpolate/interpolate_array.cpp" line="22" column="6" bodyfile="HighMap/src/interpolate/interpolate_array.cpp" bodystart="22" bodyend="90" declfile="HighMap/include/highmap/interpolate_array.hpp" declline="40" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1af979eca3e4faf98300e0912513d317ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::interpolate_array_bilinear</definition>
        <argsstring>(const Array &amp;source, Array &amp;target)</argsstring>
        <name>interpolate_array_bilinear</name>
        <qualifiedname>hmap::interpolate_array_bilinear</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/interpolate/interpolate_array.cpp" line="92" column="6" bodyfile="HighMap/src/interpolate/interpolate_array.cpp" bodystart="92" bodyend="98" declfile="HighMap/include/highmap/interpolate_array.hpp" declline="45" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a4b68a07e932c48ab86f3da581858f0e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::interpolate_array_bilinear</definition>
        <argsstring>(const Array &amp;source, Array &amp;target, const Vec4&lt; float &gt; &amp;bbox_source, const Vec4&lt; float &gt; &amp;bbox_target)</argsstring>
        <name>interpolate_array_bilinear</name>
        <qualifiedname>hmap::interpolate_array_bilinear</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const <ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt; &amp;</type>
          <declname>bbox_source</declname>
        </param>
        <param>
          <type>const <ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt; &amp;</type>
          <declname>bbox_target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/interpolate/interpolate_array.cpp" line="100" column="6" bodyfile="HighMap/src/interpolate/interpolate_array.cpp" bodystart="100" bodyend="158" declfile="HighMap/include/highmap/interpolate_array.hpp" declline="47" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a06b154b615118bc78c1f7fffcc03f4ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::interpolate_array_nearest</definition>
        <argsstring>(const Array &amp;source, Array &amp;target)</argsstring>
        <name>interpolate_array_nearest</name>
        <qualifiedname>hmap::interpolate_array_nearest</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/interpolate/interpolate_array.cpp" line="160" column="6" bodyfile="HighMap/src/interpolate/interpolate_array.cpp" bodystart="160" bodyend="166" declfile="HighMap/include/highmap/interpolate_array.hpp" declline="52" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1adc6c1fac9e7e40eff5079586d6a1594a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::interpolate_array_nearest</definition>
        <argsstring>(const Array &amp;source, Array &amp;target, const Vec4&lt; float &gt; &amp;bbox_source, const Vec4&lt; float &gt; &amp;bbox_target)</argsstring>
        <name>interpolate_array_nearest</name>
        <qualifiedname>hmap::interpolate_array_nearest</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const <ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt; &amp;</type>
          <declname>bbox_source</declname>
        </param>
        <param>
          <type>const <ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt; &amp;</type>
          <declname>bbox_target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/interpolate/interpolate_array.cpp" line="168" column="6" bodyfile="HighMap/src/interpolate/interpolate_array.cpp" bodystart="168" bodyend="200" declfile="HighMap/include/highmap/interpolate_array.hpp" declline="54" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a14135f92a275f8857aac1bc9480e426f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::interpolate_heightmap</definition>
        <argsstring>(const hmap::Heightmap &amp;h_source, hmap::Heightmap &amp;h_target, const CoordFrame &amp;t_source, const CoordFrame &amp;t_target)</argsstring>
        <name>interpolate_heightmap</name>
        <qualifiedname>hmap::interpolate_heightmap</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Heightmap" kindref="compound">hmap::Heightmap</ref> &amp;</type>
          <declname>h_source</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">hmap::Heightmap</ref> &amp;</type>
          <declname>h_target</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1CoordFrame" kindref="compound">CoordFrame</ref> &amp;</type>
          <declname>t_source</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1CoordFrame" kindref="compound">CoordFrame</ref> &amp;</type>
          <declname>t_target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/interpolate/interpolate_heightmap.cpp" line="133" column="6" bodyfile="HighMap/src/interpolate/interpolate_heightmap.cpp" bodystart="133" bodyend="162" declfile="HighMap/include/highmap/interpolate_array.hpp" declline="59" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ae0ab7faed3577159bc8051ad0e25b051" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::biweight</definition>
        <argsstring>(Vec2&lt; int &gt; shape)</argsstring>
        <name>biweight</name>
        <qualifiedname>hmap::biweight</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
<para>Generates a biweight kernel array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a biweight kernel, which is a type of kernel function used in statistics for smoothing and interpolation.</para>
<para>For more details on the biweight kernel, refer to the Wikipedia page: <ulink url="https://en.wikipedia.org/wiki/Kernel_%28statistics%29">https://en.wikipedia.org/wiki/Kernel_%28statistics%29</ulink>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape specifying the dimensions of the kernel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> A new array containing the biweight kernel. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/kernels/kernels.cpp" line="17" column="7" bodyfile="HighMap/src/kernels/kernels.cpp" bodystart="17" bodyend="33" declfile="HighMap/include/highmap/kernels.hpp" declline="60" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1adfc320d14c66c6a40dedd9410efa269d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::blackman</definition>
        <argsstring>(Vec2&lt; int &gt; shape)</argsstring>
        <name>blackman</name>
        <qualifiedname>hmap::blackman</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
<para>Generates a Blackman window array with the specified shape. </para>
        </briefdescription>
        <detaileddescription>
<para>The Blackman window is commonly used in signal processing for smoothing or tapering. This function creates a 2D array of values representing the Blackman window, calculated based on the given shape dimensions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>A 2D vector representing the dimensions of the array.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> object containing the Blackman window values of the specified shape. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/kernels/kernels.cpp" line="35" column="7" bodyfile="HighMap/src/kernels/kernels.cpp" bodystart="35" bodyend="54" declfile="HighMap/include/highmap/kernels.hpp" declline="74" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a9880bdc35440162c24103a5df4c137a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::cone</definition>
        <argsstring>(Vec2&lt; int &gt; shape)</argsstring>
        <name>cone</name>
        <qualifiedname>hmap::cone</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
<para>Generates a cone-shaped kernel array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a cone-shaped kernel. The maximum value of the kernel is 1, and the shape of the kernel is determined by the provided array dimensions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape specifying the dimensions of the kernel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> A new array containing the cone-shaped kernel. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/kernels/kernels.cpp" line="56" column="7" bodyfile="HighMap/src/kernels/kernels.cpp" bodystart="56" bodyend="72" declfile="HighMap/include/highmap/kernels.hpp" declline="86" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a553a4572c845a1286836bc08b67b3e34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::cone_talus</definition>
        <argsstring>(float height, float talus)</argsstring>
        <name>cone_talus</name>
        <qualifiedname>hmap::cone_talus</qualifiedname>
        <param>
          <type>float</type>
          <declname>height</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus</declname>
        </param>
        <briefdescription>
<para>Generates a cone-shaped kernel with specified height and talus. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a cone-shaped kernel with a given height and talus. The output array&apos;s shape is adjusted accordingly based on the specified height and talus.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>Height of the cone. This determines the peak value of the kernel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus</parametername>
</parameternamelist>
<parameterdescription>
<para>The slope of the cone, which affects the rate at which the kernel value decreases. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> A new array containing the cone-shaped kernel with the specified height and talus. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/kernels/kernels.cpp" line="81" column="7" bodyfile="HighMap/src/kernels/kernels.cpp" bodystart="81" bodyend="95" declfile="HighMap/include/highmap/kernels.hpp" declline="102" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ad1133df106eb662c9411a5501a5a3469" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::cone_smooth</definition>
        <argsstring>(Vec2&lt; int &gt; shape)</argsstring>
        <name>cone_smooth</name>
        <qualifiedname>hmap::cone_smooth</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
<para>Generates a cone-shaped kernel with a smooth landing. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a cone-shaped kernel where the kernel smoothly transitions to zero at the bottom, resulting in a smooth derivative at the cone base.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape specifying the dimensions of the kernel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> A new array containing the smooth cone-shaped kernel. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/kernels/kernels.cpp" line="74" column="7" bodyfile="HighMap/src/kernels/kernels.cpp" bodystart="74" bodyend="79" declfile="HighMap/include/highmap/kernels.hpp" declline="114" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1af6af5d27dcec83e466ca6b58244cafe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::cubic_pulse</definition>
        <argsstring>(Vec2&lt; int &gt; shape)</argsstring>
        <name>cubic_pulse</name>
        <qualifiedname>hmap::cubic_pulse</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
<para>Generates a cubic pulse kernel array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a cubic pulse kernel, which is a type of kernel function characterized by its cubic shape.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape specifying the dimensions of the kernel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> A new array containing the cubic pulse kernel. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/kernels/kernels.cpp" line="97" column="7" bodyfile="HighMap/src/kernels/kernels.cpp" bodystart="97" bodyend="114" declfile="HighMap/include/highmap/kernels.hpp" declline="125" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a0b3237f9cc015299bf3e436be71d3587" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt; float &gt; hmap::cubic_pulse_1d</definition>
        <argsstring>(int nk)</argsstring>
        <name>cubic_pulse_1d</name>
        <qualifiedname>hmap::cubic_pulse_1d</qualifiedname>
        <param>
          <type>int</type>
          <declname>nk</declname>
        </param>
        <briefdescription>
<para>Generates a 1D cubic pulse kernel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nk</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of samples in the 1D kernel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;float&gt; A vector containing the cubic pulse kernel values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/kernels/kernels.cpp" line="116" column="13" bodyfile="HighMap/src/kernels/kernels.cpp" bodystart="116" bodyend="136" declfile="HighMap/include/highmap/kernels.hpp" declline="134" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a2938b1bbfe89794423055e6ee9d2f79b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::cubic_pulse_directional</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float angle, float aspect_ratio, float anisotropy)</argsstring>
        <name>cubic_pulse_directional</name>
        <qualifiedname>hmap::cubic_pulse_directional</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>float</type>
          <declname>aspect_ratio</declname>
        </param>
        <param>
          <type>float</type>
          <declname>anisotropy</declname>
        </param>
        <briefdescription>
<para>Generates a &quot;directional&quot; cubic pulse kernel. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a cubic pulse kernel with directional properties. The kernel&apos;s shape can be adjusted based on the provided angle, aspect ratio, and anisotropy. This allows for creating kernels that are elongated or compressed in specific directions, making them suitable for applications requiring directional smoothing or filtering.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape specifying the dimensions of the kernel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Angle (in degrees) defining the direction of the pulse elongation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aspect_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Pulse aspect ratio, which controls the kernel&apos;s elongation or compression. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>anisotropy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pulse width ratio between upstream and downstream sides of the pulse. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> A new array containing the directional cubic pulse kernel. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/kernels/kernels.cpp" line="138" column="7" bodyfile="HighMap/src/kernels/kernels.cpp" bodystart="138" bodyend="171" declfile="HighMap/include/highmap/kernels.hpp" declline="155" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a1004e5d8355c36fc1945d73c3b44eda0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::cubic_pulse_truncated</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float slant_ratio, float angle)</argsstring>
        <name>cubic_pulse_truncated</name>
        <qualifiedname>hmap::cubic_pulse_truncated</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>slant_ratio</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>Generates a truncated cubic pulse kernel. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a cubic pulse kernel that is truncated based on the specified slant ratio and angle. The truncation slope determines how the kernel&apos;s values decrease as they approach the edge of the kernel, creating a &quot;cut-off&quot; effect.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape specifying the dimensions of the kernel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slant_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Truncation slope that affects the kernel&apos;s cut-off behavior. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Angle (in degrees) that defines the orientation of the truncation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> A new array containing the truncated cubic pulse kernel.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_cubic_pulse_truncated.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slant_ratio<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref><sp/>=<sp/>30.f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a1004e5d8355c36fc1945d73c3b44eda0" kindref="member">hmap::cubic_pulse_truncated</ref>(shape,<sp/>slant_ratio,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_cubic_pulse_truncated.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_cubic_pulse_truncated.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/kernels/kernels.cpp" line="173" column="7" bodyfile="HighMap/src/kernels/kernels.cpp" bodystart="173" bodyend="198" declfile="HighMap/include/highmap/kernels.hpp" declline="182" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1acffafcfa04738c04fdd82eea8aa262dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::disk</definition>
        <argsstring>(Vec2&lt; int &gt; shape)</argsstring>
        <name>disk</name>
        <qualifiedname>hmap::disk</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
<para>Generates a disk-shaped kernel footprint. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a disk-shaped kernel, which is a circular kernel where the values are radially symmetric around the center.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape specifying the dimensions of the kernel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> A new array containing the disk-shaped kernel. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/kernels/kernels.cpp" line="200" column="7" bodyfile="HighMap/src/kernels/kernels.cpp" bodystart="200" bodyend="214" declfile="HighMap/include/highmap/kernels.hpp" declline="193" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a04f44c4dc11d46f5089f5213d4c5d1a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::disk_smooth</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float r_cutoff=0.9f)</argsstring>
        <name>disk_smooth</name>
        <qualifiedname>hmap::disk_smooth</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>r_cutoff</declname>
          <defval>0.9<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Generates a smooth, disk-shaped kernel footprint with soft edges. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a 2D, disk-shaped kernel with radially symmetric values centered in the array. Values inside the cutoff radius <computeroutput>r_cutoff</computeroutput> are set to 1.0. Between <computeroutput>r_cutoff</computeroutput> and the normalized radius 1.0, the values smoothly fall off to zero using a parabolic profile to ensure soft transitions at the disk boundary.</para>
<para>The generated array is useful for constructing smooth low-pass filters or spatial masks with circular support.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensions of the output array (width, height). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r_cutoff</parametername>
</parameternamelist>
<parameterdescription>
<para>Normalized cutoff radius in the range [0.0, 1.0]. Inside this radius, the kernel has a flat value of 1.0; outside, it decays smoothly to 0.0.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A 2D array of size <computeroutput>shape</computeroutput> containing the smooth disk-shaped kernel.</para>
</simplesect>
<simplesect kind="note"><para>Coordinates are normalized such that the radius 1.0 corresponds to the maximum possible distance from the center in either dimension.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacehmap_1acffafcfa04738c04fdd82eea8aa262dc" kindref="member">disk()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/kernels/kernels.cpp" line="216" column="7" bodyfile="HighMap/src/kernels/kernels.cpp" bodystart="216" bodyend="243" declfile="HighMap/include/highmap/kernels.hpp" declline="220" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aab655567714a21e6308c09d07056d52f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gabor</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float kw, float angle, bool quad_phase_shift=false)</argsstring>
        <name>gabor</name>
        <qualifiedname>hmap::gabor</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>kw</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>quad_phase_shift</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Generates a Gabor kernel of the specified shape. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a Gabor kernel, which is a type of sinusoidal kernel modulated by a Gaussian envelope. The Gabor kernel is useful for texture analysis and feature extraction. The kernel&apos;s frequency and orientation are defined by the wavenumber and angle parameters, respectively.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape specifying the dimensions of the kernel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>Kernel wavenumber, which determines the frequency of the sinusoidal component. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Kernel angle (in degrees) that defines the orientation of the sinusoidal component. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> A new array containing the Gabor kernel.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_gabor.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw<sp/>=<sp/>4.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref><sp/>=<sp/>30.f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1aab655567714a21e6308c09d07056d52f" kindref="member">hmap::gabor</ref>(shape,<sp/>kw,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_gabor.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_gabor.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/kernels/kernels.cpp" line="245" column="7" bodyfile="HighMap/src/kernels/kernels.cpp" bodystart="245" bodyend="276" declfile="HighMap/include/highmap/kernels.hpp" declline="243" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a3b8ba9062298d434c8c10af3e92309a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gabor_dune</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float kw, float angle, float xtop, float xbottom)</argsstring>
        <name>gabor_dune</name>
        <qualifiedname>hmap::gabor_dune</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>kw</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>float</type>
          <declname>xtop</declname>
        </param>
        <param>
          <type>float</type>
          <declname>xbottom</declname>
        </param>
        <briefdescription>
<para>Generates a modified dune-like Gabor kernel. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a modified Gabor kernel that has a dune-like profile. The dune profile modifies the standard Gabor kernel to include a top and foot for the dune, giving it a specific shape. The <computeroutput>xtop</computeroutput> and <computeroutput>xbottom</computeroutput> parameters control the relative locations of the top and foot of the dune profile, respectively.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape specifying the dimensions of the kernel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>Kernel wavenumber, which determines the frequency of the sinusoidal component. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Kernel angle (in degrees) that defines the orientation of the sinusoidal component. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xtop</parametername>
</parameternamelist>
<parameterdescription>
<para>Relative location of the top of the dune profile (in [0, 1]). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xbottom</parametername>
</parameternamelist>
<parameterdescription>
<para>Relative location of the foot of the dune profile (in [0, 1]). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> A new array containing the modified dune-like Gabor kernel.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_gabor_dune.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw<sp/>=<sp/>8.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref><sp/>=<sp/>30.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xtop<sp/>=<sp/>0.7f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xbottom<sp/>=<sp/>1.f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a3b8ba9062298d434c8c10af3e92309a6" kindref="member">hmap::gabor_dune</ref>(shape,<sp/>kw,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>xtop,<sp/>xbottom);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_gabor_dune.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_gabor_dune.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/kernels/kernels.cpp" line="278" column="7" bodyfile="HighMap/src/kernels/kernels.cpp" bodystart="278" bodyend="317" declfile="HighMap/include/highmap/kernels.hpp" declline="274" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a4ad7940c796973a615558a8dc773281c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::get_kernel</definition>
        <argsstring>(Vec2&lt; int &gt; shape, KernelType kernel_type)</argsstring>
        <name>get_kernel</name>
        <qualifiedname>hmap::get_kernel</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="namespacehmap_1a4b6f135c6e81d313ca54ae1efac5f2c9" kindref="member">KernelType</ref></type>
          <declname>kernel_type</declname>
        </param>
        <briefdescription>
<para>Generate a kernel of the specified type. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a kernel based on the given shape and kernel type. It supports various types of kernels including biweight, cubic pulse, cone, and more. The resulting kernel is returned as an array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensions of the kernel to be generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of kernel to generate (e.g., BIWEIGHT, CUBIC_PULSE, etc.). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The generated kernel array. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/kernels/kernels.cpp" line="449" column="7" bodyfile="HighMap/src/kernels/kernels.cpp" bodystart="449" bodyend="464" declfile="HighMap/include/highmap/kernels.hpp" declline="292" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ab4e60cf8b20170484e3ac2942cc05d59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::hann</definition>
        <argsstring>(Vec2&lt; int &gt; shape)</argsstring>
        <name>hann</name>
        <qualifiedname>hmap::hann</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
<para>Generates a Hann window array with the specified shape. </para>
        </briefdescription>
        <detaileddescription>
<para>The Hann window is commonly used in signal processing for smoothing or tapering. This function creates a 2D array of values representing the Hann window, calculated based on the given shape dimensions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>A 2D vector representing the dimensions of the array.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> object containing the Hann window values of the specified shape. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/kernels/kernels.cpp" line="337" column="7" bodyfile="HighMap/src/kernels/kernels.cpp" bodystart="337" bodyend="351" declfile="HighMap/include/highmap/kernels.hpp" declline="306" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a1d9165a0056e99a90b7734268f231901" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::lorentzian</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float footprint_threshold=0.1f)</argsstring>
        <name>lorentzian</name>
        <qualifiedname>hmap::lorentzian</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>footprint_threshold</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Generate a Lorentzian kernel. </para>
        </briefdescription>
        <detaileddescription>
<para>The Lorentzian kernel is characterized by its peak and tails that decay with the distance from the center. The width of the kernel is determined using the provided footprint threshold.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensions of the kernel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>footprint_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>Determines the width of the Lorentzian kernel. Default is 0.1. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The Lorentzian kernel array. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/kernels/kernels.cpp" line="319" column="7" bodyfile="HighMap/src/kernels/kernels.cpp" bodystart="319" bodyend="335" declfile="HighMap/include/highmap/kernels.hpp" declline="320" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a8be1ca22c14c4989ec8f18842fda2766" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::lorentzian_compact</definition>
        <argsstring>(Vec2&lt; int &gt; shape)</argsstring>
        <name>lorentzian_compact</name>
        <qualifiedname>hmap::lorentzian_compact</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
<para>Generate a modified Lorentzian kernel with compact support. </para>
        </briefdescription>
        <detaileddescription>
<para>This version of the Lorentzian kernel is modified to have compact support, meaning it is non-zero only within a certain range. This modification is useful for specific applications requiring compact kernels.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensions of the kernel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The modified Lorentzian kernel with compact support. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/kernels/kernels.cpp" line="353" column="7" bodyfile="HighMap/src/kernels/kernels.cpp" bodystart="353" bodyend="367" declfile="HighMap/include/highmap/kernels.hpp" declline="332" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a06769c66065dd19c0fd54f4505d0e06c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::sinc_radial</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float kw)</argsstring>
        <name>sinc_radial</name>
        <qualifiedname>hmap::sinc_radial</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>kw</declname>
        </param>
        <briefdescription>
<para>Generates a radial sinc function array with the specified shape and wave number. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a 2D array of values representing the radial sinc function, calculated based on the given shape and wave number. The sinc function is defined as <computeroutput>sin(x) / x</computeroutput> and is useful in signal processing and analysis.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>A 2D vector representing the dimensions of the array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>The wave number used to scale the radial sinc function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> object containing the radial sinc function values of the specified shape. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/kernels/kernels.cpp" line="369" column="7" bodyfile="HighMap/src/kernels/kernels.cpp" bodystart="369" bodyend="383" declfile="HighMap/include/highmap/kernels.hpp" declline="349" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1abf04df687d39ce436fc5cbfae573dbff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::sinc_separable</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float kw)</argsstring>
        <name>sinc_separable</name>
        <qualifiedname>hmap::sinc_separable</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>kw</declname>
        </param>
        <briefdescription>
<para>Generates a separable sinc function array with the specified shape and wave number. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a 2D array of values representing the separable sinc function, calculated as the product of 1D sinc functions along each dimension of the array. The sinc function is defined as <computeroutput>sin(x) / x</computeroutput> and is useful in signal processing and analysis.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>A 2D vector representing the dimensions of the array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>The wave number used to scale the separable sinc function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> object containing the separable sinc function values of the specified shape. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/kernels/kernels.cpp" line="385" column="7" bodyfile="HighMap/src/kernels/kernels.cpp" bodystart="385" bodyend="404" declfile="HighMap/include/highmap/kernels.hpp" declline="366" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a0d6dfb8771368f84f2256ae38fe669fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::smooth_cosine</definition>
        <argsstring>(Vec2&lt; int &gt; shape)</argsstring>
        <name>smooth_cosine</name>
        <qualifiedname>hmap::smooth_cosine</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
<para>Generate a smooth cosine kernel. </para>
        </briefdescription>
        <detaileddescription>
<para>The smooth cosine kernel is a type of kernel function that smoothly transitions between values, based on a cosine function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensions of the kernel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The smooth cosine kernel array. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/kernels/kernels.cpp" line="406" column="7" bodyfile="HighMap/src/kernels/kernels.cpp" bodystart="406" bodyend="422" declfile="HighMap/include/highmap/kernels.hpp" declline="377" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a784bc655283255591d04afd181d756f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::square</definition>
        <argsstring>(Vec2&lt; int &gt; shape)</argsstring>
        <name>square</name>
        <qualifiedname>hmap::square</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
<para>Generate a square-shaped kernel. </para>
        </briefdescription>
        <detaileddescription>
<para>The square kernel is a simple, isotropic kernel where the values are constant within the square region. The maximum value within the kernel is 1.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensions of the kernel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The square-shaped kernel array. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/kernels/kernels.cpp" line="424" column="7" bodyfile="HighMap/src/kernels/kernels.cpp" bodystart="424" bodyend="427" declfile="HighMap/include/highmap/kernels.hpp" declline="388" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a78d3f33a357986539e654f0d42510659" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::tricube</definition>
        <argsstring>(Vec2&lt; int &gt; shape)</argsstring>
        <name>tricube</name>
        <qualifiedname>hmap::tricube</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
<para>Generate a tricube kernel. </para>
        </briefdescription>
        <detaileddescription>
<para>The tricube kernel is a type of kernel function that is often used in statistical applications. It has a specific shape defined by the tricube polynomial.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensions of the kernel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The tricube kernel array.</para>
</simplesect>
<bold>Reference</bold> See <ulink url="https://en.wikipedia.org/wiki/Kernel_%28statistics%29">https://en.wikipedia.org/wiki/Kernel_%28statistics%29</ulink> for details on the tricube kernel. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/kernels/kernels.cpp" line="429" column="7" bodyfile="HighMap/src/kernels/kernels.cpp" bodystart="429" bodyend="445" declfile="HighMap/include/highmap/kernels.hpp" declline="404" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a527cfdcf7f7e2ca0e270875526c9b1ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::abs</definition>
        <argsstring>(const Array &amp;array)</argsstring>
        <name>abs</name>
        <qualifiedname>hmap::abs</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Return the absolute value of the array elements. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Output array. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="13" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="13" bodyend="21" declfile="HighMap/include/highmap/math.hpp" declline="68" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aa99a114cc6073cf7368c927afd9b4f87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::abs_smooth</definition>
        <argsstring>(const Array &amp;array, float mu, const Array &amp;vshift)</argsstring>
        <name>abs_smooth</name>
        <qualifiedname>hmap::abs_smooth</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>mu</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>vshift</declname>
        </param>
        <briefdescription>
<para>Return the smooth absolute value of the array elements. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>Smoothing coefficient. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vshift</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference value for the &quot;zero&quot; value of the absolute value (default is zero). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Output array.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_abs_smooth.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z,<sp/>-1.f,<sp/>1.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0.1f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1aa99a114cc6073cf7368c927afd9b4f87" kindref="member">hmap::abs_smooth</ref>(z,<sp/>k);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/><ref refid="namespacehmap_1aa99a114cc6073cf7368c927afd9b4f87" kindref="member">hmap::abs_smooth</ref>(z,<sp/>k,<sp/>0.5f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vshift<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>++seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z3<sp/>=<sp/><ref refid="namespacehmap_1aa99a114cc6073cf7368c927afd9b4f87" kindref="member">hmap::abs_smooth</ref>(z,<sp/>k,<sp/>vshift);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_abs_smooth.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z1,<sp/>z2,<sp/>z3},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_abs_smooth.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="49" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="49" bodyend="63" declfile="HighMap/include/highmap/math.hpp" declline="85" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ac165dd1b73f61f632f03e45c2f831fc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::abs_smooth</definition>
        <argsstring>(const Array &amp;array, float mu, float vshift)</argsstring>
        <name>abs_smooth</name>
        <qualifiedname>hmap::abs_smooth</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>mu</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vshift</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="34" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="34" bodyend="47" declfile="HighMap/include/highmap/math.hpp" declline="86" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1addd566daeeba4b807513b59951de0003" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::abs_smooth</definition>
        <argsstring>(const Array &amp;array, float mu)</argsstring>
        <name>abs_smooth</name>
        <qualifiedname>hmap::abs_smooth</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>mu</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="23" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="23" bodyend="32" declfile="HighMap/include/highmap/math.hpp" declline="87" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ab7bb73f6a918ffc68129e3a861080efd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::abs_smooth</definition>
        <argsstring>(float a, float mu)</argsstring>
        <name>abs_smooth</name>
        <qualifiedname>hmap::abs_smooth</qualifiedname>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>mu</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="65" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="65" bodyend="69" declfile="HighMap/include/highmap/math.hpp" declline="88" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a2e282a2ea8008f2eccd99e47863adb6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::almost_unit_identity</definition>
        <argsstring>(const Array &amp;array)</argsstring>
        <name>almost_unit_identity</name>
        <qualifiedname>hmap::almost_unit_identity</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Return the almost unit identity function. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classhmap_1_1Function" kindref="compound">Function</ref> that maps the unit interval to itself with zero derivative at 0 and &quot;one&quot; derivative at 1 (see <ulink url="https://iquilezles.org/articles/functions/">Inigo Quilez&apos;s articles</ulink>).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Output array. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="71" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="71" bodyend="74" declfile="HighMap/include/highmap/math.hpp" declline="100" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a8ddf0121ee2b8c701a61a12274b5f3e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::almost_unit_identity</definition>
        <argsstring>(float x)</argsstring>
        <name>almost_unit_identity</name>
        <qualifiedname>hmap::almost_unit_identity</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="76" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="76" bodyend="79" declfile="HighMap/include/highmap/math.hpp" declline="101" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ab0aafd1928d46167f782de3c00b937ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::almost_unit_identity_c2</definition>
        <argsstring>(float x)</argsstring>
        <name>almost_unit_identity_c2</name>
        <qualifiedname>hmap::almost_unit_identity_c2</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return the almost unit identity function (with a second-order derivative equals 0 at x = 1 also to avoid discontinuities in some cases) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Input. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float Output. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="81" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="81" bodyend="86" declfile="HighMap/include/highmap/math.hpp" declline="110" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a85cee5ad021421a670fb62211b5913e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::approx_hypot</definition>
        <argsstring>(float a, float b)</argsstring>
        <name>approx_hypot</name>
        <qualifiedname>hmap::approx_hypot</qualifiedname>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Return the approximate hypothenuse of two numbers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>a </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>a </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float ~sqrt(a**2 + b**2) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/math.hpp" line="119" column="14" bodyfile="HighMap/include/highmap/math.hpp" bodystart="119" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a7c2762e4ccc798e8c90d128c2c2858fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::approx_rsqrt</definition>
        <argsstring>(float a)</argsstring>
        <name>approx_rsqrt</name>
        <qualifiedname>hmap::approx_rsqrt</qualifiedname>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Return the approximate inverse square root of a number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>a </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float ~1/sqrt(a) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/include/highmap/math.hpp" line="133" column="14" bodyfile="HighMap/include/highmap/math.hpp" bodystart="133" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1abfd3f58454c7064010dc2dd58d1a03aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::atan</definition>
        <argsstring>(const Array &amp;array)</argsstring>
        <name>atan</name>
        <qualifiedname>hmap::atan</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Return the arctan of the array elements. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Reference to the current object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="88" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="88" bodyend="96" declfile="HighMap/include/highmap/math.hpp" declline="151" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a14833c6f5d5f2546447ead949b571c2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::atan2</definition>
        <argsstring>(const Array &amp;y, const Array &amp;x)</argsstring>
        <name>atan2</name>
        <qualifiedname>hmap::atan2</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Computes the element-wise arctangent of two arrays, considering the signs of both inputs. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the arctangent of the ratio <computeroutput>y/x</computeroutput> for each corresponding element in the input arrays, while taking into account the quadrant of the angle. The output values are in radians and range from <computeroutput>-π</computeroutput> to <computeroutput>π</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>A 2D array representing the numerator values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>A 2D array representing the denominator values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A 2D array where each element is the result of <computeroutput>atan2(y(i, j), x(i,
          j))</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="98" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="98" bodyend="108" declfile="HighMap/include/highmap/math.hpp" declline="167" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a4a3589145183ecdcc6392e28cd1ebef8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::cos</definition>
        <argsstring>(const Array &amp;array)</argsstring>
        <name>cos</name>
        <qualifiedname>hmap::cos</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Return the cosine of the array elements. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Reference to the current object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="110" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="110" bodyend="118" declfile="HighMap/include/highmap/math.hpp" declline="175" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aad00066161ccf5ba4d6f93ab48c10876" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::exp</definition>
        <argsstring>(const Array &amp;array)</argsstring>
        <name>exp</name>
        <qualifiedname>hmap::exp</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Return the exponantial of the array elements. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Reference to the current object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="120" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="120" bodyend="128" declfile="HighMap/include/highmap/math.hpp" declline="183" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a0db2ecdc6ca69af1e6eb3402b1147cb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::gain</definition>
        <argsstring>(float x, float factor)</argsstring>
        <name>gain</name>
        <qualifiedname>hmap::gain</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="130" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="130" bodyend="134" declfile="HighMap/include/highmap/math.hpp" declline="185" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a99778512aa5779e70039e6b04e62d40c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gaussian_decay</definition>
        <argsstring>(const Array &amp;array, float sigma)</argsstring>
        <name>gaussian_decay</name>
        <qualifiedname>hmap::gaussian_decay</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>sigma</declname>
        </param>
        <briefdescription>
<para>Return the Gaussian of the array elements. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigma</parametername>
</parameternamelist>
<parameterdescription>
<para>Gaussian half-width. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Reference to the current object.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_gaussian_decay.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z,<sp/>-1.f,<sp/>1.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigma<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zg<sp/>=<sp/><ref refid="namespacehmap_1a99778512aa5779e70039e6b04e62d40c" kindref="member">hmap::gaussian_decay</ref>(z,<sp/>sigma);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_gaussian_decay.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zg},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_gaussian_decay.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="136" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="136" bodyend="145" declfile="HighMap/include/highmap/math.hpp" declline="200" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a325c785e4776325f3061d9f5bd89fccf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; float(float, float)&gt;</type>
        <definition>std::function&lt; float(float, float)&gt; hmap::get_distance_function</definition>
        <argsstring>(DistanceFunction dist_fct)</argsstring>
        <name>get_distance_function</name>
        <qualifiedname>hmap::get_distance_function</qualifiedname>
        <param>
          <type><ref refid="namespacehmap_1a670f50d6c08ecd639d42db9c75a5273a" kindref="member">DistanceFunction</ref></type>
          <declname>dist_fct</declname>
        </param>
        <briefdescription>
<para>Return the requested distance function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dist_fct</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance function type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Distance function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/distance_function.cpp" line="12" column="15" bodyfile="HighMap/src/math/distance_function.cpp" bodystart="12" bodyend="62" declfile="HighMap/include/highmap/math.hpp" declline="207" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a6bea64db2dac2b906983472f7f6781a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; float(float)&gt;</type>
        <definition>std::function&lt; float(float)&gt; hmap::get_phasor_profile_function</definition>
        <argsstring>(const PhasorProfile &amp;phasor_profile, float delta, float *p_profile_avg=nullptr)</argsstring>
        <name>get_phasor_profile_function</name>
        <qualifiedname>hmap::get_phasor_profile_function</qualifiedname>
        <param>
          <type>const <ref refid="namespacehmap_1a67d6620c147710ebb09b64f0f738241a" kindref="member">PhasorProfile</ref> &amp;</type>
          <declname>phasor_profile</declname>
        </param>
        <param>
          <type>float</type>
          <declname>delta</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>p_profile_avg</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Generates a function representing a phasor profile based on the specified type and parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns a callable object (<computeroutput>std::function</computeroutput>) that computes the value of the specified phasor profile for a given phase angle (phi). Optionally, it can compute the average value of the profile over the range [-π, π].</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>phasor_profile</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of phasor profile to generate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para>A parameter that can influence the profile (depending on the profile choice). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_profile_avg</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to a float. If not <computeroutput>nullptr</computeroutput>, it will store the average value of the profile over the range [-π, π]. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput>std::function&lt;float(float)&gt;</computeroutput> that computes the phasor profile for a given phase angle.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argumentIftheprovided`phasor_profile`isinvalid.</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The average value is computed using numerical integration over 50 sample points within [-π, π]. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/phasor_profile_function.cpp" line="14" column="15" bodyfile="HighMap/src/math/phasor_profile_function.cpp" bodystart="14" bodyend="89" declfile="HighMap/include/highmap/math.hpp" declline="233" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a9ae209ce5746e99078078259955c7421" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hmap::highest_power_of_2</definition>
        <argsstring>(int n)</argsstring>
        <name>highest_power_of_2</name>
        <qualifiedname>hmap::highest_power_of_2</qualifiedname>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Computes the highest power of 2 less than or equal to the given number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The input integer for which the highest power of 2 is to be determined. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The highest power of 2 less than or equal to <computeroutput>n</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/multiscale/pyramid_decomposition.cpp" line="193" column="5" bodyfile="HighMap/src/multiscale/pyramid_decomposition.cpp" bodystart="193" bodyend="197" declfile="HighMap/include/highmap/math.hpp" declline="246" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ad78d0f991f4f0eee67929b00469aea39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::lerp</definition>
        <argsstring>(const Array &amp;array1, const Array &amp;array2, const Array &amp;t)</argsstring>
        <name>lerp</name>
        <qualifiedname>hmap::lerp</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array2</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Return the linear interpolation between two arrays by a parameter t. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array1</parametername>
</parameternamelist>
<parameterdescription>
<para>First array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolation parameter (in [0, 1]). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Interpolated array. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="158" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="158" bodyend="162" declfile="HighMap/include/highmap/math.hpp" declline="268" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a6d85b2b635d15a4361344451619253f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::lerp</definition>
        <argsstring>(const Array &amp;array1, const Array &amp;array2, float t)</argsstring>
        <name>lerp</name>
        <qualifiedname>hmap::lerp</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="164" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="164" bodyend="168" declfile="HighMap/include/highmap/math.hpp" declline="269" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a1d5e665c9e945b8ad9a6b5f0c1b673ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::lerp</definition>
        <argsstring>(float a, float b, float t)</argsstring>
        <name>lerp</name>
        <qualifiedname>hmap::lerp</qualifiedname>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="170" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="170" bodyend="173" declfile="HighMap/include/highmap/math.hpp" declline="270" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a75475b6109023ce0ad64f6f9f7c4c525" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::log10</definition>
        <argsstring>(const Array &amp;array)</argsstring>
        <name>log10</name>
        <qualifiedname>hmap::log10</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Return the log10 of the array elements. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Reference to the current object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="175" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="175" bodyend="183" declfile="HighMap/include/highmap/math.hpp" declline="278" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a105e497c433e14b4235534ae6d2b87b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::pow</definition>
        <argsstring>(const Array &amp;array, float exp)</argsstring>
        <name>pow</name>
        <qualifiedname>hmap::pow</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>exp</declname>
        </param>
        <briefdescription>
<para>Return the array elements raised to the power &apos;exp&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exp</parametername>
</parameternamelist>
<parameterdescription>
<para>Exponent. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Reference to the current object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="185" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="185" bodyend="193" declfile="HighMap/include/highmap/math.hpp" declline="286" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a94c9fa82f2922778970f85c384ed5bd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::radial_displacement_to_xy</definition>
        <argsstring>(const Array &amp;dr, Array &amp;dx, Array &amp;dy, float smoothing=1.f, Vec2&lt; float &gt; center={0.5f, 0.5f}, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>radial_displacement_to_xy</name>
        <qualifiedname>hmap::radial_displacement_to_xy</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>dr</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>float</type>
          <declname>smoothing</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>center</declname>
          <defval>{0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Interpret the input array <computeroutput>dr</computeroutput> as a radial displacement and convert it to a pair of displacements <computeroutput>dx</computeroutput> and <computeroutput>dy</computeroutput> in cartesian coordinates. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dr</parametername>
</parameternamelist>
<parameterdescription>
<para>Radial displacement. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para>Displacent in x direction (output). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dy</parametername>
</parameternamelist>
<parameterdescription>
<para>Displacent in y direction (output). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>smoothing</parametername>
</parameternamelist>
<parameterdescription>
<para>Smoothing parameter to avoid discontinuity at the origin. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>Origin center. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_radial_displacement_to_xy.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>dr<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>dx,<sp/>dy;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a94c9fa82f2922778970f85c384ed5bd9" kindref="member">hmap::radial_displacement_to_xy</ref>(dr,<sp/>dx,<sp/>dy);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_radial_displacement_to_xy.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{dr,<sp/>dx,<sp/>dy},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_radial_displacement_to_xy.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="195" column="6" bodyfile="HighMap/src/math/math.cpp" bodystart="195" bodyend="220" declfile="HighMap/include/highmap/math.hpp" declline="304" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a03359e722d96524598aa525022317c95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::sin</definition>
        <argsstring>(const Array &amp;array)</argsstring>
        <name>sin</name>
        <qualifiedname>hmap::sin</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Return the sine of the array elements. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Reference to the current object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="222" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="222" bodyend="230" declfile="HighMap/include/highmap/math.hpp" declline="317" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a413648e2595721d8ba4096357dbb1f84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::smoothstep3</definition>
        <argsstring>(const Array &amp;array, float vmin=0.f, float vmax=1.f)</argsstring>
        <name>smoothstep3</name>
        <qualifiedname>hmap::smoothstep3</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vmin</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>vmax</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Return the 3rd order smoothstep function of the array elements. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmin</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower bound. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmax</parametername>
</parameternamelist>
<parameterdescription>
<para>Upper bound. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Output array.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_smoothstep.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vmin<sp/>=<sp/>0.25f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vmax<sp/>=<sp/>0.75f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z3<sp/>=<sp/><ref refid="namespacehmap_1a413648e2595721d8ba4096357dbb1f84" kindref="member">hmap::smoothstep3</ref>(z,<sp/>vmin,<sp/>vmax);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z5<sp/>=<sp/><ref refid="namespacehmap_1aa4468d1e57ee67ba0be8fb1ab931045a" kindref="member">hmap::smoothstep5</ref>(z,<sp/>vmin,<sp/>vmax);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_smoothstep.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z3,<sp/>z5},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_smoothstep.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="232" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="232" bodyend="252" declfile="HighMap/include/highmap/math.hpp" declline="333" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1afe0b1df8525d0478c7433777cadd60a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::smoothstep3</definition>
        <argsstring>(float x)</argsstring>
        <name>smoothstep3</name>
        <qualifiedname>hmap::smoothstep3</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return the 3rd order smoothstep function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Input. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float Output. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="254" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="254" bodyend="257" declfile="HighMap/include/highmap/math.hpp" declline="341" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a4c21ef9d4f7d33f2413c7fe391b86253" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::smoothstep3_lower</definition>
        <argsstring>(float x)</argsstring>
        <name>smoothstep3_lower</name>
        <qualifiedname>hmap::smoothstep3_lower</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return the 3rd order smoothstep function, with zero derivative only at 0. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Input. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float Output. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="259" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="259" bodyend="262" declfile="HighMap/include/highmap/math.hpp" declline="350" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a65666d55312d1afca0246939f292ca63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::smoothstep3_lower</definition>
        <argsstring>(const Array &amp;x)</argsstring>
        <name>smoothstep3_lower</name>
        <qualifiedname>hmap::smoothstep3_lower</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="264" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="264" bodyend="272" declfile="HighMap/include/highmap/math.hpp" declline="351" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1af23a6099bd3307b408f17d2346ab3d3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::smoothstep3_upper</definition>
        <argsstring>(float x)</argsstring>
        <name>smoothstep3_upper</name>
        <qualifiedname>hmap::smoothstep3_upper</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return the 3rd order smoothstep function, with zero derivative only at 1. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Input. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float Output. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="274" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="274" bodyend="277" declfile="HighMap/include/highmap/math.hpp" declline="360" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ac9b2a7930233d045f876d285c67623fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::smoothstep3_upper</definition>
        <argsstring>(const Array &amp;x)</argsstring>
        <name>smoothstep3_upper</name>
        <qualifiedname>hmap::smoothstep3_upper</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="279" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="279" bodyend="287" declfile="HighMap/include/highmap/math.hpp" declline="361" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aa4468d1e57ee67ba0be8fb1ab931045a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::smoothstep5</definition>
        <argsstring>(const Array &amp;array, float vmin=0.f, float vmax=1.f)</argsstring>
        <name>smoothstep5</name>
        <qualifiedname>hmap::smoothstep5</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vmin</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>vmax</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Return the 5rd order smoothstep function of the array elements. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmin</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower bound. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmax</parametername>
</parameternamelist>
<parameterdescription>
<para>Upper bound. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Output array.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_smoothstep.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vmin<sp/>=<sp/>0.25f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vmax<sp/>=<sp/>0.75f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z3<sp/>=<sp/><ref refid="namespacehmap_1a413648e2595721d8ba4096357dbb1f84" kindref="member">hmap::smoothstep3</ref>(z,<sp/>vmin,<sp/>vmax);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z5<sp/>=<sp/><ref refid="namespacehmap_1aa4468d1e57ee67ba0be8fb1ab931045a" kindref="member">hmap::smoothstep5</ref>(z,<sp/>vmin,<sp/>vmax);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_smoothstep.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>z3,<sp/>z5},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_smoothstep.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="289" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="289" bodyend="309" declfile="HighMap/include/highmap/math.hpp" declline="377" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aa5cc0ca00f731884d7a1dad714a254c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::smoothstep5</definition>
        <argsstring>(const Array &amp;array, const Array &amp;vmin, const Array &amp;vmax)</argsstring>
        <name>smoothstep5</name>
        <qualifiedname>hmap::smoothstep5</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>vmin</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>vmax</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="311" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="311" bodyend="331" declfile="HighMap/include/highmap/math.hpp" declline="378" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a826591db096cb2ca4d836d4c5eeaac02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::smoothstep5</definition>
        <argsstring>(float x)</argsstring>
        <name>smoothstep5</name>
        <qualifiedname>hmap::smoothstep5</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return the 5rd order smoothstep function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Input. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float Output. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="333" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="333" bodyend="336" declfile="HighMap/include/highmap/math.hpp" declline="388" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ac3a402abb2905ac02f1756c0b36e971c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::smoothstep5_lower</definition>
        <argsstring>(float x)</argsstring>
        <name>smoothstep5_lower</name>
        <qualifiedname>hmap::smoothstep5_lower</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return the 5rd order smoothstep function, with zero derivative only at 0. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Input. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float Output. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="338" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="338" bodyend="341" declfile="HighMap/include/highmap/math.hpp" declline="397" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aee749107ce9c4589686d15a62196b8ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::smoothstep5_lower</definition>
        <argsstring>(const Array &amp;x)</argsstring>
        <name>smoothstep5_lower</name>
        <qualifiedname>hmap::smoothstep5_lower</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="343" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="343" bodyend="351" declfile="HighMap/include/highmap/math.hpp" declline="398" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aae372587e98d5acb969a89a5f0661019" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::smoothstep5_upper</definition>
        <argsstring>(float x)</argsstring>
        <name>smoothstep5_upper</name>
        <qualifiedname>hmap::smoothstep5_upper</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return the 5rd order smoothstep function, with zero derivative only at 1. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Input. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float Output. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="353" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="353" bodyend="356" declfile="HighMap/include/highmap/math.hpp" declline="407" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a8ca69cf3fef2d995719ff4284f6c50b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::smoothstep5_upper</definition>
        <argsstring>(const Array &amp;x)</argsstring>
        <name>smoothstep5_upper</name>
        <qualifiedname>hmap::smoothstep5_upper</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="358" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="358" bodyend="366" declfile="HighMap/include/highmap/math.hpp" declline="408" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ae7d9d43c2cd453af7a6395cbcb2ac3b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::smoothstep7</definition>
        <argsstring>(float x)</argsstring>
        <name>smoothstep7</name>
        <qualifiedname>hmap::smoothstep7</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return the 7th order smoothstep function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Input. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float Output. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="368" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="368" bodyend="377" declfile="HighMap/include/highmap/math.hpp" declline="416" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1af37d772a8b2ab47144d459fd35aaf7dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::smoothstep7</definition>
        <argsstring>(const Array &amp;x)</argsstring>
        <name>smoothstep7</name>
        <qualifiedname>hmap::smoothstep7</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="379" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="379" bodyend="387" declfile="HighMap/include/highmap/math.hpp" declline="417" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a6b608e2826c1f9ba54a0e8922d5faa6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::sqrt</definition>
        <argsstring>(const Array &amp;array)</argsstring>
        <name>sqrt</name>
        <qualifiedname>hmap::sqrt</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Return the square root of the array elements. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Reference to the current object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="389" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="389" bodyend="397" declfile="HighMap/include/highmap/math.hpp" declline="425" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a30e6961ce99edeb86af6f4ce61651bd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::sqrt_safe</definition>
        <argsstring>(const Array &amp;array)</argsstring>
        <name>sqrt_safe</name>
        <qualifiedname>hmap::sqrt_safe</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="399" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="399" bodyend="407" declfile="HighMap/include/highmap/math.hpp" declline="427" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1af80bcff234bf1482cf26896b9d21d270" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::border</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>border</name>
        <qualifiedname>hmap::border</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>Apply a border algorithm to the input array using a square structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to which the border algorithm is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Radius of the square kernel used for the border algorithm. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Output array with the border applied.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_morphology_base.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a2badbebec49b12d0d721970a18eb420d" kindref="member">hmap::clamp_min</ref>(z,<sp/>0.f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>radius<sp/>=<sp/>1<sp/>==&gt;<sp/>3x3<sp/>square<sp/>kernel</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ir<sp/>=<sp/>3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zd<sp/>=<sp/><ref refid="namespacehmap_1ac91a2dacd050d8588b4135f02dd8f2a5" kindref="member">hmap::dilation</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ze<sp/>=<sp/><ref refid="namespacehmap_1a9cf7773f6141162bf60708a93acdfcee" kindref="member">hmap::erosion</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zc<sp/>=<sp/><ref refid="namespacehmap_1a889405ce11be91e33cc80ca4dbd192b0" kindref="member">hmap::closing</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zo<sp/>=<sp/><ref refid="namespacehmap_1abd3024b8233a70596ff2924607221637" kindref="member">hmap::opening</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zg<sp/>=<sp/><ref refid="namespacehmap_1a01f3be1fd053428ea67030e3736d15ca" kindref="member">hmap::morphological_gradient</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zt<sp/>=<sp/><ref refid="namespacehmap_1a211108a73f7ebadb6ac87621c4e47301" kindref="member">hmap::morphological_top_hat</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zb<sp/>=<sp/><ref refid="namespacehmap_1a1cf22c68188d0e35aa74983f3a01c488" kindref="member">hmap::morphological_black_hat</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a4799d3f029d45240a5b40b4853583a58" kindref="member">hmap::make_binary</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zr<sp/>=<sp/><ref refid="namespacehmap_1af80bcff234bf1482cf26896b9d21d270" kindref="member">hmap::border</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_morphology_base.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zd,<sp/>ze,<sp/>zc,<sp/>zo,<sp/>zg,<sp/>zt,<sp/>zb,<sp/>zr},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_morphology_base.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/morphology/morphology.cpp" line="14" column="7" bodyfile="HighMap/src/morphology/morphology.cpp" bodystart="14" bodyend="17" declfile="HighMap/include/highmap/morphology.hpp" declline="48" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a889405ce11be91e33cc80ca4dbd192b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::closing</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>closing</name>
        <qualifiedname>hmap::closing</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>Apply a closing algorithm to the input array using a square structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to which the closing algorithm is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Radius of the square kernel used for the closing algorithm. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Output array with the closing applied.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_morphology_base.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a2badbebec49b12d0d721970a18eb420d" kindref="member">hmap::clamp_min</ref>(z,<sp/>0.f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>radius<sp/>=<sp/>1<sp/>==&gt;<sp/>3x3<sp/>square<sp/>kernel</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ir<sp/>=<sp/>3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zd<sp/>=<sp/><ref refid="namespacehmap_1ac91a2dacd050d8588b4135f02dd8f2a5" kindref="member">hmap::dilation</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ze<sp/>=<sp/><ref refid="namespacehmap_1a9cf7773f6141162bf60708a93acdfcee" kindref="member">hmap::erosion</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zc<sp/>=<sp/><ref refid="namespacehmap_1a889405ce11be91e33cc80ca4dbd192b0" kindref="member">hmap::closing</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zo<sp/>=<sp/><ref refid="namespacehmap_1abd3024b8233a70596ff2924607221637" kindref="member">hmap::opening</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zg<sp/>=<sp/><ref refid="namespacehmap_1a01f3be1fd053428ea67030e3736d15ca" kindref="member">hmap::morphological_gradient</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zt<sp/>=<sp/><ref refid="namespacehmap_1a211108a73f7ebadb6ac87621c4e47301" kindref="member">hmap::morphological_top_hat</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zb<sp/>=<sp/><ref refid="namespacehmap_1a1cf22c68188d0e35aa74983f3a01c488" kindref="member">hmap::morphological_black_hat</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a4799d3f029d45240a5b40b4853583a58" kindref="member">hmap::make_binary</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zr<sp/>=<sp/><ref refid="namespacehmap_1af80bcff234bf1482cf26896b9d21d270" kindref="member">hmap::border</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_morphology_base.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zd,<sp/>ze,<sp/>zc,<sp/>zo,<sp/>zg,<sp/>zt,<sp/>zb,<sp/>zr},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_morphology_base.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/morphology/morphology.cpp" line="19" column="7" bodyfile="HighMap/src/morphology/morphology.cpp" bodystart="19" bodyend="22" declfile="HighMap/include/highmap/morphology.hpp" declline="63" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ac91a2dacd050d8588b4135f02dd8f2a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::dilation</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>dilation</name>
        <qualifiedname>hmap::dilation</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>Apply a dilation algorithm to the input array using a square structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to which the dilation algorithm is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Radius of the square kernel used for the dilation algorithm. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Output array with the dilation applied.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_morphology_base.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a2badbebec49b12d0d721970a18eb420d" kindref="member">hmap::clamp_min</ref>(z,<sp/>0.f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>radius<sp/>=<sp/>1<sp/>==&gt;<sp/>3x3<sp/>square<sp/>kernel</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ir<sp/>=<sp/>3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zd<sp/>=<sp/><ref refid="namespacehmap_1ac91a2dacd050d8588b4135f02dd8f2a5" kindref="member">hmap::dilation</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ze<sp/>=<sp/><ref refid="namespacehmap_1a9cf7773f6141162bf60708a93acdfcee" kindref="member">hmap::erosion</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zc<sp/>=<sp/><ref refid="namespacehmap_1a889405ce11be91e33cc80ca4dbd192b0" kindref="member">hmap::closing</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zo<sp/>=<sp/><ref refid="namespacehmap_1abd3024b8233a70596ff2924607221637" kindref="member">hmap::opening</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zg<sp/>=<sp/><ref refid="namespacehmap_1a01f3be1fd053428ea67030e3736d15ca" kindref="member">hmap::morphological_gradient</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zt<sp/>=<sp/><ref refid="namespacehmap_1a211108a73f7ebadb6ac87621c4e47301" kindref="member">hmap::morphological_top_hat</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zb<sp/>=<sp/><ref refid="namespacehmap_1a1cf22c68188d0e35aa74983f3a01c488" kindref="member">hmap::morphological_black_hat</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a4799d3f029d45240a5b40b4853583a58" kindref="member">hmap::make_binary</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zr<sp/>=<sp/><ref refid="namespacehmap_1af80bcff234bf1482cf26896b9d21d270" kindref="member">hmap::border</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_morphology_base.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zd,<sp/>ze,<sp/>zc,<sp/>zo,<sp/>zg,<sp/>zt,<sp/>zb,<sp/>zr},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_morphology_base.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/morphology/morphology.cpp" line="24" column="7" bodyfile="HighMap/src/morphology/morphology.cpp" bodystart="24" bodyend="27" declfile="HighMap/include/highmap/morphology.hpp" declline="79" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a3bad25b24d9ae0e07e692c546bc3480d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::distance_transform</definition>
        <argsstring>(const Array &amp;array, bool return_squared_distance=false)</argsstring>
        <name>distance_transform</name>
        <qualifiedname>hmap::distance_transform</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>return_squared_distance</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Return the Euclidean distance transform. </para>
        </briefdescription>
        <detaileddescription>
<para>Exact transform based on Meijster et al. algorithm Meijster2000.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be transformed, will be converted into binary: 1 wherever input is greater than 0, 0 elsewhere. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>return_squared_distance</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the distance returned is squared or not. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Reference to the output array.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_distance_transform.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="timer_8hpp" kindref="compound">highmap/dbg/timer.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>shape<sp/>=<sp/>{2048,<sp/>2048};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a2badbebec49b12d0d721970a18eb420d" kindref="member">hmap::clamp_min</ref>(z,<sp/>0.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Timer_1ae9248cf01bfd4d8f680a6c7d5b80f45b" kindref="member">hmap::Timer::Start</ref>(</highlight><highlight class="stringliteral">&quot;exact&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d0<sp/>=<sp/><ref refid="namespacehmap_1a3bad25b24d9ae0e07e692c546bc3480d" kindref="member">hmap::distance_transform</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Timer_1a6054c197a10338a1bd48299be29593b5" kindref="member">hmap::Timer::Stop</ref>(</highlight><highlight class="stringliteral">&quot;exact&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Timer_1ae9248cf01bfd4d8f680a6c7d5b80f45b" kindref="member">hmap::Timer::Start</ref>(</highlight><highlight class="stringliteral">&quot;approx.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d1<sp/>=<sp/><ref refid="namespacehmap_1a23fdcd258e0bab2a5fcad31d6459c3fa" kindref="member">hmap::distance_transform_approx</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Timer_1a6054c197a10338a1bd48299be29593b5" kindref="member">hmap::Timer::Stop</ref>(</highlight><highlight class="stringliteral">&quot;approx.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Timer_1ae9248cf01bfd4d8f680a6c7d5b80f45b" kindref="member">hmap::Timer::Start</ref>(</highlight><highlight class="stringliteral">&quot;manhattan&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d2<sp/>=<sp/><ref refid="namespacehmap_1add641a7fc26ae08b1f679cbb7dd43177" kindref="member">hmap::distance_transform_manhattan</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Timer_1a6054c197a10338a1bd48299be29593b5" kindref="member">hmap::Timer::Stop</ref>(</highlight><highlight class="stringliteral">&quot;manhattan&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_distance_transform0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>d0.to_png(</highlight><highlight class="stringliteral">&quot;ex_distance_transform1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>d1.to_png(</highlight><highlight class="stringliteral">&quot;ex_distance_transform2.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>d2.to_png(</highlight><highlight class="stringliteral">&quot;ex_distance_transform3.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_distance_transform0.png"></image>
 <image type="html" name="ex_distance_transform1.png"></image>
 <image type="html" name="ex_distance_transform2.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/morphology/distance_transform.cpp" line="23" column="7" bodyfile="HighMap/src/morphology/distance_transform.cpp" bodystart="23" bodyend="100" declfile="HighMap/include/highmap/morphology.hpp" declline="101" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a23fdcd258e0bab2a5fcad31d6459c3fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::distance_transform_approx</definition>
        <argsstring>(const Array &amp;array, bool return_squared_distance=false)</argsstring>
        <name>distance_transform_approx</name>
        <qualifiedname>hmap::distance_transform_approx</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>return_squared_distance</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Calculates an approximate distance transform of the input array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to calculate the distance transform for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>return_squared_distance</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter to return squared distances. Defaults to false. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> containing the approximate distance transform of the input array.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_distance_transform.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="timer_8hpp" kindref="compound">highmap/dbg/timer.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>shape<sp/>=<sp/>{2048,<sp/>2048};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a2badbebec49b12d0d721970a18eb420d" kindref="member">hmap::clamp_min</ref>(z,<sp/>0.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Timer_1ae9248cf01bfd4d8f680a6c7d5b80f45b" kindref="member">hmap::Timer::Start</ref>(</highlight><highlight class="stringliteral">&quot;exact&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d0<sp/>=<sp/><ref refid="namespacehmap_1a3bad25b24d9ae0e07e692c546bc3480d" kindref="member">hmap::distance_transform</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Timer_1a6054c197a10338a1bd48299be29593b5" kindref="member">hmap::Timer::Stop</ref>(</highlight><highlight class="stringliteral">&quot;exact&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Timer_1ae9248cf01bfd4d8f680a6c7d5b80f45b" kindref="member">hmap::Timer::Start</ref>(</highlight><highlight class="stringliteral">&quot;approx.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d1<sp/>=<sp/><ref refid="namespacehmap_1a23fdcd258e0bab2a5fcad31d6459c3fa" kindref="member">hmap::distance_transform_approx</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Timer_1a6054c197a10338a1bd48299be29593b5" kindref="member">hmap::Timer::Stop</ref>(</highlight><highlight class="stringliteral">&quot;approx.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Timer_1ae9248cf01bfd4d8f680a6c7d5b80f45b" kindref="member">hmap::Timer::Start</ref>(</highlight><highlight class="stringliteral">&quot;manhattan&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d2<sp/>=<sp/><ref refid="namespacehmap_1add641a7fc26ae08b1f679cbb7dd43177" kindref="member">hmap::distance_transform_manhattan</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Timer_1a6054c197a10338a1bd48299be29593b5" kindref="member">hmap::Timer::Stop</ref>(</highlight><highlight class="stringliteral">&quot;manhattan&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_distance_transform0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>d0.to_png(</highlight><highlight class="stringliteral">&quot;ex_distance_transform1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>d1.to_png(</highlight><highlight class="stringliteral">&quot;ex_distance_transform2.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>d2.to_png(</highlight><highlight class="stringliteral">&quot;ex_distance_transform3.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_distance_transform0.png"></image>
 <image type="html" name="ex_distance_transform1.png"></image>
 <image type="html" name="ex_distance_transform2.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/morphology/distance_transform_approx.cpp" line="12" column="7" bodyfile="HighMap/src/morphology/distance_transform_approx.cpp" bodystart="12" bodyend="52" declfile="HighMap/include/highmap/morphology.hpp" declline="122" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1add641a7fc26ae08b1f679cbb7dd43177" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::distance_transform_manhattan</definition>
        <argsstring>(const Array &amp;array, bool return_squared_distance=false)</argsstring>
        <name>distance_transform_manhattan</name>
        <qualifiedname>hmap::distance_transform_manhattan</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>return_squared_distance</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Calculates the Manhattan distance transform of an array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>return_squared_distance</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, returns the squared Manhattan distance instead of the actual distance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> containing the Manhattan distance transform of the input array.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_distance_transform.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="timer_8hpp" kindref="compound">highmap/dbg/timer.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>shape<sp/>=<sp/>{2048,<sp/>2048};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a2badbebec49b12d0d721970a18eb420d" kindref="member">hmap::clamp_min</ref>(z,<sp/>0.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Timer_1ae9248cf01bfd4d8f680a6c7d5b80f45b" kindref="member">hmap::Timer::Start</ref>(</highlight><highlight class="stringliteral">&quot;exact&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d0<sp/>=<sp/><ref refid="namespacehmap_1a3bad25b24d9ae0e07e692c546bc3480d" kindref="member">hmap::distance_transform</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Timer_1a6054c197a10338a1bd48299be29593b5" kindref="member">hmap::Timer::Stop</ref>(</highlight><highlight class="stringliteral">&quot;exact&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Timer_1ae9248cf01bfd4d8f680a6c7d5b80f45b" kindref="member">hmap::Timer::Start</ref>(</highlight><highlight class="stringliteral">&quot;approx.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d1<sp/>=<sp/><ref refid="namespacehmap_1a23fdcd258e0bab2a5fcad31d6459c3fa" kindref="member">hmap::distance_transform_approx</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Timer_1a6054c197a10338a1bd48299be29593b5" kindref="member">hmap::Timer::Stop</ref>(</highlight><highlight class="stringliteral">&quot;approx.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Timer_1ae9248cf01bfd4d8f680a6c7d5b80f45b" kindref="member">hmap::Timer::Start</ref>(</highlight><highlight class="stringliteral">&quot;manhattan&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d2<sp/>=<sp/><ref refid="namespacehmap_1add641a7fc26ae08b1f679cbb7dd43177" kindref="member">hmap::distance_transform_manhattan</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Timer_1a6054c197a10338a1bd48299be29593b5" kindref="member">hmap::Timer::Stop</ref>(</highlight><highlight class="stringliteral">&quot;manhattan&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_distance_transform0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>d0.to_png(</highlight><highlight class="stringliteral">&quot;ex_distance_transform1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>d1.to_png(</highlight><highlight class="stringliteral">&quot;ex_distance_transform2.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>d2.to_png(</highlight><highlight class="stringliteral">&quot;ex_distance_transform3.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_distance_transform0.png"></image>
 <image type="html" name="ex_distance_transform1.png"></image>
 <image type="html" name="ex_distance_transform2.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/morphology/distance_transform_approx.cpp" line="54" column="7" bodyfile="HighMap/src/morphology/distance_transform_approx.cpp" bodystart="54" bodyend="90" declfile="HighMap/include/highmap/morphology.hpp" declline="142" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a9cf7773f6141162bf60708a93acdfcee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::erosion</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>erosion</name>
        <qualifiedname>hmap::erosion</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>Apply an erosion algorithm to the input array using a square structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to which the erosion algorithm is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Radius of the square kernel used for the erosion algorithm. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Output array with the erosion applied.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_morphology_base.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a2badbebec49b12d0d721970a18eb420d" kindref="member">hmap::clamp_min</ref>(z,<sp/>0.f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>radius<sp/>=<sp/>1<sp/>==&gt;<sp/>3x3<sp/>square<sp/>kernel</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ir<sp/>=<sp/>3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zd<sp/>=<sp/><ref refid="namespacehmap_1ac91a2dacd050d8588b4135f02dd8f2a5" kindref="member">hmap::dilation</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ze<sp/>=<sp/><ref refid="namespacehmap_1a9cf7773f6141162bf60708a93acdfcee" kindref="member">hmap::erosion</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zc<sp/>=<sp/><ref refid="namespacehmap_1a889405ce11be91e33cc80ca4dbd192b0" kindref="member">hmap::closing</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zo<sp/>=<sp/><ref refid="namespacehmap_1abd3024b8233a70596ff2924607221637" kindref="member">hmap::opening</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zg<sp/>=<sp/><ref refid="namespacehmap_1a01f3be1fd053428ea67030e3736d15ca" kindref="member">hmap::morphological_gradient</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zt<sp/>=<sp/><ref refid="namespacehmap_1a211108a73f7ebadb6ac87621c4e47301" kindref="member">hmap::morphological_top_hat</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zb<sp/>=<sp/><ref refid="namespacehmap_1a1cf22c68188d0e35aa74983f3a01c488" kindref="member">hmap::morphological_black_hat</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a4799d3f029d45240a5b40b4853583a58" kindref="member">hmap::make_binary</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zr<sp/>=<sp/><ref refid="namespacehmap_1af80bcff234bf1482cf26896b9d21d270" kindref="member">hmap::border</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_morphology_base.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zd,<sp/>ze,<sp/>zc,<sp/>zo,<sp/>zg,<sp/>zt,<sp/>zb,<sp/>zr},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_morphology_base.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/morphology/morphology.cpp" line="29" column="7" bodyfile="HighMap/src/morphology/morphology.cpp" bodystart="29" bodyend="32" declfile="HighMap/include/highmap/morphology.hpp" declline="159" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1adff494af7c8bf4db7f3e6fddd3261793" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::flood_fill</definition>
        <argsstring>(Array &amp;array, int i, int j, float fill_value=1.f, float background_value=0.f)</argsstring>
        <name>flood_fill</name>
        <qualifiedname>hmap::flood_fill</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fill_value</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>background_value</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Apply a flood fill algorithm to the input array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be filled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Seed point row index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>Seed point column index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fill_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Filling value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>background_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Background value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_flood_fill.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a45ca8d7a507e92e78d466f0d392f8ea3" kindref="member">hmap::gaussian_pulse</ref>(shape,<sp/>32);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a849d37221d492c5d96d945dc64b02754" kindref="member">hmap::select_interval</ref>(z,<sp/>0.5f,<sp/>0.55f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1adff494af7c8bf4db7f3e6fddd3261793" kindref="member">hmap::flood_fill</ref>(z1,<sp/>128,<sp/>128);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1adff494af7c8bf4db7f3e6fddd3261793" kindref="member">hmap::flood_fill</ref>(z2,<sp/>0,<sp/>0,<sp/>0.5f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z2.infos();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_flood_fill.png&quot;</highlight><highlight class="normal">,<sp/>{z,<sp/>z1,<sp/>z2},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_flood_fill.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/morphology/morphology.cpp" line="34" column="6" bodyfile="HighMap/src/morphology/morphology.cpp" bodystart="34" bodyend="79" declfile="HighMap/include/highmap/morphology.hpp" declline="176" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a1cf22c68188d0e35aa74983f3a01c488" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::morphological_black_hat</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>morphological_black_hat</name>
        <qualifiedname>hmap::morphological_black_hat</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>Apply a morphological black hat algorithm to the input array using a square structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to which the black hat algorithm is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Radius of the square kernel used for the black hat algorithm. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Output array with the black hat applied.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_morphology_base.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a2badbebec49b12d0d721970a18eb420d" kindref="member">hmap::clamp_min</ref>(z,<sp/>0.f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>radius<sp/>=<sp/>1<sp/>==&gt;<sp/>3x3<sp/>square<sp/>kernel</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ir<sp/>=<sp/>3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zd<sp/>=<sp/><ref refid="namespacehmap_1ac91a2dacd050d8588b4135f02dd8f2a5" kindref="member">hmap::dilation</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ze<sp/>=<sp/><ref refid="namespacehmap_1a9cf7773f6141162bf60708a93acdfcee" kindref="member">hmap::erosion</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zc<sp/>=<sp/><ref refid="namespacehmap_1a889405ce11be91e33cc80ca4dbd192b0" kindref="member">hmap::closing</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zo<sp/>=<sp/><ref refid="namespacehmap_1abd3024b8233a70596ff2924607221637" kindref="member">hmap::opening</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zg<sp/>=<sp/><ref refid="namespacehmap_1a01f3be1fd053428ea67030e3736d15ca" kindref="member">hmap::morphological_gradient</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zt<sp/>=<sp/><ref refid="namespacehmap_1a211108a73f7ebadb6ac87621c4e47301" kindref="member">hmap::morphological_top_hat</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zb<sp/>=<sp/><ref refid="namespacehmap_1a1cf22c68188d0e35aa74983f3a01c488" kindref="member">hmap::morphological_black_hat</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a4799d3f029d45240a5b40b4853583a58" kindref="member">hmap::make_binary</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zr<sp/>=<sp/><ref refid="namespacehmap_1af80bcff234bf1482cf26896b9d21d270" kindref="member">hmap::border</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_morphology_base.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zd,<sp/>ze,<sp/>zc,<sp/>zo,<sp/>zg,<sp/>zt,<sp/>zb,<sp/>zr},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_morphology_base.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/morphology/morphology.cpp" line="81" column="7" bodyfile="HighMap/src/morphology/morphology.cpp" bodystart="81" bodyend="84" declfile="HighMap/include/highmap/morphology.hpp" declline="196" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a01f3be1fd053428ea67030e3736d15ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::morphological_gradient</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>morphological_gradient</name>
        <qualifiedname>hmap::morphological_gradient</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>Apply a morphological gradient algorithm to the input array using a square structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to which the gradient algorithm is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Radius of the square kernel used for the gradient algorithm. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Output array with the gradient applied.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_morphology_base.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a2badbebec49b12d0d721970a18eb420d" kindref="member">hmap::clamp_min</ref>(z,<sp/>0.f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>radius<sp/>=<sp/>1<sp/>==&gt;<sp/>3x3<sp/>square<sp/>kernel</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ir<sp/>=<sp/>3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zd<sp/>=<sp/><ref refid="namespacehmap_1ac91a2dacd050d8588b4135f02dd8f2a5" kindref="member">hmap::dilation</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ze<sp/>=<sp/><ref refid="namespacehmap_1a9cf7773f6141162bf60708a93acdfcee" kindref="member">hmap::erosion</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zc<sp/>=<sp/><ref refid="namespacehmap_1a889405ce11be91e33cc80ca4dbd192b0" kindref="member">hmap::closing</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zo<sp/>=<sp/><ref refid="namespacehmap_1abd3024b8233a70596ff2924607221637" kindref="member">hmap::opening</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zg<sp/>=<sp/><ref refid="namespacehmap_1a01f3be1fd053428ea67030e3736d15ca" kindref="member">hmap::morphological_gradient</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zt<sp/>=<sp/><ref refid="namespacehmap_1a211108a73f7ebadb6ac87621c4e47301" kindref="member">hmap::morphological_top_hat</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zb<sp/>=<sp/><ref refid="namespacehmap_1a1cf22c68188d0e35aa74983f3a01c488" kindref="member">hmap::morphological_black_hat</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a4799d3f029d45240a5b40b4853583a58" kindref="member">hmap::make_binary</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zr<sp/>=<sp/><ref refid="namespacehmap_1af80bcff234bf1482cf26896b9d21d270" kindref="member">hmap::border</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_morphology_base.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zd,<sp/>ze,<sp/>zc,<sp/>zo,<sp/>zg,<sp/>zt,<sp/>zb,<sp/>zr},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_morphology_base.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/morphology/morphology.cpp" line="86" column="7" bodyfile="HighMap/src/morphology/morphology.cpp" bodystart="86" bodyend="89" declfile="HighMap/include/highmap/morphology.hpp" declline="212" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a211108a73f7ebadb6ac87621c4e47301" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::morphological_top_hat</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>morphological_top_hat</name>
        <qualifiedname>hmap::morphological_top_hat</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>Apply a morphological top hat algorithm to the input array using a square structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to which the top hat algorithm is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Radius of the square kernel used for the top hat algorithm. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Output array with the top hat applied.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_morphology_base.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a2badbebec49b12d0d721970a18eb420d" kindref="member">hmap::clamp_min</ref>(z,<sp/>0.f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>radius<sp/>=<sp/>1<sp/>==&gt;<sp/>3x3<sp/>square<sp/>kernel</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ir<sp/>=<sp/>3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zd<sp/>=<sp/><ref refid="namespacehmap_1ac91a2dacd050d8588b4135f02dd8f2a5" kindref="member">hmap::dilation</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ze<sp/>=<sp/><ref refid="namespacehmap_1a9cf7773f6141162bf60708a93acdfcee" kindref="member">hmap::erosion</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zc<sp/>=<sp/><ref refid="namespacehmap_1a889405ce11be91e33cc80ca4dbd192b0" kindref="member">hmap::closing</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zo<sp/>=<sp/><ref refid="namespacehmap_1abd3024b8233a70596ff2924607221637" kindref="member">hmap::opening</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zg<sp/>=<sp/><ref refid="namespacehmap_1a01f3be1fd053428ea67030e3736d15ca" kindref="member">hmap::morphological_gradient</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zt<sp/>=<sp/><ref refid="namespacehmap_1a211108a73f7ebadb6ac87621c4e47301" kindref="member">hmap::morphological_top_hat</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zb<sp/>=<sp/><ref refid="namespacehmap_1a1cf22c68188d0e35aa74983f3a01c488" kindref="member">hmap::morphological_black_hat</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a4799d3f029d45240a5b40b4853583a58" kindref="member">hmap::make_binary</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zr<sp/>=<sp/><ref refid="namespacehmap_1af80bcff234bf1482cf26896b9d21d270" kindref="member">hmap::border</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_morphology_base.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zd,<sp/>ze,<sp/>zc,<sp/>zo,<sp/>zg,<sp/>zt,<sp/>zb,<sp/>zr},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_morphology_base.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/morphology/morphology.cpp" line="91" column="7" bodyfile="HighMap/src/morphology/morphology.cpp" bodystart="91" bodyend="94" declfile="HighMap/include/highmap/morphology.hpp" declline="228" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1abd3024b8233a70596ff2924607221637" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::opening</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>opening</name>
        <qualifiedname>hmap::opening</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>Apply an opening algorithm to the input array using a square structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to which the opening algorithm is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Radius of the square kernel used for the opening algorithm. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Output array with the opening applied.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_morphology_base.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a2badbebec49b12d0d721970a18eb420d" kindref="member">hmap::clamp_min</ref>(z,<sp/>0.f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>radius<sp/>=<sp/>1<sp/>==&gt;<sp/>3x3<sp/>square<sp/>kernel</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ir<sp/>=<sp/>3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zd<sp/>=<sp/><ref refid="namespacehmap_1ac91a2dacd050d8588b4135f02dd8f2a5" kindref="member">hmap::dilation</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ze<sp/>=<sp/><ref refid="namespacehmap_1a9cf7773f6141162bf60708a93acdfcee" kindref="member">hmap::erosion</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zc<sp/>=<sp/><ref refid="namespacehmap_1a889405ce11be91e33cc80ca4dbd192b0" kindref="member">hmap::closing</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zo<sp/>=<sp/><ref refid="namespacehmap_1abd3024b8233a70596ff2924607221637" kindref="member">hmap::opening</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zg<sp/>=<sp/><ref refid="namespacehmap_1a01f3be1fd053428ea67030e3736d15ca" kindref="member">hmap::morphological_gradient</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zt<sp/>=<sp/><ref refid="namespacehmap_1a211108a73f7ebadb6ac87621c4e47301" kindref="member">hmap::morphological_top_hat</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zb<sp/>=<sp/><ref refid="namespacehmap_1a1cf22c68188d0e35aa74983f3a01c488" kindref="member">hmap::morphological_black_hat</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a4799d3f029d45240a5b40b4853583a58" kindref="member">hmap::make_binary</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zr<sp/>=<sp/><ref refid="namespacehmap_1af80bcff234bf1482cf26896b9d21d270" kindref="member">hmap::border</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_morphology_base.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zd,<sp/>ze,<sp/>zc,<sp/>zo,<sp/>zg,<sp/>zt,<sp/>zb,<sp/>zr},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_morphology_base.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/morphology/morphology.cpp" line="96" column="7" bodyfile="HighMap/src/morphology/morphology.cpp" bodystart="96" bodyend="99" declfile="HighMap/include/highmap/morphology.hpp" declline="244" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a7c7d934cc5a3a5e1a6f17c09a0e1e51f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::relative_distance_from_skeleton</definition>
        <argsstring>(const Array &amp;array, int ir_search, bool zero_at_borders=true, int ir_erosion=1)</argsstring>
        <name>relative_distance_from_skeleton</name>
        <qualifiedname>hmap::relative_distance_from_skeleton</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir_search</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>zero_at_borders</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>int</type>
          <declname>ir_erosion</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Computes the relative distance of each non-zero cell in a binary array from the skeleton and border. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates a relative distance measure for each non-zero cell in the input array. The measure is defined as the ratio of the cell&apos;s distance to the nearest border and the combined distances to the nearest skeleton and border cells. The skeleton is computed using the Zhang-Suen skeletonization algorithm.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The input binary array for which the relative distance map is to be calculated. Non-zero values are considered for processing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir_search</parametername>
</parameternamelist>
<parameterdescription>
<para>The search radius for finding the nearest skeleton and border cells. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zero_at_borders</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, the borders of the skeletonized image will be set to zero. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir_erosion</parametername>
</parameternamelist>
<parameterdescription>
<para>The erosion radius applied to the skeleton. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array representing the relative distance map, where each cell has a value between 0 and 1. A value closer to 1 indicates proximity to the skeleton, while a value closer to 0 indicates proximity to the border.</para>
</simplesect>
<simplesect kind="note"><para>The skeleton is computed using the Zhang-Suen skeletonization algorithm.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_skeleton.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>8.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z,<sp/>-1.f,<sp/>0.4f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a4799d3f029d45240a5b40b4853583a58" kindref="member">hmap::make_binary</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sk<sp/>=<sp/><ref refid="namespacehmap_1a11ddd5ab1aa625db9419d9b65c0eaa64" kindref="member">hmap::skeleton</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>ir_search<sp/>=<sp/>32;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rdist<sp/>=<sp/><ref refid="namespacehmap_1a7c7d934cc5a3a5e1a6f17c09a0e1e51f" kindref="member">relative_distance_from_skeleton</ref>(z,<sp/>ir_search);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_skeleton.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>sk,<sp/>0.5f<sp/>*<sp/>(z<sp/>+<sp/>sk),<sp/>rdist},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_skeleton.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/morphology/morphology.cpp" line="135" column="7" bodyfile="HighMap/src/morphology/morphology.cpp" bodystart="135" bodyend="184" declfile="HighMap/include/highmap/morphology.hpp" declline="279" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a11ddd5ab1aa625db9419d9b65c0eaa64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::skeleton</definition>
        <argsstring>(const Array &amp;array, bool zero_at_borders=true)</argsstring>
        <name>skeleton</name>
        <qualifiedname>hmap::skeleton</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>zero_at_borders</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Computes the skeleton of a binary image using the Zhang-Suen skeletonization algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para>This function processes a binary input array to extract its skeleton by iteratively thinning the image until no further changes occur. It optionally sets the borders of the resulting skeletonized image to zero.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The input binary array to be skeletonized. Values should typically be 0 or 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zero_at_borders</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, the borders of the resulting array will be set to zero. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The skeletonized version of the input array.</para>
</simplesect>
<simplesect kind="note"><para>This implementation is based on the algorithm described at <ulink url="https://github.com/krishraghuram/Zhang-Suen-Skeletonization">https://github.com/krishraghuram/Zhang-Suen-Skeletonization</ulink>.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_skeleton.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>8.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z,<sp/>-1.f,<sp/>0.4f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a4799d3f029d45240a5b40b4853583a58" kindref="member">hmap::make_binary</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sk<sp/>=<sp/><ref refid="namespacehmap_1a11ddd5ab1aa625db9419d9b65c0eaa64" kindref="member">hmap::skeleton</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>ir_search<sp/>=<sp/>32;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rdist<sp/>=<sp/><ref refid="namespacehmap_1a7c7d934cc5a3a5e1a6f17c09a0e1e51f" kindref="member">relative_distance_from_skeleton</ref>(z,<sp/>ir_search);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_skeleton.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>sk,<sp/>0.5f<sp/>*<sp/>(z<sp/>+<sp/>sk),<sp/>rdist},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_skeleton.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/morphology/morphology.cpp" line="186" column="7" bodyfile="HighMap/src/morphology/morphology.cpp" bodystart="186" bodyend="209" declfile="HighMap/include/highmap/morphology.hpp" declline="307" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a1fb8077215c98a741e0de5366c2f7ca3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::downscale_transform</definition>
        <argsstring>(Array &amp;array, float kc, std::function&lt; void(Array &amp;x)&gt; unary_op, bool apply_prefiltering=false)</argsstring>
        <name>downscale_transform</name>
        <qualifiedname>hmap::downscale_transform</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>kc</declname>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;x)&gt;</type>
          <declname>unary_op</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>apply_prefiltering</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Applies a downscaling transformation to a 2D array using Fourier-based filtering. </para>
        </briefdescription>
        <detaileddescription>
<para>This function performs a series of operations on a 2D array to isolate and transform its low-frequency components. It uses a Fourier transform for filtering, downscales the array for efficient processing, applies a user-defined unary operation, and then restores the transformed low-frequency content to the original resolution.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to the input 2D array to be transformed. The array may be resized internally. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kc</parametername>
</parameternamelist>
<parameterdescription>
<para>The cutoff wavenumber for isolating low-frequency components during filtering. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unary_op</parametername>
</parameternamelist>
<parameterdescription>
<para>A user-defined function that applies a transformation to the downscaled array.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<itemizedlist>
<listitem><para>The function ensures that the input array is square for Fourier operations by resampling it if necessary.</para>
</listitem><listitem><para>A smooth low-pass filter is applied in the frequency domain, and the filtered array is downscaled to a coarse resolution.</para>
</listitem><listitem><para>The user-defined transformation (<computeroutput>unary_op</computeroutput>) is applied to the downscaled array.</para>
</listitem><listitem><para>The transformed low-frequency content is upsampled and reintegrated into the original array.</para>
</listitem><listitem><para>If the input array was not square, the final result is resampled back to its original shape.</para>
</listitem><listitem><para><bold>Example</bold> <programlisting filename="ex_downscale_transform.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z128<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{128,<sp/>128},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z256<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{256,<sp/>256},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z512<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{512,<sp/>512},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1024<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{1024,<sp/>1024},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z0<sp/>=<sp/>z1024;<sp/></highlight><highlight class="comment">//<sp/>keep<sp/>for<sp/>reference</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kc<sp/>=<sp/>64.f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lambda<sp/>=<sp/>[](<ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>&amp;x)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>nparticles<sp/>=<sp/>5000;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref><sp/>seed<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a9571076da7c13d9bd3ab99f137ef8188" kindref="member">hmap::hydraulic_particle</ref>(x,<sp/>nparticles,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>the<sp/>erosion<sp/>to<sp/>each<sp/>array<sp/>with<sp/>different<sp/>resolutions</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(results<sp/>should<sp/>be<sp/>the<sp/>same)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1fb8077215c98a741e0de5366c2f7ca3" kindref="member">hmap::downscale_transform</ref>(z128,<sp/>kc,<sp/>lambda);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1fb8077215c98a741e0de5366c2f7ca3" kindref="member">hmap::downscale_transform</ref>(z256,<sp/>kc,<sp/>lambda);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1fb8077215c98a741e0de5366c2f7ca3" kindref="member">hmap::downscale_transform</ref>(z512,<sp/>kc,<sp/>lambda);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1fb8077215c98a741e0de5366c2f7ca3" kindref="member">hmap::downscale_transform</ref>(z1024,<sp/>kc,<sp/>lambda);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>interpolation<sp/>in<sp/>finer<sp/>resolution<sp/>to<sp/>generate<sp/>a<sp/>single<sp/>output<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z128.<ref refid="classhmap_1_1Array_1a1c242d119f67209442a0054601939412" kindref="member">resample_to_shape</ref>({1024,<sp/>1024});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/>z256.<ref refid="classhmap_1_1Array_1a1c242d119f67209442a0054601939412" kindref="member">resample_to_shape</ref>({1024,<sp/>1024});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z3<sp/>=<sp/>z512.<ref refid="classhmap_1_1Array_1a1c242d119f67209442a0054601939412" kindref="member">resample_to_shape</ref>({1024,<sp/>1024});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z4<sp/>=<sp/>z1024.<ref refid="classhmap_1_1Array_1a1c242d119f67209442a0054601939412" kindref="member">resample_to_shape</ref>({1024,<sp/>1024});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_downscale_transform.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z0,<sp/>z1,<sp/>z2,<sp/>z3,<sp/>z4},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</listitem></itemizedlist>
</para>
<para><bold>Result</bold> <image type="html" name="ex_downscale_transform.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/multiscale/downscale_transform.cpp" line="15" column="6" bodyfile="HighMap/src/multiscale/downscale_transform.cpp" bodystart="15" bodyend="58" declfile="HighMap/include/highmap/multiscale/downscaling.hpp" declline="56" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a669a4f9586f3df4b018e321048c9bc7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::downscale_transform_multi</definition>
        <argsstring>(Array &amp;array, std::vector&lt; float &gt; kc_list, std::function&lt; void(Array &amp;x, const int current_index)&gt; unary_op, bool apply_prefiltering=false)</argsstring>
        <name>downscale_transform_multi</name>
        <qualifiedname>hmap::downscale_transform_multi</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt;</type>
          <declname>kc_list</declname>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;x, const int current_index)&gt;</type>
          <declname>unary_op</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>apply_prefiltering</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/multiscale/downscale_transform.cpp" line="60" column="6" bodyfile="HighMap/src/multiscale/downscale_transform.cpp" bodystart="60" bodyend="78" declfile="HighMap/include/highmap/multiscale/downscaling.hpp" declline="61" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a868ae7c781d7e72af7b1416898a2f891" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::upscale_amplification</definition>
        <argsstring>(Array &amp;array, int upscaling_levels, float persistence, std::function&lt; void(Array &amp;x, float current_scaling)&gt; unary_op)</argsstring>
        <name>upscale_amplification</name>
        <qualifiedname>hmap::upscale_amplification</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>upscaling_levels</declname>
        </param>
        <param>
          <type>float</type>
          <declname>persistence</declname>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;x, float current_scaling)&gt;</type>
          <declname>unary_op</declname>
        </param>
        <briefdescription>
<para>Applies an upscaling amplification process to an array, followed by a unary operation. </para>
        </briefdescription>
        <detaileddescription>
<para>This function progressively upscales the given array by powers of 2 (starting from the initial shape), performs a user-defined unary operation on the upscaled array at each level, and finally returns the array to its original resolution using bilinear interpolation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to the array that will be upscaled and processed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upscaling_levels</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of upscaling levels to apply. The function will resample the array for each level. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>persistence</parametername>
</parameternamelist>
<parameterdescription>
<para>A scaling factor applied at each level to adjust the impact of the unary operation. Higher persistence values will amplify the effects at each level. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unary_op</parametername>
</parameternamelist>
<parameterdescription>
<para>A user-defined unary operation to apply to the array at each upscaling level. The operation takes a reference to the array.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The function first applies bicubic resampling to upscale the array, then applies the user-provided <computeroutput>unary_op</computeroutput> at each upscaling level. After all levels are processed, the array is resampled back to its initial shape using bilinear interpolation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/multiscale/upscale_amplification.cpp" line="11" column="6" bodyfile="HighMap/src/multiscale/upscale_amplification.cpp" bodystart="11" bodyend="31" declfile="HighMap/include/highmap/multiscale/upscaling.hpp" declline="46" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ae51dda5e070b01ad1a85b44d986f5003" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::add_kernel</definition>
        <argsstring>(Array &amp;array, const Array &amp;kernel, int i, int j)</argsstring>
        <name>add_kernel</name>
        <qualifiedname>hmap::add_kernel</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Add a kernel to a specified position in an array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function adds the values of a smaller kernel array to the input array, centered at the specified indices (i, j). The kernel is added element-wise.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The input array to which the kernel is added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel</parametername>
</parameternamelist>
<parameterdescription>
<para>The kernel array to be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The row index in the input array where the kernel is centered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>The column index in the input array where the kernel is centered. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/operator/operator.cpp" line="12" column="6" bodyfile="HighMap/src/operator/operator.cpp" bodystart="12" bodyend="34" declfile="HighMap/include/highmap/operator.hpp" declline="38" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a34aa21678ff4bb869bb29ee0f2f68886" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::add_kernel_maximum_smooth</definition>
        <argsstring>(Array &amp;array, const Array &amp;kernel, float k_smooth, int i, int j)</argsstring>
        <name>add_kernel_maximum_smooth</name>
        <qualifiedname>hmap::add_kernel_maximum_smooth</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k_smooth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Adds a smoothed maximum value from a kernel to a specified position in a 2D array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies a truncated kernel to the given array at position (ic, jc), where the kernel is truncated to ensure it fits within the array&apos;s bounds. The maximum value between the current array value and the kernel value is computed using a smoothing factor, and the result is stored back in the array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the 2D array (heightmap) where the kernel is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel</parametername>
</parameternamelist>
<parameterdescription>
<para>The kernel array containing values to be applied to the array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k_smooth</parametername>
</parameternamelist>
<parameterdescription>
<para>The smoothing factor used in the maximum_smooth function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ic</parametername>
</parameternamelist>
<parameterdescription>
<para>The x-coordinate of the center in the array where the kernel is applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>jc</parametername>
</parameternamelist>
<parameterdescription>
<para>The y-coordinate of the center in the array where the kernel is applied.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The kernel is truncated to ensure it fits within the bounds of the array. After applying the kernel, the values in the array are updated with the result of the maximum_smooth function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/operator/operator.cpp" line="36" column="6" bodyfile="HighMap/src/operator/operator.cpp" bodystart="36" bodyend="67" declfile="HighMap/include/highmap/operator.hpp" declline="64" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a000840cf4916102db68d6428c8c8c7e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::detrend_reg</definition>
        <argsstring>(const Array &amp;array)</argsstring>
        <name>detrend_reg</name>
        <qualifiedname>hmap::detrend_reg</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Apply linear regression for detrending of a 2D array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function performs detrending on the input array by applying linear regression separately to each row and column, removing trends from the data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input 2D array to be detrended. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The detrended output array.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_detrend.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z0<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1a000840cf4916102db68d6428c8c8c7e2" kindref="member">detrend_reg</ref>(z0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_detrend.png&quot;</highlight><highlight class="normal">,<sp/>{z0,<sp/>z1},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_detrend.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/operator/detrend.cpp" line="11" column="7" bodyfile="HighMap/src/operator/detrend.cpp" bodystart="11" bodyend="70" declfile="HighMap/include/highmap/operator.hpp" declline="85" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::hstack</definition>
        <argsstring>(const Array &amp;array1, const Array &amp;array2)</argsstring>
        <name>hstack</name>
        <qualifiedname>hmap::hstack</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array2</declname>
        </param>
        <briefdescription>
<para>Horizontally stack two arrays side by side. </para>
        </briefdescription>
        <detaileddescription>
<para>This function concatenates two arrays along their columns, forming a new array with the columns of the first array followed by the columns of the second array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first array to stack. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second array to stack. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The resulting array obtained by horizontally stacking <computeroutput>array1</computeroutput> and <computeroutput>array2</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/operator/operator.cpp" line="69" column="7" bodyfile="HighMap/src/operator/operator.cpp" bodystart="69" bodyend="83" declfile="HighMap/include/highmap/operator.hpp" declline="99" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ab642074e3e056d07ae13cf346e208c79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::inpainting_diffusion</definition>
        <argsstring>(const Array &amp;array, const Array &amp;mask, int iterations)</argsstring>
        <name>inpainting_diffusion</name>
        <qualifiedname>hmap::inpainting_diffusion</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
        </param>
        <briefdescription>
<para>Perform diffusion-based inpainting to fill a specified region of an array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function fills the region defined by a mask in the input array using diffusion-based inpainting, which propagates known values to missing regions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array with missing regions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask specifying the region to be inpainted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of diffusion iterations to perform. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The array with the inpainted region.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_inpainting_diffusion.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>mask<sp/>=<sp/><ref refid="namespacehmap_1a849d37221d492c5d96d945dc64b02754" kindref="member">hmap::select_interval</ref>(z1,<sp/>0.5f,<sp/>0.6f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>heightmap<sp/>with<sp/>&quot;holes&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(shape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>;<sp/>j++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask(i,<sp/>j)<sp/>==<sp/>0.f)<sp/>z2(i,<sp/>j)<sp/>=<sp/>z1(i,<sp/>j);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>holes<sp/>filled<sp/>with<sp/>inpainting</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterations<sp/>=<sp/>200;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z3<sp/>=<sp/><ref refid="namespacehmap_1ab642074e3e056d07ae13cf346e208c79" kindref="member">hmap::inpainting_diffusion</ref>(z2,<sp/>mask,<sp/>iterations);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_inpainting_diffusion.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z1,<sp/>z2,<sp/>z3},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_inpainting_diffusion.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/operator/inpainting_gaussian.cpp" line="13" column="7" bodyfile="HighMap/src/operator/inpainting_gaussian.cpp" bodystart="13" bodyend="58" declfile="HighMap/include/highmap/operator.hpp" declline="119" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a3957ac4ae673f8ad402b5dd71e99b015" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt; float &gt; hmap::linspace</definition>
        <argsstring>(float start, float stop, int num, bool endpoint=true)</argsstring>
        <name>linspace</name>
        <qualifiedname>hmap::linspace</qualifiedname>
        <param>
          <type>float</type>
          <declname>start</declname>
        </param>
        <param>
          <type>float</type>
          <declname>stop</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>endpoint</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Generate a vector of evenly spaced numbers over a specified interval. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a vector containing evenly spaced values from <computeroutput>start</computeroutput> to <computeroutput>stop</computeroutput>. The number of values is specified by <computeroutput>num</computeroutput>, and <computeroutput>endpoint</computeroutput> determines whether to include the end value in the output.</para>
<para><simplesect kind="see"><para><ref refid="namespacehmap_1a068e4d5be8c16ab9e708dca9678dc8de" kindref="member">linspace_jitted</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>Starting value of the interval. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop</parametername>
</parameternamelist>
<parameterdescription>
<para>End value of the interval. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of values to generate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endpoint</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, include the end value in the output vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;float&gt; Vector of evenly spaced values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/operator/vector.cpp" line="46" column="13" bodyfile="HighMap/src/operator/vector.cpp" bodystart="46" bodyend="64" declfile="HighMap/include/highmap/operator.hpp" declline="138" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a068e4d5be8c16ab9e708dca9678dc8de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt; float &gt; hmap::linspace_jitted</definition>
        <argsstring>(float start, float stop, int num, float ratio, int seed, bool endpoint=true)</argsstring>
        <name>linspace_jitted</name>
        <qualifiedname>hmap::linspace_jitted</qualifiedname>
        <param>
          <type>float</type>
          <declname>start</declname>
        </param>
        <param>
          <type>float</type>
          <declname>stop</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <param>
          <type>float</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>int</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>endpoint</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Generate a vector of jittered (noised) numbers over a specified interval. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a vector with values spaced over an interval but with added noise, controlled by the <computeroutput>ratio</computeroutput> parameter. The noise is applied to an evenly spaced grid. The <computeroutput>seed</computeroutput> parameter controls the randomness.</para>
<para><simplesect kind="see"><para><ref refid="namespacehmap_1a3957ac4ae673f8ad402b5dd71e99b015" kindref="member">linspace</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>Starting value of the interval. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop</parametername>
</parameternamelist>
<parameterdescription>
<para>End value of the interval. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of values to generate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Jittering ratio applied to the evenly spaced grid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed for generating jittered values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endpoint</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, include the end value in the output vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;float&gt; Vector of jittered values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/operator/vector.cpp" line="66" column="13" bodyfile="HighMap/src/operator/vector.cpp" bodystart="66" bodyend="90" declfile="HighMap/include/highmap/operator.hpp" declline="161" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a3e6de5f9e14f11872651af22e5756c32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt; float &gt; hmap::random_vector</definition>
        <argsstring>(float min, float max, int num, int seed)</argsstring>
        <name>random_vector</name>
        <qualifiedname>hmap::random_vector</qualifiedname>
        <param>
          <type>float</type>
          <declname>min</declname>
        </param>
        <param>
          <type>float</type>
          <declname>max</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <param>
          <type>int</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
<para>Generate a vector filled with random values within a specified range. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a vector with random values uniformly distributed between <computeroutput>min</computeroutput> and <computeroutput>max</computeroutput>. The number of values and the randomness is controlled by the <computeroutput>seed</computeroutput> parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower bound of the random values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>Upper bound of the random values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of random values to generate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed for generating values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;float&gt; Vector of random values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/operator/vector.cpp" line="92" column="13" bodyfile="HighMap/src/operator/vector.cpp" bodystart="92" bodyend="101" declfile="HighMap/include/highmap/operator.hpp" declline="181" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ad709c89b243a091346e762f25c6b07c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::fill_array_using_xy_function</definition>
        <argsstring>(Array &amp;array, Vec4&lt; float &gt; bbox, const Array *p_ctrl_param, const Array *p_noise_x, const Array *p_noise_y, const Array *p_stretching, std::function&lt; float(float, float, float)&gt; fct_xy)</argsstring>
        <name>fill_array_using_xy_function</name>
        <qualifiedname>hmap::fill_array_using_xy_function</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_ctrl_param</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
        </param>
        <param>
          <type>std::function&lt; float(float, float, float)&gt;</type>
          <declname>fct_xy</declname>
        </param>
        <briefdescription>
<para>Fill an array using a scalar function based on (x, y) coordinates. </para>
        </briefdescription>
        <detaileddescription>
<para>This function populates an array with values computed from a scalar function that depends on (x, y) coordinates. Additional input arrays can affect the function&apos;s computation, such as control parameters, noise, and stretching.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The array to be filled with computed values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>The bounding box of the domain specified as {xmin, xmax, ymin, ymax}. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_ctrl_param</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array of control parameters affecting the scalar function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array of noise values along the x-direction for domain warping. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array of noise values along the y-direction for domain warping. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_stretching</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array of local wavenumber multipliers for adjusting the function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fct_xy</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar function to compute values at (x, y) with an initial value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_fill_array_using_xy_function.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec4" kindref="compound">hmap::Vec4&lt;float&gt;</ref><sp/>bbox<sp/>=<sp/><ref refid="namespacehmap_1a4910efa1a82d5dd66d7d02a87fab7e7a" kindref="member">hmap::unit_square_bbox</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1PerlinFunction" kindref="compound">hmap::PerlinFunction</ref><sp/>p<sp/>=<sp/><ref refid="classhmap_1_1PerlinFunction" kindref="compound">hmap::PerlinFunction</ref>(kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0.4f<sp/>*<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>kw,<sp/>++seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(shape);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(shape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1ad709c89b243a091346e762f25c6b07c2" kindref="member">fill_array_using_xy_function</ref>(z1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bbox,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;n,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;n,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.<ref refid="classhmap_1_1Function_1a32214e30c36be7650c47867fd14f6a0c" kindref="member">get_delegate</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subsampling<sp/>=<sp/>8;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1ad709c89b243a091346e762f25c6b07c2" kindref="member">fill_array_using_xy_function</ref>(z2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bbox,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>ctrl_param</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;n,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;n,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>stretching</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.<ref refid="classhmap_1_1Function_1a32214e30c36be7650c47867fd14f6a0c" kindref="member">get_delegate</ref>(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subsampling);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_fill_array_using_xy_function.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z1,<sp/>z2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_fill_array_using_xy_function.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/operator/fill_array.cpp" line="12" column="6" bodyfile="HighMap/src/operator/fill_array.cpp" bodystart="12" bodyend="97" declfile="HighMap/include/highmap/operator.hpp" declline="210" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1abd2315893f8342f0d5444d0c7fda6a2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::fill_array_using_xy_function</definition>
        <argsstring>(Array &amp;array, Vec4&lt; float &gt; bbox, const Array *p_ctrl_param, const Array *p_noise_x, const Array *p_noise_y, const Array *p_stretching, std::function&lt; float(float, float, float)&gt; fct_xy, int subsampling)</argsstring>
        <name>fill_array_using_xy_function</name>
        <qualifiedname>hmap::fill_array_using_xy_function</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_ctrl_param</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
        </param>
        <param>
          <type>std::function&lt; float(float, float, float)&gt;</type>
          <declname>fct_xy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>subsampling</declname>
        </param>
        <briefdescription>
<para>Fill an array using a scalar function based on (x, y) coordinates with subsampling. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is similar to the one above but includes a <computeroutput>subsampling</computeroutput> parameter to optimize performance. The array is subsampled during computation based on the <computeroutput>subsampling</computeroutput> factor, which determines how frequently the scalar function is applied.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The array to be filled with computed values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>The bounding box of the domain specified as {xmin, xmax, ymin, ymax}. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_ctrl_param</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array of control parameters affecting the scalar function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array of noise values along the x-direction for domain warping. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array of noise values along the y-direction for domain warping. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_stretching</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array of local wavenumber multipliers for adjusting the function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fct_xy</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar function to compute values at (x, y) with an initial value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subsampling</parametername>
</parameternamelist>
<parameterdescription>
<para>The factor by which the array is subsampled during computation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_fill_array_using_xy_function.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec4" kindref="compound">hmap::Vec4&lt;float&gt;</ref><sp/>bbox<sp/>=<sp/><ref refid="namespacehmap_1a4910efa1a82d5dd66d7d02a87fab7e7a" kindref="member">hmap::unit_square_bbox</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1PerlinFunction" kindref="compound">hmap::PerlinFunction</ref><sp/>p<sp/>=<sp/><ref refid="classhmap_1_1PerlinFunction" kindref="compound">hmap::PerlinFunction</ref>(kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0.4f<sp/>*<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>kw,<sp/>++seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(shape);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(shape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1ad709c89b243a091346e762f25c6b07c2" kindref="member">fill_array_using_xy_function</ref>(z1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bbox,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;n,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;n,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.<ref refid="classhmap_1_1Function_1a32214e30c36be7650c47867fd14f6a0c" kindref="member">get_delegate</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subsampling<sp/>=<sp/>8;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1ad709c89b243a091346e762f25c6b07c2" kindref="member">fill_array_using_xy_function</ref>(z2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bbox,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>ctrl_param</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;n,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;n,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>stretching</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.<ref refid="classhmap_1_1Function_1a32214e30c36be7650c47867fd14f6a0c" kindref="member">get_delegate</ref>(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subsampling);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_fill_array_using_xy_function.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z1,<sp/>z2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_fill_array_using_xy_function.png"></image>
 This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/operator/fill_array.cpp" line="99" column="6" bodyfile="HighMap/src/operator/fill_array.cpp" bodystart="99" bodyend="163" declfile="HighMap/include/highmap/operator.hpp" declline="250" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ae0a3c73cc23a288fe03bf5ed6ac73c3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::find_vertical_cut_path</definition>
        <argsstring>(const Array &amp;error, std::vector&lt; int &gt; &amp;path_i)</argsstring>
        <name>find_vertical_cut_path</name>
        <qualifiedname>hmap::find_vertical_cut_path</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>error</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>path_i</declname>
        </param>
        <briefdescription>
<para>Find the vertical cut path with the minimum cost using Dijkstra&apos;s algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para>This function identifies the vertical cut path in an array from the bottom to the top that has the minimum cumulative cost. The path is determined using Dijkstra&apos;s algorithm.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array containing error or cost values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path_i</parametername>
</parameternamelist>
<parameterdescription>
<para>Output vector of indices representing the cut path. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/operator/stitching_helpers.cpp" line="21" column="6" bodyfile="HighMap/src/operator/stitching_helpers.cpp" bodystart="21" bodyend="72" declfile="HighMap/include/highmap/operator.hpp" declline="271" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aa3277a726a81e3c6b4dcbc0d2a86f4d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::generate_mask</definition>
        <argsstring>(hmap::Vec2&lt; int &gt; shape, std::vector&lt; int &gt; cut_path_i, int ir)</argsstring>
        <name>generate_mask</name>
        <qualifiedname>hmap::generate_mask</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>cut_path_i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>Generate a smooth mask based on a cut path. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a mask based on the vertical cut path indices obtained from the <computeroutput>find_vertical_cut_path</computeroutput> function. The mask is smoothed using a specified filtering radius.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>Shape of the mask to be generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cut_path_i</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of vertical cut path indices. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Filtering radius for smoothing the mask. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The generated smooth mask. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/operator/stitching_helpers.cpp" line="74" column="7" bodyfile="HighMap/src/operator/stitching_helpers.cpp" bodystart="74" bodyend="113" declfile="HighMap/include/highmap/operator.hpp" declline="285" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a27362ea31c92dd9c15e1bb3c6f5b18e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::get_random_patch</definition>
        <argsstring>(const Array &amp;array, hmap::Vec2&lt; int &gt; patch_shape, std::mt19937 &amp;gen, bool patch_flip=false, bool patch_rotate=false, bool patch_transpose=false, std::vector&lt; Array * &gt; *p_secondary_arrays=nullptr, std::vector&lt; Array &gt; *p_secondary_patches=nullptr)</argsstring>
        <name>get_random_patch</name>
        <qualifiedname>hmap::get_random_patch</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2</ref>&lt; int &gt;</type>
          <declname>patch_shape</declname>
        </param>
        <param>
          <type>std::mt19937 &amp;</type>
          <declname>gen</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>patch_flip</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>patch_rotate</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>patch_transpose</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> * &gt; *</type>
          <declname>p_secondary_arrays</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &gt; *</type>
          <declname>p_secondary_patches</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Extracts a random sub-array (patch) from the input array, with optional transformations. </para>
        </briefdescription>
        <detaileddescription>
<para>This function selects a random patch from the specified input array and applies optional transformations such as flipping, rotation, and transposition. Additionally, if a list of secondary arrays is provided, corresponding patches are extracted and transformed in the same way.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The main input array from which the patch is extracted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patch_shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The shape (dimensions) of the patch to be extracted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gen</parametername>
</parameternamelist>
<parameterdescription>
<para>Random number generator for selecting patch location. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patch_flip</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, allows the patch to be flipped vertically or horizontally. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patch_rotate</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, allows the patch to be rotated by 90 degrees. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patch_transpose</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, allows the patch to be transposed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_secondary_arrays</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to a list of secondary arrays. If provided, patches will be extracted and transformed from each array in the list, with the same transformations as the primary patch. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_secondary_patches</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to a list for storing the transformed patches from each secondary array.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The extracted and transformed patch from the main input array. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/operator/stitching_helpers.cpp" line="132" column="7" bodyfile="HighMap/src/operator/stitching_helpers.cpp" bodystart="132" bodyend="187" declfile="HighMap/include/highmap/operator.hpp" declline="317" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a462f8b6ebc7b8ab79c619987e0ddfce4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::vstack</definition>
        <argsstring>(const Array &amp;array1, const Array &amp;array2)</argsstring>
        <name>vstack</name>
        <qualifiedname>hmap::vstack</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array2</declname>
        </param>
        <briefdescription>
<para>Vertically stack two arrays. </para>
        </briefdescription>
        <detaileddescription>
<para>This function concatenates two arrays along their rows, resulting in a new array where the rows of the second array are stacked below the rows of the first array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first array to be stacked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second array to be stacked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The resulting array with <computeroutput>array1</computeroutput> stacked on top of <computeroutput>array2</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/operator/operator.cpp" line="85" column="7" bodyfile="HighMap/src/operator/operator.cpp" bodystart="85" bodyend="100" declfile="HighMap/include/highmap/operator.hpp" declline="338" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a28783971977657055053b3c143502bc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::biquad_pulse</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float gain=1.f, const Array *p_ctrl_param=nullptr, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, const Array *p_stretching=nullptr, Vec2&lt; float &gt; center={0.5f, 0.5f}, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>biquad_pulse</name>
        <qualifiedname>hmap::biquad_pulse</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>gain</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_ctrl_param</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>center</declname>
          <defval>{0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Return a &apos;biquadratic pulse&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gain</parametername>
</parameternamelist>
<parameterdescription>
<para>Gain (the higher, the steeper). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_ctrl_param</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the control parameter array (acts as a multiplier for the gain parameter). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input noise arrays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_stretching</parametername>
</parameternamelist>
<parameterdescription>
<para>Local wavenumber multiplier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Perlin billow noise.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_biquad_pulse.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1a28783971977657055053b3c143502bc2" kindref="member">hmap::biquad_pulse</ref>(shape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>control<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctrl_array<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(ctrl_array,<sp/>0.8f,<sp/>1.2f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/><ref refid="namespacehmap_1a28783971977657055053b3c143502bc2" kindref="member">hmap::biquad_pulse</ref>(shape,<sp/>1.f,<sp/>&amp;ctrl_array);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_biquad_pulse.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z1,<sp/>z2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_biquad_pulse.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/primitives.cpp" line="19" column="7" bodyfile="HighMap/src/primitives/primitives.cpp" bodystart="19" bodyend="39" declfile="HighMap/include/highmap/primitives.hpp" declline="61" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a80d18b9cba709433d31f37c29f64f01c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::bump</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float gain=1.f, const Array *p_ctrl_param=nullptr, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, const Array *p_stretching=nullptr, Vec2&lt; float &gt; center={0.5f, 0.5f}, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>bump</name>
        <qualifiedname>hmap::bump</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>gain</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_ctrl_param</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>center</declname>
          <defval>{0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Return a bump. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gain</parametername>
</parameternamelist>
<parameterdescription>
<para>Gain (the higher, the steeper the bump). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_ctrl_param</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the control parameter array (acts as a multiplier for the gain parameter). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input noise arrays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_stretching</parametername>
</parameternamelist>
<parameterdescription>
<para>Local wavenumber multiplier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>Primitive reference center. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Perlin billow noise.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_bump.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1a80d18b9cba709433d31f37c29f64f01c" kindref="member">hmap::bump</ref>(shape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>control<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctrl_array<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(ctrl_array,<sp/>0.8f,<sp/>1.2f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/><ref refid="namespacehmap_1a80d18b9cba709433d31f37c29f64f01c" kindref="member">hmap::bump</ref>(shape,<sp/>1.f,<sp/>&amp;ctrl_array);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_bump.png&quot;</highlight><highlight class="normal">,<sp/>{z1,<sp/>z2},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_bump.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/primitives.cpp" line="41" column="7" bodyfile="HighMap/src/primitives/primitives.cpp" bodystart="41" bodyend="61" declfile="HighMap/include/highmap/primitives.hpp" declline="89" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1abf32b5d631ee74d292cf9449b51395c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::caldera</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float radius, float sigma_inner, float sigma_outer, float z_bottom, const Array *p_noise, float noise_amp_r, float noise_ratio_z, Vec2&lt; float &gt; center={0.5f, 0.5f}, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>caldera</name>
        <qualifiedname>hmap::caldera</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>float</type>
          <declname>sigma_inner</declname>
        </param>
        <param>
          <type>float</type>
          <declname>sigma_outer</declname>
        </param>
        <param>
          <type>float</type>
          <declname>z_bottom</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise</declname>
        </param>
        <param>
          <type>float</type>
          <declname>noise_amp_r</declname>
        </param>
        <param>
          <type>float</type>
          <declname>noise_ratio_z</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>center</declname>
          <defval>{0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Return a caldera-shaped heightmap. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>Crater radius at the ridge. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigma_inner</parametername>
</parameternamelist>
<parameterdescription>
<para>Inner half-width. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigma_outer</parametername>
</parameternamelist>
<parameterdescription>
<para>Outer half-width. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z_bottom</parametername>
</parameternamelist>
<parameterdescription>
<para>Bottom elevation (ridge is at elevation <computeroutput>1</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise</parametername>
</parameternamelist>
<parameterdescription>
<para>Displacement noise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>noise_amp_r</parametername>
</parameternamelist>
<parameterdescription>
<para>Radial noise absolute scale (in pixels). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>noise_ratio_z</parametername>
</parameternamelist>
<parameterdescription>
<para>Vertical noise relative scale (in [0, 1]). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>Primitive reference center. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Resulting array.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_caldera.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>radius<sp/>=<sp/>48.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sigma_inner<sp/>=<sp/>8.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sigma_outer<sp/>=<sp/>32.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z_bottom<sp/>=<sp/>0.3f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>without<sp/>noise</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1abf32b5d631ee74d292cf9449b51395c3" kindref="member">hmap::caldera</ref>(shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radius,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigma_inner,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigma_outer,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_bottom);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>noise</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref><sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noise_r_amp<sp/>=<sp/>8.f;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pixels</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noise_z_ratio<sp/>=<sp/>0.4f;<sp/></highlight><highlight class="comment">//<sp/>in<sp/>[0,<sp/>1]</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/><ref refid="namespacehmap_1abf32b5d631ee74d292cf9449b51395c3" kindref="member">hmap::caldera</ref>(shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radius,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigma_inner,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigma_outer,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_bottom,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noise_r_amp,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noise_z_ratio);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_caldera.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z1,<sp/>z2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_caldera.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/geo/geo.cpp" line="16" column="7" bodyfile="HighMap/src/primitives/geo/geo.cpp" bodystart="16" bodyend="70" declfile="HighMap/include/highmap/primitives.hpp" declline="119" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a8091f7b43325bd647faa1430af785c70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::caldera</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float radius, float sigma_inner, float sigma_outer, float z_bottom, Vec2&lt; float &gt; center={0.5f, 0.5f}, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>caldera</name>
        <qualifiedname>hmap::caldera</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>float</type>
          <declname>sigma_inner</declname>
        </param>
        <param>
          <type>float</type>
          <declname>sigma_outer</declname>
        </param>
        <param>
          <type>float</type>
          <declname>z_bottom</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>center</declname>
          <defval>{0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/geo/geo.cpp" line="72" column="7" bodyfile="HighMap/src/primitives/geo/geo.cpp" bodystart="72" bodyend="92" declfile="HighMap/include/highmap/primitives.hpp" declline="130" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a8a56891aca58f4afd74fb34b04322569" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::checkerboard</definition>
        <argsstring>(Vec2&lt; int &gt; shape, Vec2&lt; float &gt; kw, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, const Array *p_stretching=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>checkerboard</name>
        <qualifiedname>hmap::checkerboard</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>kw</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Return a checkerboard heightmap. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>Noise wavenumber with respect to a unit domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input noise arrays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_stretching</parametername>
</parameternamelist>
<parameterdescription>
<para>Local wavenumber multiplier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> New array.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_checkerboard.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>3.f};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a8a56891aca58f4afd74fb34b04322569" kindref="member">hmap::checkerboard</ref>(shape,<sp/>kw);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_checkerboard.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_checkerboard.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/checkerboard.cpp" line="12" column="7" bodyfile="HighMap/src/primitives/checkerboard.cpp" bodystart="12" bodyend="35" declfile="HighMap/include/highmap/primitives.hpp" declline="154" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a8f4e766dca0065219e26af946bd61946" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::constant</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float value=0.f)</argsstring>
        <name>constant</name>
        <qualifiedname>hmap::constant</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Return a constant value array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Filling value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> New array. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/primitives.cpp" line="63" column="7" bodyfile="HighMap/src/primitives/primitives.cpp" bodystart="63" bodyend="69" declfile="HighMap/include/highmap/primitives.hpp" declline="168" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a608453bf311137377626e4db29502ea1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::crater</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float radius, float depth, float lip_decay, float lip_height_ratio=0.5f, const Array *p_ctrl_param=nullptr, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, Vec2&lt; float &gt; center={0.5f, 0.5f}, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>crater</name>
        <qualifiedname>hmap::crater</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>float</type>
          <declname>depth</declname>
        </param>
        <param>
          <type>float</type>
          <declname>lip_decay</declname>
        </param>
        <param>
          <type>float</type>
          <declname>lip_height_ratio</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_ctrl_param</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>center</declname>
          <defval>{0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Return a crater-shaped heightmap. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>Crater radius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lip_decay</parametername>
</parameternamelist>
<parameterdescription>
<para>Ejecta lip decay. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lip_height_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Controls the ejecta lip relative height, in [0, 1]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depth</parametername>
</parameternamelist>
<parameterdescription>
<para>Crater depth. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_ctrl_param</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the control parameter array (acts as a multiplier for the lip_height_ratio parameter). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input noise arrays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> New array.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_crater.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>without<sp/>noise</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>radius<sp/>=<sp/>0.2f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lip_decay<sp/>=<sp/>0.12f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>depth<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1a608453bf311137377626e4db29502ea1" kindref="member">hmap::crater</ref>(shape,<sp/>radius,<sp/>depth,<sp/>lip_decay);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>control<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ctrl_array<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(ctrl_array);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lip_height_ratio<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/><ref refid="namespacehmap_1a608453bf311137377626e4db29502ea1" kindref="member">hmap::crater</ref>(shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radius,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>depth,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lip_decay,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lip_height_ratio,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;ctrl_array);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_crater.png&quot;</highlight><highlight class="normal">,<sp/>{z1,<sp/>z2},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z1.<ref refid="classhmap_1_1Array_1a6cd8060670649c0934ddab573e378d3f" kindref="member">to_file</ref>(</highlight><highlight class="stringliteral">&quot;out.bin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_crater.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/geo/geo.cpp" line="94" column="7" bodyfile="HighMap/src/primitives/geo/geo.cpp" bodystart="94" bodyend="120" declfile="HighMap/include/highmap/primitives.hpp" declline="192" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a1b7c375c3335b31ab4773d792365faac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::dendry</definition>
        <argsstring>(Vec2&lt; int &gt; shape, Vec2&lt; float &gt; kw, uint seed, Array &amp;control_function, float eps=0.05, int resolution=1, float displacement=0.075, int primitives_resolution_steps=3, float slope_power=2.f, float noise_amplitude_proportion=0.01, bool add_control_function=true, float control_function_overlap=0.5f, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, const Array *p_stretching=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f}, int subsampling=1)</argsstring>
        <name>dendry</name>
        <qualifiedname>hmap::dendry</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>kw</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>control_function</declname>
        </param>
        <param>
          <type>float</type>
          <declname>eps</declname>
          <defval>0.05</defval>
        </param>
        <param>
          <type>int</type>
          <declname>resolution</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>float</type>
          <declname>displacement</declname>
          <defval>0.075</defval>
        </param>
        <param>
          <type>int</type>
          <declname>primitives_resolution_steps</declname>
          <defval>3</defval>
        </param>
        <param>
          <type>float</type>
          <declname>slope_power</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>noise_amplitude_proportion</declname>
          <defval>0.01</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>add_control_function</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>float</type>
          <declname>control_function_overlap</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type>int</type>
          <declname>subsampling</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Dendry is a locally computable procedural function that generates branching patterns at various scales (see Gaillard2019). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>Noise wavenumber with respect to a unit domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>control_array</parametername>
</parameternamelist>
<parameterdescription>
<para>Control array (can be of any shape, different from <computeroutput>shape</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eps</parametername>
</parameternamelist>
<parameterdescription>
<para>Epsilon used to bias the area where points are generated in cells. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resolution</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of resolutions in the noise function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>displacement</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum displacement of segments. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primitives_resolution_steps</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional resolution steps in the ComputeColorPrimitives function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slope_power</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional parameter to control the variation of slope on terrains. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>noise_amplitude_proportion</parametername>
</parameternamelist>
<parameterdescription>
<para>Proportion of the amplitude of the control function as noise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>add_control_function</parametername>
</parameternamelist>
<parameterdescription>
<para>Add control function to the output. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>control_function_overlap</parametername>
</parameternamelist>
<parameterdescription>
<para>Extent of the extension added at the domain frontiers of the control array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input noise arrays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_stretching</parametername>
</parameternamelist>
<parameterdescription>
<para>Local wavenumber multiplier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> New array.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_dendry.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>control<sp/>function<sp/>based<sp/>on<sp/>an<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>control_hmap<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(control_hmap,<sp/>0.5f,<sp/>1.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kd<sp/>=<sp/>{8.f,<sp/>8.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1a1b7c375c3335b31ab4773d792365faac" kindref="member">hmap::dendry</ref>(shape,<sp/>kd,<sp/>seed,<sp/>control_hmap);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>array-based<sp/>noise<sp/>function<sp/>can<sp/>also<sp/>be<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>hmap::ArrayFunction<sp/>p<sp/>=<sp/>hmap::ArrayFunction(z,<sp/>{1.f,<sp/>1.f},<sp/>true);</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1PerlinFunction" kindref="compound">hmap::PerlinFunction</ref><sp/>p<sp/>=<sp/><ref refid="classhmap_1_1PerlinFunction" kindref="compound">hmap::PerlinFunction</ref>(kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z2<sp/>=<sp/><ref refid="namespacehmap_1a1b7c375c3335b31ab4773d792365faac" kindref="member">hmap::dendry</ref>(shape,<sp/>kd,<sp/>seed,<sp/>p,<sp/>1.f,<sp/>0.5f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_dendry.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{control_hmap,<sp/>z1,<sp/>z2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_dendry.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/dendry.cpp" line="19" column="7" bodyfile="HighMap/src/primitives/dendry.cpp" bodystart="19" bodyend="87" declfile="HighMap/include/highmap/primitives.hpp" declline="239" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ac6e6a71b31cb483e9fec2511a4b1334a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::dendry</definition>
        <argsstring>(Vec2&lt; int &gt; shape, Vec2&lt; float &gt; kw, uint seed, NoiseFunction &amp;noise_function, float noise_function_offset=0.f, float noise_function_scaling=1.f, float eps=0.05, int resolution=1, float displacement=0.075, int primitives_resolution_steps=3, float slope_power=2.f, float noise_amplitude_proportion=0.01, bool add_control_function=true, float control_function_overlap=0.5f, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, const Array *p_stretching=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>dendry</name>
        <qualifiedname>hmap::dendry</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>kw</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1NoiseFunction" kindref="compound">NoiseFunction</ref> &amp;</type>
          <declname>noise_function</declname>
        </param>
        <param>
          <type>float</type>
          <declname>noise_function_offset</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>noise_function_scaling</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>eps</declname>
          <defval>0.05</defval>
        </param>
        <param>
          <type>int</type>
          <declname>resolution</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>float</type>
          <declname>displacement</declname>
          <defval>0.075</defval>
        </param>
        <param>
          <type>int</type>
          <declname>primitives_resolution_steps</declname>
          <defval>3</defval>
        </param>
        <param>
          <type>float</type>
          <declname>slope_power</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>noise_amplitude_proportion</declname>
          <defval>0.01</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>add_control_function</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>float</type>
          <declname>control_function_overlap</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/dendry.cpp" line="89" column="7" bodyfile="HighMap/src/primitives/dendry.cpp" bodystart="89" bodyend="149" declfile="HighMap/include/highmap/primitives.hpp" declline="257" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a144eb2c0e1e4f93e712f01cbf0fb0c06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::diffusion_limited_aggregation</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float scale, uint seed, float seeding_radius=0.4f, float seeding_outer_radius_ratio=0.2f, float slope=8.f, float noise_ratio=0.2f)</argsstring>
        <name>diffusion_limited_aggregation</name>
        <qualifiedname>hmap::diffusion_limited_aggregation</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>float</type>
          <declname>seeding_radius</declname>
          <defval>0.4<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>seeding_outer_radius_ratio</declname>
          <defval>0.2<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>slope</declname>
          <defval>8.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>noise_ratio</declname>
          <defval>0.2<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Generates a diffusion-limited aggregation (DLA) pattern. </para>
        </briefdescription>
        <detaileddescription>
<para>This function simulates the diffusion-limited aggregation process to generate a pattern within a grid of specified dimensions. The DLA process models particles that undergo a random walk until they stick to a seed, gradually forming complex fractal structures.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensions of the grid where the DLA pattern will be generated. It is represented as a <computeroutput><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt;int&gt;</computeroutput> object, where the first element is the width and the second element is the height. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>A scaling factor that influences the density of the particles in the DLA pattern. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seeding_radius</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius within which initial seeding of particles occurs. This radius defines the area where the first particles are placed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seeding_outer_radius_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>The ratio between the outer seeding radius and the initial seeding radius. It determines the outer boundary for particle seeding. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slope</parametername>
</parameternamelist>
<parameterdescription>
<para>Slope of the talus added to the DLA pattern. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>noise_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>A parameter that controls the amount of randomness or noise introduced in the talus formation process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>The seed for the random number generator, ensuring reproducibility of the pattern. The same seed will generate the same pattern.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A 2D array representing the generated DLA pattern. The array is of the same size as specified by <computeroutput>shape</computeroutput>.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_diffusion_limited_aggregation.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale<sp/>=<sp/>1.f<sp/>/<sp/>128.f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a144eb2c0e1e4f93e712f01cbf0fb0c06" kindref="member">hmap::diffusion_limited_aggregation</ref>(shape,<sp/>scale,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_diffusion_limited_aggregation.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_diffusion_limited_aggregation.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/diffusion_limited_aggregation.cpp" line="14" column="7" bodyfile="HighMap/src/primitives/diffusion_limited_aggregation.cpp" bodystart="14" bodyend="100" declfile="HighMap/include/highmap/primitives.hpp" declline="319" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a2ed7a6b1be6d02101046f0623b374177" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::disk</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float radius, float slope=1.f, const Array *p_ctrl_param=nullptr, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, const Array *p_stretching=nullptr, Vec2&lt; float &gt; center={0.5f, 0.5f}, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>disk</name>
        <qualifiedname>hmap::disk</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>float</type>
          <declname>slope</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_ctrl_param</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>center</declname>
          <defval>{0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Generates a disk-shaped heightmap with optional modifications. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a 2D array representing a disk shape with a specified radius, slope, and other optional parameters such as control parameters, noise, and stretching for additional customization.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimensions of the output array (width, height). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>Radius of the disk, in normalized coordinates (0.0 to 1.0). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slope</parametername>
</parameternamelist>
<parameterdescription>
<para>Slope of the disk edge transition. A larger value makes the edge transition sharper. Defaults to 1.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_ctrl_param</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to an <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> controlling custom parameters for the disk generation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to an <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> for adding noise in the x-direction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to an <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> for adding noise in the y-direction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_stretching</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to an <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> for stretching the disk horizontally or vertically. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>Center of the disk in normalized coordinates (0.0 to 1.0). Defaults to {0.5, 0.5}. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Bounding box for the disk in normalized coordinates {x_min, x_max, y_min, y_max}. Defaults to {0.0, 1.0, 0.0, 1.0}.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A 2D array representing the generated disk shape.</para>
</simplesect>
<itemizedlist>
<listitem><para><bold>Example</bold> <programlisting filename="ex_disk.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radius<sp/>=<sp/>0.2f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ad1836a084a8607446ce029d32c02a201" kindref="member">slope</ref><sp/>=<sp/>6.f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1acffafcfa04738c04fdd82eea8aa262dc" kindref="member">hmap::disk</ref>(shape,<sp/>radius,<sp/><ref refid="namespacehmap_1ad1836a084a8607446ce029d32c02a201" kindref="member">slope</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z1.<ref refid="classhmap_1_1Array_1a3517b483a468873cefa73f7773a893ec" kindref="member">infos</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>control<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctrl_array<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(ctrl_array,<sp/>0.8f,<sp/>1.2f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/><ref refid="namespacehmap_1acffafcfa04738c04fdd82eea8aa262dc" kindref="member">hmap::disk</ref>(shape,<sp/>radius,<sp/><ref refid="namespacehmap_1ad1836a084a8607446ce029d32c02a201" kindref="member">slope</ref>,<sp/>&amp;ctrl_array);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_disk.png&quot;</highlight><highlight class="normal">,<sp/>{z1,<sp/>z2},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</listitem></itemizedlist>
</para>
<para><bold>Result</bold> <image type="html" name="ex_disk.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/primitives.cpp" line="71" column="7" bodyfile="HighMap/src/primitives/primitives.cpp" bodystart="71" bodyend="92" declfile="HighMap/include/highmap/primitives.hpp" declline="361" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a2b3fdb5bd6cbca1c8ed1b81052012ba3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gabor_noise</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float kw, float angle, int width, float density, uint seed)</argsstring>
        <name>gabor_noise</name>
        <qualifiedname>hmap::gabor_noise</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>kw</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>float</type>
          <declname>density</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <briefdescription>
<para>Return a sparse Gabor noise. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>Kernel wavenumber, with respect to a unit domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Kernel angle (in degree). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>Kernel width (in pixels). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>density</parametername>
</parameternamelist>
<parameterdescription>
<para>Spot noise density. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed number. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> New array.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_gabor_noise.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw<sp/>=<sp/>4.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref><sp/>=<sp/>30.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width<sp/>=<sp/>32;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>density<sp/>=<sp/>0.05f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a2b3fdb5bd6cbca1c8ed1b81052012ba3" kindref="member">hmap::gabor_noise</ref>(shape,<sp/>kw,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>width,<sp/>density,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_gabor_noise.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_gabor_noise.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/gabor.cpp" line="19" column="7" bodyfile="HighMap/src/primitives/gabor.cpp" bodystart="19" bodyend="30" declfile="HighMap/include/highmap/primitives.hpp" declline="388" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a45ca8d7a507e92e78d466f0d392f8ea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::gaussian_pulse</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float sigma, const Array *p_ctrl_param=nullptr, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, const Array *p_stretching=nullptr, Vec2&lt; float &gt; center={0.5f, 0.5f}, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>gaussian_pulse</name>
        <qualifiedname>hmap::gaussian_pulse</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_ctrl_param</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>center</declname>
          <defval>{0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Return a gaussian_decay pulse kernel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigma</parametername>
</parameternamelist>
<parameterdescription>
<para>Gaussian sigma (in pixels). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_ctrl_param</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the control parameter array (acts as a multiplier for the half-width parameter). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input noise arrays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_stretching</parametername>
</parameternamelist>
<parameterdescription>
<para>Local wavenumber multiplier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>Primitive reference center. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>Primitive reference center. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_gaussian_pulse.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigma<sp/>=<sp/>0.2f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1a45ca8d7a507e92e78d466f0d392f8ea3" kindref="member">hmap::gaussian_pulse</ref>(shape,<sp/>sigma);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>control<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctrl_array<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(ctrl_array,<sp/>0.5f,<sp/>1.5f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/><ref refid="namespacehmap_1a45ca8d7a507e92e78d466f0d392f8ea3" kindref="member">hmap::gaussian_pulse</ref>(shape,<sp/>sigma,<sp/>&amp;ctrl_array);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_gaussian_pulse.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z1,<sp/>z2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_gaussian_pulse.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/primitives.cpp" line="94" column="7" bodyfile="HighMap/src/primitives/primitives.cpp" bodystart="94" bodyend="114" declfile="HighMap/include/highmap/primitives.hpp" declline="415" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::noise</definition>
        <argsstring>(NoiseType noise_type, Vec2&lt; int &gt; shape, Vec2&lt; float &gt; kw, uint seed, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, const Array *p_stretching=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>noise</name>
        <qualifiedname>hmap::noise</qualifiedname>
        <param>
          <type><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195" kindref="member">NoiseType</ref></type>
          <declname>noise_type</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>kw</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Return an array filled with coherence noise. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>noise_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Noise type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>Noise wavenumbers {kx, ky} for each directions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input noise arrays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_stretching</parametername>
</parameternamelist>
<parameterdescription>
<para>Local wavenumber multiplier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Resulting array.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_noise.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::NoiseType&gt;<sp/>noise_list<sp/>=<sp/>{<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a2497d2d20bd2b0a346a71aa1ff5c0be7" kindref="member">hmap::NoiseType::PERLIN_BILLOW</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195acb1550fb6b10f55ed2d30b10e7ab65bb" kindref="member">hmap::NoiseType::PERLIN_HALF</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195ac5113a637d69eb3c549e6d561da167ed" kindref="member">hmap::NoiseType::SIMPLEX2</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a03f4fca6bab010831c1e90a0cce9dd80" kindref="member">hmap::NoiseType::SIMPLEX2S</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195add03c6de4abc2f9a84778572c433f4ca" kindref="member">hmap::NoiseType::VALUE</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195ad0d2c07cd30954b90b955e9432df0752" kindref="member">hmap::NoiseType::VALUE_CUBIC</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a21c0228de087e15358fc1a394892ba52" kindref="member">hmap::NoiseType::VALUE_DELAUNAY</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195ad0c8bb2f0b3f1b4ace48bcd5b7d159ed" kindref="member">hmap::NoiseType::VALUE_LINEAR</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a035bda7c8c2179b47b9a766531c2e89e" kindref="member">hmap::NoiseType::WORLEY</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a1d1ba101960a8a8234df2d16ac305d45" kindref="member">hmap::NoiseType::WORLEY_DOUBLE</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a803cca1f65b9596dbde7c54039773a39" kindref="member">hmap::NoiseType::WORLEY_VALUE</ref>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_noise.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/noise.cpp" line="16" column="7" bodyfile="HighMap/src/primitives/noise.cpp" bodystart="16" bodyend="39" declfile="HighMap/include/highmap/primitives.hpp" declline="442" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::noise_fbm</definition>
        <argsstring>(NoiseType noise_type, Vec2&lt; int &gt; shape, Vec2&lt; float &gt; kw, uint seed, int octaves=8, float weight=0.7f, float persistence=0.5f, float lacunarity=2.f, const Array *p_ctrl_param=nullptr, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, const Array *p_stretching=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>noise_fbm</name>
        <qualifiedname>hmap::noise_fbm</qualifiedname>
        <param>
          <type><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195" kindref="member">NoiseType</ref></type>
          <declname>noise_type</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>kw</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>int</type>
          <declname>octaves</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>float</type>
          <declname>weight</declname>
          <defval>0.7<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>persistence</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>lacunarity</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_ctrl_param</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Return an array filled with coherence fbm noise. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>noise_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Noise type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>Noise wavenumbers {kx, ky} for each directions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>octaves</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of octaves. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weigth</parametername>
</parameternamelist>
<parameterdescription>
<para>Octave weighting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>persistence</parametername>
</parameternamelist>
<parameterdescription>
<para>Octave persistence. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lacunarity</parametername>
</parameternamelist>
<parameterdescription>
<para>Defines the wavenumber ratio between each octaves. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_ctrl_param</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the control parameter array (acts as a multiplier for the weight parameter). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input noise arrays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_stretching</parametername>
</parameternamelist>
<parameterdescription>
<para>Local wavenumber multiplier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Fractal noise.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_noise_fbm.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::NoiseType&gt;<sp/>noise_list<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a2497d2d20bd2b0a346a71aa1ff5c0be7" kindref="member">hmap::NoiseType::PERLIN_BILLOW</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195acb1550fb6b10f55ed2d30b10e7ab65bb" kindref="member">hmap::NoiseType::PERLIN_HALF</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195ac5113a637d69eb3c549e6d561da167ed" kindref="member">hmap::NoiseType::SIMPLEX2</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a03f4fca6bab010831c1e90a0cce9dd80" kindref="member">hmap::NoiseType::SIMPLEX2S</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195add03c6de4abc2f9a84778572c433f4ca" kindref="member">hmap::NoiseType::VALUE</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195ad0d2c07cd30954b90b955e9432df0752" kindref="member">hmap::NoiseType::VALUE_CUBIC</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>too<sp/>slow,<sp/>do<sp/>not<sp/>use<sp/>---</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hmap::NoiseType::n_value_delaunay,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hmap::NoiseType::n_value_linear,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hmap::NoiseType::n_value_thinplate,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a035bda7c8c2179b47b9a766531c2e89e" kindref="member">hmap::NoiseType::WORLEY</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a1d1ba101960a8a8234df2d16ac305d45" kindref="member">hmap::NoiseType::WORLEY_DOUBLE</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a803cca1f65b9596dbde7c54039773a39" kindref="member">hmap::NoiseType::WORLEY_VALUE</ref>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ctrl_array<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(ctrl_array);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fbm</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(noise_type,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.7f,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.5f,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.f,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;ctrl_array);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>iq</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1ab078210e784284a05d8cb7c1ae993c51" kindref="member">hmap::noise_iq</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>jordan</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a01e4bb17d3969964545796ffb2658a77" kindref="member">hmap::noise_jordan</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm2.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pingpong</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a97d944f42fcf5ed55a9052969bae936b" kindref="member">hmap::noise_pingpong</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm3.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ridged</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a7e2cad4ea77481f469f5a669b8a7d99f" kindref="member">hmap::noise_ridged</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm4.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>swiss</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a72c962b85c05f22e90ec305b058139ea" kindref="member">hmap::noise_swiss</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm5.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Parberry</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1ae8dc6a5fc536f2fdb6c3ba39408f1425" kindref="member">hmap::noise_parberry</ref>(shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>n.to_png(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm6.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_noise_fbm0.png"></image>
 <image type="html" name="ex_noise_fbm1.png"></image>
 <image type="html" name="ex_noise_fbm2.png"></image>
 <image type="html" name="ex_noise_fbm3.png"></image>
 <image type="html" name="ex_noise_fbm4.png"></image>
 <image type="html" name="ex_noise_fbm5.png"></image>
 <image type="html" name="ex_noise_fbm6.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/noise.cpp" line="41" column="7" bodyfile="HighMap/src/primitives/noise.cpp" bodystart="41" bodyend="75" declfile="HighMap/include/highmap/primitives.hpp" declline="482" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ab078210e784284a05d8cb7c1ae993c51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::noise_iq</definition>
        <argsstring>(NoiseType noise_type, Vec2&lt; int &gt; shape, Vec2&lt; float &gt; kw, uint seed, int octaves=8, float weight=0.7f, float persistence=0.5f, float lacunarity=2.f, float gradient_scale=0.05f, const Array *p_ctrl_param=nullptr, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, const Array *p_stretching=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>noise_iq</name>
        <qualifiedname>hmap::noise_iq</qualifiedname>
        <param>
          <type><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195" kindref="member">NoiseType</ref></type>
          <declname>noise_type</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>kw</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>int</type>
          <declname>octaves</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>float</type>
          <declname>weight</declname>
          <defval>0.7<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>persistence</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>lacunarity</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>gradient_scale</declname>
          <defval>0.05<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_ctrl_param</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Return an array filled with coherence fbm noise. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>noise_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Noise type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>Noise wavenumbers {kx, ky} for each directions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>octaves</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of octaves. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weigth</parametername>
</parameternamelist>
<parameterdescription>
<para>Octave weighting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>persistence</parametername>
</parameternamelist>
<parameterdescription>
<para>Octave persistence. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lacunarity</parametername>
</parameternamelist>
<parameterdescription>
<para>Defines the wavenumber ratio between each octaves. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gradient_scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Gradient scale. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_ctrl_param</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the control parameter array (acts as a multiplier for the weight parameter). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input noise arrays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_stretching</parametername>
</parameternamelist>
<parameterdescription>
<para>Local wavenumber multiplier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Fractal noise.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_noise_fbm.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::NoiseType&gt;<sp/>noise_list<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a2497d2d20bd2b0a346a71aa1ff5c0be7" kindref="member">hmap::NoiseType::PERLIN_BILLOW</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195acb1550fb6b10f55ed2d30b10e7ab65bb" kindref="member">hmap::NoiseType::PERLIN_HALF</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195ac5113a637d69eb3c549e6d561da167ed" kindref="member">hmap::NoiseType::SIMPLEX2</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a03f4fca6bab010831c1e90a0cce9dd80" kindref="member">hmap::NoiseType::SIMPLEX2S</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195add03c6de4abc2f9a84778572c433f4ca" kindref="member">hmap::NoiseType::VALUE</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195ad0d2c07cd30954b90b955e9432df0752" kindref="member">hmap::NoiseType::VALUE_CUBIC</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>too<sp/>slow,<sp/>do<sp/>not<sp/>use<sp/>---</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hmap::NoiseType::n_value_delaunay,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hmap::NoiseType::n_value_linear,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hmap::NoiseType::n_value_thinplate,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a035bda7c8c2179b47b9a766531c2e89e" kindref="member">hmap::NoiseType::WORLEY</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a1d1ba101960a8a8234df2d16ac305d45" kindref="member">hmap::NoiseType::WORLEY_DOUBLE</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a803cca1f65b9596dbde7c54039773a39" kindref="member">hmap::NoiseType::WORLEY_VALUE</ref>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ctrl_array<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(ctrl_array);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fbm</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(noise_type,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.7f,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.5f,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.f,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;ctrl_array);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>iq</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1ab078210e784284a05d8cb7c1ae993c51" kindref="member">hmap::noise_iq</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>jordan</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a01e4bb17d3969964545796ffb2658a77" kindref="member">hmap::noise_jordan</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm2.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pingpong</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a97d944f42fcf5ed55a9052969bae936b" kindref="member">hmap::noise_pingpong</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm3.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ridged</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a7e2cad4ea77481f469f5a669b8a7d99f" kindref="member">hmap::noise_ridged</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm4.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>swiss</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a72c962b85c05f22e90ec305b058139ea" kindref="member">hmap::noise_swiss</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm5.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Parberry</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1ae8dc6a5fc536f2fdb6c3ba39408f1425" kindref="member">hmap::noise_parberry</ref>(shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>n.to_png(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm6.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_noise_fbm0.png"></image>
 <image type="html" name="ex_noise_fbm1.png"></image>
 <image type="html" name="ex_noise_fbm2.png"></image>
 <image type="html" name="ex_noise_fbm3.png"></image>
 <image type="html" name="ex_noise_fbm4.png"></image>
 <image type="html" name="ex_noise_fbm5.png"></image>
 <image type="html" name="ex_noise_fbm6.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/noise.cpp" line="77" column="7" bodyfile="HighMap/src/primitives/noise.cpp" bodystart="77" bodyend="113" declfile="HighMap/include/highmap/primitives.hpp" declline="528" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a01e4bb17d3969964545796ffb2658a77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::noise_jordan</definition>
        <argsstring>(NoiseType noise_type, Vec2&lt; int &gt; shape, Vec2&lt; float &gt; kw, uint seed, int octaves=8, float weight=0.7f, float persistence=0.5f, float lacunarity=2.f, float warp0=0.4f, float damp0=1.f, float warp_scale=0.4f, float damp_scale=1.f, const Array *p_ctrl_param=nullptr, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, const Array *p_stretching=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>noise_jordan</name>
        <qualifiedname>hmap::noise_jordan</qualifiedname>
        <param>
          <type><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195" kindref="member">NoiseType</ref></type>
          <declname>noise_type</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>kw</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>int</type>
          <declname>octaves</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>float</type>
          <declname>weight</declname>
          <defval>0.7<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>persistence</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>lacunarity</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>warp0</declname>
          <defval>0.4<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>damp0</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>warp_scale</declname>
          <defval>0.4<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>damp_scale</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_ctrl_param</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Return an array filled with coherence fbm noise. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>noise_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Noise type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>Noise wavenumbers {kx, ky} for each directions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>octaves</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of octaves. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weigth</parametername>
</parameternamelist>
<parameterdescription>
<para>Octave weighting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>persistence</parametername>
</parameternamelist>
<parameterdescription>
<para>Octave persistence. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lacunarity</parametername>
</parameternamelist>
<parameterdescription>
<para>Defines the wavenumber ratio between each octaves. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>warp0</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial warp scale. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>damp0</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial damp scale. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>warp_scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Warp scale. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>damp_scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Damp scale. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_ctrl_param</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the control parameter array (acts as a multiplier for the weight parameter). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input noise arrays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_stretching</parametername>
</parameternamelist>
<parameterdescription>
<para>Local wavenumber multiplier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Fractal noise.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_noise_fbm.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::NoiseType&gt;<sp/>noise_list<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a2497d2d20bd2b0a346a71aa1ff5c0be7" kindref="member">hmap::NoiseType::PERLIN_BILLOW</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195acb1550fb6b10f55ed2d30b10e7ab65bb" kindref="member">hmap::NoiseType::PERLIN_HALF</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195ac5113a637d69eb3c549e6d561da167ed" kindref="member">hmap::NoiseType::SIMPLEX2</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a03f4fca6bab010831c1e90a0cce9dd80" kindref="member">hmap::NoiseType::SIMPLEX2S</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195add03c6de4abc2f9a84778572c433f4ca" kindref="member">hmap::NoiseType::VALUE</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195ad0d2c07cd30954b90b955e9432df0752" kindref="member">hmap::NoiseType::VALUE_CUBIC</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>too<sp/>slow,<sp/>do<sp/>not<sp/>use<sp/>---</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hmap::NoiseType::n_value_delaunay,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hmap::NoiseType::n_value_linear,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hmap::NoiseType::n_value_thinplate,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a035bda7c8c2179b47b9a766531c2e89e" kindref="member">hmap::NoiseType::WORLEY</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a1d1ba101960a8a8234df2d16ac305d45" kindref="member">hmap::NoiseType::WORLEY_DOUBLE</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a803cca1f65b9596dbde7c54039773a39" kindref="member">hmap::NoiseType::WORLEY_VALUE</ref>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ctrl_array<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(ctrl_array);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fbm</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(noise_type,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.7f,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.5f,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.f,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;ctrl_array);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>iq</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1ab078210e784284a05d8cb7c1ae993c51" kindref="member">hmap::noise_iq</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>jordan</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a01e4bb17d3969964545796ffb2658a77" kindref="member">hmap::noise_jordan</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm2.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pingpong</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a97d944f42fcf5ed55a9052969bae936b" kindref="member">hmap::noise_pingpong</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm3.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ridged</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a7e2cad4ea77481f469f5a669b8a7d99f" kindref="member">hmap::noise_ridged</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm4.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>swiss</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a72c962b85c05f22e90ec305b058139ea" kindref="member">hmap::noise_swiss</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm5.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Parberry</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1ae8dc6a5fc536f2fdb6c3ba39408f1425" kindref="member">hmap::noise_parberry</ref>(shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>n.to_png(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm6.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_noise_fbm0.png"></image>
 <image type="html" name="ex_noise_fbm1.png"></image>
 <image type="html" name="ex_noise_fbm2.png"></image>
 <image type="html" name="ex_noise_fbm3.png"></image>
 <image type="html" name="ex_noise_fbm4.png"></image>
 <image type="html" name="ex_noise_fbm5.png"></image>
 <image type="html" name="ex_noise_fbm6.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/noise.cpp" line="115" column="7" bodyfile="HighMap/src/primitives/noise.cpp" bodystart="115" bodyend="157" declfile="HighMap/include/highmap/primitives.hpp" declline="578" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ae8dc6a5fc536f2fdb6c3ba39408f1425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::noise_parberry</definition>
        <argsstring>(Vec2&lt; int &gt; shape, Vec2&lt; float &gt; kw, uint seed, int octaves=8, float weight=0.7f, float persistence=0.5f, float lacunarity=2.f, float mu=1.02f, const Array *p_ctrl_param=nullptr, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, const Array *p_stretching=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>noise_parberry</name>
        <qualifiedname>hmap::noise_parberry</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>kw</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>int</type>
          <declname>octaves</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>float</type>
          <declname>weight</declname>
          <defval>0.7<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>persistence</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>lacunarity</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>mu</declname>
          <defval>1.02<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_ctrl_param</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Return an array filled with coherent fbm Parberry variant of Perlin noise. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>Noise wavenumbers {kx, ky} for each directions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>octaves</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of octaves. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weigth</parametername>
</parameternamelist>
<parameterdescription>
<para>Octave weighting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>persistence</parametername>
</parameternamelist>
<parameterdescription>
<para>Octave persistence. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lacunarity</parametername>
</parameternamelist>
<parameterdescription>
<para>Defines the wavenumber ratio between each octaves. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mu</parametername>
</parameternamelist>
<parameterdescription>
<para>Gradient magnitude exponent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_ctrl_param</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the control parameter array (acts as a multiplier for the weight parameter). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input noise arrays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_stretching</parametername>
</parameternamelist>
<parameterdescription>
<para>Local wavenumber multiplier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Fractal noise.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_noise_fbm.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::NoiseType&gt;<sp/>noise_list<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a2497d2d20bd2b0a346a71aa1ff5c0be7" kindref="member">hmap::NoiseType::PERLIN_BILLOW</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195acb1550fb6b10f55ed2d30b10e7ab65bb" kindref="member">hmap::NoiseType::PERLIN_HALF</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195ac5113a637d69eb3c549e6d561da167ed" kindref="member">hmap::NoiseType::SIMPLEX2</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a03f4fca6bab010831c1e90a0cce9dd80" kindref="member">hmap::NoiseType::SIMPLEX2S</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195add03c6de4abc2f9a84778572c433f4ca" kindref="member">hmap::NoiseType::VALUE</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195ad0d2c07cd30954b90b955e9432df0752" kindref="member">hmap::NoiseType::VALUE_CUBIC</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>too<sp/>slow,<sp/>do<sp/>not<sp/>use<sp/>---</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hmap::NoiseType::n_value_delaunay,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hmap::NoiseType::n_value_linear,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hmap::NoiseType::n_value_thinplate,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a035bda7c8c2179b47b9a766531c2e89e" kindref="member">hmap::NoiseType::WORLEY</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a1d1ba101960a8a8234df2d16ac305d45" kindref="member">hmap::NoiseType::WORLEY_DOUBLE</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a803cca1f65b9596dbde7c54039773a39" kindref="member">hmap::NoiseType::WORLEY_VALUE</ref>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ctrl_array<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(ctrl_array);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fbm</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(noise_type,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.7f,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.5f,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.f,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;ctrl_array);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>iq</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1ab078210e784284a05d8cb7c1ae993c51" kindref="member">hmap::noise_iq</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>jordan</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a01e4bb17d3969964545796ffb2658a77" kindref="member">hmap::noise_jordan</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm2.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pingpong</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a97d944f42fcf5ed55a9052969bae936b" kindref="member">hmap::noise_pingpong</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm3.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ridged</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a7e2cad4ea77481f469f5a669b8a7d99f" kindref="member">hmap::noise_ridged</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm4.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>swiss</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a72c962b85c05f22e90ec305b058139ea" kindref="member">hmap::noise_swiss</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm5.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Parberry</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1ae8dc6a5fc536f2fdb6c3ba39408f1425" kindref="member">hmap::noise_parberry</ref>(shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>n.to_png(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm6.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_noise_fbm0.png"></image>
 <image type="html" name="ex_noise_fbm1.png"></image>
 <image type="html" name="ex_noise_fbm2.png"></image>
 <image type="html" name="ex_noise_fbm3.png"></image>
 <image type="html" name="ex_noise_fbm4.png"></image>
 <image type="html" name="ex_noise_fbm5.png"></image>
 <image type="html" name="ex_noise_fbm6.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/noise.cpp" line="159" column="7" bodyfile="HighMap/src/primitives/noise.cpp" bodystart="159" bodyend="192" declfile="HighMap/include/highmap/primitives.hpp" declline="628" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a97d944f42fcf5ed55a9052969bae936b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::noise_pingpong</definition>
        <argsstring>(NoiseType noise_type, Vec2&lt; int &gt; shape, Vec2&lt; float &gt; kw, uint seed, int octaves=8, float weight=0.7f, float persistence=0.5f, float lacunarity=2.f, const Array *p_ctrl_param=nullptr, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, const Array *p_stretching=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>noise_pingpong</name>
        <qualifiedname>hmap::noise_pingpong</qualifiedname>
        <param>
          <type><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195" kindref="member">NoiseType</ref></type>
          <declname>noise_type</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>kw</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>int</type>
          <declname>octaves</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>float</type>
          <declname>weight</declname>
          <defval>0.7<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>persistence</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>lacunarity</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_ctrl_param</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Return an array filled with coherence fbm pingpong noise. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>noise_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Noise type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>Noise wavenumbers {kx, ky} for each directions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>octaves</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of octaves. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weigth</parametername>
</parameternamelist>
<parameterdescription>
<para>Octave weighting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>persistence</parametername>
</parameternamelist>
<parameterdescription>
<para>Octave persistence. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lacunarity</parametername>
</parameternamelist>
<parameterdescription>
<para>Defines the wavenumber ratio between each octaves. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_ctrl_param</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the control parameter array (acts as a multiplier for the weight parameter). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input noise arrays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_stretching</parametername>
</parameternamelist>
<parameterdescription>
<para>Local wavenumber multiplier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Fractal noise.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_noise_fbm.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::NoiseType&gt;<sp/>noise_list<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a2497d2d20bd2b0a346a71aa1ff5c0be7" kindref="member">hmap::NoiseType::PERLIN_BILLOW</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195acb1550fb6b10f55ed2d30b10e7ab65bb" kindref="member">hmap::NoiseType::PERLIN_HALF</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195ac5113a637d69eb3c549e6d561da167ed" kindref="member">hmap::NoiseType::SIMPLEX2</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a03f4fca6bab010831c1e90a0cce9dd80" kindref="member">hmap::NoiseType::SIMPLEX2S</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195add03c6de4abc2f9a84778572c433f4ca" kindref="member">hmap::NoiseType::VALUE</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195ad0d2c07cd30954b90b955e9432df0752" kindref="member">hmap::NoiseType::VALUE_CUBIC</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>too<sp/>slow,<sp/>do<sp/>not<sp/>use<sp/>---</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hmap::NoiseType::n_value_delaunay,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hmap::NoiseType::n_value_linear,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hmap::NoiseType::n_value_thinplate,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a035bda7c8c2179b47b9a766531c2e89e" kindref="member">hmap::NoiseType::WORLEY</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a1d1ba101960a8a8234df2d16ac305d45" kindref="member">hmap::NoiseType::WORLEY_DOUBLE</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a803cca1f65b9596dbde7c54039773a39" kindref="member">hmap::NoiseType::WORLEY_VALUE</ref>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ctrl_array<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(ctrl_array);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fbm</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(noise_type,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.7f,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.5f,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.f,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;ctrl_array);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>iq</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1ab078210e784284a05d8cb7c1ae993c51" kindref="member">hmap::noise_iq</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>jordan</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a01e4bb17d3969964545796ffb2658a77" kindref="member">hmap::noise_jordan</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm2.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pingpong</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a97d944f42fcf5ed55a9052969bae936b" kindref="member">hmap::noise_pingpong</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm3.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ridged</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a7e2cad4ea77481f469f5a669b8a7d99f" kindref="member">hmap::noise_ridged</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm4.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>swiss</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a72c962b85c05f22e90ec305b058139ea" kindref="member">hmap::noise_swiss</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm5.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Parberry</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1ae8dc6a5fc536f2fdb6c3ba39408f1425" kindref="member">hmap::noise_parberry</ref>(shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>n.to_png(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm6.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_noise_fbm0.png"></image>
 <image type="html" name="ex_noise_fbm1.png"></image>
 <image type="html" name="ex_noise_fbm2.png"></image>
 <image type="html" name="ex_noise_fbm3.png"></image>
 <image type="html" name="ex_noise_fbm4.png"></image>
 <image type="html" name="ex_noise_fbm5.png"></image>
 <image type="html" name="ex_noise_fbm6.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/noise.cpp" line="194" column="7" bodyfile="HighMap/src/primitives/noise.cpp" bodystart="194" bodyend="228" declfile="HighMap/include/highmap/primitives.hpp" declline="673" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a7e2cad4ea77481f469f5a669b8a7d99f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::noise_ridged</definition>
        <argsstring>(NoiseType noise_type, Vec2&lt; int &gt; shape, Vec2&lt; float &gt; kw, uint seed, int octaves=8, float weight=0.7f, float persistence=0.5f, float lacunarity=2.f, float k_smoothing=0.1f, const Array *p_ctrl_param=nullptr, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, const Array *p_stretching=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>noise_ridged</name>
        <qualifiedname>hmap::noise_ridged</qualifiedname>
        <param>
          <type><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195" kindref="member">NoiseType</ref></type>
          <declname>noise_type</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>kw</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>int</type>
          <declname>octaves</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>float</type>
          <declname>weight</declname>
          <defval>0.7<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>persistence</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>lacunarity</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>k_smoothing</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_ctrl_param</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Return an array filled with coherence fbm ridged noise. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>noise_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Noise type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>Noise wavenumbers {kx, ky} for each directions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>octaves</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of octaves. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weigth</parametername>
</parameternamelist>
<parameterdescription>
<para>Octave weighting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>persistence</parametername>
</parameternamelist>
<parameterdescription>
<para>Octave persistence. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lacunarity</parametername>
</parameternamelist>
<parameterdescription>
<para>Defines the wavenumber ratio between each octaves. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k_smoothing</parametername>
</parameternamelist>
<parameterdescription>
<para>Smoothing parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_ctrl_param</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the control parameter array (acts as a multiplier for the weight parameter). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input noise arrays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_stretching</parametername>
</parameternamelist>
<parameterdescription>
<para>Local wavenumber multiplier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Fractal noise.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_noise_fbm.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::NoiseType&gt;<sp/>noise_list<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a2497d2d20bd2b0a346a71aa1ff5c0be7" kindref="member">hmap::NoiseType::PERLIN_BILLOW</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195acb1550fb6b10f55ed2d30b10e7ab65bb" kindref="member">hmap::NoiseType::PERLIN_HALF</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195ac5113a637d69eb3c549e6d561da167ed" kindref="member">hmap::NoiseType::SIMPLEX2</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a03f4fca6bab010831c1e90a0cce9dd80" kindref="member">hmap::NoiseType::SIMPLEX2S</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195add03c6de4abc2f9a84778572c433f4ca" kindref="member">hmap::NoiseType::VALUE</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195ad0d2c07cd30954b90b955e9432df0752" kindref="member">hmap::NoiseType::VALUE_CUBIC</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>too<sp/>slow,<sp/>do<sp/>not<sp/>use<sp/>---</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hmap::NoiseType::n_value_delaunay,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hmap::NoiseType::n_value_linear,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hmap::NoiseType::n_value_thinplate,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a035bda7c8c2179b47b9a766531c2e89e" kindref="member">hmap::NoiseType::WORLEY</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a1d1ba101960a8a8234df2d16ac305d45" kindref="member">hmap::NoiseType::WORLEY_DOUBLE</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a803cca1f65b9596dbde7c54039773a39" kindref="member">hmap::NoiseType::WORLEY_VALUE</ref>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ctrl_array<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(ctrl_array);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fbm</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(noise_type,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.7f,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.5f,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.f,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;ctrl_array);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>iq</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1ab078210e784284a05d8cb7c1ae993c51" kindref="member">hmap::noise_iq</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>jordan</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a01e4bb17d3969964545796ffb2658a77" kindref="member">hmap::noise_jordan</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm2.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pingpong</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a97d944f42fcf5ed55a9052969bae936b" kindref="member">hmap::noise_pingpong</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm3.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ridged</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a7e2cad4ea77481f469f5a669b8a7d99f" kindref="member">hmap::noise_ridged</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm4.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>swiss</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a72c962b85c05f22e90ec305b058139ea" kindref="member">hmap::noise_swiss</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm5.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Parberry</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1ae8dc6a5fc536f2fdb6c3ba39408f1425" kindref="member">hmap::noise_parberry</ref>(shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>n.to_png(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm6.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_noise_fbm0.png"></image>
 <image type="html" name="ex_noise_fbm1.png"></image>
 <image type="html" name="ex_noise_fbm2.png"></image>
 <image type="html" name="ex_noise_fbm3.png"></image>
 <image type="html" name="ex_noise_fbm4.png"></image>
 <image type="html" name="ex_noise_fbm5.png"></image>
 <image type="html" name="ex_noise_fbm6.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/noise.cpp" line="230" column="7" bodyfile="HighMap/src/primitives/noise.cpp" bodystart="230" bodyend="266" declfile="HighMap/include/highmap/primitives.hpp" declline="719" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a72c962b85c05f22e90ec305b058139ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::noise_swiss</definition>
        <argsstring>(NoiseType noise_type, Vec2&lt; int &gt; shape, Vec2&lt; float &gt; kw, uint seed, int octaves=8, float weight=0.7f, float persistence=0.5f, float lacunarity=2.f, float warp_scale=0.1f, const Array *p_ctrl_param=nullptr, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, const Array *p_stretching=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>noise_swiss</name>
        <qualifiedname>hmap::noise_swiss</qualifiedname>
        <param>
          <type><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195" kindref="member">NoiseType</ref></type>
          <declname>noise_type</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>kw</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>int</type>
          <declname>octaves</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>float</type>
          <declname>weight</declname>
          <defval>0.7<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>persistence</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>lacunarity</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>warp_scale</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_ctrl_param</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Return an array filled with coherence fbm swiss noise. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>noise_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Noise type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>Noise wavenumbers {kx, ky} for each directions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>octaves</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of octaves. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weigth</parametername>
</parameternamelist>
<parameterdescription>
<para>Octave weighting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>persistence</parametername>
</parameternamelist>
<parameterdescription>
<para>Octave persistence. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lacunarity</parametername>
</parameternamelist>
<parameterdescription>
<para>Defines the wavenumber ratio between each octaves. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>warp_scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Warp scale. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_ctrl_param</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the control parameter array (acts as a multiplier for the weight parameter). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input noise arrays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_stretching</parametername>
</parameternamelist>
<parameterdescription>
<para>Local wavenumber multiplier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Fractal noise.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_noise_fbm.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::NoiseType&gt;<sp/>noise_list<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a2497d2d20bd2b0a346a71aa1ff5c0be7" kindref="member">hmap::NoiseType::PERLIN_BILLOW</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195acb1550fb6b10f55ed2d30b10e7ab65bb" kindref="member">hmap::NoiseType::PERLIN_HALF</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195ac5113a637d69eb3c549e6d561da167ed" kindref="member">hmap::NoiseType::SIMPLEX2</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a03f4fca6bab010831c1e90a0cce9dd80" kindref="member">hmap::NoiseType::SIMPLEX2S</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195add03c6de4abc2f9a84778572c433f4ca" kindref="member">hmap::NoiseType::VALUE</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195ad0d2c07cd30954b90b955e9432df0752" kindref="member">hmap::NoiseType::VALUE_CUBIC</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>too<sp/>slow,<sp/>do<sp/>not<sp/>use<sp/>---</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hmap::NoiseType::n_value_delaunay,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hmap::NoiseType::n_value_linear,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hmap::NoiseType::n_value_thinplate,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a035bda7c8c2179b47b9a766531c2e89e" kindref="member">hmap::NoiseType::WORLEY</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a1d1ba101960a8a8234df2d16ac305d45" kindref="member">hmap::NoiseType::WORLEY_DOUBLE</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a803cca1f65b9596dbde7c54039773a39" kindref="member">hmap::NoiseType::WORLEY_VALUE</ref>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ctrl_array<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(ctrl_array);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fbm</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(noise_type,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.7f,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.5f,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.f,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;ctrl_array);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>iq</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1ab078210e784284a05d8cb7c1ae993c51" kindref="member">hmap::noise_iq</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>jordan</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a01e4bb17d3969964545796ffb2658a77" kindref="member">hmap::noise_jordan</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm2.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pingpong</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a97d944f42fcf5ed55a9052969bae936b" kindref="member">hmap::noise_pingpong</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm3.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ridged</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a7e2cad4ea77481f469f5a669b8a7d99f" kindref="member">hmap::noise_ridged</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm4.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>swiss</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref>(0,<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;noise_type<sp/>:<sp/>noise_list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1a72c962b85c05f22e90ec305b058139ea" kindref="member">hmap::noise_swiss</ref>(noise_type,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad6fc7fb24960fa6a45bc657ae2d89f80" kindref="member">hstack</ref>(z,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm5.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Parberry</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="namespacehmap_1ae8dc6a5fc536f2fdb6c3ba39408f1425" kindref="member">hmap::noise_parberry</ref>(shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>n.to_png(</highlight><highlight class="stringliteral">&quot;ex_noise_fbm6.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_noise_fbm0.png"></image>
 <image type="html" name="ex_noise_fbm1.png"></image>
 <image type="html" name="ex_noise_fbm2.png"></image>
 <image type="html" name="ex_noise_fbm3.png"></image>
 <image type="html" name="ex_noise_fbm4.png"></image>
 <image type="html" name="ex_noise_fbm5.png"></image>
 <image type="html" name="ex_noise_fbm6.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/noise.cpp" line="268" column="7" bodyfile="HighMap/src/primitives/noise.cpp" bodystart="268" bodyend="304" declfile="HighMap/include/highmap/primitives.hpp" declline="766" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ad193bc2ad91f74c90550a260e1644687" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::paraboloid</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float angle, float a, float b, float v0=0.f, bool reverse_x=false, bool reverse_y=false, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, const Array *p_stretching=nullptr, Vec2&lt; float &gt; center={0.5f, 0.5f}, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>paraboloid</name>
        <qualifiedname>hmap::paraboloid</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v0</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>reverse_x</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>reverse_y</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>center</declname>
          <defval>{0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Return a paraboloid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation angle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Curvature parameter, first principal axis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Curvature parameter, second principal axis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v0</parametername>
</parameternamelist>
<parameterdescription>
<para>Value at the paraboloid center. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reverse_x</parametername>
</parameternamelist>
<parameterdescription>
<para>Reverse coefficient of first principal axis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reverse_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Reverse coefficient of second principal axis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_base_elevation</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the control parameter array (acts as a multiplier for the weight parameter). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input noise arrays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_stretching</parametername>
</parameternamelist>
<parameterdescription>
<para>Local wavenumber multiplier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>Primitive reference center. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Output array.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_paraboloid.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref><sp/>=<sp/>15.f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1ad193bc2ad91f74c90550a260e1644687" kindref="member">hmap::paraboloid</ref>(shape,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>1.f,<sp/>0.5f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.to_png(</highlight><highlight class="stringliteral">&quot;ex_paraboloid.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_paraboloid.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/primitives.cpp" line="116" column="7" bodyfile="HighMap/src/primitives/primitives.cpp" bodystart="116" bodyend="154" declfile="HighMap/include/highmap/primitives.hpp" declline="804" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a91a51449dbfee9d41f28dc7bb301aad6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::peak</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float radius, const Array *p_noise, float noise_r_amp, float noise_z_ratio, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>peak</name>
        <qualifiedname>hmap::peak</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise</declname>
        </param>
        <param>
          <type>float</type>
          <declname>noise_r_amp</declname>
        </param>
        <param>
          <type>float</type>
          <declname>noise_z_ratio</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Return a peak-shaped heightmap. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>Peak outer radius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input noise array used for domain warping (NOT in pixels, with respect to a unit domain). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>noise_amp_r</parametername>
</parameternamelist>
<parameterdescription>
<para>Radial noise absolute scale (in pixels). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>noise_ratio_z</parametername>
</parameternamelist>
<parameterdescription>
<para>Vertical noise relative scale (in [0, 1]). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Resulting array.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_peak.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>radius<sp/>=<sp/>64.f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref><sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noise_r_amp<sp/>=<sp/>16.f;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pixels</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noise_z_ratio<sp/>=<sp/>0.4f;<sp/></highlight><highlight class="comment">//<sp/>in<sp/>[0,<sp/>1]</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a91a51449dbfee9d41f28dc7bb301aad6" kindref="member">hmap::peak</ref>(shape,<sp/>radius,<sp/>&amp;<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>,<sp/>noise_r_amp,<sp/>noise_z_ratio);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_peak.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_peak.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/geo/geo.cpp" line="122" column="7" bodyfile="HighMap/src/primitives/geo/geo.cpp" bodystart="122" bodyend="161" declfile="HighMap/include/highmap/primitives.hpp" declline="835" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aa4b5afd141f31d3ac539a8e7cb5ea6d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::phasor</definition>
        <argsstring>(PhasorProfile phasor_profile, Vec2&lt; int &gt; shape, float kw, const Array &amp;angle, uint seed, float profile_delta=0.1f, float density_factor=1.f, float kernel_width_ratio=2.f, float phase_smoothing=2.f)</argsstring>
        <name>phasor</name>
        <qualifiedname>hmap::phasor</qualifiedname>
        <param>
          <type><ref refid="namespacehmap_1a67d6620c147710ebb09b64f0f738241a" kindref="member">PhasorProfile</ref></type>
          <declname>phasor_profile</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>kw</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>angle</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>float</type>
          <declname>profile_delta</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>density_factor</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>kernel_width_ratio</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>phase_smoothing</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Generates a phasor noise field based on a Gabor noise model and phase profile. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a phasor noise array using a Gabor kernel approach, applying a specified phase profile, smoothing, and density settings. The output is influenced by the shape, frequency, and various noise characteristics, allowing fine control over the generated noise field.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>phasor_profile</parametername>
</parameternamelist>
<parameterdescription>
<para>The phase profile to apply. Determines the type of phasor function used (e.g., bulky cosine, peaky cosine). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensions of the output array as a 2D vector (width x height). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>The wave number (frequency) of the Gabor kernel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>An array specifying the angle field for the Gabor kernel orientation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>A seed value for the random number generator used to create jittered spawn points for Gabor kernels. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>profile_delta</parametername>
</parameternamelist>
<parameterdescription>
<para>A parameter for adjusting the delta in the phase profile function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>density_factor</parametername>
</parameternamelist>
<parameterdescription>
<para>A scaling factor for the density of Gabor kernel spawn points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel_width_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>The ratio of the kernel width to the phase field resolution. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phase_smoothing</parametername>
</parameternamelist>
<parameterdescription>
<para>A factor for controlling the blending of the phase profile. Larger values result in smoother transitions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> containing the generated phasor noise field.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argumentIfaninvalid`phasor_profile`isprovided.</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>If the kernel width is too small (less than 4), the function returns a zeroed array.</para>
</simplesect>
The function performs the following steps:<itemizedlist>
<listitem><para>Generates Gabor kernel spawn points using jittered random sampling.</para>
</listitem><listitem><para>Constructs Gabor kernels based on the input angle field and applies them to noise arrays.</para>
</listitem><listitem><para>Computes a phase field from the Gabor noise using <computeroutput>atan2</computeroutput>.</para>
</listitem><listitem><para>Applies the specified phase profile using the <computeroutput>get_phasor_profile_function</computeroutput>.</para>
</listitem><listitem><para>Smooths the phase field if <computeroutput>phase_smoothing</computeroutput> is greater than zero.</para>
</listitem></itemizedlist>
</para>
<para><bold>Example</bold> <programlisting filename="ex_phasor.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw<sp/>=<sp/>2.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>(shape,<sp/>0.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::PhasorProfile&gt;<sp/>profiles<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a67d6620c147710ebb09b64f0f738241aad8f217eb3ab016f46b02f118cfaeadab" kindref="member">hmap::PhasorProfile::COSINE_BULKY</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a67d6620c147710ebb09b64f0f738241aa2bfa021bd5f24ce3410477d209f3e588" kindref="member">hmap::PhasorProfile::COSINE_PEAKY</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a67d6620c147710ebb09b64f0f738241aa29de9f23976831ac056abef76c1f8d2e" kindref="member">hmap::PhasorProfile::COSINE_STD</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a67d6620c147710ebb09b64f0f738241aa096fe4956a67b70c9db140472af0b6b0" kindref="member">hmap::PhasorProfile::COSINE_SQUARE</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a67d6620c147710ebb09b64f0f738241aa1ee22d304b9b93cd76da1fbc9d32a75a" kindref="member">hmap::PhasorProfile::TRIANGLE</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Array&gt;<sp/>arrays;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>:<sp/>profiles)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1aa4b5afd141f31d3ac539a8e7cb5ea6d4" kindref="member">hmap::phasor</ref>(p,<sp/>shape,<sp/>kw,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arrays.push_back(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fbm<sp/>phasor</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a0febf1835b6a00b31dfa837d855c6a6d" kindref="member">hmap::phasor_fbm</ref>(<ref refid="namespacehmap_1a67d6620c147710ebb09b64f0f738241aad8f217eb3ab016f46b02f118cfaeadab" kindref="member">hmap::PhasorProfile::COSINE_BULKY</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrays.push_back(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1ad7018857827d8e8d263516bbbd77630f" kindref="member">to_png_grayscale</ref>(</highlight><highlight class="stringliteral">&quot;out.png&quot;</highlight><highlight class="normal">,<sp/>CV_16U);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_phasor.png&quot;</highlight><highlight class="normal">,<sp/>arrays,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_phasor.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/phasor.cpp" line="16" column="7" bodyfile="HighMap/src/primitives/phasor.cpp" bodystart="16" bodyend="101" declfile="HighMap/include/highmap/primitives.hpp" declline="893" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a0febf1835b6a00b31dfa837d855c6a6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::phasor_fbm</definition>
        <argsstring>(PhasorProfile phasor_profile, Vec2&lt; int &gt; shape, float kw, const Array &amp;angle, uint seed, float profile_delta=0.1f, float density_factor=1.f, float kernel_width_ratio=2.f, float phase_smoothing=2.f, int octaves=8, float weight=0.7f, float persistence=0.5f, float lacunarity=2.f)</argsstring>
        <name>phasor_fbm</name>
        <qualifiedname>hmap::phasor_fbm</qualifiedname>
        <param>
          <type><ref refid="namespacehmap_1a67d6620c147710ebb09b64f0f738241a" kindref="member">PhasorProfile</ref></type>
          <declname>phasor_profile</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>kw</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>angle</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>float</type>
          <declname>profile_delta</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>density_factor</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>kernel_width_ratio</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>phase_smoothing</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>octaves</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>float</type>
          <declname>weight</declname>
          <defval>0.7<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>persistence</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>lacunarity</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Generates a fractal Brownian motion (fBm) noise field using layered phasor profiles. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>phasor_profile</parametername>
</parameternamelist>
<parameterdescription>
<para>The phase profile to apply for each noise layer (e.g., bulky cosine, peaky cosine). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensions of the output array as a 2D vector (width x height). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>The base wave number (frequency) for the first noise layer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>An array specifying the angle field for the Gabor kernel orientation in each layer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>A seed value for the random number generator used in all noise layers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>profile_delta</parametername>
</parameternamelist>
<parameterdescription>
<para>A parameter for adjusting the delta in the phase profile function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>density_factor</parametername>
</parameternamelist>
<parameterdescription>
<para>A scaling factor for the density of Gabor kernel spawn points in each layer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel_width_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>The ratio of the kernel width to the phase field resolution. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phase_smoothing</parametername>
</parameternamelist>
<parameterdescription>
<para>A factor for controlling the blending of the phase profile. Larger values result in smoother transitions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>octaves</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of noise layers (octaves) to generate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight</parametername>
</parameternamelist>
<parameterdescription>
<para>A factor for controlling amplitude adjustments based on the previous layer&apos;s values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>persistence</parametername>
</parameternamelist>
<parameterdescription>
<para>A factor controlling how amplitude decreases across successive octaves. Values &lt;1 cause rapid decay. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lacunarity</parametername>
</parameternamelist>
<parameterdescription>
<para>A factor controlling how frequency increases across successive octaves. Values &gt;1 cause rapid growth. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> containing the generated fBm noise field.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argumentIfaninvalid`phasor_profile`isprovidedtothe</parametername>
</parameternamelist>
<parameterdescription>
<para>underlying <computeroutput>phasor</computeroutput> function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_phasor.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw<sp/>=<sp/>2.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>(shape,<sp/>0.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::PhasorProfile&gt;<sp/>profiles<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a67d6620c147710ebb09b64f0f738241aad8f217eb3ab016f46b02f118cfaeadab" kindref="member">hmap::PhasorProfile::COSINE_BULKY</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a67d6620c147710ebb09b64f0f738241aa2bfa021bd5f24ce3410477d209f3e588" kindref="member">hmap::PhasorProfile::COSINE_PEAKY</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a67d6620c147710ebb09b64f0f738241aa29de9f23976831ac056abef76c1f8d2e" kindref="member">hmap::PhasorProfile::COSINE_STD</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a67d6620c147710ebb09b64f0f738241aa096fe4956a67b70c9db140472af0b6b0" kindref="member">hmap::PhasorProfile::COSINE_SQUARE</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a67d6620c147710ebb09b64f0f738241aa1ee22d304b9b93cd76da1fbc9d32a75a" kindref="member">hmap::PhasorProfile::TRIANGLE</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Array&gt;<sp/>arrays;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>:<sp/>profiles)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1aa4b5afd141f31d3ac539a8e7cb5ea6d4" kindref="member">hmap::phasor</ref>(p,<sp/>shape,<sp/>kw,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arrays.push_back(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fbm<sp/>phasor</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a0febf1835b6a00b31dfa837d855c6a6d" kindref="member">hmap::phasor_fbm</ref>(<ref refid="namespacehmap_1a67d6620c147710ebb09b64f0f738241aad8f217eb3ab016f46b02f118cfaeadab" kindref="member">hmap::PhasorProfile::COSINE_BULKY</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arrays.push_back(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1ad7018857827d8e8d263516bbbd77630f" kindref="member">to_png_grayscale</ref>(</highlight><highlight class="stringliteral">&quot;out.png&quot;</highlight><highlight class="normal">,<sp/>CV_16U);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_phasor.png&quot;</highlight><highlight class="normal">,<sp/>arrays,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_phasor.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/phasor.cpp" line="103" column="7" bodyfile="HighMap/src/primitives/phasor.cpp" bodystart="103" bodyend="151" declfile="HighMap/include/highmap/primitives.hpp" declline="947" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aecba6d5b355e2e041045bee54b495be7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::rectangle</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float rx, float ry, float angle, float slope=1.f, const Array *p_ctrl_param=nullptr, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, const Array *p_stretching=nullptr, Vec2&lt; float &gt; center={0.5f, 0.5f}, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>rectangle</name>
        <qualifiedname>hmap::rectangle</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rx</declname>
        </param>
        <param>
          <type>float</type>
          <declname>ry</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>float</type>
          <declname>slope</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_ctrl_param</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>center</declname>
          <defval>{0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Generates a rectangle-shaped heightmap with optional modifications. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a 2D array representing a rectangle with specified dimensions, rotation, and optional parameters for customization such as control parameters, noise, and stretching.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimensions of the output array (width, height). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rx</parametername>
</parameternamelist>
<parameterdescription>
<para>Half-width of the rectangle, in normalized coordinates (0.0 to 1.0). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ry</parametername>
</parameternamelist>
<parameterdescription>
<para>Half-height of the rectangle, in normalized coordinates (0.0 to 1.0). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation angle of the rectangle in radians. Positive values rotate counterclockwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slope</parametername>
</parameternamelist>
<parameterdescription>
<para>Slope of the rectangle edge transition. A larger value makes the edge transition sharper. Defaults to 1.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_ctrl_param</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to an <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> controlling custom parameters for the rectangle generation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to an <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> for adding noise in the x-direction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to an <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> for adding noise in the y-direction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_stretching</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to an <computeroutput><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></computeroutput> for stretching the rectangle horizontally or vertically. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>Center of the rectangle in normalized coordinates (0.0 to 1.0). Defaults to {0.5, 0.5}. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Bounding box for the rectangle in normalized coordinates {x_min, x_max, y_min, y_max}. Defaults to {0.0, 1.0, 0.0, 1.0}.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A 2D array representing the generated rectangle shape.<itemizedlist>
<listitem><para><bold>Example</bold> <programlisting filename="ex_rectangle.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rx<sp/>=<sp/>0.1f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ry<sp/>=<sp/>0.2f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref><sp/>=<sp/>15.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ad1836a084a8607446ce029d32c02a201" kindref="member">slope</ref><sp/>=<sp/>6.f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1aecba6d5b355e2e041045bee54b495be7" kindref="member">hmap::rectangle</ref>(shape,<sp/>rx,<sp/>ry,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/><ref refid="namespacehmap_1ad1836a084a8607446ce029d32c02a201" kindref="member">slope</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z1.<ref refid="classhmap_1_1Array_1a3517b483a468873cefa73f7773a893ec" kindref="member">infos</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>control<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctrl_array<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(ctrl_array,<sp/>0.8f,<sp/>1.2f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/><ref refid="namespacehmap_1aecba6d5b355e2e041045bee54b495be7" kindref="member">hmap::rectangle</ref>(shape,<sp/>rx,<sp/>ry,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/><ref refid="namespacehmap_1ad1836a084a8607446ce029d32c02a201" kindref="member">slope</ref>,<sp/>&amp;ctrl_array);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_rectangle.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z1,<sp/>z2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</listitem></itemizedlist>
</para>
</simplesect>
<bold>Result</bold> <image type="html" name="ex_rectangle.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/primitives.cpp" line="156" column="7" bodyfile="HighMap/src/primitives/primitives.cpp" bodystart="156" bodyend="179" declfile="HighMap/include/highmap/primitives.hpp" declline="999" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a6aad825029f99f3d44db149e88ba5a7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::rift</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float angle, float slope, float width, bool sharp_bottom=false, const Array *p_ctrl_param=nullptr, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, const Array *p_stretching=nullptr, Vec2&lt; float &gt; center={0.5f, 0.5f}, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>rift</name>
        <qualifiedname>hmap::rift</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>float</type>
          <declname>slope</declname>
        </param>
        <param>
          <type>float</type>
          <declname>width</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sharp_bottom</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_ctrl_param</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>center</declname>
          <defval>{0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Return a rift function (Heaviside with an optional talus slope at the transition). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Overall rotation angle (in degree). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slope</parametername>
</parameternamelist>
<parameterdescription>
<para>Step slope (assuming a unit domain). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>Rift width (assuming a unit domain). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sharp_bottom</parametername>
</parameternamelist>
<parameterdescription>
<para>Decide whether the rift bottom is sharp or not. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_ctrl_param</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the control parameter array (acts as a multiplier for the width parameter). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input noise arrays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_stretching</parametername>
</parameternamelist>
<parameterdescription>
<para>Local coordinate multiplier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>Primitive reference center. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> New array.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_rift.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref><sp/>=<sp/>30.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>talus<sp/>=<sp/>4.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width<sp/>=<sp/>0.1f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sharp_bottom<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kw<sp/>=<sp/>4.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref><sp/>=<sp/>0.2f<sp/>*<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{kw,<sp/>kw},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1a6aad825029f99f3d44db149e88ba5a7f" kindref="member">hmap::rift</ref>(shape,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>talus,<sp/>width);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a6aad825029f99f3d44db149e88ba5a7f" kindref="member">hmap::rift</ref>(shape,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>talus,<sp/>width,<sp/>sharp_bottom,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>control<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ctrl_array<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{kw,<sp/>kw},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(ctrl_array,<sp/>0.f,<sp/>1.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z3<sp/>=<sp/><ref refid="namespacehmap_1a6aad825029f99f3d44db149e88ba5a7f" kindref="member">hmap::rift</ref>(shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>talus,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>sharp<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;ctrl_array);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_rift.png&quot;</highlight><highlight class="normal">,<sp/>{z1,<sp/>z2,<sp/>z3},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_rift.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/primitives.cpp" line="181" column="7" bodyfile="HighMap/src/primitives/primitives.cpp" bodystart="181" bodyend="208" declfile="HighMap/include/highmap/primitives.hpp" declline="1034" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ad1836a084a8607446ce029d32c02a201" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::slope</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float angle, float slope, const Array *p_ctrl_param=nullptr, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, const Array *p_stretching=nullptr, Vec2&lt; float &gt; center={0.5f, 0.5f}, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>slope</name>
        <qualifiedname>hmap::slope</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>float</type>
          <declname>slope</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_ctrl_param</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>center</declname>
          <defval>{0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Return an array corresponding to a slope with a given overall. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Overall rotation angle (in degree). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slope</parametername>
</parameternamelist>
<parameterdescription>
<para>Slope (assuming a unit domain). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_ctrl_param</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the control parameter array (acts as a multiplier for the slope parameter). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input noise arrays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_stretching</parametername>
</parameternamelist>
<parameterdescription>
<para>Local coordinate multiplier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>Primitive reference center. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> New array.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_slope.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref><sp/>=<sp/>0.2f<sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1ad1836a084a8607446ce029d32c02a201" kindref="member">slope</ref><sp/>=<sp/>1.f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>oblique<sp/>=<sp/><ref refid="namespacehmap_1ad1836a084a8607446ce029d32c02a201" kindref="member">hmap::slope</ref>(shape,<sp/>30.f,<sp/><ref refid="namespacehmap_1ad1836a084a8607446ce029d32c02a201" kindref="member">slope</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>valley<sp/>=<sp/><ref refid="namespacehmap_1a9e903d1c88db888832bea8cbafb19246" kindref="member">maximum_smooth</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ad1836a084a8607446ce029d32c02a201" kindref="member">hmap::slope</ref>(shape,<sp/>0.f,<sp/><ref refid="namespacehmap_1ad1836a084a8607446ce029d32c02a201" kindref="member">slope</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>,<sp/>&amp;<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ad1836a084a8607446ce029d32c02a201" kindref="member">hmap::slope</ref>(shape,<sp/>90.f,<sp/><ref refid="namespacehmap_1ad1836a084a8607446ce029d32c02a201" kindref="member">slope</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>,<sp/>&amp;<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0.1f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>control<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ctrl_array<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(ctrl_array,<sp/>0.8f,<sp/>1.2f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>wctrl<sp/>=<sp/><ref refid="namespacehmap_1ad1836a084a8607446ce029d32c02a201" kindref="member">hmap::slope</ref>(shape,<sp/>30.f,<sp/><ref refid="namespacehmap_1ad1836a084a8607446ce029d32c02a201" kindref="member">slope</ref>,<sp/>&amp;ctrl_array);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_slope.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{oblique,<sp/>valley,<sp/>wctrl},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_slope.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/primitives.cpp" line="210" column="7" bodyfile="HighMap/src/primitives/primitives.cpp" bodystart="210" bodyend="231" declfile="HighMap/include/highmap/primitives.hpp" declline="1066" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ab00af49fafd706242919ea18dc4817ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::step</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float angle, float slope, const Array *p_ctrl_param=nullptr, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, const Array *p_stretching=nullptr, Vec2&lt; float &gt; center={0.5f, 0.5f}, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>step</name>
        <qualifiedname>hmap::step</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>float</type>
          <declname>slope</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_ctrl_param</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>center</declname>
          <defval>{0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Return a step function (Heaviside with an optional talus slope at the transition). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Overall rotation angle (in degree). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slope</parametername>
</parameternamelist>
<parameterdescription>
<para>Step slope (assuming a unit domain). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_ctrl_param</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the control parameter array (acts as a multiplier for the slope parameter). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input noise arrays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_stretching</parametername>
</parameternamelist>
<parameterdescription>
<para>Local coordinate multiplier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>Primitive reference center. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> New array.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_step.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref><sp/>=<sp/>30.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>talus<sp/>=<sp/>4.f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kw<sp/>=<sp/>4.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref><sp/>=<sp/>0.2f<sp/>*<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{kw,<sp/>kw},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1ab00af49fafd706242919ea18dc4817ee" kindref="member">hmap::step</ref>(shape,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>talus);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/><ref refid="namespacehmap_1ab00af49fafd706242919ea18dc4817ee" kindref="member">hmap::step</ref>(shape,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>talus,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>control<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ctrl_array<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{kw,<sp/>kw},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(ctrl_array,<sp/>0.8f,<sp/>1.2f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z3<sp/>=<sp/><ref refid="namespacehmap_1ab00af49fafd706242919ea18dc4817ee" kindref="member">hmap::step</ref>(shape,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>talus,<sp/>&amp;ctrl_array);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_step.png&quot;</highlight><highlight class="normal">,<sp/>{z1,<sp/>z2,<sp/>z3},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_step.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/primitives.cpp" line="233" column="7" bodyfile="HighMap/src/primitives/primitives.cpp" bodystart="233" bodyend="254" declfile="HighMap/include/highmap/primitives.hpp" declline="1097" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aa7f0f75c71d2248bf3fea0ba6c7ccb31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::swirl</definition>
        <argsstring>(Array &amp;dx, Array &amp;dy, float amplitude=1.f, float exponent=1.f, const Array *p_noise=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>swirl</name>
        <qualifiedname>hmap::swirl</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amplitude</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>exponent</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Generate displacements <computeroutput>dx</computeroutput> and <computeroutput>dy</computeroutput> to apply a swirl effect to another primitve. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dx[out]</parametername>
</parameternamelist>
<parameterdescription>
<para>&apos;x&apos; displacement (unit domain scale). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dy[out]</parametername>
</parameternamelist>
<parameterdescription>
<para>&apos;y&apos; displacement (unit domain scale). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amplitude</parametername>
</parameternamelist>
<parameterdescription>
<para>Displacement amplitude. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exponent</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance exponent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise</parametername>
</parameternamelist>
<parameterdescription>
<para>eference to the input noise array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_swirl.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref><sp/>=<sp/>0.5f<sp/>*<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>dx<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(shape);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>dy<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(shape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z0<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1aa7f0f75c71d2248bf3fea0ba6c7ccb31" kindref="member">hmap::swirl</ref>(dx,<sp/>dy,<sp/>1.f,<sp/>1.f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;dx,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;dy);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1aa7f0f75c71d2248bf3fea0ba6c7ccb31" kindref="member">hmap::swirl</ref>(dx,<sp/>dy,<sp/>1.f,<sp/>1.f,<sp/>&amp;<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;dx,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;dy);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_swirl.png&quot;</highlight><highlight class="normal">,<sp/>{z0,<sp/>z1,<sp/>z2},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_swirl.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/swirl.cpp" line="16" column="6" bodyfile="HighMap/src/primitives/swirl.cpp" bodystart="16" bodyend="59" declfile="HighMap/include/highmap/primitives.hpp" declline="1124" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a16a701ab5a740bd3dbfe7020fb388023" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::wave_dune</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float kw, float angle, float xtop, float xbottom, float phase_shift=0.f, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, const Array *p_stretching=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>wave_dune</name>
        <qualifiedname>hmap::wave_dune</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>kw</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>float</type>
          <declname>xtop</declname>
        </param>
        <param>
          <type>float</type>
          <declname>xbottom</declname>
        </param>
        <param>
          <type>float</type>
          <declname>phase_shift</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Return a dune shape wave. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>Wavenumber with respect to a unit domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Overall rotation angle (in degree). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xtop</parametername>
</parameternamelist>
<parameterdescription>
<para>Relative location of the top of the dune profile (in [0, 1]). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xbottom</parametername>
</parameternamelist>
<parameterdescription>
<para>Relative location of the foot of the dune profile (in [0, 1]). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phase_shift</parametername>
</parameternamelist>
<parameterdescription>
<para>Phase shift (in radians). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input noise arrays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_stretching</parametername>
</parameternamelist>
<parameterdescription>
<para>Local wavenumber multiplier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> New array. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/wave.cpp" line="15" column="7" bodyfile="HighMap/src/primitives/wave.cpp" bodystart="15" bodyend="41" declfile="HighMap/include/highmap/primitives.hpp" declline="1147" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a0fac1251f8728228be8de58ac16846d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::wave_sine</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float kw, float angle, float phase_shift=0.f, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, const Array *p_stretching=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>wave_sine</name>
        <qualifiedname>hmap::wave_sine</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>kw</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>float</type>
          <declname>phase_shift</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Return a sine wave. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>Wavenumber with respect to a unit domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Overall rotation angle (in degree). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phase_shift</parametername>
</parameternamelist>
<parameterdescription>
<para>Phase shift (in radians). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input noise arrays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_stretching</parametername>
</parameternamelist>
<parameterdescription>
<para>Local wavenumber multiplier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> New array.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_wave.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kw<sp/>=<sp/>4.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref><sp/>=<sp/>30.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref><sp/>=<sp/>0.1f<sp/>*<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{kw,<sp/>kw},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zt<sp/>=<sp/><ref refid="namespacehmap_1a539c5110c3427da96fd6bc99a6b090c5" kindref="member">hmap::wave_triangular</ref>(shape,<sp/>kw,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>0.8f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zq<sp/>=<sp/><ref refid="namespacehmap_1accadc8f0d0e250eba86824a456aa98c8" kindref="member">hmap::wave_square</ref>(shape,<sp/>kw,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zs<sp/>=<sp/><ref refid="namespacehmap_1a0fac1251f8728228be8de58ac16846d2" kindref="member">hmap::wave_sine</ref>(shape,<sp/>kw,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zd<sp/>=<sp/><ref refid="namespacehmap_1a16a701ab5a740bd3dbfe7020fb388023" kindref="member">hmap::wave_dune</ref>(shape,<sp/>kw,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>0.5f,<sp/>0.7f,<sp/>0.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ztn<sp/>=<sp/><ref refid="namespacehmap_1a539c5110c3427da96fd6bc99a6b090c5" kindref="member">hmap::wave_triangular</ref>(shape,<sp/>kw,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>0.8f,<sp/>0.f,<sp/>&amp;<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zqn<sp/>=<sp/><ref refid="namespacehmap_1accadc8f0d0e250eba86824a456aa98c8" kindref="member">hmap::wave_square</ref>(shape,<sp/>kw,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>0.f,<sp/>&amp;<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zsn<sp/>=<sp/><ref refid="namespacehmap_1a0fac1251f8728228be8de58ac16846d2" kindref="member">hmap::wave_sine</ref>(shape,<sp/>kw,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>0.f,<sp/>&amp;<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zdn<sp/>=<sp/><ref refid="namespacehmap_1a16a701ab5a740bd3dbfe7020fb388023" kindref="member">hmap::wave_dune</ref>(shape,<sp/>kw,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>0.5f,<sp/>0.7f,<sp/>0.f,<sp/>&amp;<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_wave0.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{zt,<sp/>zq,<sp/>zs,<sp/>zd},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_wave1.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{ztn,<sp/>zqn,<sp/>zsn,<sp/>zdn},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_wave0.png"></image>
 <image type="html" name="ex_wave1.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/wave.cpp" line="43" column="7" bodyfile="HighMap/src/primitives/wave.cpp" bodystart="43" bodyend="65" declfile="HighMap/include/highmap/primitives.hpp" declline="1177" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1accadc8f0d0e250eba86824a456aa98c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::wave_square</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float kw, float angle, float phase_shift=0.f, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, const Array *p_stretching=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>wave_square</name>
        <qualifiedname>hmap::wave_square</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>kw</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>float</type>
          <declname>phase_shift</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Return a square wave. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>Wavenumber with respect to a unit domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Overall rotation angle (in degree). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phase_shift</parametername>
</parameternamelist>
<parameterdescription>
<para>Phase shift (in radians). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input noise arrays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_stretching</parametername>
</parameternamelist>
<parameterdescription>
<para>Local wavenumber multiplier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> New array.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_wave.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kw<sp/>=<sp/>4.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref><sp/>=<sp/>30.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref><sp/>=<sp/>0.1f<sp/>*<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{kw,<sp/>kw},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zt<sp/>=<sp/><ref refid="namespacehmap_1a539c5110c3427da96fd6bc99a6b090c5" kindref="member">hmap::wave_triangular</ref>(shape,<sp/>kw,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>0.8f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zq<sp/>=<sp/><ref refid="namespacehmap_1accadc8f0d0e250eba86824a456aa98c8" kindref="member">hmap::wave_square</ref>(shape,<sp/>kw,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zs<sp/>=<sp/><ref refid="namespacehmap_1a0fac1251f8728228be8de58ac16846d2" kindref="member">hmap::wave_sine</ref>(shape,<sp/>kw,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zd<sp/>=<sp/><ref refid="namespacehmap_1a16a701ab5a740bd3dbfe7020fb388023" kindref="member">hmap::wave_dune</ref>(shape,<sp/>kw,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>0.5f,<sp/>0.7f,<sp/>0.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ztn<sp/>=<sp/><ref refid="namespacehmap_1a539c5110c3427da96fd6bc99a6b090c5" kindref="member">hmap::wave_triangular</ref>(shape,<sp/>kw,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>0.8f,<sp/>0.f,<sp/>&amp;<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zqn<sp/>=<sp/><ref refid="namespacehmap_1accadc8f0d0e250eba86824a456aa98c8" kindref="member">hmap::wave_square</ref>(shape,<sp/>kw,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>0.f,<sp/>&amp;<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zsn<sp/>=<sp/><ref refid="namespacehmap_1a0fac1251f8728228be8de58ac16846d2" kindref="member">hmap::wave_sine</ref>(shape,<sp/>kw,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>0.f,<sp/>&amp;<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zdn<sp/>=<sp/><ref refid="namespacehmap_1a16a701ab5a740bd3dbfe7020fb388023" kindref="member">hmap::wave_dune</ref>(shape,<sp/>kw,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>0.5f,<sp/>0.7f,<sp/>0.f,<sp/>&amp;<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_wave0.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{zt,<sp/>zq,<sp/>zs,<sp/>zd},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_wave1.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{ztn,<sp/>zqn,<sp/>zsn,<sp/>zdn},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_wave0.png"></image>
 <image type="html" name="ex_wave1.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/wave.cpp" line="67" column="7" bodyfile="HighMap/src/primitives/wave.cpp" bodystart="67" bodyend="89" declfile="HighMap/include/highmap/primitives.hpp" declline="1205" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a539c5110c3427da96fd6bc99a6b090c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::wave_triangular</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float kw, float angle, float slant_ratio, float phase_shift=0.f, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, const Array *p_stretching=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>wave_triangular</name>
        <qualifiedname>hmap::wave_triangular</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>kw</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>float</type>
          <declname>slant_ratio</declname>
        </param>
        <param>
          <type>float</type>
          <declname>phase_shift</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Return a triangular wave. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>Wavenumber with respect to a unit domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Overall rotation angle (in degree). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slant_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Relative location of the triangle apex, in [0, 1]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phase_shift</parametername>
</parameternamelist>
<parameterdescription>
<para>Phase shift (in radians). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input noise arrays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_stretching</parametername>
</parameternamelist>
<parameterdescription>
<para>Local wavenumber multiplier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> New array.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_wave.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kw<sp/>=<sp/>4.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref><sp/>=<sp/>30.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref><sp/>=<sp/>0.1f<sp/>*<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{kw,<sp/>kw},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zt<sp/>=<sp/><ref refid="namespacehmap_1a539c5110c3427da96fd6bc99a6b090c5" kindref="member">hmap::wave_triangular</ref>(shape,<sp/>kw,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>0.8f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zq<sp/>=<sp/><ref refid="namespacehmap_1accadc8f0d0e250eba86824a456aa98c8" kindref="member">hmap::wave_square</ref>(shape,<sp/>kw,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zs<sp/>=<sp/><ref refid="namespacehmap_1a0fac1251f8728228be8de58ac16846d2" kindref="member">hmap::wave_sine</ref>(shape,<sp/>kw,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zd<sp/>=<sp/><ref refid="namespacehmap_1a16a701ab5a740bd3dbfe7020fb388023" kindref="member">hmap::wave_dune</ref>(shape,<sp/>kw,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>0.5f,<sp/>0.7f,<sp/>0.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ztn<sp/>=<sp/><ref refid="namespacehmap_1a539c5110c3427da96fd6bc99a6b090c5" kindref="member">hmap::wave_triangular</ref>(shape,<sp/>kw,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>0.8f,<sp/>0.f,<sp/>&amp;<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zqn<sp/>=<sp/><ref refid="namespacehmap_1accadc8f0d0e250eba86824a456aa98c8" kindref="member">hmap::wave_square</ref>(shape,<sp/>kw,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>0.f,<sp/>&amp;<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zsn<sp/>=<sp/><ref refid="namespacehmap_1a0fac1251f8728228be8de58ac16846d2" kindref="member">hmap::wave_sine</ref>(shape,<sp/>kw,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>0.f,<sp/>&amp;<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zdn<sp/>=<sp/><ref refid="namespacehmap_1a16a701ab5a740bd3dbfe7020fb388023" kindref="member">hmap::wave_dune</ref>(shape,<sp/>kw,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>0.5f,<sp/>0.7f,<sp/>0.f,<sp/>&amp;<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_wave0.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{zt,<sp/>zq,<sp/>zs,<sp/>zd},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_wave1.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{ztn,<sp/>zqn,<sp/>zsn,<sp/>zdn},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_wave0.png"></image>
 <image type="html" name="ex_wave1.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/wave.cpp" line="91" column="7" bodyfile="HighMap/src/primitives/wave.cpp" bodystart="91" bodyend="115" declfile="HighMap/include/highmap/primitives.hpp" declline="1235" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aaebee84e8c697616359a93440eb92b50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::white</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float a, float b, uint seed)</argsstring>
        <name>white</name>
        <qualifiedname>hmap::white</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <briefdescription>
<para>Return an array filled with white noise. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower bound of random distribution. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Upper bound of random distribution. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random number seed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> White noise.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_white.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1aaebee84e8c697616359a93440eb92b50" kindref="member">hmap::white</ref>(shape,<sp/>0.f,<sp/>1.f,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_white.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_white.png"></image>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="namespacehmap_1a2fe434844b8b2c091b589cbc4fa81db1" kindref="member">white_sparse</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/white.cpp" line="12" column="7" bodyfile="HighMap/src/primitives/white.cpp" bodystart="12" bodyend="22" declfile="HighMap/include/highmap/primitives.hpp" declline="1262" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a657a1f43301605e4e3768cd3888e8b4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::white_density_map</definition>
        <argsstring>(const Array &amp;density_map, uint seed)</argsstring>
        <name>white_density_map</name>
        <qualifiedname>hmap::white_density_map</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>density_map</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <briefdescription>
<para>Return an array filled <computeroutput>1</computeroutput> with a probability based on a density map. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>density_map</parametername>
</parameternamelist>
<parameterdescription>
<para>Density map. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random number seed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> New array.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_white_density_map.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>dmap<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{2.f,<sp/>2.f},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(dmap);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>w<sp/>=<sp/><ref refid="namespacehmap_1a657a1f43301605e4e3768cd3888e8b4b" kindref="member">hmap::white_density_map</ref>(0.5f<sp/>*<sp/>dmap,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_white_density_map.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{dmap,<sp/>w},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_white_density_map.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/white.cpp" line="24" column="7" bodyfile="HighMap/src/primitives/white.cpp" bodystart="24" bodyend="37" declfile="HighMap/include/highmap/primitives.hpp" declline="1277" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a2fe434844b8b2c091b589cbc4fa81db1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::white_sparse</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float a, float b, float density, uint seed)</argsstring>
        <name>white_sparse</name>
        <qualifiedname>hmap::white_sparse</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float</type>
          <declname>density</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <briefdescription>
<para>Return an array sparsely filled with white noise. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower bound of random distribution. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Upper bound of random distribution. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>density</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> filling density, in [0, 1]. If set to 1, the function is equivalent to <computeroutput><ref refid="namespacehmap_1aaebee84e8c697616359a93440eb92b50" kindref="member">white</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random number seed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Sparse white noise.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_white_sparse.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>density<sp/>=<sp/>0.1f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a2fe434844b8b2c091b589cbc4fa81db1" kindref="member">hmap::white_sparse</ref>(shape,<sp/>0.f,<sp/>1.f,<sp/>density,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_white_sparse.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_white_sparse.png"></image>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="namespacehmap_1aaebee84e8c697616359a93440eb92b50" kindref="member">white</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/white.cpp" line="39" column="7" bodyfile="HighMap/src/primitives/white.cpp" bodystart="39" bodyend="51" declfile="HighMap/include/highmap/primitives.hpp" declline="1298" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a3077892a37a4350bebb2631856b407fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::white_sparse_binary</definition>
        <argsstring>(Vec2&lt; int &gt; shape, float density, uint seed)</argsstring>
        <name>white_sparse_binary</name>
        <qualifiedname>hmap::white_sparse_binary</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>density</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <briefdescription>
<para>Return an array sparsely filled with random 0 and 1. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>density</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> filling density, in [0, 1]. If set to 1, the function is equivalent to <computeroutput><ref refid="namespacehmap_1aaebee84e8c697616359a93440eb92b50" kindref="member">white</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random number seed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Sparse white noise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/white.cpp" line="53" column="7" bodyfile="HighMap/src/primitives/white.cpp" bodystart="53" bodyend="65" declfile="HighMap/include/highmap/primitives.hpp" declline="1309" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a65580df1d5593c59be30588ca9979b26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::worley_double</definition>
        <argsstring>(Vec2&lt; int &gt; shape, Vec2&lt; float &gt; kw, uint seed, float ratio=0.5f, float k=0.f, const Array *p_ctrl_param=nullptr, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, const Array *p_stretching=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>worley_double</name>
        <qualifiedname>hmap::worley_double</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>kw</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>float</type>
          <declname>ratio</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>k</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_ctrl_param</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_stretching</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Return an array filled with the maximum of two Worley (cellular) noises. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kw</parametername>
</parameternamelist>
<parameterdescription>
<para>Noise wavenumbers {kx, ky} for each directions, with respect to a unit domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Amplitude ratio between each Worley noise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>Transition smoothing parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_ctrl_param</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the control parameter array (acts as a multiplier for the ratio parameter). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the input noise arrays. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_stretching</parametername>
</parameternamelist>
<parameterdescription>
<para>Local wavenumber multiplier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Noise.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_worley_double.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ratio<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0.1f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ratio<sp/>multiplier</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ctrl_array<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(ctrl_array);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a65580df1d5593c59be30588ca9979b26" kindref="member">hmap::worley_double</ref>(shape,<sp/>kw,<sp/>seed,<sp/>ratio,<sp/>k,<sp/>&amp;ctrl_array);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_worley_double.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_worley_double.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/primitives/worley.cpp" line="15" column="7" bodyfile="HighMap/src/primitives/worley.cpp" bodystart="15" bodyend="37" declfile="HighMap/include/highmap/primitives.hpp" declline="1334" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1abc5d54d0d76a86f083db977837c28d69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::chop</definition>
        <argsstring>(Array &amp;array, float vmin)</argsstring>
        <name>chop</name>
        <qualifiedname>hmap::chop</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vmin</declname>
        </param>
        <briefdescription>
<para>Set to zero any value lower than <computeroutput>vmin</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function processes the input array and sets any value that is less than the specified lower bound <computeroutput>vmin</computeroutput> to zero. This operation effectively &quot;chops
off&quot; values that fall below the threshold, which can be useful for filtering out unwanted low values in data processing tasks.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be processed. Values lower than <computeroutput>vmin</computeroutput> will be set to zero. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmin</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower bound threshold. Values below this threshold will be set to zero.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_chop.cpp"></programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_chop.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/range/range.cpp" line="16" column="6" bodyfile="HighMap/src/range/range.cpp" bodystart="16" bodyend="24" declfile="HighMap/include/highmap/range.hpp" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a0583ee2dca09a21193cb1e1830ce90bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::chop_max_smooth</definition>
        <argsstring>(Array &amp;array, float vmax)</argsstring>
        <name>chop_max_smooth</name>
        <qualifiedname>hmap::chop_max_smooth</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vmax</declname>
        </param>
        <briefdescription>
<para>Set to zero any value lower than <computeroutput>vmax</computeroutput> and apply a linear decrease slope between <computeroutput>vmax / 2</computeroutput> and <computeroutput>vmax</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function processes the input array and sets any value below the upper bound <computeroutput>vmax</computeroutput> to zero. Additionally, it applies a linear decrease slope to values that fall between <computeroutput>vmax / 2</computeroutput> and <computeroutput>vmax</computeroutput>. This creates a smooth transition where values gradually approach zero as they get closer to <computeroutput>vmax</computeroutput>, providing a more nuanced adjustment compared to a sharp cutoff.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be processed. Values below <computeroutput>vmax</computeroutput> will be adjusted, with a linear decrease applied between <computeroutput>vmax / 2</computeroutput> and <computeroutput>vmax</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmax</parametername>
</parameternamelist>
<parameterdescription>
<para>Upper bound threshold. Values below this threshold will be zeroed, with linear decrease applied in the specified range.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_chop_max_smooth.cpp"></programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_chop_max_smooth.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/range/range.cpp" line="26" column="6" bodyfile="HighMap/src/range/range.cpp" bodystart="26" bodyend="41" declfile="HighMap/include/highmap/range.hpp" declline="67" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a29bac84a2ba5a665047b8946eecb84ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::clamp</definition>
        <argsstring>(Array &amp;array, float vmin=0, float vmax=1)</argsstring>
        <name>clamp</name>
        <qualifiedname>hmap::clamp</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vmin</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>float</type>
          <declname>vmax</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Clamp array elements to a target range. </para>
        </briefdescription>
        <detaileddescription>
<para>This function restricts the values in the input array to be within a specified range. Values below <computeroutput>vmin</computeroutput> are set to <computeroutput>vmin</computeroutput>, and values above <computeroutput>vmax</computeroutput> are set to <computeroutput>vmax</computeroutput>. This operation ensures that all elements of the array remain within the defined bounds.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be clamped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmin</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower bound of the clamping range (default is 0). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmax</parametername>
</parameternamelist>
<parameterdescription>
<para>Upper bound of the clamping range (default is 1).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_clamp.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a29bac84a2ba5a665047b8946eecb84ea" kindref="member">hmap::clamp</ref>(z1,<sp/>-0.1f,<sp/>0.1f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a936453b67a394c5da8b48473540c9459" kindref="member">hmap::clamp_max_smooth</ref>(z2,<sp/>0.1f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z3<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a374c6a8ff3d27e854a254139435c5d8d" kindref="member">hmap::clamp_min_smooth</ref>(z3,<sp/>-0.1f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z4<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a55574a9d91e2e7e20de954956402ba1b" kindref="member">hmap::clamp_smooth</ref>(z4,<sp/>-0.1f,<sp/>0.1f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_clamp.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z1,<sp/>z2,<sp/>z3,<sp/>z4},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_clamp.png"></image>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">remap</ref></computeroutput>, <computeroutput><ref refid="namespacehmap_1a2badbebec49b12d0d721970a18eb420d" kindref="member">clamp_min</ref></computeroutput>, <computeroutput><ref refid="namespacehmap_1ae239201a0a4193e1ce78bdf1fce4c151" kindref="member">clamp_max</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/range/range.cpp" line="43" column="6" bodyfile="HighMap/src/range/range.cpp" bodystart="43" bodyend="51" declfile="HighMap/include/highmap/range.hpp" declline="89" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a2badbebec49b12d0d721970a18eb420d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::clamp_min</definition>
        <argsstring>(Array &amp;array, float vmin)</argsstring>
        <name>clamp_min</name>
        <qualifiedname>hmap::clamp_min</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vmin</declname>
        </param>
        <briefdescription>
<para>Clamp array values lower than a given bound. </para>
        </briefdescription>
        <detaileddescription>
<para>This function clamps all values in the input array that are below the specified lower bound <computeroutput>vmin</computeroutput> to the value of <computeroutput>vmin</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be clamped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmin</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower bound for clamping.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="namespacehmap_1a29bac84a2ba5a665047b8946eecb84ea" kindref="member">clamp</ref></computeroutput>, <computeroutput><ref refid="namespacehmap_1ae239201a0a4193e1ce78bdf1fce4c151" kindref="member">clamp_max</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/range/range.cpp" line="103" column="6" bodyfile="HighMap/src/range/range.cpp" bodystart="103" bodyend="111" declfile="HighMap/include/highmap/range.hpp" declline="102" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1af24e0b99ff6c2046ba5dfc4ccc9da7cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::clamp_min</definition>
        <argsstring>(Array &amp;array, const Array &amp;vmin)</argsstring>
        <name>clamp_min</name>
        <qualifiedname>hmap::clamp_min</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>vmin</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/range/range.cpp" line="113" column="6" bodyfile="HighMap/src/range/range.cpp" bodystart="113" bodyend="122" declfile="HighMap/include/highmap/range.hpp" declline="103" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a374c6a8ff3d27e854a254139435c5d8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::clamp_min_smooth</definition>
        <argsstring>(Array &amp;array, float vmin, float k=0.2f)</argsstring>
        <name>clamp_min_smooth</name>
        <qualifiedname>hmap::clamp_min_smooth</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vmin</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k</declname>
          <defval>0.2<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Clamp array values lower than a given bound with a smooth transition. </para>
        </briefdescription>
        <detaileddescription>
<para>This function smoothly clamps values in the input array that are below the specified lower bound <computeroutput>vmin</computeroutput>. The smoothing parameter <computeroutput>k</computeroutput> controls the degree of smoothness applied during the clamping process.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be clamped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmin</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower bound for clamping. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>Smoothing parameter in the range [0, 1] (default is 0.2f). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/range/range.cpp" line="124" column="6" bodyfile="HighMap/src/range/range.cpp" bodystart="124" bodyend="136" declfile="HighMap/include/highmap/range.hpp" declline="116" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ae5d25f542f8033210b1744c281235220" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::clamp_min_smooth</definition>
        <argsstring>(Array &amp;array, const Array &amp;vmin, float k=0.2f)</argsstring>
        <name>clamp_min_smooth</name>
        <qualifiedname>hmap::clamp_min_smooth</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>vmin</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k</declname>
          <defval>0.2<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/range/range.cpp" line="138" column="6" bodyfile="HighMap/src/range/range.cpp" bodystart="138" bodyend="151" declfile="HighMap/include/highmap/range.hpp" declline="118" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ab0307c51c15ac3d4162974c970bc9ea9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::clamp_min_smooth</definition>
        <argsstring>(float x, float vmin, float k=0.2f)</argsstring>
        <name>clamp_min_smooth</name>
        <qualifiedname>hmap::clamp_min_smooth</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vmin</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k</declname>
          <defval>0.2<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Clamp a single value lower than a given bound with a smooth transition. </para>
        </briefdescription>
        <detaileddescription>
<para>This function smoothly clamps a single value that is below the specified lower bound <computeroutput>vmin</computeroutput>. The smoothing parameter <computeroutput>k</computeroutput> controls the degree of smoothness applied during the clamping process.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Input value to be clamped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmin</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower bound for clamping. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>Smoothing parameter in the range [0, 1] (default is 0.2f). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float The smoothly clamped value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/range/range.cpp" line="153" column="7" bodyfile="HighMap/src/range/range.cpp" bodystart="153" bodyend="157" declfile="HighMap/include/highmap/range.hpp" declline="135" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ae239201a0a4193e1ce78bdf1fce4c151" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::clamp_max</definition>
        <argsstring>(Array &amp;array, float vmax)</argsstring>
        <name>clamp_max</name>
        <qualifiedname>hmap::clamp_max</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vmax</declname>
        </param>
        <briefdescription>
<para>Clamp array values larger than a given bound. </para>
        </briefdescription>
        <detaileddescription>
<para>This function clamps all values in the input array that are above the specified upper bound <computeroutput>vmax</computeroutput> to the value of <computeroutput>vmax</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be clamped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmax</parametername>
</parameternamelist>
<parameterdescription>
<para>Upper bound for clamping.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><computeroutput><ref refid="namespacehmap_1a29bac84a2ba5a665047b8946eecb84ea" kindref="member">clamp</ref></computeroutput>, <computeroutput><ref refid="namespacehmap_1a2badbebec49b12d0d721970a18eb420d" kindref="member">clamp_min</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/range/range.cpp" line="53" column="6" bodyfile="HighMap/src/range/range.cpp" bodystart="53" bodyend="61" declfile="HighMap/include/highmap/range.hpp" declline="148" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ad912c32892e0e80b92a54d7692b75c6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::clamp_max</definition>
        <argsstring>(Array &amp;array, const Array &amp;vmax)</argsstring>
        <name>clamp_max</name>
        <qualifiedname>hmap::clamp_max</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>vmax</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/range/range.cpp" line="63" column="6" bodyfile="HighMap/src/range/range.cpp" bodystart="63" bodyend="72" declfile="HighMap/include/highmap/range.hpp" declline="149" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a936453b67a394c5da8b48473540c9459" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::clamp_max_smooth</definition>
        <argsstring>(Array &amp;array, float vmax, float k=0.2f)</argsstring>
        <name>clamp_max_smooth</name>
        <qualifiedname>hmap::clamp_max_smooth</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vmax</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k</declname>
          <defval>0.2<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Clamp array values larger than a given bound with a smooth transition. </para>
        </briefdescription>
        <detaileddescription>
<para>This function smoothly clamps values in the input array that are above the specified upper bound <computeroutput>vmax</computeroutput>. The smoothing parameter <computeroutput>k</computeroutput> controls the degree of smoothness applied during the clamping process.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be clamped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmax</parametername>
</parameternamelist>
<parameterdescription>
<para>Upper bound for clamping. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>Smoothing parameter in the range [0, 1] (default is 0.2f). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/range/range.cpp" line="74" column="6" bodyfile="HighMap/src/range/range.cpp" bodystart="74" bodyend="86" declfile="HighMap/include/highmap/range.hpp" declline="162" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1abd5e3daeb692506c7b6350516fccb3d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::clamp_max_smooth</definition>
        <argsstring>(Array &amp;array, const Array &amp;vmax, float k=0.2f)</argsstring>
        <name>clamp_max_smooth</name>
        <qualifiedname>hmap::clamp_max_smooth</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>vmax</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k</declname>
          <defval>0.2<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/range/range.cpp" line="88" column="6" bodyfile="HighMap/src/range/range.cpp" bodystart="88" bodyend="101" declfile="HighMap/include/highmap/range.hpp" declline="164" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a55574a9d91e2e7e20de954956402ba1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::clamp_smooth</definition>
        <argsstring>(Array &amp;array, float vmin, float vmax, float k=0.2f)</argsstring>
        <name>clamp_smooth</name>
        <qualifiedname>hmap::clamp_smooth</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vmin</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vmax</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k</declname>
          <defval>0.2<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Clamp array values within a given interval with a smooth transition. </para>
        </briefdescription>
        <detaileddescription>
<para>This function smoothly clamps values in the input array to be within a specified range. Values below <computeroutput>vmin</computeroutput> are smoothly transitioned to <computeroutput>vmin</computeroutput>, and values above <computeroutput>vmax</computeroutput> are smoothly transitioned to <computeroutput>vmax</computeroutput>. The smoothing parameter <computeroutput>k</computeroutput> controls the degree of smoothness applied during the clamping process.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be clamped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmin</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower bound of the clamping range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmax</parametername>
</parameternamelist>
<parameterdescription>
<para>Upper bound of the clamping range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>Smoothing parameter in the range [0, 1] (default is 0.2f). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/range/range.cpp" line="159" column="6" bodyfile="HighMap/src/range/range.cpp" bodystart="159" bodyend="177" declfile="HighMap/include/highmap/range.hpp" declline="182" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aa52f3e1fcb1cad464a512c09a0c8eb54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::maximum</definition>
        <argsstring>(const Array &amp;array1, const Array &amp;array2)</argsstring>
        <name>maximum</name>
        <qualifiedname>hmap::maximum</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array2</declname>
        </param>
        <briefdescription>
<para>Return the element-wise maximum of two arrays. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes the element-wise maximum between two input arrays. Each element in the resulting array is the maximum of the corresponding elements from <computeroutput>array1</computeroutput> and <computeroutput>array2</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array1</parametername>
</parameternamelist>
<parameterdescription>
<para>First input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second input array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The element-wise maximum between <computeroutput>array1</computeroutput> and <computeroutput>array2</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/range/range.cpp" line="179" column="7" bodyfile="HighMap/src/range/range.cpp" bodystart="179" bodyend="188" declfile="HighMap/include/highmap/range.hpp" declline="195" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a68ddaa8e59767bb244a8b6b54519ab01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::maximum</definition>
        <argsstring>(const Array &amp;array1, const float value)</argsstring>
        <name>maximum</name>
        <qualifiedname>hmap::maximum</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array1</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Return the element-wise maximum of an array and a scalar value. </para>
        </briefdescription>
        <detaileddescription>
<para>This overloaded function computes the element-wise maximum between an input array and a scalar value. Each element in the resulting array is the maximum of the corresponding element from the input array and the scalar value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array1</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar value to compare with each element of the array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The element-wise maximum between <computeroutput>array1</computeroutput> and <computeroutput>value</computeroutput>. This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/range/range.cpp" line="190" column="7" bodyfile="HighMap/src/range/range.cpp" bodystart="190" bodyend="198" declfile="HighMap/include/highmap/range.hpp" declline="208" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a9e903d1c88db888832bea8cbafb19246" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::maximum_smooth</definition>
        <argsstring>(const Array &amp;array1, const Array &amp;array2, float k=0.2)</argsstring>
        <name>maximum_smooth</name>
        <qualifiedname>hmap::maximum_smooth</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k</declname>
          <defval>0.2</defval>
        </param>
        <briefdescription>
<para>Return the polynomial cubic smooth element-wise maximum of two arrays. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes the element-wise maximum of two input arrays with a smooth transition to avoid discontinuities that are present in the standard <computeroutput>maximum</computeroutput> function. The smoothness is controlled by the parameter <computeroutput>k</computeroutput>, which determines how smoothly the transition between the two arrays occurs.</para>
<para>The smooth transition is achieved using a polynomial cubic function, which provides a smooth blend between the two arrays. This approach helps in avoiding abrupt changes and can be useful in applications requiring smooth transitions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array1</parametername>
</parameternamelist>
<parameterdescription>
<para>First array to be compared. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second array to be compared. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>Smoothing parameter in the range [0, 1]. Higher values result in smoother transitions between the arrays (default is 0.2). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Element-wise smooth maximum between the two input arrays.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_maximum_smooth.cpp"></programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_maximum_smooth.png"></image>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="namespacehmap_1a453090213e0cf160406d6af6c129d872" kindref="member">minimum_smooth</ref></computeroutput>, <computeroutput><ref refid="namespacehmap_1afb57b7af88ca225ff5a343d4583ab998" kindref="member">minimum</ref></computeroutput>, <computeroutput><ref refid="namespacehmap_1aa52f3e1fcb1cad464a512c09a0c8eb54" kindref="member">maximum</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/range/range.cpp" line="266" column="7" bodyfile="HighMap/src/range/range.cpp" bodystart="266" bodyend="287" declfile="HighMap/include/highmap/range.hpp" declline="238" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a38faafa03305fec4339e321e10ab6777" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::maximum_smooth</definition>
        <argsstring>(const float a, const float b, float k=0.2)</argsstring>
        <name>maximum_smooth</name>
        <qualifiedname>hmap::maximum_smooth</qualifiedname>
        <param>
          <type>const float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k</declname>
          <defval>0.2</defval>
        </param>
        <briefdescription>
<para>Return the polynomial cubic smooth maximum of two scalar values. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes the smooth maximum of two scalar values with a polynomial cubic smooth transition. The parameter <computeroutput>k</computeroutput> controls the degree of smoothness applied to the maximum calculation, ensuring a continuous and smooth blend between the two values.</para>
<para>The smooth transition helps in avoiding abrupt changes, making this function suitable for applications that require smooth variations.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>First scalar value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second scalar value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>Smoothing parameter in the range [0, 1]. Higher values result in smoother transitions between the values (default is 0.2). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float Smooth maximum value between the two input values.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_maximum_smooth_scalar.cpp"></programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_maximum_smooth_scalar.png"></image>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="namespacehmap_1a453090213e0cf160406d6af6c129d872" kindref="member">minimum_smooth</ref></computeroutput>, <computeroutput><ref refid="namespacehmap_1afb57b7af88ca225ff5a343d4583ab998" kindref="member">minimum</ref></computeroutput>, <computeroutput><ref refid="namespacehmap_1aa52f3e1fcb1cad464a512c09a0c8eb54" kindref="member">maximum</ref></computeroutput> This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/range/range.cpp" line="289" column="7" bodyfile="HighMap/src/range/range.cpp" bodystart="289" bodyend="293" declfile="HighMap/include/highmap/range.hpp" declline="265" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1afb57b7af88ca225ff5a343d4583ab998" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::minimum</definition>
        <argsstring>(const Array &amp;array1, const Array &amp;array2)</argsstring>
        <name>minimum</name>
        <qualifiedname>hmap::minimum</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array2</declname>
        </param>
        <briefdescription>
<para>Return the element-wise minimum of two arrays. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes the element-wise minimum between two input arrays. Each element in the resulting array is the minimum of the corresponding elements from <computeroutput>array1</computeroutput> and <computeroutput>array2</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array1</parametername>
</parameternamelist>
<parameterdescription>
<para>First input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second input array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The element-wise minimum between <computeroutput>array1</computeroutput> and <computeroutput>array2</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/range/range.cpp" line="295" column="7" bodyfile="HighMap/src/range/range.cpp" bodystart="295" bodyend="304" declfile="HighMap/include/highmap/range.hpp" declline="280" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a6f9cfb0636b57a00160dbcadfd8b8076" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::minimum</definition>
        <argsstring>(const Array &amp;array1, const float value)</argsstring>
        <name>minimum</name>
        <qualifiedname>hmap::minimum</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array1</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Return the element-wise minimum of an array and a scalar value. </para>
        </briefdescription>
        <detaileddescription>
<para>This overloaded function computes the element-wise minimum between an input array and a scalar value. Each element in the resulting array is the minimum of the corresponding element from the input array and the scalar value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array1</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar value to compare with each element of the array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The element-wise minimum between <computeroutput>array1</computeroutput> and <computeroutput>value</computeroutput>. This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/range/range.cpp" line="306" column="7" bodyfile="HighMap/src/range/range.cpp" bodystart="306" bodyend="314" declfile="HighMap/include/highmap/range.hpp" declline="293" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a453090213e0cf160406d6af6c129d872" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::minimum_smooth</definition>
        <argsstring>(const Array &amp;array1, const Array &amp;array2, float k=0.2)</argsstring>
        <name>minimum_smooth</name>
        <qualifiedname>hmap::minimum_smooth</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k</declname>
          <defval>0.2</defval>
        </param>
        <briefdescription>
<para>Return the polynomial cubic smooth element-wise minimum of two arrays. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes a smooth element-wise minimum between two input arrays using a polynomial cubic smoothing function. The smoothing parameter <computeroutput>k</computeroutput> controls the blending between the arrays, reducing the discontinuity found in a standard minimum operation. For details on the smoothing technique, refer to <ulink url="https://iquilezles.org/articles/smin/">Inigo Quilez&apos;s articles</ulink>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array1</parametername>
</parameternamelist>
<parameterdescription>
<para>First input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>Smoothing parameter in the range [0, 1] that determines the degree of blending between the two arrays (default is 0.2). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The element-wise smooth minimum between <computeroutput>array1</computeroutput> and <computeroutput>array2</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><computeroutput><ref refid="namespacehmap_1a9e903d1c88db888832bea8cbafb19246" kindref="member">maximum_smooth</ref></computeroutput>, <computeroutput><ref refid="namespacehmap_1afb57b7af88ca225ff5a343d4583ab998" kindref="member">minimum</ref></computeroutput>, <computeroutput><ref refid="namespacehmap_1aa52f3e1fcb1cad464a512c09a0c8eb54" kindref="member">maximum</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/range/range.cpp" line="326" column="7" bodyfile="HighMap/src/range/range.cpp" bodystart="326" bodyend="347" declfile="HighMap/include/highmap/range.hpp" declline="313" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a94d994f910d44a006acfae7ff453a53d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::minimum_smooth</definition>
        <argsstring>(const float a, const float b, float k)</argsstring>
        <name>minimum_smooth</name>
        <qualifiedname>hmap::minimum_smooth</qualifiedname>
        <param>
          <type>const float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Return the polynomial cubic smooth minimum of two scalar values. </para>
        </briefdescription>
        <detaileddescription>
<para>This overloaded function computes a smooth minimum between two scalar values using a polynomial cubic smoothing function. The smoothing parameter <computeroutput>k</computeroutput> controls the blending between the values, reducing discontinuity compared to a standard minimum operation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>First scalar value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second scalar value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>Smoothing parameter in the range [0, 1] that determines the degree of blending between the two values (default is 0.2). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float The smooth minimum between <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput>. This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/range/range.cpp" line="349" column="7" bodyfile="HighMap/src/range/range.cpp" bodystart="349" bodyend="353" declfile="HighMap/include/highmap/range.hpp" declline="329" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::remap</definition>
        <argsstring>(Array &amp;array, float vmin, float vmax, float from_min, float from_max)</argsstring>
        <name>remap</name>
        <qualifiedname>hmap::remap</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vmin</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vmax</declname>
        </param>
        <param>
          <type>float</type>
          <declname>from_min</declname>
        </param>
        <param>
          <type>float</type>
          <declname>from_max</declname>
        </param>
        <briefdescription>
<para>Remap array elements from a starting range to a target range. </para>
        </briefdescription>
        <detaileddescription>
<para>This function maps the values in the input array from one specified range to another. By default, the function uses the minimum and maximum values of the input array as the starting range. The target range is specified by <computeroutput>vmin</computeroutput> and <computeroutput>vmax</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be remapped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmin</parametername>
</parameternamelist>
<parameterdescription>
<para>The lower bound of the target range to remap to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmax</parametername>
</parameternamelist>
<parameterdescription>
<para>The upper bound of the target range to remap to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>from_min</parametername>
</parameternamelist>
<parameterdescription>
<para>The lower bound of the starting range to remap from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>from_max</parametername>
</parameternamelist>
<parameterdescription>
<para>The upper bound of the starting range to remap from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_remap.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>z.<ref refid="classhmap_1_1Array_1a56c77f78e4864f5c6f2cbd6de8100556" kindref="member">min</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>z.<ref refid="classhmap_1_1Array_1a68aac609ccba8f581da1cdf5cee671b9" kindref="member">max</ref>()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z,<sp/>0.f,<sp/>1.f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>z.<ref refid="classhmap_1_1Array_1a56c77f78e4864f5c6f2cbd6de8100556" kindref="member">min</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>z.<ref refid="classhmap_1_1Array_1a68aac609ccba8f581da1cdf5cee671b9" kindref="member">max</ref>()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><simplesect kind="see"><para><computeroutput><ref refid="namespacehmap_1a29bac84a2ba5a665047b8946eecb84ea" kindref="member">clamp</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/range/range.cpp" line="374" column="6" bodyfile="HighMap/src/range/range.cpp" bodystart="374" bodyend="388" declfile="HighMap/include/highmap/range.hpp" declline="350" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ad470ab979489b088a4e8405830efdbe8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::remap</definition>
        <argsstring>(Array &amp;array, float vmin=0, float vmax=1)</argsstring>
        <name>remap</name>
        <qualifiedname>hmap::remap</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vmin</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>float</type>
          <declname>vmax</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Remap array elements from a starting range to a target range (default range). </para>
        </briefdescription>
        <detaileddescription>
<para>This overloaded function remaps the values in the input array from the default starting range (the minimum and maximum values of the array) to a target range specified by <computeroutput>vmin</computeroutput> and <computeroutput>vmax</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be remapped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmin</parametername>
</parameternamelist>
<parameterdescription>
<para>The lower bound of the target range to remap to (default is 0). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmax</parametername>
</parameternamelist>
<parameterdescription>
<para>The upper bound of the target range to remap to (default is 1). This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/range/range.cpp" line="355" column="6" bodyfile="HighMap/src/range/range.cpp" bodystart="355" bodyend="372" declfile="HighMap/include/highmap/range.hpp" declline="368" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ac126773f7c7af2364cfb4d7a6922ed96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::rescale</definition>
        <argsstring>(Array &amp;array, float scaling, float vref=0.f)</argsstring>
        <name>rescale</name>
        <qualifiedname>hmap::rescale</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scaling</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vref</declname>
          <defval>0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Remap array elements from a starting range to a target range. </para>
        </briefdescription>
        <detaileddescription>
<para>This function adjusts the values in the input array by scaling them and shifting them to fit within a new range. The scaling factor determines how much the values are stretched or compressed, and the reference value shifts the values to align with the target range.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be rescaled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scaling</parametername>
</parameternamelist>
<parameterdescription>
<para>Amplitude scaling factor to adjust the range of array elements. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vref</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference &apos;zero&apos; value used to shift the values (default is 0.f). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/range/range.cpp" line="390" column="6" bodyfile="HighMap/src/range/range.cpp" bodystart="390" bodyend="401" declfile="HighMap/include/highmap/range.hpp" declline="384" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ad67818460523a881fd4c6b7d4b80f6a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Graph" kindref="compound">Graph</ref></type>
        <definition>Graph hmap::generate_network_alpha_model</definition>
        <argsstring>(const std::vector&lt; float &gt; &amp;xc, const std::vector&lt; float &gt; &amp;yc, const std::vector&lt; float &gt; &amp;size, Vec4&lt; float &gt; bbox, const Array &amp;z, uint seed, float alpha=0.7f, int n_dummy_nodes=2500, float dz_weight=1.f, const Array *p_weight=nullptr)</argsstring>
        <name>generate_network_alpha_model</name>
        <qualifiedname>hmap::generate_network_alpha_model</qualifiedname>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>xc</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>yc</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
          <defval>0.7<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>n_dummy_nodes</declname>
          <defval>2500</defval>
        </param>
        <param>
          <type>float</type>
          <declname>dz_weight</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_weight</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Generate a large scale road network between &quot;nodes&quot; (or cities) using the alpha model. </para>
        </briefdescription>
        <detaileddescription>
<para>Based on the paper of Molinero et al. Molinero2020.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xc</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>x</computeroutput> locations of the cities. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yc</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>y</computeroutput> locations of the cities. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>City sizes (arbitrary unit). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Bounding box. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>&quot;Alpha coefficient&quot; of the model (cost difference between creating a new and using an old one). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_dummy_nodes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of dummy nodes added for the tesselation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dz_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>Weight of the elevation difference in the cost function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>Map defining the local value added to the cost function (can be used to add large penalizations to create &quot;no
                      go&quot; zones). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Graph" kindref="compound">Graph</ref> Road network, edge weights correspond to the road &quot;size&quot;.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_generate_network_alpha_model.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{4.f,<sp/>4.f},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_generate_network_alpha_model0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;cities&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>npoints<sp/>=<sp/>10;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ndummy<sp/>=<sp/>50<sp/>*<sp/>50;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha<sp/>=<sp/>0.7f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec4" kindref="compound">hmap::Vec4&lt;float&gt;</ref><sp/>bbox<sp/>=<sp/>{1.f,<sp/>2.f,<sp/>-0.5f,<sp/>0.5f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Cloud" kindref="compound">hmap::Cloud</ref><sp/>cloud<sp/>=<sp/><ref refid="classhmap_1_1Cloud" kindref="compound">hmap::Cloud</ref>(npoints,<sp/>seed,<sp/>{1.1f,<sp/>1.9f,<sp/>-0.4,<sp/>0.4f});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Graph" kindref="compound">hmap::Graph</ref><sp/>network<sp/>=<sp/><ref refid="namespacehmap_1ad67818460523a881fd4c6b7d4b80f6a1" kindref="member">hmap::generate_network_alpha_model</ref>(cloud.<ref refid="classhmap_1_1Cloud_1aab450c9376e44def1d4e4465f0b1b691" kindref="member">get_x</ref>(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cloud.<ref refid="classhmap_1_1Cloud_1abf5f933e3506395b5369cb090119002e" kindref="member">get_y</ref>(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cloud.<ref refid="classhmap_1_1Cloud_1a53cb47401f1e9d027a638f3680c3004d" kindref="member">get_values</ref>(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bbox,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ndummy);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>network.to_csv(</highlight><highlight class="stringliteral">&quot;nodes.csv&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;adj.csv&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>network.set_values(1.f);</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>graph<sp/>view,<sp/>no<sp/>bounding<sp/>box,<sp/>color<sp/>by<sp/>edge<sp/>weight</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>network.to_png(</highlight><highlight class="stringliteral">&quot;ex_generate_network_alpha_model1.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>graph<sp/>project<sp/>onto<sp/>an<sp/>array,<sp/>with<sp/>bounding<sp/>box,<sp/>color<sp/>by<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>g<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(shape);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>network.to_array(g,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>g.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_generate_network_alpha_model2.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_generate_network_alpha_model0.png"></image>
 <image type="html" name="ex_generate_network_alpha_model1.png"></image>
 <image type="html" name="ex_generate_network_alpha_model2.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/roads/alpha_model.cpp" line="16" column="7" bodyfile="HighMap/src/roads/alpha_model.cpp" bodystart="16" bodyend="152" declfile="HighMap/include/highmap/roads.hpp" declline="50" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a7bacc45412ea1599907ac3f9b0e9e282" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::sdf_2d_polyline</definition>
        <argsstring>(const Path &amp;path, Vec2&lt; int &gt; shape, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f}, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr)</argsstring>
        <name>sdf_2d_polyline</name>
        <qualifiedname>hmap::sdf_2d_polyline</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Path" kindref="compound">Path</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Computes the signed distance field (SDF) of a 2D polyline. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the distance of each grid cell in the specified 2D array to the closest segment of a polyline. The polyline is represented by a <computeroutput><ref refid="classhmap_1_1Path" kindref="compound">Path</ref></computeroutput> object, and optional noise fields can be added to perturb the array coordinates.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The polyline path represented as a <computeroutput><ref refid="classhmap_1_1Path" kindref="compound">Path</ref></computeroutput> object containing the nodes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensions (width, height) of the output array grid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>The bounding box of the array grid in the format (xmin, xmax, ymin, ymax). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an optional noise array for perturbing x-coordinates (can be nullptr). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an optional noise array for perturbing y-coordinates (can be nullptr).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The resulting signed distance field (SDF) as a 2D array.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_sdf_polyline.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref><sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kw,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>,<sp/>0.f,<sp/>1.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>base<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec4" kindref="compound">hmap::Vec4&lt;float&gt;</ref><sp/>bbox<sp/>=<sp/>{1.f,<sp/>2.f,<sp/>-0.5f,<sp/>0.5f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Path" kindref="compound">hmap::Path</ref><sp/>path<sp/>=<sp/><ref refid="classhmap_1_1Path" kindref="compound">hmap::Path</ref>(9,<sp/>seed,<sp/>bbox.<ref refid="structhmap_1_1Vec4_1a080d1200616967db1349c9b912b1186c" kindref="member">adjust</ref>(0.2f,<sp/>-0.2f,<sp/>0.2f,<sp/>-0.2f));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>path.<ref refid="classhmap_1_1Path_1ad68abaa80879402c3758e24626acfb53" kindref="member">reorder_nns</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>path.fractalize(2,<sp/>seed);</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>path.<ref refid="classhmap_1_1Cloud_1a9071aba6d7344639eede19e54ec3e7cb" kindref="member">set_values_from_array</ref>(<ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">noise</ref>,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zp<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(shape);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>path.<ref refid="classhmap_1_1Path_1a3b90d30abcdc4da9e381957d76c5d8db" kindref="member">to_array</ref>(zp,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>sdf_2d<sp/>=<sp/><ref refid="namespacehmap_1a7bacc45412ea1599907ac3f9b0e9e282" kindref="member">hmap::sdf_2d_polyline</ref>(path,<sp/>shape,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(sdf_2d);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>sdf_2d_bezier<sp/>=<sp/><ref refid="namespacehmap_1a5368ab0d5bb8708001a55d216332918b" kindref="member">hmap::sdf_2d_polyline_bezier</ref>(path,<sp/>shape,<sp/>bbox);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(sdf_2d_bezier);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_sdf_polyline.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{zp,<sp/>sdf_2d,<sp/>sdf_2d_bezier},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_sdf_polyline.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/sdf/sdf_2d_polyline.cpp" line="14" column="7" bodyfile="HighMap/src/sdf/sdf_2d_polyline.cpp" bodystart="14" bodyend="63" declfile="HighMap/include/highmap/sdf.hpp" declline="47" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a5368ab0d5bb8708001a55d216332918b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::sdf_2d_polyline_bezier</definition>
        <argsstring>(const Path &amp;path, Vec2&lt; int &gt; shape, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f}, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr)</argsstring>
        <name>sdf_2d_polyline_bezier</name>
        <qualifiedname>hmap::sdf_2d_polyline_bezier</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Path" kindref="compound">Path</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>See <ref refid="namespacehmap_1a7bacc45412ea1599907ac3f9b0e9e282" kindref="member">hmap::sdf_2d_polyline</ref>, with a Bezier approximation of the path. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/sdf/sdf_2d_polyline.cpp" line="65" column="7" bodyfile="HighMap/src/sdf/sdf_2d_polyline.cpp" bodystart="65" bodyend="194" declfile="HighMap/include/highmap/sdf.hpp" declline="55" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a6c6abf2b8bd3161610e273ef97ee4771" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::scan_mask</definition>
        <argsstring>(const Array &amp;array, float contrast=0.5f, float brightness=0.5f)</argsstring>
        <name>scan_mask</name>
        <qualifiedname>hmap::scan_mask</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>contrast</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>brightness</declname>
          <defval>0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Mask adjustement using a &apos;scanning&apos; method. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://www.shadertoy.com/view/stjSRR">https://www.shadertoy.com/view/stjSRR</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>contrast</parametername>
</parameternamelist>
<parameterdescription>
<para>Contrast. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>brightness</parametername>
</parameternamelist>
<parameterdescription>
<para>Brightness. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ouput array.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_scan_mask.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>contrast<sp/>/<sp/>brightness</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1a6c6abf2b8bd3161610e273ef97ee4771" kindref="member">hmap::scan_mask</ref>(z,<sp/>0.8f,<sp/>0.5f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/><ref refid="namespacehmap_1a6c6abf2b8bd3161610e273ef97ee4771" kindref="member">hmap::scan_mask</ref>(z,<sp/>0.5f,<sp/>0.2f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_scan_mask.png&quot;</highlight><highlight class="normal">,<sp/>{z,<sp/>z1,<sp/>z2},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a744ead0b170889e33126895264f1af2c" kindref="member">hmap::Cmap::MAGMA</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_scan_mask.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/selector/selector.cpp" line="23" column="7" bodyfile="HighMap/src/selector/selector.cpp" bodystart="23" bodyend="43" declfile="HighMap/include/highmap/selector.hpp" declline="36" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a17edf2c011829f4eed9f45152b3f8eb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::select_angle</definition>
        <argsstring>(const Array &amp;array, float angle, float sigma, int ir=0)</argsstring>
        <name>select_angle</name>
        <qualifiedname>hmap::select_angle</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>float</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return angle selection for a given angle and a tolerance half-width on this value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Selected angle (degree). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigma</parametername>
</parameternamelist>
<parameterdescription>
<para>Selected angle tolerance (degree). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Prefilter radius. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Output array.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_select_angle.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>select<sp/>angle<sp/>90°<sp/>+-<sp/>30°</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref><sp/>=<sp/>90.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sigma<sp/>=<sp/>30.f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>c<sp/>=<sp/><ref refid="namespacehmap_1a17edf2c011829f4eed9f45152b3f8eb9" kindref="member">hmap::select_angle</ref>(z,<sp/><ref refid="namespacehmap_1aac71bb6c14edc17967957f7918acdbdd" kindref="member">angle</ref>,<sp/>sigma);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select_angle.png&quot;</highlight><highlight class="normal">,<sp/>{z,<sp/>c},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_select_angle.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/selector/selector.cpp" line="45" column="7" bodyfile="HighMap/src/selector/selector.cpp" bodystart="45" bodyend="56" declfile="HighMap/include/highmap/selector.hpp" declline="55" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aeaaf7a8ae8cf8de1dad3a82950879473" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::select_blob_log</definition>
        <argsstring>(const Array &amp;array, int ir)</argsstring>
        <name>select_blob_log</name>
        <qualifiedname>hmap::select_blob_log</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
<para>Return blob detection using the Laplacian of Gaussian (LoG) approach. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Kernel radius. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Output array.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_select_blob.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ir<sp/>=<sp/>32;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>c<sp/>=<sp/><ref refid="namespacehmap_1aeaaf7a8ae8cf8de1dad3a82950879473" kindref="member">hmap::select_blob_log</ref>(z,<sp/>ir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select_blob0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>c.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select_blob1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_select_blob0.png"></image>
 <image type="html" name="ex_select_blob1.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/selector/selector.cpp" line="58" column="7" bodyfile="HighMap/src/selector/selector.cpp" bodystart="58" bodyend="65" declfile="HighMap/include/highmap/selector.hpp" declline="71" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ac3436096f5ea39274658f503d7c950c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::select_cavities</definition>
        <argsstring>(const Array &amp;array, int ir, bool concave=true)</argsstring>
        <name>select_cavities</name>
        <qualifiedname>hmap::select_cavities</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>concave</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return holes or bumps detection based on the mean curvature of the heightmap. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Kernel radius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>concave</parametername>
</parameternamelist>
<parameterdescription>
<para>Select &apos;holes&apos; if set to true, and select &apos;bumps&apos; if set to false. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Output array.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_select_cavities.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ir<sp/>=<sp/>32;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>c1<sp/>=<sp/><ref refid="namespacehmap_1ac3436096f5ea39274658f503d7c950c1" kindref="member">hmap::select_cavities</ref>(z,<sp/>ir);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>holes</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>c2<sp/>=<sp/><ref refid="namespacehmap_1ac3436096f5ea39274658f503d7c950c1" kindref="member">hmap::select_cavities</ref>(z,<sp/>ir,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>bumps</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(c1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(c2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select_cavities.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>c1,<sp/>c2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_select_cavities.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/selector/selector.cpp" line="67" column="7" bodyfile="HighMap/src/selector/selector.cpp" bodystart="67" bodyend="77" declfile="HighMap/include/highmap/selector.hpp" declline="89" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a13c7f71c6fa727ee090e483c328270a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::select_elevation_slope</definition>
        <argsstring>(const Array &amp;array, float gradient_scale)</argsstring>
        <name>select_elevation_slope</name>
        <qualifiedname>hmap::select_elevation_slope</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>gradient_scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_select_elevation_slope.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z,<sp/>-1.f,<sp/>2.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gradient_scale<sp/>=<sp/>0.05f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>c<sp/>=<sp/><ref refid="namespacehmap_1a13c7f71c6fa727ee090e483c328270a0" kindref="member">hmap::select_elevation_slope</ref>(z,<sp/>gradient_scale);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select_elevation_slope0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>c.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select_elevation_slope1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_select_elevation_slope0.png"></image>
 <image type="html" name="ex_select_elevation_slope1.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/selector/selector.cpp" line="89" column="7" bodyfile="HighMap/src/selector/selector.cpp" bodystart="89" bodyend="92" declfile="HighMap/include/highmap/selector.hpp" declline="104" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aee36bf04c8ae880814a5341d4ea262f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::select_elevation_slope</definition>
        <argsstring>(const Array &amp;array, float gradient_scale, float vmax)</argsstring>
        <name>select_elevation_slope</name>
        <qualifiedname>hmap::select_elevation_slope</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>gradient_scale</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vmax</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/selector/selector.cpp" line="79" column="7" bodyfile="HighMap/src/selector/selector.cpp" bodystart="79" bodyend="87" declfile="HighMap/include/highmap/selector.hpp" declline="105" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1acd41c33e7bb689f6e3b94274f15869b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::select_eq</definition>
        <argsstring>(const Array &amp;array, float value)</argsstring>
        <name>select_eq</name>
        <qualifiedname>hmap::select_eq</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Return an array with elements equal to 1 where input elements are equal to <computeroutput>value</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Criteria value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Output array.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_select.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>c1<sp/>=<sp/><ref refid="namespacehmap_1a5c54b11ce530d2b0cfc75de360e25ebf" kindref="member">hmap::select_gt</ref>(z,<sp/>0.5f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>c1.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>c2<sp/>=<sp/><ref refid="namespacehmap_1a01db711d188b71bc0ff2118364f3d60b" kindref="member">hmap::select_lt</ref>(z,<sp/>0.5f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>c2.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select2.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>c3<sp/>=<sp/><ref refid="namespacehmap_1a849d37221d492c5d96d945dc64b02754" kindref="member">hmap::select_interval</ref>(z,<sp/>0.25f,<sp/>0.75f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>c3.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select3.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>c4<sp/>=<sp/><ref refid="namespacehmap_1acd41c33e7bb689f6e3b94274f15869b3" kindref="member">hmap::select_eq</ref>(c3,<sp/>1.f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>c4.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select4.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_select0.png"></image>
 <image type="html" name="ex_select1.png"></image>
 <image type="html" name="ex_select2.png"></image>
 <image type="html" name="ex_select3.png"></image>
 <image type="html" name="ex_select4.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/selector/selector.cpp" line="94" column="7" bodyfile="HighMap/src/selector/selector.cpp" bodystart="94" bodyend="101" declfile="HighMap/include/highmap/selector.hpp" declline="127" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aa387b6418bf9dac2b4f05b41a2a106d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::select_gradient_angle</definition>
        <argsstring>(const Array &amp;array, float angle)</argsstring>
        <name>select_gradient_angle</name>
        <qualifiedname>hmap::select_gradient_angle</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>Return an array weighted by the gap between the gradient angle and a given angle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference angle (degree). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Output array. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/selector/selector.cpp" line="112" column="7" bodyfile="HighMap/src/selector/selector.cpp" bodystart="112" bodyend="121" declfile="HighMap/include/highmap/selector.hpp" declline="137" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1acd0eee71be926266e51f908bdc7e2199" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::select_gradient_binary</definition>
        <argsstring>(const Array &amp;array, float talus_center)</argsstring>
        <name>select_gradient_binary</name>
        <qualifiedname>hmap::select_gradient_binary</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus_center</declname>
        </param>
        <briefdescription>
<para>Return an array filled with 1 where the gradient is larger than a given value and 0 elsewhere. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus_center</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference talus. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Output array. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/selector/selector.cpp" line="123" column="7" bodyfile="HighMap/src/selector/selector.cpp" bodystart="123" bodyend="130" declfile="HighMap/include/highmap/selector.hpp" declline="147" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a4c42905cbb910cb4017ef3e026a31d59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::select_gradient_exp</definition>
        <argsstring>(const Array &amp;array, float talus_center, float talus_sigma)</argsstring>
        <name>select_gradient_exp</name>
        <qualifiedname>hmap::select_gradient_exp</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus_center</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus_sigma</declname>
        </param>
        <briefdescription>
<para>Return an array weighted (exponantial decay) by the gradient norm of the input array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus_center</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference talus. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus_sigma</parametername>
</parameternamelist>
<parameterdescription>
<para>Talus half-width. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Output array. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/selector/selector.cpp" line="132" column="7" bodyfile="HighMap/src/selector/selector.cpp" bodystart="132" bodyend="140" declfile="HighMap/include/highmap/selector.hpp" declline="158" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a60843740c9f6153042e0466b696239fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::select_gradient_inv</definition>
        <argsstring>(const Array &amp;array, float talus_center, float talus_sigma)</argsstring>
        <name>select_gradient_inv</name>
        <qualifiedname>hmap::select_gradient_inv</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus_center</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus_sigma</declname>
        </param>
        <briefdescription>
<para>Return an array weighted (square inverse) by the gradient norm of the input array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus_center</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference talus. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus_sigma</parametername>
</parameternamelist>
<parameterdescription>
<para>Talus half-width. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Output array. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/selector/selector.cpp" line="142" column="7" bodyfile="HighMap/src/selector/selector.cpp" bodystart="142" bodyend="150" declfile="HighMap/include/highmap/selector.hpp" declline="171" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a5c54b11ce530d2b0cfc75de360e25ebf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::select_gt</definition>
        <argsstring>(const Array &amp;array, float value)</argsstring>
        <name>select_gt</name>
        <qualifiedname>hmap::select_gt</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Return an array with elements equal to 1 where input elements are larger than <computeroutput>value</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Criteria value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Output array.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_select.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>c1<sp/>=<sp/><ref refid="namespacehmap_1a5c54b11ce530d2b0cfc75de360e25ebf" kindref="member">hmap::select_gt</ref>(z,<sp/>0.5f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>c1.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>c2<sp/>=<sp/><ref refid="namespacehmap_1a01db711d188b71bc0ff2118364f3d60b" kindref="member">hmap::select_lt</ref>(z,<sp/>0.5f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>c2.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select2.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>c3<sp/>=<sp/><ref refid="namespacehmap_1a849d37221d492c5d96d945dc64b02754" kindref="member">hmap::select_interval</ref>(z,<sp/>0.25f,<sp/>0.75f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>c3.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select3.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>c4<sp/>=<sp/><ref refid="namespacehmap_1acd41c33e7bb689f6e3b94274f15869b3" kindref="member">hmap::select_eq</ref>(c3,<sp/>1.f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>c4.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select4.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_select0.png"></image>
 <image type="html" name="ex_select1.png"></image>
 <image type="html" name="ex_select2.png"></image>
 <image type="html" name="ex_select3.png"></image>
 <image type="html" name="ex_select4.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/selector/selector.cpp" line="103" column="7" bodyfile="HighMap/src/selector/selector.cpp" bodystart="103" bodyend="110" declfile="HighMap/include/highmap/selector.hpp" declline="193" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a849d37221d492c5d96d945dc64b02754" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::select_interval</definition>
        <argsstring>(const Array &amp;array, float value1, float value2)</argsstring>
        <name>select_interval</name>
        <qualifiedname>hmap::select_interval</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value2</declname>
        </param>
        <briefdescription>
<para>Return an array with elements equal to 1 where input elements are within the bounds provided. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value1</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower bound. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value2</parametername>
</parameternamelist>
<parameterdescription>
<para>Upper bound. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Output array.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_select.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>c1<sp/>=<sp/><ref refid="namespacehmap_1a5c54b11ce530d2b0cfc75de360e25ebf" kindref="member">hmap::select_gt</ref>(z,<sp/>0.5f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>c1.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>c2<sp/>=<sp/><ref refid="namespacehmap_1a01db711d188b71bc0ff2118364f3d60b" kindref="member">hmap::select_lt</ref>(z,<sp/>0.5f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>c2.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select2.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>c3<sp/>=<sp/><ref refid="namespacehmap_1a849d37221d492c5d96d945dc64b02754" kindref="member">hmap::select_interval</ref>(z,<sp/>0.25f,<sp/>0.75f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>c3.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select3.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>c4<sp/>=<sp/><ref refid="namespacehmap_1acd41c33e7bb689f6e3b94274f15869b3" kindref="member">hmap::select_eq</ref>(c3,<sp/>1.f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>c4.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select4.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_select0.png"></image>
 <image type="html" name="ex_select1.png"></image>
 <image type="html" name="ex_select2.png"></image>
 <image type="html" name="ex_select3.png"></image>
 <image type="html" name="ex_select4.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/selector/selector.cpp" line="152" column="7" bodyfile="HighMap/src/selector/selector.cpp" bodystart="152" bodyend="164" declfile="HighMap/include/highmap/selector.hpp" declline="214" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a2f1c2f2b2aa922b94ccbee3d40b83b8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::select_inward_outward_slope</definition>
        <argsstring>(const Array &amp;array, Vec2&lt; float &gt; center={0.5f, 0.5f}, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>select_inward_outward_slope</name>
        <qualifiedname>hmap::select_inward_outward_slope</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>center</declname>
          <defval>{0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Return an array with positive values if the slope is pointing to the center (slope is inward), and negative values otherwise (slope is outward). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference center. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Output array.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_select_inward_outward_slope.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>c<sp/>=<sp/><ref refid="namespacehmap_1a2f1c2f2b2aa922b94ccbee3d40b83b8c" kindref="member">hmap::select_inward_outward_slope</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(c);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select_inward_outward_slope.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>c},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a744ead0b170889e33126895264f1af2c" kindref="member">hmap::Cmap::MAGMA</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_select_inward_outward_slope.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/selector/selector.cpp" line="166" column="7" bodyfile="HighMap/src/selector/selector.cpp" bodystart="166" bodyend="198" declfile="HighMap/include/highmap/selector.hpp" declline="230" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a01db711d188b71bc0ff2118364f3d60b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::select_lt</definition>
        <argsstring>(const Array &amp;array, float value)</argsstring>
        <name>select_lt</name>
        <qualifiedname>hmap::select_lt</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Return an array with elements equal to 1 where input elements are smaller than <computeroutput>value</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Criteria value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Output array.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_select.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>c1<sp/>=<sp/><ref refid="namespacehmap_1a5c54b11ce530d2b0cfc75de360e25ebf" kindref="member">hmap::select_gt</ref>(z,<sp/>0.5f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>c1.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>c2<sp/>=<sp/><ref refid="namespacehmap_1a01db711d188b71bc0ff2118364f3d60b" kindref="member">hmap::select_lt</ref>(z,<sp/>0.5f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>c2.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select2.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>c3<sp/>=<sp/><ref refid="namespacehmap_1a849d37221d492c5d96d945dc64b02754" kindref="member">hmap::select_interval</ref>(z,<sp/>0.25f,<sp/>0.75f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>c3.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select3.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>c4<sp/>=<sp/><ref refid="namespacehmap_1acd41c33e7bb689f6e3b94274f15869b3" kindref="member">hmap::select_eq</ref>(c3,<sp/>1.f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>c4.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select4.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_select0.png"></image>
 <image type="html" name="ex_select1.png"></image>
 <image type="html" name="ex_select2.png"></image>
 <image type="html" name="ex_select3.png"></image>
 <image type="html" name="ex_select4.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/selector/selector.cpp" line="200" column="7" bodyfile="HighMap/src/selector/selector.cpp" bodystart="200" bodyend="207" declfile="HighMap/include/highmap/selector.hpp" declline="252" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a7b42d7b9a8dfdf8b67a1a482974ee33f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::select_midrange</definition>
        <argsstring>(const Array &amp;array, float gain, float vmin, float vmax)</argsstring>
        <name>select_midrange</name>
        <qualifiedname>hmap::select_midrange</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>gain</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vmin</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vmax</declname>
        </param>
        <briefdescription>
<para>Selects the midrange values of the input array within a specified range. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The input array from which the midrange values are selected. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gain</parametername>
</parameternamelist>
<parameterdescription>
<para>The gain factor to scale the selected midrange values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmin</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum value for range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmax</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum value for range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array containing the midrange values.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_select_midrange.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref><sp/>=<sp/>1.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>c<sp/>=<sp/><ref refid="namespacehmap_1a7b42d7b9a8dfdf8b67a1a482974ee33f" kindref="member">hmap::select_midrange</ref>(z,<sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select_midrange.png&quot;</highlight><highlight class="normal">,<sp/>{z,<sp/>c},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a744ead0b170889e33126895264f1af2c" kindref="member">hmap::Cmap::MAGMA</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_select_midrange.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/selector/selector.cpp" line="209" column="7" bodyfile="HighMap/src/selector/selector.cpp" bodystart="209" bodyend="223" declfile="HighMap/include/highmap/selector.hpp" declline="270" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a565788418282bab28d9d3384622abd9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::select_midrange</definition>
        <argsstring>(const Array &amp;array, float gain)</argsstring>
        <name>select_midrange</name>
        <qualifiedname>hmap::select_midrange</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>gain</declname>
        </param>
        <briefdescription>
<para>Selects and scales the midrange values of the input array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function extracts the midrange portion of the input array and scales it by the specified gain.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The input array from which the midrange values are selected. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gain</parametername>
</parameternamelist>
<parameterdescription>
<para>The gain factor to scale the selected midrange values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array containing the midrange values scaled by the gain.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_select_midrange.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref><sp/>=<sp/>1.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>c<sp/>=<sp/><ref refid="namespacehmap_1a7b42d7b9a8dfdf8b67a1a482974ee33f" kindref="member">hmap::select_midrange</ref>(z,<sp/><ref refid="namespacehmap_1ab1e1b26c0c1eb51d0b256db94d6ca22e" kindref="member">gain</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select_midrange.png&quot;</highlight><highlight class="normal">,<sp/>{z,<sp/>c},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a744ead0b170889e33126895264f1af2c" kindref="member">hmap::Cmap::MAGMA</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_select_midrange.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/selector/selector.cpp" line="225" column="7" bodyfile="HighMap/src/selector/selector.cpp" bodystart="225" bodyend="228" declfile="HighMap/include/highmap/selector.hpp" declline="288" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a6ee46e297f2d253660bfe461b9321fe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::select_multiband3</definition>
        <argsstring>(const Array &amp;array, Array &amp;band_low, Array &amp;band_mid, Array &amp;band_high, float ratio1, float ratio2, float overlap, float vmin, float vmax)</argsstring>
        <name>select_multiband3</name>
        <qualifiedname>hmap::select_multiband3</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>band_low</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>band_mid</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>band_high</declname>
        </param>
        <param>
          <type>float</type>
          <declname>ratio1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>ratio2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>overlap</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vmin</declname>
        </param>
        <param>
          <type>float</type>
          <declname>vmax</declname>
        </param>
        <briefdescription>
<para>Splits the input array into three bands (low, mid, and high) based on given ratios and overlap. </para>
        </briefdescription>
        <detaileddescription>
<para>This function processes the input array and divides it into three value bands: low, mid, and high. The bands are determined by the provided ratios and overlap. Optionally, a range (vmin, vmax) can be applied to the values in the array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The input array that contains the data to be split into bands. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>band_low</parametername>
</parameternamelist>
<parameterdescription>
<para>The output array for the low-value band. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>band_mid</parametername>
</parameternamelist>
<parameterdescription>
<para>The output array for the mid-value band. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>band_high</parametername>
</parameternamelist>
<parameterdescription>
<para>The output array for the high-value band. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratio1</parametername>
</parameternamelist>
<parameterdescription>
<para>The ratio that defines the split between the low and mid bands. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratio2</parametername>
</parameternamelist>
<parameterdescription>
<para>The ratio that defines the split between the mid and high bands. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overlap</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount of overlap between adjacent bands. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmin</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum value for range filtering. Values below vmin will be clamped. (Optional, only in the first function) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vmax</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum value for range filtering. Values above vmax will be clamped. (Optional, only in the first function)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_select_multiband3.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>band_low;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>band_mid;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>band_high;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ratio1<sp/>=<sp/>0.2f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ratio2<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>overlap<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a6ee46e297f2d253660bfe461b9321fe2" kindref="member">hmap::select_multiband3</ref>(z,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>band_low,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>band_mid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>band_high,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ratio1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ratio2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select_multiband3.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>band_low,<sp/>band_mid,<sp/>band_high},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a744ead0b170889e33126895264f1af2c" kindref="member">hmap::Cmap::MAGMA</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_select_multiband3.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/selector/selector.cpp" line="230" column="6" bodyfile="HighMap/src/selector/selector.cpp" bodystart="230" bodyend="272" declfile="HighMap/include/highmap/selector.hpp" declline="320" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a3ce44e59b5eeb5c47a597f893f53eadb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::select_multiband3</definition>
        <argsstring>(const Array &amp;array, Array &amp;band_low, Array &amp;band_mid, Array &amp;band_high, float ratio1, float ratio2, float overlap)</argsstring>
        <name>select_multiband3</name>
        <qualifiedname>hmap::select_multiband3</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>band_low</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>band_mid</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>band_high</declname>
        </param>
        <param>
          <type>float</type>
          <declname>ratio1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>ratio2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>overlap</declname>
        </param>
        <briefdescription>
<para>Splits the input array into three bands (low, mid, and high) based on given ratios and overlap. </para>
        </briefdescription>
        <detaileddescription>
<para>This function processes the input array and divides it into three value bands: low, mid, and high. The bands are determined by the provided ratios and overlap.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The input array that contains the data to be split into bands. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>band_low</parametername>
</parameternamelist>
<parameterdescription>
<para>The output array for the low-value band. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>band_mid</parametername>
</parameternamelist>
<parameterdescription>
<para>The output array for the mid-value band. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>band_high</parametername>
</parameternamelist>
<parameterdescription>
<para>The output array for the high-value band. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratio1</parametername>
</parameternamelist>
<parameterdescription>
<para>The ratio that defines the split between the low and mid bands. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratio2</parametername>
</parameternamelist>
<parameterdescription>
<para>The ratio that defines the split between the mid and high bands. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overlap</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount of overlap between adjacent bands.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_select_multiband3.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>band_low;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>band_mid;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>band_high;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ratio1<sp/>=<sp/>0.2f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ratio2<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>overlap<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a6ee46e297f2d253660bfe461b9321fe2" kindref="member">hmap::select_multiband3</ref>(z,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>band_low,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>band_mid,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>band_high,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ratio1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ratio2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select_multiband3.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>band_low,<sp/>band_mid,<sp/>band_high},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a744ead0b170889e33126895264f1af2c" kindref="member">hmap::Cmap::MAGMA</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_select_multiband3.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/selector/selector.cpp" line="274" column="6" bodyfile="HighMap/src/selector/selector.cpp" bodystart="274" bodyend="294" declfile="HighMap/include/highmap/selector.hpp" declline="355" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a183508644aea6442e249cfc2973fef97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::select_pulse</definition>
        <argsstring>(const Array &amp;array, float value, float sigma)</argsstring>
        <name>select_pulse</name>
        <qualifiedname>hmap::select_pulse</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <param>
          <type>float</type>
          <declname>sigma</declname>
        </param>
        <briefdescription>
<para>Return an array filled with non-zero values where the input is in the interval [value - sigma, value + sigma]. Output array values have a cubic pulse distribution within this interval. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Central value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigma</parametername>
</parameternamelist>
<parameterdescription>
<para>Pulse width. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Output array.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_select_pulse.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>select<sp/>values<sp/>in<sp/>[0.3,<sp/>0.7]<sp/>with<sp/>a<sp/>smooth<sp/>transition</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>c<sp/>=<sp/><ref refid="namespacehmap_1a183508644aea6442e249cfc2973fef97" kindref="member">hmap::select_pulse</ref>(z,<sp/>0.5f,<sp/>0.2f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(c);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select_pulse.png&quot;</highlight><highlight class="normal">,<sp/>{z,<sp/>c},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_select_pulse.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/selector/selector.cpp" line="296" column="7" bodyfile="HighMap/src/selector/selector.cpp" bodystart="296" bodyend="309" declfile="HighMap/include/highmap/selector.hpp" declline="379" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a1f35e2238ee222ab2aa87304f6692ce6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::select_rivers</definition>
        <argsstring>(const Array &amp;array, float talus_ref, float clipping_ratio)</argsstring>
        <name>select_rivers</name>
        <qualifiedname>hmap::select_rivers</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus_ref</declname>
        </param>
        <param>
          <type>float</type>
          <declname>clipping_ratio</declname>
        </param>
        <briefdescription>
<para>Return an array filled with a criterion based on the occurence of a river bed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus_ref</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference talus used to localy define the flow-partition. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clipping_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Flow accumulation clipping ratio. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Output array.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_select_rivers.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>talus_ref<sp/>=<sp/>4.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>clipping_ratio<sp/>=<sp/>50.f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>c<sp/>=<sp/><ref refid="namespacehmap_1a1f35e2238ee222ab2aa87304f6692ce6" kindref="member">hmap::select_rivers</ref>(z,<sp/>talus_ref,<sp/>clipping_ratio);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(c);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select_rivers.png&quot;</highlight><highlight class="normal">,<sp/>{z,<sp/>c},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_select_rivers.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/selector/selector.cpp" line="311" column="7" bodyfile="HighMap/src/selector/selector.cpp" bodystart="311" bodyend="318" declfile="HighMap/include/highmap/selector.hpp" declline="397" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ac6dcaa05c7c34302fa2560ddedbb9931" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::select_transitions</definition>
        <argsstring>(const Array &amp;array1, const Array &amp;array2, const Array &amp;array_blend)</argsstring>
        <name>select_transitions</name>
        <qualifiedname>hmap::select_transitions</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array2</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array_blend</declname>
        </param>
        <briefdescription>
<para>Return an array filled with 1 at the blending transition between two arrays, and 0 elsewhere. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array1</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array2</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array 2. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array_blend</parametername>
</parameternamelist>
<parameterdescription>
<para>Blending of array 1 and 2 to analyze. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Resulting array</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_select_transitions.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{128,<sp/>128};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1a03c0be3a7198eebacefcb208b0cfee99" kindref="member">hmap::noise</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{2.f,<sp/>2.f},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{4.f,<sp/>4.f},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z_m<sp/>=<sp/><ref refid="namespacehmap_1afb57b7af88ca225ff5a343d4583ab998" kindref="member">hmap::minimum</ref>(z1,<sp/>z2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sharp<sp/>transition</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z_s<sp/>=<sp/><ref refid="namespacehmap_1a453090213e0cf160406d6af6c129d872" kindref="member">hmap::minimum_smooth</ref>(z1,<sp/>z2,<sp/>0.2f);<sp/></highlight><highlight class="comment">//<sp/>smooth<sp/>transition</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>mask_m<sp/>=<sp/><ref refid="namespacehmap_1ac6dcaa05c7c34302fa2560ddedbb9931" kindref="member">hmap::select_transitions</ref>(z1,<sp/>z2,<sp/>z_m);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>mask_s<sp/>=<sp/><ref refid="namespacehmap_1ac6dcaa05c7c34302fa2560ddedbb9931" kindref="member">hmap::select_transitions</ref>(z1,<sp/>z2,<sp/>z_s);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select_transitions0.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z1,<sp/>z2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select_transitions1.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z_m,<sp/>z_s},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_select_transitions2.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{mask_m,<sp/>mask_s},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_select_transitions0.png"></image>
 <image type="html" name="ex_select_transitions1.png"></image>
 <image type="html" name="ex_select_transitions2.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/selector/selector.cpp" line="320" column="7" bodyfile="HighMap/src/selector/selector.cpp" bodystart="320" bodyend="379" declfile="HighMap/include/highmap/selector.hpp" declline="416" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a701106cd57412e72a5d3ee41b46ab4e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::select_valley</definition>
        <argsstring>(const Array &amp;z, int ir, bool zero_at_borders=true, bool ridge_select=false)</argsstring>
        <name>select_valley</name>
        <qualifiedname>hmap::select_valley</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>zero_at_borders</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>ridge_select</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/selector/selector.cpp" line="381" column="7" bodyfile="HighMap/src/selector/selector.cpp" bodystart="381" bodyend="396" declfile="HighMap/include/highmap/selector.hpp" declline="420" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1acbc412801dcbcce77b0e60b219dc946a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::hillshade</definition>
        <argsstring>(const Array &amp;z, float azimuth, float zenith, float talus_ref=1.f)</argsstring>
        <name>hillshade</name>
        <qualifiedname>hmap::hillshade</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>azimuth</declname>
        </param>
        <param>
          <type>float</type>
          <declname>zenith</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus_ref</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Compute the shaded relief map (hillshading) from a heightmap. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the shaded relief map of the input array based on the sun&apos;s azimuth (direction) and zenith (elevation) angles. The shading effect simulates the appearance of topographic features based on light direction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>azimuth</parametername>
</parameternamelist>
<parameterdescription>
<para>Sun azimuth (direction) in degrees. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zenith</parametername>
</parameternamelist>
<parameterdescription>
<para>Sun zenith (elevation) in degrees. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus_ref</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference talus used to normalize gradient computations. It can be useful when working with true angles. Default is 1.f. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Resulting shaded relief map.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_hillshade.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>azimuth<sp/>=<sp/>180.f;<sp/></highlight><highlight class="comment">//<sp/>exposure<sp/>from<sp/>the<sp/>west</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>zenith<sp/>=<sp/>45.f;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;sun<sp/>elevation<sp/>angle&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ts<sp/>=<sp/><ref refid="namespacehmap_1a03570be180e333d82101d31482e78829" kindref="member">hmap::topographic_shading</ref>(z,<sp/>azimuth,<sp/>zenith);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>hs<sp/>=<sp/><ref refid="namespacehmap_1acbc412801dcbcce77b0e60b219dc946a" kindref="member">hmap::hillshade</ref>(z,<sp/>azimuth,<sp/>zenith);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shadow_talus<sp/>=<sp/>2.f<sp/>/<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>sg<sp/>=<sp/><ref refid="namespacehmap_1a12f76d80fee40f96dc5b6540bb83be80" kindref="member">hmap::shadow_grid</ref>(z,<sp/>shadow_talus);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ts.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_hillshade0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a4eb53d94f58e93c3bdb554d8cca7f306" kindref="member">hmap::Cmap::BONE</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>hs.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_hillshade1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a4eb53d94f58e93c3bdb554d8cca7f306" kindref="member">hmap::Cmap::BONE</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sg.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_hillshade2.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a4eb53d94f58e93c3bdb554d8cca7f306" kindref="member">hmap::Cmap::BONE</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_hillshade0.png"></image>
 <image type="html" name="ex_hillshade1.png"></image>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="namespacehmap_1a03570be180e333d82101d31482e78829" kindref="member">topographic_shading</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/shadows/shadows.cpp" line="18" column="7" bodyfile="HighMap/src/shadows/shadows.cpp" bodystart="18" bodyend="31" declfile="HighMap/include/highmap/shadows.hpp" declline="52" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a12f76d80fee40f96dc5b6540bb83be80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::shadow_grid</definition>
        <argsstring>(const Array &amp;z, float shadow_talus)</argsstring>
        <name>shadow_grid</name>
        <qualifiedname>hmap::shadow_grid</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>shadow_talus</declname>
        </param>
        <briefdescription>
<para>Compute the shadow intensity using a grid-based technique. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the shadow intensity from the input array using a grid-based approach. The shadow talus parameter influences the calculation of shadow intensity.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shadow_talus</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter affecting the shadow intensity computation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Resulting shadow intensity map. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/shadows/shadows.cpp" line="50" column="7" bodyfile="HighMap/src/shadows/shadows.cpp" bodystart="50" bodyend="65" declfile="HighMap/include/highmap/shadows.hpp" declline="68" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ac28f43b4f0b1b481dc8eb528f1be0f3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::shadow_heightmap</definition>
        <argsstring>(const Array &amp;z, float azimuth=180.f, float zenith=45.f, float distance=0.2f)</argsstring>
        <name>shadow_heightmap</name>
        <qualifiedname>hmap::shadow_heightmap</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>azimuth</declname>
          <defval>180.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>zenith</declname>
          <defval>45.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>distance</declname>
          <defval>0.2<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Compute crude shadows from a heightmap. </para>
        </briefdescription>
        <detaileddescription>
<para>This function generates crude shadow effects from the input heightmap using the specified light azimuth, zenith, and distance. The method is based on the technique described in <ulink url="https://www.shadertoy.com/view/Xlsfzl">https://www.shadertoy.com/view/Xlsfzl</ulink>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>azimuth</parametername>
</parameternamelist>
<parameterdescription>
<para>Light azimuth (direction) in degrees. Default is 180.f. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zenith</parametername>
</parameternamelist>
<parameterdescription>
<para>Light zenith (elevation) in degrees. Default is 45.f. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distance</parametername>
</parameternamelist>
<parameterdescription>
<para>Light distance. Default is 0.2f. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Resulting crude shadow map. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/shadows/shadows.cpp" line="67" column="7" bodyfile="HighMap/src/shadows/shadows.cpp" bodystart="67" bodyend="125" declfile="HighMap/include/highmap/shadows.hpp" declline="83" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a03570be180e333d82101d31482e78829" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::topographic_shading</definition>
        <argsstring>(const Array &amp;z, float azimuth, float zenith, float talus_ref=1.f)</argsstring>
        <name>topographic_shading</name>
        <qualifiedname>hmap::topographic_shading</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>azimuth</declname>
        </param>
        <param>
          <type>float</type>
          <declname>zenith</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus_ref</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Compute the topographic shadow intensity in the range [-1, 1]. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the topographic shadow intensity of the input array based on the sun&apos;s azimuth and zenith. The shadow intensity is normalized to fall within the range [-1, 1].</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array representing the heightmap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>azimuth</parametername>
</parameternamelist>
<parameterdescription>
<para>Sun azimuth (direction) in degrees. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zenith</parametername>
</parameternamelist>
<parameterdescription>
<para>Sun zenith (elevation) in degrees. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>talus_ref</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference talus used to normalize gradient computations. It can be useful when working with true angles. Default is 1.f. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Resulting topographic shadow intensity map.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_hillshade.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>azimuth<sp/>=<sp/>180.f;<sp/></highlight><highlight class="comment">//<sp/>exposure<sp/>from<sp/>the<sp/>west</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>zenith<sp/>=<sp/>45.f;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;sun<sp/>elevation<sp/>angle&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ts<sp/>=<sp/><ref refid="namespacehmap_1a03570be180e333d82101d31482e78829" kindref="member">hmap::topographic_shading</ref>(z,<sp/>azimuth,<sp/>zenith);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>hs<sp/>=<sp/><ref refid="namespacehmap_1acbc412801dcbcce77b0e60b219dc946a" kindref="member">hmap::hillshade</ref>(z,<sp/>azimuth,<sp/>zenith);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shadow_talus<sp/>=<sp/>2.f<sp/>/<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>sg<sp/>=<sp/><ref refid="namespacehmap_1a12f76d80fee40f96dc5b6540bb83be80" kindref="member">hmap::shadow_grid</ref>(z,<sp/>shadow_talus);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ts.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_hillshade0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a4eb53d94f58e93c3bdb554d8cca7f306" kindref="member">hmap::Cmap::BONE</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>hs.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_hillshade1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a4eb53d94f58e93c3bdb554d8cca7f306" kindref="member">hmap::Cmap::BONE</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sg.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_hillshade2.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a4eb53d94f58e93c3bdb554d8cca7f306" kindref="member">hmap::Cmap::BONE</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_hillshade0.png"></image>
 <image type="html" name="ex_hillshade1.png"></image>
</para>
<para><simplesect kind="see"><para><computeroutput><ref refid="namespacehmap_1acbc412801dcbcce77b0e60b219dc946a" kindref="member">hillshade</ref></computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/shadows/shadows.cpp" line="33" column="7" bodyfile="HighMap/src/shadows/shadows.cpp" bodystart="33" bodyend="48" declfile="HighMap/include/highmap/shadows.hpp" declline="112" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a5926ef94ecc7024dab83b57fd9712aa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::find_path_dijkstra</definition>
        <argsstring>(const Array &amp;z, Vec2&lt; int &gt; ij_start, Vec2&lt; int &gt; ij_end, std::vector&lt; int &gt; &amp;i_path, std::vector&lt; int &gt; &amp;j_path, float elevation_ratio=0.1f, float distance_exponent=2.f, float upward_penalization=1.f, const Array *p_mask_nogo=nullptr)</argsstring>
        <name>find_path_dijkstra</name>
        <qualifiedname>hmap::find_path_dijkstra</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>ij_start</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>ij_end</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>i_path</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>j_path</declname>
        </param>
        <param>
          <type>float</type>
          <declname>elevation_ratio</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>distance_exponent</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>upward_penalization</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask_nogo</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Finds the path with the lowest elevation and elevation difference between two points in a 2D array using Dijkstra&apos;s algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the shortest path considering both elevation and elevation differences. It uses a cost function that balances between absolute elevation and elevation change. The path is determined by minimizing the combined cost function.</para>
<para><simplesect kind="see"><para>Dijkstra1971 and <ulink url="https://math.stackexchange.com/questions/3088292">https://math.stackexchange.com/questions/3088292</ulink></para>
</simplesect>
<simplesect kind="warning"><para>The <computeroutput>elevation_ratio</computeroutput> parameter must be less than 1 for the algorithm to converge properly.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ij_start</parametername>
</parameternamelist>
<parameterdescription>
<para>Starting coordinates (i, j) for the pathfinding. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ij_end</parametername>
</parameternamelist>
<parameterdescription>
<para>Ending coordinates (i, j) for the pathfinding. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i_path[out]</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to store the resulting shortest path indices in the i direction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j_path[out]</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to store the resulting shortest path indices in the j direction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elevation_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Balance factor between absolute elevation and elevation difference in the cost function. Should be in the range [0, 1[. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distance_exponent</parametername>
</parameternamelist>
<parameterdescription>
<para>Exponent used in the distance calculation between points. A higher exponent increases the cost of elevation gaps, encouraging the path to minimize elevation changes and reduce overall cumulative elevation gain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upward_penalization</parametername>
</parameternamelist>
<parameterdescription>
<para>Penalize upstream slopes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask_nogo</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to an array mask that defines areas to avoid during pathfinding.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_find_path_dijkstra.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>z.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_find_path_dijkstra0.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>ij_start<sp/>=<sp/>{40,<sp/>40};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>ij_end<sp/>=<sp/>{230,<sp/>230};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>i,<sp/>j;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a5926ef94ecc7024dab83b57fd9712aa2" kindref="member">hmap::find_path_dijkstra</ref>(z,<sp/>ij_start,<sp/>ij_end,<sp/>i,<sp/>j);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>export<sp/>path<sp/>to<sp/>a<sp/>png<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>w<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(shape);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>i.size();<sp/>k++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>w(i[k],<sp/>j[k])<sp/>=<sp/>1.f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>w.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_find_path_dijkstra1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>&quot;elevation_ratio&quot;<sp/>to<sp/>1.f<sp/>to<sp/>find<sp/>the<sp/>path<sp/>with<sp/>the<sp/>lowest</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cumulative<sp/>elevation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a5926ef94ecc7024dab83b57fd9712aa2" kindref="member">hmap::find_path_dijkstra</ref>(z,<sp/>ij_start,<sp/>ij_end,<sp/>i,<sp/>j,<sp/>1.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>export<sp/>path<sp/>to<sp/>a<sp/>png<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>w<sp/>=<sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref>(shape);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>i.size();<sp/>k++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>w(i[k],<sp/>j[k])<sp/>=<sp/>1.f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>w.<ref refid="classhmap_1_1Array_1a9ff7b2c0be8f2b5dd9fc33085cd647d1" kindref="member">to_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_find_path_dijkstra2.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a233f5593cf083495332bafd2607d154d" kindref="member">hmap::Cmap::GRAY</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_find_path_dijkstra0.png"></image>
 <image type="html" name="ex_find_path_dijkstra1.png"></image>
 <image type="html" name="ex_find_path_dijkstra2.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/shortest_path/dijsktra.cpp" line="141" column="6" bodyfile="HighMap/src/shortest_path/dijsktra.cpp" bodystart="141" bodyend="166" declfile="HighMap/include/highmap/shortest_path.hpp" declline="61" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a358bc9bb5c4be98fbb9bb0f1300272bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::find_path_dijkstra</definition>
        <argsstring>(const Array &amp;z, Vec2&lt; int &gt; ij_start, std::vector&lt; Vec2&lt; int &gt; &gt; ij_end_list, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;i_path_list, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;j_path_list, float elevation_ratio=0.1f, float distance_exponent=2.f, float upward_penalization=1.f, const Array *p_mask_nogo=nullptr)</argsstring>
        <name>find_path_dijkstra</name>
        <qualifiedname>hmap::find_path_dijkstra</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;</type>
          <declname>ij_start</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt; &gt;</type>
          <declname>ij_end_list</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; int &gt; &gt; &amp;</type>
          <declname>i_path_list</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; int &gt; &gt; &amp;</type>
          <declname>j_path_list</declname>
        </param>
        <param>
          <type>float</type>
          <declname>elevation_ratio</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>distance_exponent</declname>
          <defval>2.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>upward_penalization</declname>
          <defval>1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask_nogo</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/shortest_path/dijsktra.cpp" line="12" column="6" bodyfile="HighMap/src/shortest_path/dijsktra.cpp" bodystart="12" bodyend="139" declfile="HighMap/include/highmap/shortest_path.hpp" declline="71" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a92483ef87c6a5877abe30af6b270f2a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::non_parametric_sampling</definition>
        <argsstring>(const Array &amp;array, hmap::Vec2&lt; int &gt; patch_shape, uint seed, float error_threshold=0.1f)</argsstring>
        <name>non_parametric_sampling</name>
        <qualifiedname>hmap::non_parametric_sampling</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2</ref>&lt; int &gt;</type>
          <declname>patch_shape</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>float</type>
          <declname>error_threshold</declname>
          <defval>0.1<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Synthesize a new heightmap based on an input array using a non-parametric sampling method. </para>
        </briefdescription>
        <detaileddescription>
<para>This method generates a new heightmap by sampling patches from the input array non-parametrically. It is a slow process and is based on the technique described in Efros1999.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array from which patches are sampled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patch_shape</parametername>
</parameternamelist>
<parameterdescription>
<para>Shape of the patches used for sampling. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed number for patch selection. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>Threshold for patch selection based on error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Resulting synthesized heightmap.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="non_parametric_sampling.cpp"></programlisting></para>
<para><bold>Result</bold> <image type="html" name="non_parametric_sampling.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/synthesis/non_parameteric_sampling.cpp" line="39" column="7" bodyfile="HighMap/src/synthesis/non_parameteric_sampling.cpp" bodystart="39" bodyend="176" declfile="HighMap/include/highmap/synthesis.hpp" declline="58" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a94a0d14d841251b9803f6fa11097b175" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::quilting</definition>
        <argsstring>(const std::vector&lt; const Array * &gt; &amp;p_arrays, hmap::Vec2&lt; int &gt; patch_base_shape, hmap::Vec2&lt; int &gt; tiling, float overlap, uint seed, std::vector&lt; Array * &gt; secondary_arrays={}, bool patch_flip=true, bool patch_rotate=true, bool patch_transpose=true, float filter_width_ratio=0.25f)</argsstring>
        <name>quilting</name>
        <qualifiedname>hmap::quilting</qualifiedname>
        <param>
          <type>const std::vector&lt; const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> * &gt; &amp;</type>
          <declname>p_arrays</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2</ref>&lt; int &gt;</type>
          <declname>patch_base_shape</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2</ref>&lt; int &gt;</type>
          <declname>tiling</declname>
        </param>
        <param>
          <type>float</type>
          <declname>overlap</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> * &gt;</type>
          <declname>secondary_arrays</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>patch_flip</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>patch_rotate</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>patch_transpose</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>float</type>
          <declname>filter_width_ratio</declname>
          <defval>0.25<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Synthesize a new heightmap by stitching together small patches from input heightmaps. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a new heightmap by stitching patches from a set of input heightmaps. The stitching process allows for flipping, rotating, and transposing patches, and includes options for smoothing based on the overlap between patches. This technique is based on Efros2001.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_arrays</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of pointers to input heightmaps. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patch_base_shape</parametername>
</parameternamelist>
<parameterdescription>
<para>Shape of the patches to be used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tiling</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of patches in each direction (x, y). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overlap</parametername>
</parameternamelist>
<parameterdescription>
<para>Overlap between patches, in the range ]0, 1[. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed number for patch placement. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patch_flip</parametername>
</parameternamelist>
<parameterdescription>
<para>Allow flipping of patches (up-down, left-right). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patch_rotate</parametername>
</parameternamelist>
<parameterdescription>
<para>Allow 90-degree rotation of patches (for square patches). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patch_transpose</parametername>
</parameternamelist>
<parameterdescription>
<para>Allow transposition of patches (for square patches). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filter_width_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Ratio of filter width to overlap length for smoothing. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Resulting synthesized heightmap.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_quilting.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{512,<sp/>512};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zw<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a035bda7c8c2179b47b9a766531c2e89e" kindref="member">hmap::NoiseType::WORLEY</ref>,<sp/>shape,<sp/>kw,<sp/>++seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(zw);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ratio<sp/>=<sp/>0.25f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>patch_shape<sp/>=<sp/>{(int)(ratio<sp/>*<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(int)(ratio<sp/>*<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>)};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>tiling<sp/>=<sp/>{4,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap<sp/>=<sp/>0.9f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>base<sp/>function,<sp/>a<sp/>list<sp/>of<sp/>array<sp/>can<sp/>be<sp/>provided<sp/>as<sp/>a<sp/>source<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>patches.<sp/>Secondary<sp/>arrays<sp/>can<sp/>be<sp/>provided,<sp/>quilting<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>apply<sp/>to<sp/>them<sp/>based<sp/>on<sp/>the<sp/>input<sp/>arrays.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Array<sp/>*&gt;<sp/>input_p_arrays<sp/>=<sp/>{&amp;z};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zm<sp/>=<sp/>1.f<sp/>-<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dz<sp/>=<sp/><ref refid="namespacehmap_1a5f58c4149344b401d82f0be3c3807156" kindref="member">hmap::gradient_norm</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(dz);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Array<sp/>*&gt;<sp/>sec_arrays<sp/>=<sp/>{&amp;zm,<sp/>&amp;dz};<sp/></highlight><highlight class="comment">//<sp/>will<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>overriden</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zq<sp/>=<sp/><ref refid="namespacehmap_1a94a0d14d841251b9803f6fa11097b175" kindref="member">hmap::quilting</ref>({&amp;z},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch_shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tiling,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sec_arrays);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_quilting0.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{zq,<sp/>zm,<sp/>dz},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a744ead0b170889e33126895264f1af2c" kindref="member">hmap::Cmap::MAGMA</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>wrapper<sp/>/<sp/>shuffle</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zs0<sp/>=<sp/><ref refid="namespacehmap_1af2faad7feceeb1059da7303748438a51" kindref="member">hmap::quilting_shuffle</ref>(z,<sp/>patch_shape,<sp/>overlap,<sp/>++seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>secondary<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>dz<sp/>=<sp/><ref refid="namespacehmap_1a5f58c4149344b401d82f0be3c3807156" kindref="member">hmap::gradient_norm</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(dz);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sec_arrays<sp/>=<sp/>{&amp;dz};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zs1<sp/>=<sp/><ref refid="namespacehmap_1af2faad7feceeb1059da7303748438a51" kindref="member">hmap::quilting_shuffle</ref>(z,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch_shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sec_arrays);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_quilting1.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zs0,<sp/>zs1,<sp/>dz},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>wrapper<sp/>/<sp/>expand</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>array<sp/>is<sp/>2-times<sp/>larger<sp/>in<sp/>this<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>expansion_ratio<sp/>=<sp/>2.f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>secondary<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>dz<sp/>=<sp/><ref refid="namespacehmap_1a5f58c4149344b401d82f0be3c3807156" kindref="member">hmap::gradient_norm</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(dz);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sec_arrays<sp/>=<sp/>{&amp;dz};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ze0<sp/>=<sp/><ref refid="namespacehmap_1aa23790e26c213a550660e479a28f21e5" kindref="member">hmap::quilting_expand</ref>(z,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expansion_ratio,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch_shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sec_arrays,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_quilting2.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{ze0,<sp/>dz},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>keep<sp/>input<sp/>shape<sp/>for<sp/>the<sp/>output<sp/>(&apos;true&apos;<sp/>parameter)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>keep_input_shape<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ze1<sp/>=<sp/><ref refid="namespacehmap_1aa23790e26c213a550660e479a28f21e5" kindref="member">hmap::quilting_expand</ref>(z,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expansion_ratio,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch_shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{},<sp/></highlight><highlight class="comment">//<sp/>no<sp/>secondary<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keep_input_shape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ze2<sp/>=<sp/><ref refid="namespacehmap_1aa23790e26c213a550660e479a28f21e5" kindref="member">hmap::quilting_expand</ref>(z,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.f<sp/>*<sp/>expansion_ratio,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch_shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keep_input_shape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_quilting3.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>ze1,<sp/>ze2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>wrapper<sp/>/<sp/>blend</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zb<sp/>=<sp/><ref refid="namespacehmap_1a77691c31ed316374c25becc7ecddd133" kindref="member">hmap::quilting_blend</ref>({&amp;z,<sp/>&amp;zw},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch_shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_quilting4.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zw,<sp/>zb},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_quilting0.png"></image>
 <image type="html" name="ex_quilting1.png"></image>
 <image type="html" name="ex_quilting2.png"></image>
 <image type="html" name="ex_quilting3.png"></image>
 <image type="html" name="ex_quilting4.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/synthesis/quilting.cpp" line="14" column="7" bodyfile="HighMap/src/synthesis/quilting.cpp" bodystart="14" bodyend="192" declfile="HighMap/include/highmap/synthesis.hpp" declline="96" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a77691c31ed316374c25becc7ecddd133" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::quilting_blend</definition>
        <argsstring>(const std::vector&lt; const Array * &gt; &amp;p_arrays, hmap::Vec2&lt; int &gt; patch_base_shape, float overlap, uint seed, bool patch_flip=true, bool patch_rotate=true, bool patch_transpose=true, float filter_width_ratio=0.25f)</argsstring>
        <name>quilting_blend</name>
        <qualifiedname>hmap::quilting_blend</qualifiedname>
        <param>
          <type>const std::vector&lt; const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> * &gt; &amp;</type>
          <declname>p_arrays</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2</ref>&lt; int &gt;</type>
          <declname>patch_base_shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>overlap</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>patch_flip</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>patch_rotate</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>patch_transpose</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>float</type>
          <declname>filter_width_ratio</declname>
          <defval>0.25<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Synthesize a new heightmap by stitching together small patches from a list of input heightmaps. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a new heightmap by stitching patches from a set of input heightmaps, similar to <computeroutput>quilting</computeroutput>, but the patches are blended together. The blending options include flipping, rotating, and transposing patches, with smoothing based on the overlap between patches.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_arrays</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of pointers to input heightmaps. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patch_base_shape</parametername>
</parameternamelist>
<parameterdescription>
<para>Shape of the patches to be used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overlap</parametername>
</parameternamelist>
<parameterdescription>
<para>Overlap between patches, in the range ]0, 1[. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed number for patch placement. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patch_flip</parametername>
</parameternamelist>
<parameterdescription>
<para>Allow flipping of patches (up-down, left-right). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patch_rotate</parametername>
</parameternamelist>
<parameterdescription>
<para>Allow 90-degree rotation of patches (for square patches). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patch_transpose</parametername>
</parameternamelist>
<parameterdescription>
<para>Allow transposition of patches (for square patches). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filter_width_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Ratio of filter width to overlap length for smoothing. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Resulting synthesized heightmap.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_quilting.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{512,<sp/>512};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zw<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a035bda7c8c2179b47b9a766531c2e89e" kindref="member">hmap::NoiseType::WORLEY</ref>,<sp/>shape,<sp/>kw,<sp/>++seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(zw);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ratio<sp/>=<sp/>0.25f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>patch_shape<sp/>=<sp/>{(int)(ratio<sp/>*<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(int)(ratio<sp/>*<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>)};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>tiling<sp/>=<sp/>{4,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap<sp/>=<sp/>0.9f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>base<sp/>function,<sp/>a<sp/>list<sp/>of<sp/>array<sp/>can<sp/>be<sp/>provided<sp/>as<sp/>a<sp/>source<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>patches.<sp/>Secondary<sp/>arrays<sp/>can<sp/>be<sp/>provided,<sp/>quilting<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>apply<sp/>to<sp/>them<sp/>based<sp/>on<sp/>the<sp/>input<sp/>arrays.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Array<sp/>*&gt;<sp/>input_p_arrays<sp/>=<sp/>{&amp;z};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zm<sp/>=<sp/>1.f<sp/>-<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dz<sp/>=<sp/><ref refid="namespacehmap_1a5f58c4149344b401d82f0be3c3807156" kindref="member">hmap::gradient_norm</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(dz);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Array<sp/>*&gt;<sp/>sec_arrays<sp/>=<sp/>{&amp;zm,<sp/>&amp;dz};<sp/></highlight><highlight class="comment">//<sp/>will<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>overriden</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zq<sp/>=<sp/><ref refid="namespacehmap_1a94a0d14d841251b9803f6fa11097b175" kindref="member">hmap::quilting</ref>({&amp;z},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch_shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tiling,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sec_arrays);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_quilting0.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{zq,<sp/>zm,<sp/>dz},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a744ead0b170889e33126895264f1af2c" kindref="member">hmap::Cmap::MAGMA</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>wrapper<sp/>/<sp/>shuffle</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zs0<sp/>=<sp/><ref refid="namespacehmap_1af2faad7feceeb1059da7303748438a51" kindref="member">hmap::quilting_shuffle</ref>(z,<sp/>patch_shape,<sp/>overlap,<sp/>++seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>secondary<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>dz<sp/>=<sp/><ref refid="namespacehmap_1a5f58c4149344b401d82f0be3c3807156" kindref="member">hmap::gradient_norm</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(dz);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sec_arrays<sp/>=<sp/>{&amp;dz};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zs1<sp/>=<sp/><ref refid="namespacehmap_1af2faad7feceeb1059da7303748438a51" kindref="member">hmap::quilting_shuffle</ref>(z,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch_shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sec_arrays);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_quilting1.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zs0,<sp/>zs1,<sp/>dz},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>wrapper<sp/>/<sp/>expand</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>array<sp/>is<sp/>2-times<sp/>larger<sp/>in<sp/>this<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>expansion_ratio<sp/>=<sp/>2.f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>secondary<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>dz<sp/>=<sp/><ref refid="namespacehmap_1a5f58c4149344b401d82f0be3c3807156" kindref="member">hmap::gradient_norm</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(dz);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sec_arrays<sp/>=<sp/>{&amp;dz};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ze0<sp/>=<sp/><ref refid="namespacehmap_1aa23790e26c213a550660e479a28f21e5" kindref="member">hmap::quilting_expand</ref>(z,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expansion_ratio,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch_shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sec_arrays,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_quilting2.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{ze0,<sp/>dz},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>keep<sp/>input<sp/>shape<sp/>for<sp/>the<sp/>output<sp/>(&apos;true&apos;<sp/>parameter)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>keep_input_shape<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ze1<sp/>=<sp/><ref refid="namespacehmap_1aa23790e26c213a550660e479a28f21e5" kindref="member">hmap::quilting_expand</ref>(z,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expansion_ratio,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch_shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{},<sp/></highlight><highlight class="comment">//<sp/>no<sp/>secondary<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keep_input_shape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ze2<sp/>=<sp/><ref refid="namespacehmap_1aa23790e26c213a550660e479a28f21e5" kindref="member">hmap::quilting_expand</ref>(z,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.f<sp/>*<sp/>expansion_ratio,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch_shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keep_input_shape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_quilting3.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>ze1,<sp/>ze2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>wrapper<sp/>/<sp/>blend</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zb<sp/>=<sp/><ref refid="namespacehmap_1a77691c31ed316374c25becc7ecddd133" kindref="member">hmap::quilting_blend</ref>({&amp;z,<sp/>&amp;zw},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch_shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_quilting4.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zw,<sp/>zb},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_quilting0.png"></image>
 <image type="html" name="ex_quilting1.png"></image>
 <image type="html" name="ex_quilting2.png"></image>
 <image type="html" name="ex_quilting3.png"></image>
 <image type="html" name="ex_quilting4.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/synthesis/quilting.cpp" line="194" column="7" bodyfile="HighMap/src/synthesis/quilting.cpp" bodystart="194" bodyend="221" declfile="HighMap/include/highmap/synthesis.hpp" declline="139" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aa23790e26c213a550660e479a28f21e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::quilting_expand</definition>
        <argsstring>(const Array &amp;array, float expansion_ratio, hmap::Vec2&lt; int &gt; patch_base_shape, float overlap, uint seed, std::vector&lt; Array * &gt; secondary_arrays={}, bool keep_input_shape=false, bool patch_flip=true, bool patch_rotate=true, bool patch_transpose=true, float filter_width_ratio=0.25f)</argsstring>
        <name>quilting_expand</name>
        <qualifiedname>hmap::quilting_expand</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>expansion_ratio</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2</ref>&lt; int &gt;</type>
          <declname>patch_base_shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>overlap</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> * &gt;</type>
          <declname>secondary_arrays</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>keep_input_shape</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>patch_flip</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>patch_rotate</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>patch_transpose</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>float</type>
          <declname>filter_width_ratio</declname>
          <defval>0.25<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Synthesize a new heightmap by expanding the input heightmap and stitching patches. </para>
        </briefdescription>
        <detaileddescription>
<para>This function generates a larger heightmap by expanding the input heightmap and stitching patches based on the given parameters. The expansion ratio determines the new size of the heightmap, and the function includes options for flipping, rotating, and transposing patches. The output can be either the same shape as the input or expanded based on the given ratio.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input heightmap to be expanded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expansion_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Ratio by which to expand the heightmap (e.g., 2 for doubling the size). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patch_base_shape</parametername>
</parameternamelist>
<parameterdescription>
<para>Shape of the patches to be used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overlap</parametername>
</parameternamelist>
<parameterdescription>
<para>Overlap between patches, in the range ]0, 1[. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed number for patch placement. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keep_input_shape</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, the output heightmap retains the input shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patch_flip</parametername>
</parameternamelist>
<parameterdescription>
<para>Allow flipping of patches (up-down, left-right). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patch_rotate</parametername>
</parameternamelist>
<parameterdescription>
<para>Allow 90-degree rotation of patches (for square patches). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patch_transpose</parametername>
</parameternamelist>
<parameterdescription>
<para>Allow transposition of patches (for square patches). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filter_width_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Ratio of filter width to overlap length for smoothing. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Resulting synthesized heightmap.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_quilting.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{512,<sp/>512};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zw<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a035bda7c8c2179b47b9a766531c2e89e" kindref="member">hmap::NoiseType::WORLEY</ref>,<sp/>shape,<sp/>kw,<sp/>++seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(zw);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ratio<sp/>=<sp/>0.25f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>patch_shape<sp/>=<sp/>{(int)(ratio<sp/>*<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(int)(ratio<sp/>*<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>)};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>tiling<sp/>=<sp/>{4,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap<sp/>=<sp/>0.9f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>base<sp/>function,<sp/>a<sp/>list<sp/>of<sp/>array<sp/>can<sp/>be<sp/>provided<sp/>as<sp/>a<sp/>source<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>patches.<sp/>Secondary<sp/>arrays<sp/>can<sp/>be<sp/>provided,<sp/>quilting<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>apply<sp/>to<sp/>them<sp/>based<sp/>on<sp/>the<sp/>input<sp/>arrays.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Array<sp/>*&gt;<sp/>input_p_arrays<sp/>=<sp/>{&amp;z};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zm<sp/>=<sp/>1.f<sp/>-<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dz<sp/>=<sp/><ref refid="namespacehmap_1a5f58c4149344b401d82f0be3c3807156" kindref="member">hmap::gradient_norm</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(dz);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Array<sp/>*&gt;<sp/>sec_arrays<sp/>=<sp/>{&amp;zm,<sp/>&amp;dz};<sp/></highlight><highlight class="comment">//<sp/>will<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>overriden</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zq<sp/>=<sp/><ref refid="namespacehmap_1a94a0d14d841251b9803f6fa11097b175" kindref="member">hmap::quilting</ref>({&amp;z},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch_shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tiling,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sec_arrays);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_quilting0.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{zq,<sp/>zm,<sp/>dz},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a744ead0b170889e33126895264f1af2c" kindref="member">hmap::Cmap::MAGMA</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>wrapper<sp/>/<sp/>shuffle</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zs0<sp/>=<sp/><ref refid="namespacehmap_1af2faad7feceeb1059da7303748438a51" kindref="member">hmap::quilting_shuffle</ref>(z,<sp/>patch_shape,<sp/>overlap,<sp/>++seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>secondary<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>dz<sp/>=<sp/><ref refid="namespacehmap_1a5f58c4149344b401d82f0be3c3807156" kindref="member">hmap::gradient_norm</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(dz);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sec_arrays<sp/>=<sp/>{&amp;dz};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zs1<sp/>=<sp/><ref refid="namespacehmap_1af2faad7feceeb1059da7303748438a51" kindref="member">hmap::quilting_shuffle</ref>(z,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch_shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sec_arrays);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_quilting1.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zs0,<sp/>zs1,<sp/>dz},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>wrapper<sp/>/<sp/>expand</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>array<sp/>is<sp/>2-times<sp/>larger<sp/>in<sp/>this<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>expansion_ratio<sp/>=<sp/>2.f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>secondary<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>dz<sp/>=<sp/><ref refid="namespacehmap_1a5f58c4149344b401d82f0be3c3807156" kindref="member">hmap::gradient_norm</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(dz);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sec_arrays<sp/>=<sp/>{&amp;dz};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ze0<sp/>=<sp/><ref refid="namespacehmap_1aa23790e26c213a550660e479a28f21e5" kindref="member">hmap::quilting_expand</ref>(z,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expansion_ratio,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch_shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sec_arrays,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_quilting2.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{ze0,<sp/>dz},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>keep<sp/>input<sp/>shape<sp/>for<sp/>the<sp/>output<sp/>(&apos;true&apos;<sp/>parameter)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>keep_input_shape<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ze1<sp/>=<sp/><ref refid="namespacehmap_1aa23790e26c213a550660e479a28f21e5" kindref="member">hmap::quilting_expand</ref>(z,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expansion_ratio,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch_shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{},<sp/></highlight><highlight class="comment">//<sp/>no<sp/>secondary<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keep_input_shape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ze2<sp/>=<sp/><ref refid="namespacehmap_1aa23790e26c213a550660e479a28f21e5" kindref="member">hmap::quilting_expand</ref>(z,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.f<sp/>*<sp/>expansion_ratio,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch_shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keep_input_shape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_quilting3.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>ze1,<sp/>ze2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>wrapper<sp/>/<sp/>blend</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zb<sp/>=<sp/><ref refid="namespacehmap_1a77691c31ed316374c25becc7ecddd133" kindref="member">hmap::quilting_blend</ref>({&amp;z,<sp/>&amp;zw},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch_shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_quilting4.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zw,<sp/>zb},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_quilting0.png"></image>
 <image type="html" name="ex_quilting1.png"></image>
 <image type="html" name="ex_quilting2.png"></image>
 <image type="html" name="ex_quilting3.png"></image>
 <image type="html" name="ex_quilting4.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/synthesis/quilting.cpp" line="223" column="7" bodyfile="HighMap/src/synthesis/quilting.cpp" bodystart="223" bodyend="317" declfile="HighMap/include/highmap/synthesis.hpp" declline="185" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1af2faad7feceeb1059da7303748438a51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::quilting_shuffle</definition>
        <argsstring>(const Array &amp;array, hmap::Vec2&lt; int &gt; patch_base_shape, float overlap, uint seed, std::vector&lt; Array * &gt; secondary_arrays={}, bool patch_flip=true, bool patch_rotate=true, bool patch_transpose=true, float filter_width_ratio=0.25f)</argsstring>
        <name>quilting_shuffle</name>
        <qualifiedname>hmap::quilting_shuffle</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2</ref>&lt; int &gt;</type>
          <declname>patch_base_shape</declname>
        </param>
        <param>
          <type>float</type>
          <declname>overlap</declname>
        </param>
        <param>
          <type><ref refid="array_8hpp_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> * &gt;</type>
          <declname>secondary_arrays</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>patch_flip</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>patch_rotate</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>patch_transpose</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>float</type>
          <declname>filter_width_ratio</declname>
          <defval>0.25<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <briefdescription>
<para>Synthesize a new heightmap by reshuffling patches of the input heightmap. </para>
        </briefdescription>
        <detaileddescription>
<para>This function generates a new heightmap by reshuffling patches of the input heightmap, effectively creating a new pattern while keeping the same shape as the input heightmap. The function includes options for patch flipping, rotating, and transposing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input heightmap to be reshuffled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patch_base_shape</parametername>
</parameternamelist>
<parameterdescription>
<para>Shape of the patches to be used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overlap</parametername>
</parameternamelist>
<parameterdescription>
<para>Overlap between patches, in the range ]0, 1[. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Random seed number for patch placement. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patch_flip</parametername>
</parameternamelist>
<parameterdescription>
<para>Allow flipping of patches (up-down, left-right). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patch_rotate</parametername>
</parameternamelist>
<parameterdescription>
<para>Allow 90-degree rotation of patches (for square patches). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patch_transpose</parametername>
</parameternamelist>
<parameterdescription>
<para>Allow transposition of patches (for square patches). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filter_width_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Ratio of filter width to overlap length for smoothing. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> Resulting synthesized heightmap with reshuffled patches.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_quilting.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{512,<sp/>512};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>kw<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>kw,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zw<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a035bda7c8c2179b47b9a766531c2e89e" kindref="member">hmap::NoiseType::WORLEY</ref>,<sp/>shape,<sp/>kw,<sp/>++seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(zw);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ratio<sp/>=<sp/>0.25f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>patch_shape<sp/>=<sp/>{(int)(ratio<sp/>*<sp/>shape.<ref refid="structhmap_1_1Vec2_1a2dc51e83492f966eeddbdac3d58ab447" kindref="member">x</ref>),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(int)(ratio<sp/>*<sp/>shape.<ref refid="structhmap_1_1Vec2_1a087ff9ff4159d1e5778c0b65ee2a1648" kindref="member">y</ref>)};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>tiling<sp/>=<sp/>{4,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap<sp/>=<sp/>0.9f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>base<sp/>function,<sp/>a<sp/>list<sp/>of<sp/>array<sp/>can<sp/>be<sp/>provided<sp/>as<sp/>a<sp/>source<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>patches.<sp/>Secondary<sp/>arrays<sp/>can<sp/>be<sp/>provided,<sp/>quilting<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>apply<sp/>to<sp/>them<sp/>based<sp/>on<sp/>the<sp/>input<sp/>arrays.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Array<sp/>*&gt;<sp/>input_p_arrays<sp/>=<sp/>{&amp;z};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zm<sp/>=<sp/>1.f<sp/>-<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dz<sp/>=<sp/><ref refid="namespacehmap_1a5f58c4149344b401d82f0be3c3807156" kindref="member">hmap::gradient_norm</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(dz);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;hmap::Array<sp/>*&gt;<sp/>sec_arrays<sp/>=<sp/>{&amp;zm,<sp/>&amp;dz};<sp/></highlight><highlight class="comment">//<sp/>will<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>overriden</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zq<sp/>=<sp/><ref refid="namespacehmap_1a94a0d14d841251b9803f6fa11097b175" kindref="member">hmap::quilting</ref>({&amp;z},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch_shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tiling,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sec_arrays);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_quilting0.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{zq,<sp/>zm,<sp/>dz},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a744ead0b170889e33126895264f1af2c" kindref="member">hmap::Cmap::MAGMA</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>wrapper<sp/>/<sp/>shuffle</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zs0<sp/>=<sp/><ref refid="namespacehmap_1af2faad7feceeb1059da7303748438a51" kindref="member">hmap::quilting_shuffle</ref>(z,<sp/>patch_shape,<sp/>overlap,<sp/>++seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>secondary<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>dz<sp/>=<sp/><ref refid="namespacehmap_1a5f58c4149344b401d82f0be3c3807156" kindref="member">hmap::gradient_norm</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(dz);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sec_arrays<sp/>=<sp/>{&amp;dz};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zs1<sp/>=<sp/><ref refid="namespacehmap_1af2faad7feceeb1059da7303748438a51" kindref="member">hmap::quilting_shuffle</ref>(z,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch_shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sec_arrays);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_quilting1.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zs0,<sp/>zs1,<sp/>dz},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>wrapper<sp/>/<sp/>expand</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>array<sp/>is<sp/>2-times<sp/>larger<sp/>in<sp/>this<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>expansion_ratio<sp/>=<sp/>2.f;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>secondary<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>dz<sp/>=<sp/><ref refid="namespacehmap_1a5f58c4149344b401d82f0be3c3807156" kindref="member">hmap::gradient_norm</ref>(z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(dz);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sec_arrays<sp/>=<sp/>{&amp;dz};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ze0<sp/>=<sp/><ref refid="namespacehmap_1aa23790e26c213a550660e479a28f21e5" kindref="member">hmap::quilting_expand</ref>(z,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expansion_ratio,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch_shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sec_arrays,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_quilting2.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{ze0,<sp/>dz},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>keep<sp/>input<sp/>shape<sp/>for<sp/>the<sp/>output<sp/>(&apos;true&apos;<sp/>parameter)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>keep_input_shape<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ze1<sp/>=<sp/><ref refid="namespacehmap_1aa23790e26c213a550660e479a28f21e5" kindref="member">hmap::quilting_expand</ref>(z,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expansion_ratio,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch_shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{},<sp/></highlight><highlight class="comment">//<sp/>no<sp/>secondary<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keep_input_shape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>ze2<sp/>=<sp/><ref refid="namespacehmap_1aa23790e26c213a550660e479a28f21e5" kindref="member">hmap::quilting_expand</ref>(z,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.f<sp/>*<sp/>expansion_ratio,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch_shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++seed,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keep_input_shape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_quilting3.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>ze1,<sp/>ze2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>wrapper<sp/>/<sp/>blend</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>zb<sp/>=<sp/><ref refid="namespacehmap_1a77691c31ed316374c25becc7ecddd133" kindref="member">hmap::quilting_blend</ref>({&amp;z,<sp/>&amp;zw},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patch_shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlap,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_quilting4.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z,<sp/>zw,<sp/>zb},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_quilting0.png"></image>
 <image type="html" name="ex_quilting1.png"></image>
 <image type="html" name="ex_quilting2.png"></image>
 <image type="html" name="ex_quilting3.png"></image>
 <image type="html" name="ex_quilting4.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/synthesis/quilting.cpp" line="319" column="7" bodyfile="HighMap/src/synthesis/quilting.cpp" bodystart="319" bodyend="352" declfile="HighMap/include/highmap/synthesis.hpp" declline="230" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a19dec938e688ef4b73cf27ff3934043b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::flip_lr</definition>
        <argsstring>(Array &amp;array)</argsstring>
        <name>flip_lr</name>
        <qualifiedname>hmap::flip_lr</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Flip the array horizontally (left/right). </para>
        </briefdescription>
        <detaileddescription>
<para>This function flips the input array along the vertical axis, resulting in a left-to-right mirror image of the original array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be flipped horizontally.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="flip_lr.cpp"></programlisting></para>
<para><bold>Result</bold> <image type="html" name="flip_lr.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/transform/transform.cpp" line="18" column="6" bodyfile="HighMap/src/transform/transform.cpp" bodystart="18" bodyend="23" declfile="HighMap/include/highmap/transform.hpp" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a2c304fc0d8cefe164e3070c885b43aaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::flip_ud</definition>
        <argsstring>(Array &amp;array)</argsstring>
        <name>flip_ud</name>
        <qualifiedname>hmap::flip_ud</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Flip the array vertically (up/down). </para>
        </briefdescription>
        <detaileddescription>
<para>This function flips the input array along the horizontal axis, resulting in an up-to-down mirror image of the original array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be flipped vertically.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="flip_ud.cpp"></programlisting></para>
<para><bold>Result</bold> <image type="html" name="flip_ud.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/transform/transform.cpp" line="25" column="6" bodyfile="HighMap/src/transform/transform.cpp" bodystart="25" bodyend="30" declfile="HighMap/include/highmap/transform.hpp" declline="59" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a5a621a9b245b5f9a4c9e5aa3ba3bbee0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::rot180</definition>
        <argsstring>(Array &amp;array)</argsstring>
        <name>rot180</name>
        <qualifiedname>hmap::rot180</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Rotate the array by 180 degrees. </para>
        </briefdescription>
        <detaileddescription>
<para>This function rotates the input array by 180 degrees in the counterclockwise direction. The dimensions of the array will be adjusted accordingly.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be rotated by 180 degrees. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/transform/transform.cpp" line="32" column="6" bodyfile="HighMap/src/transform/transform.cpp" bodystart="32" bodyend="36" declfile="HighMap/include/highmap/transform.hpp" declline="69" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a836dbf6645c0e60bd887d6f14210b9d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::rot270</definition>
        <argsstring>(Array &amp;array)</argsstring>
        <name>rot270</name>
        <qualifiedname>hmap::rot270</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Rotate the array by 270 degrees. </para>
        </briefdescription>
        <detaileddescription>
<para>This function rotates the input array by 270 degrees in the counterclockwise direction. The dimensions of the array will be adjusted accordingly.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be rotated by 270 degrees. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/transform/transform.cpp" line="38" column="6" bodyfile="HighMap/src/transform/transform.cpp" bodystart="38" bodyend="42" declfile="HighMap/include/highmap/transform.hpp" declline="79" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ab2362d8dcac398c859dd4ec37214af01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::rot90</definition>
        <argsstring>(Array &amp;array)</argsstring>
        <name>rot90</name>
        <qualifiedname>hmap::rot90</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Rotate the array by 90 degrees. </para>
        </briefdescription>
        <detaileddescription>
<para>This function rotates the input array by 90 degrees in the counterclockwise direction. The dimensions of the array will be adjusted accordingly.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be rotated by 90 degrees.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_rot90.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1ab2362d8dcac398c859dd4ec37214af01" kindref="member">hmap::rot90</ref>(z1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_rot90.png&quot;</highlight><highlight class="normal">,<sp/>{z,<sp/>z1},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369afd0b9cd53cbae62c25ef686ba527d143" kindref="member">hmap::Cmap::INFERNO</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_rot90.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/transform/transform.cpp" line="44" column="6" bodyfile="HighMap/src/transform/transform.cpp" bodystart="44" bodyend="48" declfile="HighMap/include/highmap/transform.hpp" declline="95" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a888dcfe5adb36448366400f04efcde04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::rotate</definition>
        <argsstring>(Array &amp;array, float angle, bool zoom_in=true, bool zero_padding=false)</argsstring>
        <name>rotate</name>
        <qualifiedname>hmap::rotate</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>zoom_in</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>zero_padding</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Rotate the array by a specified angle. </para>
        </briefdescription>
        <detaileddescription>
<para>This function rotates the input array by a given angle in degrees. The rotation can be performed with optional zero-padding, which fills in the borders with zeros instead of using symmetric padding. This is particularly useful when the array contains zero values at its borders.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be rotated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation angle in degrees. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zero_padding</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, use zero-padding to fill the borders; otherwise, use symmetry (default is false).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_rotate.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a888dcfe5adb36448366400f04efcde04" kindref="member">hmap::rotate</ref>(z1,<sp/>30.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>gpu<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1_1gpu_1adb8336ed4d83c15500872185dee45d50" kindref="member">hmap::gpu::init_opencl</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1_1gpu_1aab128e15988875b5d350d6f156612aa5" kindref="member">hmap::gpu::rotate</ref>(z2,<sp/>30.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z3<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1_1gpu_1aab128e15988875b5d350d6f156612aa5" kindref="member">hmap::gpu::rotate</ref>(z3,<sp/>30.f,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>no<sp/>zoom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_rotate.png&quot;</highlight><highlight class="normal">,<sp/>{z,<sp/>z1,<sp/>z2,<sp/>z3},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_rotate.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/transform/transform.cpp" line="50" column="6" bodyfile="HighMap/src/transform/transform.cpp" bodystart="50" bodyend="90" declfile="HighMap/include/highmap/transform.hpp" declline="116" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a9b059a298d27843519baa3b6bfe291cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::transpose</definition>
        <argsstring>(const Array &amp;array)</argsstring>
        <name>transpose</name>
        <qualifiedname>hmap::transpose</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Return the transposed array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns a new array that is the transpose of the input array. The transpose operation swaps the rows and columns of the array, effectively flipping the array over its diagonal.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be transposed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The transposed array. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/transform/transform.cpp" line="124" column="7" bodyfile="HighMap/src/transform/transform.cpp" bodystart="124" bodyend="133" declfile="HighMap/include/highmap/transform.hpp" declline="131" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a7b342891b252b6156d3a0c20ec57fe90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::translate</definition>
        <argsstring>(const Array &amp;array, float dx, float dy, bool periodic=false, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>translate</name>
        <qualifiedname>hmap::translate</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>float</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>periodic</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Translates a 2D array by a specified amount along the x and y axes. </para>
        </briefdescription>
        <detaileddescription>
<para>This function shifts the contents of the input array by <computeroutput>dx</computeroutput> and <computeroutput>dy</computeroutput> units along the x and y axes, respectively. It supports both periodic boundary conditions, where the array wraps around, and non-periodic conditions, where the shifted areas are filled with zeros.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The input 2D array to be translated. This array remains unmodified. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para>The translation distance along the x-axis. Positive values shift the array to the right. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dy</parametername>
</parameternamelist>
<parameterdescription>
<para>The translation distance along the y-axis. Positive values shift the array downward. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>periodic</parametername>
</parameternamelist>
<parameterdescription>
<para>If set to <computeroutput>true</computeroutput>, the translation is periodic, meaning that elements that move out of one side of the array reappear on the opposite side. If <computeroutput>false</computeroutput>, the areas exposed by the translation are filled with zeros. The default is <computeroutput>false</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to a 2D array that contains x-direction noise to be added to the translation. If provided, the noise values are added to <computeroutput>dx</computeroutput> on a per-element basis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to a 2D array that contains y-direction noise to be added to the translation. If provided, the noise values are added to <computeroutput>dy</computeroutput> on a per-element basis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new 2D array that is the result of translating the input <computeroutput>array</computeroutput> by the specified <computeroutput>dx</computeroutput> and <computeroutput>dy</computeroutput> values.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_translate.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zt<sp/>=<sp/><ref refid="namespacehmap_1a7b342891b252b6156d3a0c20ec57fe90" kindref="member">hmap::translate</ref>(z,<sp/>0.25f,<sp/>-0.1f,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_translate.png&quot;</highlight><highlight class="normal">,<sp/>{z,<sp/>zt},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a65146260717d07e4773aec50520b9ced" kindref="member">hmap::Cmap::JET</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_translate.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/transform/transform.cpp" line="92" column="7" bodyfile="HighMap/src/transform/transform.cpp" bodystart="92" bodyend="122" declfile="HighMap/include/highmap/transform.hpp" declline="168" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a19148ad2a95f7ad5b05161e9a0f0f732" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::warp</definition>
        <argsstring>(Array &amp;array, const Array *p_dx, const Array *p_dy)</argsstring>
        <name>warp</name>
        <qualifiedname>hmap::warp</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_dx</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_dy</declname>
        </param>
        <briefdescription>
<para>Apply a warping effect to the array. </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies a warping effect to the input array by translating its elements according to the specified x and y translation arrays. The warp effect distorts the array based on the displacement values provided by <computeroutput>p_dx</computeroutput> and <computeroutput>p_dy</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be warped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_dx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the array containing x-axis translation values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_dy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the array containing y-axis translation values.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_warp.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{2.f,<sp/>2.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z0<sp/>=<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>dx<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{4.f,<sp/>4.f},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>dy<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{4.f,<sp/>4.f},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>+<sp/>2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>warping<sp/>scale<sp/>assuming<sp/>a<sp/>unit<sp/>square<sp/>domain</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale<sp/>=<sp/>0.25f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">remap</ref>(dx,<sp/>-scale,<sp/>scale);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">remap</ref>(dy,<sp/>-scale,<sp/>scale);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a19148ad2a95f7ad5b05161e9a0f0f732" kindref="member">hmap::warp</ref>(z,<sp/>&amp;dx,<sp/>&amp;dy);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_warp.png&quot;</highlight><highlight class="normal">,<sp/>{z0,<sp/>z},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a0741a9943ed0e5c50042ef82d4d55492" kindref="member">hmap::Cmap::VIRIDIS</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_warp.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/transform/warp.cpp" line="19" column="6" bodyfile="HighMap/src/transform/warp.cpp" bodystart="19" bodyend="32" declfile="HighMap/include/highmap/transform.hpp" declline="194" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1accbbc6e5bedf98c7a7fa85fbe364194e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::warp_directional</definition>
        <argsstring>(Array &amp;array, float angle, float amount=0.02f, int ir=4, bool reverse=false)</argsstring>
        <name>warp_directional</name>
        <qualifiedname>hmap::warp_directional</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amount</declname>
          <defval>0.02<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
          <defval>4</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>reverse</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Apply a warping effect following the downward local gradient direction (deflate/inflate effect). </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies a warping effect to the input array based on the downward local gradient direction, creating a deflate or inflate effect. The warp amount, pre-filtering radius, and displacement direction can be customized.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be warped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>The angle to determine the gradient direction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of displacement (default is 0.02f). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Pre-filtering radius to smooth the input data (default is 4). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reverse</parametername>
</parameternamelist>
<parameterdescription>
<para>Reverse the displacement direction if set to true (default is false).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_warp_directional.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>shape<sp/>=<sp/>{512,<sp/>512};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>mask<sp/>=<sp/>z1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(mask);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/>z1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1accbbc6e5bedf98c7a7fa85fbe364194e" kindref="member">hmap::warp_directional</ref>(z2,<sp/>30.f,<sp/>0.02f,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_warp_directional.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z1,<sp/>z2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_warp_directional.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/transform/warp.cpp" line="34" column="6" bodyfile="HighMap/src/transform/warp.cpp" bodystart="34" bodyend="60" declfile="HighMap/include/highmap/transform.hpp" declline="218" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a6b780e74228ec5cca45602eb19b8975c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::warp_directional</definition>
        <argsstring>(Array &amp;array, float angle, const Array *p_mask, float amount=0.02f, int ir=4, bool reverse=false)</argsstring>
        <name>warp_directional</name>
        <qualifiedname>hmap::warp_directional</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amount</declname>
          <defval>0.02<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
          <defval>4</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>reverse</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Apply a warping effect following the downward local gradient direction (deflate/inflate effect) with a mask. </para>
        </briefdescription>
        <detaileddescription>
<para>This overloaded function applies a warping effect to the input array using a specified mask. The mask controls the regions where the warp effect is applied, with values expected in the range [0, 1]. The warp is based on the downward local gradient direction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be warped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>The angle to determine the gradient direction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the mask array that filters the effect, expected in [0, 1]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of displacement (default is 0.02f). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Pre-filtering radius to smooth the input data (default is 4). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reverse</parametername>
</parameternamelist>
<parameterdescription>
<para>Reverse the displacement direction if set to true (default is false).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_warp_directional.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>shape<sp/>=<sp/>{512,<sp/>512};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>mask<sp/>=<sp/>z1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(mask);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/>z1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1accbbc6e5bedf98c7a7fa85fbe364194e" kindref="member">hmap::warp_directional</ref>(z2,<sp/>30.f,<sp/>0.02f,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_warp_directional.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z1,<sp/>z2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_warp_directional.png"></image>
 This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/transform/warp.cpp" line="62" column="6" bodyfile="HighMap/src/transform/warp.cpp" bodystart="62" bodyend="77" declfile="HighMap/include/highmap/transform.hpp" declline="248" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a5d5baa80ff76a31a24e3b348edb0520a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::warp_downslope</definition>
        <argsstring>(Array &amp;array, float amount=0.02f, int ir=4, bool reverse=false)</argsstring>
        <name>warp_downslope</name>
        <qualifiedname>hmap::warp_downslope</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amount</declname>
          <defval>0.02<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
          <defval>4</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>reverse</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Apply a warping effect following the downward local gradient direction (deflate/inflate effect). </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies a warping effect to the input array based on the downward local gradient direction, simulating a deflate or inflate effect. The effect can be customized by adjusting the displacement amount, pre-filtering radius, and whether the displacement direction is reversed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be warped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of displacement (default is 0.02f). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Pre-filtering radius to smooth the input data (default is 4). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reverse</parametername>
</parameternamelist>
<parameterdescription>
<para>Reverse the displacement direction if set to true (default is false).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_warp_downslope.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>mask<sp/>=<sp/>z1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(mask);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/>z1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a5d5baa80ff76a31a24e3b348edb0520a" kindref="member">hmap::warp_downslope</ref>(z2,<sp/>&amp;mask,<sp/>0.02f,<sp/>4,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_warp_downslope.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z1,<sp/>z2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_warp_downslope.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/transform/warp.cpp" line="79" column="6" bodyfile="HighMap/src/transform/warp.cpp" bodystart="79" bodyend="97" declfile="HighMap/include/highmap/transform.hpp" declline="276" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a2dba417aca5a0dcd02509617939d741b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::warp_downslope</definition>
        <argsstring>(Array &amp;array, const Array *p_mask, float amount=0.02f, int ir=4, bool reverse=false)</argsstring>
        <name>warp_downslope</name>
        <qualifiedname>hmap::warp_downslope</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amount</declname>
          <defval>0.02<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
          <defval>4</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>reverse</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Apply a warping effect following the downward local gradient direction (deflate/inflate effect) with a mask. </para>
        </briefdescription>
        <detaileddescription>
<para>This overloaded function applies a warping effect to the input array based on the downward local gradient direction using a specified mask. The mask controls where the warp effect is applied, with values expected in the range [0, 1]. This function allows for additional customization of the warp effect.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be warped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the mask array that filters the effect, expected in [0, 1]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of displacement (default is 0.02f). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir</parametername>
</parameternamelist>
<parameterdescription>
<para>Pre-filtering radius to smooth the input data (default is 4). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reverse</parametername>
</parameternamelist>
<parameterdescription>
<para>Reverse the displacement direction if set to true (default is false).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting filename="ex_warp_downslope.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>mask<sp/>=<sp/>z1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a262e6495cb2d02598f36a2b46114b2b4" kindref="member">hmap::remap</ref>(mask);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z2<sp/>=<sp/>z1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a5d5baa80ff76a31a24e3b348edb0520a" kindref="member">hmap::warp_downslope</ref>(z2,<sp/>&amp;mask,<sp/>0.02f,<sp/>4,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_warp_downslope.png&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{z1,<sp/>z2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a6d093dbf3088c52a8acee413942545d9" kindref="member">hmap::Cmap::TERRAIN</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_warp_downslope.png"></image>
 This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/transform/warp.cpp" line="99" column="6" bodyfile="HighMap/src/transform/warp.cpp" bodystart="99" bodyend="113" declfile="HighMap/include/highmap/transform.hpp" declline="304" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aa49ad80ba2711183ea6758d6d6d4d5f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::zoom</definition>
        <argsstring>(const Array &amp;array, float zoom_factor, bool periodic=false, Vec2&lt; float &gt; center={0.5f, 0.5f}, const Array *p_noise_x=nullptr, const Array *p_noise_y=nullptr, Vec4&lt; float &gt; bbox={0.f, 1.f, 0.f, 1.f})</argsstring>
        <name>zoom</name>
        <qualifiedname>hmap::zoom</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>zoom_factor</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>periodic</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; float &gt;</type>
          <declname>center</declname>
          <defval>{0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.5<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_noise_y</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
          <defval>{0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 0.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>, 1.<ref refid="distance__transform_8cpp_1abcb9259cf91bfd25e92a72cdf18c285e" kindref="member">f</ref>}</defval>
        </param>
        <briefdescription>
<para>Applies a zoom effect to a 2D array with an adjustable center. </para>
        </briefdescription>
        <detaileddescription>
<para>This function scales the input 2D array by a specified zoom factor, effectively resizing the array&apos;s contents. The zoom operation is centered around a specified point within the array, allowing for flexible zooming behavior. The function supports both periodic boundary conditions, where the array wraps around, and non-periodic conditions, where areas outside the original array bounds are filled with zeros.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The input 2D array to be zoomed. This array remains unmodified. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zoom_factor</parametername>
</parameternamelist>
<parameterdescription>
<para>The factor by which to zoom the array. A value greater than 1 enlarges the contents, while a value between 0 and 1 reduces them. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>periodic</parametername>
</parameternamelist>
<parameterdescription>
<para>If set to <computeroutput>true</computeroutput>, the zoom is periodic, meaning that elements moving out of the array bounds due to the zoom reappear on the opposite side. If <computeroutput>false</computeroutput>, areas outside the original array bounds are filled with zeros. The default is <computeroutput>false</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>The center of the zoom operation, specified as a <computeroutput><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt;float&gt;</computeroutput> with coordinates in the range [0, 1], where {0.5f, 0.5f} represents the center of the array. The default center is {0.5f, 0.5f}. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_x</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to a 2D array that contains x-direction noise to be added during the zoom operation. If provided, the noise values are applied to the x-coordinates of the zoomed array on a per-element basis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_noise_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional pointer to a 2D array that contains y-direction noise to be added during the zoom operation. If provided, the noise values are applied to the y-coordinates of the zoomed array on a per-element basis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain bounding box.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new 2D array that is the result of applying the zoom effect to the input <computeroutput>array</computeroutput> by the specified <computeroutput>zoom_factor</computeroutput> and centered at the specified <computeroutput>center</computeroutput>.</para>
</simplesect>
<bold>Example</bold> <programlisting filename="ex_zoom.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="highmap_8hpp" kindref="compound">highmap.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;int&gt;</ref><sp/><sp/><sp/>shape<sp/>=<sp/>{256,<sp/>256};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>res<sp/>=<sp/>{4.f,<sp/>4.f};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref><sp/>z<sp/>=<sp/><ref refid="namespacehmap_1a40b948c49a05c14f2d540dc1a6952130" kindref="member">hmap::noise_fbm</ref>(<ref refid="namespacehmap_1ab8197c4c7a85dacb616fee7a7d0df195a87c6abee9c8e2441859223b28e9b4581" kindref="member">hmap::NoiseType::PERLIN</ref>,<sp/>shape,<sp/>res,<sp/>seed);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehmap_1aa49ad80ba2711183ea6758d6d6d4d5f7" kindref="member">zoom</ref><sp/>=<sp/>2.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structhmap_1_1Vec2" kindref="compound">hmap::Vec2&lt;float&gt;</ref><sp/>center<sp/>=<sp/>{0.25f,<sp/>0.f};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/><ref refid="namespacehmap_1aa49ad80ba2711183ea6758d6d6d4d5f7" kindref="member">hmap::zoom</ref>(z,<sp/><ref refid="namespacehmap_1aa49ad80ba2711183ea6758d6d6d4d5f7" kindref="member">zoom</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/><ref refid="namespacehmap_1aa49ad80ba2711183ea6758d6d6d4d5f7" kindref="member">hmap::zoom</ref>(z,<sp/><ref refid="namespacehmap_1aa49ad80ba2711183ea6758d6d6d4d5f7" kindref="member">zoom</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>center);<sp/></highlight><highlight class="comment">//<sp/>false<sp/>for<sp/>not<sp/>periodic</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>avoid:<sp/>zoom<sp/>&lt;<sp/>1.f,<sp/>w/<sp/>periodic<sp/>boundaries</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z3<sp/>=<sp/><ref refid="namespacehmap_1aa49ad80ba2711183ea6758d6d6d4d5f7" kindref="member">hmap::zoom</ref>(z,<sp/>0.5f,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacehmap_1a1c490f296571a75e35d05b10c075ae6c" kindref="member">hmap::export_banner_png</ref>(</highlight><highlight class="stringliteral">&quot;ex_zoom.png&quot;</highlight><highlight class="normal">,<sp/>{z,<sp/>z1,<sp/>z2,<sp/>z3},<sp/><ref refid="namespacehmap_1ac70fe3cbb32e0340d5dd3e15cdcf9369a744ead0b170889e33126895264f1af2c" kindref="member">hmap::Cmap::MAGMA</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Result</bold> <image type="html" name="ex_zoom.png"></image>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/transform/transform.cpp" line="135" column="7" bodyfile="HighMap/src/transform/transform.cpp" bodystart="135" bodyend="165" declfile="HighMap/include/highmap/transform.hpp" declline="355" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aac1a15042e8fae93d9caed60c2318fcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::operator*</definition>
        <argsstring>(const float value, const Array &amp;array)</argsstring>
        <name>operator*</name>
        <qualifiedname>hmap::operator*</qualifiedname>
        <param>
          <type>const float</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar value to multiply. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> to multiply with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The resulting <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> after multiplication. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/array/array.cpp" line="156" column="7" bodyfile="HighMap/src/array/array.cpp" bodystart="156" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a7f71bb0e96a77a1302a4d6e151f540cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::operator/</definition>
        <argsstring>(const float value, const Array &amp;array)</argsstring>
        <name>operator/</name>
        <qualifiedname>hmap::operator/</qualifiedname>
        <param>
          <type>const float</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar value to divide by. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> to divide by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The resulting <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> after division. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/array/array.cpp" line="190" column="7" bodyfile="HighMap/src/array/array.cpp" bodystart="190" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ab47e8203dd4ddf61741a3a8e25a5e2f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::operator+</definition>
        <argsstring>(const float value, const Array &amp;array)</argsstring>
        <name>operator+</name>
        <qualifiedname>hmap::operator+</qualifiedname>
        <param>
          <type>const float</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar value to add. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The resulting <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> after addition. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/array/array.cpp" line="224" column="7" bodyfile="HighMap/src/array/array.cpp" bodystart="224" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a18b032bb8f2dd4a18b9e0944dae85ae8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>const Array hmap::operator-</definition>
        <argsstring>(const float value, const Array &amp;array)</argsstring>
        <name>operator-</name>
        <qualifiedname>hmap::operator-</qualifiedname>
        <param>
          <type>const float</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar value to subtract. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> to subtract from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> The resulting <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> after subtraction. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/array/array.cpp" line="269" column="13" bodyfile="HighMap/src/array/array.cpp" bodystart="269" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a51bede9c24a0c1489c27d74c662eb579" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void hmap::convert_mat_to_array</definition>
        <argsstring>(const cv::Mat &amp;mat, Array &amp;array)</argsstring>
        <name>convert_mat_to_array</name>
        <qualifiedname>hmap::convert_mat_to_array</qualifiedname>
        <param>
          <type>const cv::Mat &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/array/opencv_wrapper.cpp" line="19" column="6" bodyfile="HighMap/src/array/opencv_wrapper.cpp" bodystart="19" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a3d953aa5fcf59193b3b8b98db3f5a872" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::square_fill_md</definition>
        <argsstring>(Array &amp;array, Mat&lt; int &gt; &amp;is_done, int i1, int i2, int j1, int j2, float noise_scale, std::mt19937 gen, std::uniform_real_distribution&lt; float &gt; dis)</argsstring>
        <name>square_fill_md</name>
        <qualifiedname>hmap::square_fill_md</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Mat" kindref="compound">Mat</ref>&lt; int &gt; &amp;</type>
          <declname>is_done</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>noise_scale</declname>
        </param>
        <param>
          <type>std::mt19937</type>
          <declname>gen</declname>
        </param>
        <param>
          <type>std::uniform_real_distribution&lt; float &gt;</type>
          <declname>dis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/authoring/reverse_midpoint.cpp" line="17" column="6" bodyfile="HighMap/src/authoring/reverse_midpoint.cpp" bodystart="17" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1af5440364a346b297246885e95793ef45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::square_md</definition>
        <argsstring>(Array &amp;array, Mat&lt; int &gt; &amp;is_done, int step, float noise_scale, std::mt19937 gen, std::uniform_real_distribution&lt; float &gt; dis)</argsstring>
        <name>square_md</name>
        <qualifiedname>hmap::square_md</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Mat" kindref="compound">Mat</ref>&lt; int &gt; &amp;</type>
          <declname>is_done</declname>
        </param>
        <param>
          <type>int</type>
          <declname>step</declname>
        </param>
        <param>
          <type>float</type>
          <declname>noise_scale</declname>
        </param>
        <param>
          <type>std::mt19937</type>
          <declname>gen</declname>
        </param>
        <param>
          <type>std::uniform_real_distribution&lt; float &gt;</type>
          <declname>dis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/authoring/reverse_midpoint.cpp" line="145" column="6" bodyfile="HighMap/src/authoring/reverse_midpoint.cpp" bodystart="145" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a10284155e51dc2eb2dcf601e43593420" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; float(float)&gt;</type>
        <definition>std::function&lt; float(float)&gt; hmap::helper_get_profile_function</definition>
        <argsstring>(const ErosionProfile &amp;erosion_profile, float delta, float &amp;profile_avg)</argsstring>
        <name>helper_get_profile_function</name>
        <qualifiedname>hmap::helper_get_profile_function</qualifiedname>
        <param>
          <type>const <ref refid="namespacehmap_1a25a4e4775f3c0918ed75f0503f5ed0a6" kindref="member">ErosionProfile</ref> &amp;</type>
          <declname>erosion_profile</declname>
        </param>
        <param>
          <type>float</type>
          <declname>delta</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>profile_avg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/hydraulic_procedural.cpp" line="24" column="15" bodyfile="HighMap/src/erosion/hydraulic_procedural.cpp" bodystart="24" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aba0d25f051d23c9c637973b7edf19922" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::helper_thermal_exchange</definition>
        <argsstring>(float self, float other, float dist, float talus)</argsstring>
        <name>helper_thermal_exchange</name>
        <qualifiedname>hmap::helper_thermal_exchange</qualifiedname>
        <param>
          <type>float</type>
          <declname>self</declname>
        </param>
        <param>
          <type>float</type>
          <declname>other</declname>
        </param>
        <param>
          <type>float</type>
          <declname>dist</declname>
        </param>
        <param>
          <type>float</type>
          <declname>talus</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/erosion/thermal.cpp" line="24" column="7" bodyfile="HighMap/src/erosion/thermal.cpp" bodystart="24" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a108e699ce689fbb425f11ed2485150ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::helper_smooth_corners</definition>
        <argsstring>(Array &amp;cubemap, int noverlap, int ir, Vec4&lt; int &gt; idx_front, Vec4&lt; int &gt; idx_back)</argsstring>
        <name>helper_smooth_corners</name>
        <qualifiedname>hmap::helper_smooth_corners</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>cubemap</declname>
        </param>
        <param>
          <type>int</type>
          <declname>noverlap</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; int &gt;</type>
          <declname>idx_front</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; int &gt;</type>
          <declname>idx_back</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/export/export_as_cubemap.cpp" line="21" column="6" bodyfile="HighMap/src/export/export_as_cubemap.cpp" bodystart="21" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a9bab94bd2d87290be7f4fde49095b311" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::helper_get_rtheta_stretch</definition>
        <argsstring>(int i, int j, int ic, int jc, int nradius, float &amp;radius, float &amp;theta, int config)</argsstring>
        <name>helper_get_rtheta_stretch</name>
        <qualifiedname>hmap::helper_get_rtheta_stretch</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ic</declname>
        </param>
        <param>
          <type>int</type>
          <declname>jc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nradius</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>theta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/export/export_as_cubemap.cpp" line="60" column="6" bodyfile="HighMap/src/export/export_as_cubemap.cpp" bodystart="60" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1acc54c794223302fc298eeeb563a27d0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hmap::helper_get_distance_polar</definition>
        <argsstring>(float r1, float theta1, float r2, float theta2)</argsstring>
        <name>helper_get_distance_polar</name>
        <qualifiedname>hmap::helper_get_distance_polar</qualifiedname>
        <param>
          <type>float</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>theta1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>r2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>theta2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/export/export_as_cubemap.cpp" line="87" column="7" bodyfile="HighMap/src/export/export_as_cubemap.cpp" bodystart="87" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a44e4240c5e7a9cfd46de3c27562ed201" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::helper_smooth_triple_corner</definition>
        <argsstring>(Array &amp;zfull, int ic, int jc, int noverlap, int ir, int config)</argsstring>
        <name>helper_smooth_triple_corner</name>
        <qualifiedname>hmap::helper_smooth_triple_corner</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>zfull</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ic</declname>
        </param>
        <param>
          <type>int</type>
          <declname>jc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>noverlap</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/export/export_as_cubemap.cpp" line="93" column="6" bodyfile="HighMap/src/export/export_as_cubemap.cpp" bodystart="93" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1af95eb203aa8ba710c26f8c5ad7535125" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string hmap::extract_raw_filename</definition>
        <argsstring>(std::string fname)</argsstring>
        <name>extract_raw_filename</name>
        <qualifiedname>hmap::extract_raw_filename</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/export/export_asset.cpp" line="21" column="13" bodyfile="HighMap/src/export/export_asset.cpp" bodystart="21" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a82490d2d9081a59290630bd0d76b965c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor hmap::compute_splatmap</definition>
        <argsstring>(const Array *p_r, const Array *p_g, const Array *p_b, const Array *p_a)</argsstring>
        <name>compute_splatmap</name>
        <qualifiedname>hmap::compute_splatmap</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_r</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_g</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_b</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/export/export_splatmap.cpp" line="14" column="8" bodyfile="HighMap/src/export/export_splatmap.cpp" bodystart="14" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ad8482d5a5c0650c20ffe1dc86b5f8a61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::recurve_bexp</definition>
        <argsstring>(Array &amp;array, float tau, const Array *p_mask)</argsstring>
        <name>recurve_bexp</name>
        <qualifiedname>hmap::recurve_bexp</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>tau</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/recurve.cpp" line="62" column="6" bodyfile="HighMap/src/filters/recurve.cpp" bodystart="62" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ad1ea450b3a5185e8066a5da48718489c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::recurve_exp</definition>
        <argsstring>(Array &amp;array, float tau, const Array *p_mask)</argsstring>
        <name>recurve_exp</name>
        <qualifiedname>hmap::recurve_exp</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>tau</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/filters/recurve.cpp" line="87" column="6" bodyfile="HighMap/src/filters/recurve.cpp" bodystart="87" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a61bb54fa22f06f142b0c99d5f39f5b42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::rescale_grid_from_unit_square_to_bbox</definition>
        <argsstring>(std::vector&lt; float &gt; &amp;x, std::vector&lt; float &gt; &amp;y, Vec4&lt; float &gt; bbox)</argsstring>
        <name>rescale_grid_from_unit_square_to_bbox</name>
        <qualifiedname>hmap::rescale_grid_from_unit_square_to_bbox</qualifiedname>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;</type>
          <declname>bbox</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/grid.cpp" line="323" column="6" bodyfile="HighMap/src/geometry/grid.cpp" bodystart="323" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ac070e7f9253f57fe6b44ad1f6c9fd753" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hmap::cmp_inf</definition>
        <argsstring>(Point &amp;a, Point &amp;b)</argsstring>
        <name>cmp_inf</name>
        <qualifiedname>hmap::cmp_inf</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Point" kindref="compound">Point</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/geometry/points.cpp" line="225" column="6" bodyfile="HighMap/src/geometry/points.cpp" bodystart="225" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ad97b6a0082efd4063f7839c95a51b294" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::compute_gradient</definition>
        <argsstring>(const Array &amp;array, Array &amp;dx, Array &amp;dy, float x_coeff[3], float y_coeff[3], float normalize_factor)</argsstring>
        <name>compute_gradient</name>
        <qualifiedname>hmap::compute_gradient</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x_coeff</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>float</type>
          <declname>y_coeff</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>float</type>
          <declname>normalize_factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/gradient/gradient.cpp" line="16" column="6" bodyfile="HighMap/src/gradient/gradient.cpp" bodystart="16" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aa2c4a82ac72b15cac34f868be9743471" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::compute_gradient_norm</definition>
        <argsstring>(const Array &amp;array, float x_coeff[3], float y_coeff[3], float normalize_factor, Array *p_dx=nullptr, Array *p_dy=nullptr)</argsstring>
        <name>compute_gradient_norm</name>
        <qualifiedname>hmap::compute_gradient_norm</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x_coeff</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>float</type>
          <declname>y_coeff</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>float</type>
          <declname>normalize_factor</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_dx</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> *</type>
          <declname>p_dy</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/gradient/gradient.cpp" line="42" column="7" bodyfile="HighMap/src/gradient/gradient.cpp" bodystart="42" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a79a02efb856e14f99c2accbfa595e0d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structhmap_1_1HeightmapRGB" kindref="compound">HeightmapRGB</ref></type>
        <definition>HeightmapRGB hmap::mix_heightmap_rgb</definition>
        <argsstring>(HeightmapRGB &amp;rgb1, HeightmapRGB &amp;rgb2, Heightmap &amp;t)</argsstring>
        <name>mix_heightmap_rgb</name>
        <qualifiedname>hmap::mix_heightmap_rgb</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1HeightmapRGB" kindref="compound">HeightmapRGB</ref> &amp;</type>
          <declname>rgb1</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1HeightmapRGB" kindref="compound">HeightmapRGB</ref> &amp;</type>
          <declname>rgb2</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rgb1</parametername>
</parameternamelist>
<parameterdescription>
<para>1st RGB heightmap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rgb2</parametername>
</parameternamelist>
<parameterdescription>
<para>2st RGB heightmap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Mixing parameter, in [0, 1]. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RGB heightmap. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/heightmap/heightmap_rgb.cpp" line="142" column="14" bodyfile="HighMap/src/heightmap/heightmap_rgb.cpp" bodystart="142" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ad16911f0a44281ab16b10eb90926f674" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structhmap_1_1HeightmapRGB" kindref="compound">HeightmapRGB</ref></type>
        <definition>HeightmapRGB hmap::mix_heightmap_rgb</definition>
        <argsstring>(HeightmapRGB &amp;rgb1, HeightmapRGB &amp;rgb2, float t)</argsstring>
        <name>mix_heightmap_rgb</name>
        <qualifiedname>hmap::mix_heightmap_rgb</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1HeightmapRGB" kindref="compound">HeightmapRGB</ref> &amp;</type>
          <declname>rgb1</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1HeightmapRGB" kindref="compound">HeightmapRGB</ref> &amp;</type>
          <declname>rgb2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/heightmap/heightmap_rgb.cpp" line="173" column="14" bodyfile="HighMap/src/heightmap/heightmap_rgb.cpp" bodystart="173" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a87f3209d8f2aa9ce947a292fbfe4fe4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structhmap_1_1HeightmapRGB" kindref="compound">HeightmapRGB</ref></type>
        <definition>HeightmapRGB hmap::mix_heightmap_rgb_sqrt</definition>
        <argsstring>(HeightmapRGB &amp;rgb1, HeightmapRGB &amp;rgb2, Heightmap &amp;t)</argsstring>
        <name>mix_heightmap_rgb_sqrt</name>
        <qualifiedname>hmap::mix_heightmap_rgb_sqrt</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1HeightmapRGB" kindref="compound">HeightmapRGB</ref> &amp;</type>
          <declname>rgb1</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1HeightmapRGB" kindref="compound">HeightmapRGB</ref> &amp;</type>
          <declname>rgb2</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rgb1</parametername>
</parameternamelist>
<parameterdescription>
<para>1st RGB heightmap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rgb2</parametername>
</parameternamelist>
<parameterdescription>
<para>2st RGB heightmap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Mixing parameter, in [0, 1]. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RGB heightmap. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/heightmap/heightmap_rgb.cpp" line="201" column="14" bodyfile="HighMap/src/heightmap/heightmap_rgb.cpp" bodystart="201" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ac5c38a2d95e658542576c82eee91d4e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structhmap_1_1HeightmapRGB" kindref="compound">HeightmapRGB</ref></type>
        <definition>HeightmapRGB hmap::mix_heightmap_rgb_sqrt</definition>
        <argsstring>(HeightmapRGB &amp;rgb1, HeightmapRGB &amp;rgb2, float t)</argsstring>
        <name>mix_heightmap_rgb_sqrt</name>
        <qualifiedname>hmap::mix_heightmap_rgb_sqrt</qualifiedname>
        <param>
          <type><ref refid="structhmap_1_1HeightmapRGB" kindref="compound">HeightmapRGB</ref> &amp;</type>
          <declname>rgb1</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1HeightmapRGB" kindref="compound">HeightmapRGB</ref> &amp;</type>
          <declname>rgb2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/heightmap/heightmap_rgb.cpp" line="232" column="14" bodyfile="HighMap/src/heightmap/heightmap_rgb.cpp" bodystart="232" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a0218fc9914980f2103a86ec7f4fa7d44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::fill</definition>
        <argsstring>(Heightmap &amp;h, Heightmap *p_noise_x, Heightmap *p_noise_y, std::function&lt; Array(Vec2&lt; int &gt;, Vec4&lt; float &gt;, hmap::Array *, hmap::Array *)&gt; nullary_op)</argsstring>
        <name>fill</name>
        <qualifiedname>hmap::fill</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> *</type>
          <declname>p_noise_x</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> *</type>
          <declname>p_noise_y</declname>
        </param>
        <param>
          <type>std::function&lt; <ref refid="classhmap_1_1Array" kindref="compound">Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;, <ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;, <ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref> *, <ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref> *)&gt;</type>
          <declname>nullary_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/heightmap/heightmap_transform.cpp" line="40" column="6" bodyfile="HighMap/src/heightmap/heightmap_transform.cpp" bodystart="40" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a7c7bafbcc451b2ebb4c199e40f07a041" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::fill</definition>
        <argsstring>(Heightmap &amp;h, Heightmap *p_noise, std::function&lt; Array(Vec2&lt; int &gt;, Vec4&lt; float &gt;, hmap::Array *)&gt; nullary_op)</argsstring>
        <name>fill</name>
        <qualifiedname>hmap::fill</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="classhmap_1_1Heightmap" kindref="compound">Heightmap</ref> *</type>
          <declname>p_noise</declname>
        </param>
        <param>
          <type>std::function&lt; <ref refid="classhmap_1_1Array" kindref="compound">Array</ref>(<ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt;, <ref refid="structhmap_1_1Vec4" kindref="compound">Vec4</ref>&lt; float &gt;, <ref refid="classhmap_1_1Array" kindref="compound">hmap::Array</ref> *)&gt;</type>
          <declname>nullary_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/heightmap/heightmap_transform.cpp" line="127" column="6" bodyfile="HighMap/src/heightmap/heightmap_transform.cpp" bodystart="127" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a7376f7c00281f0616024d33069971ca4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::helper_find_up_downslope</definition>
        <argsstring>(const Array &amp;z, const Vec2&lt; int &gt; &amp;ij, Vec2&lt; int &gt; &amp;ij_dw, Vec2&lt; int &gt; &amp;ij_up)</argsstring>
        <name>helper_find_up_downslope</name>
        <qualifiedname>hmap::helper_find_up_downslope</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const <ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt; &amp;</type>
          <declname>ij</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt; &amp;</type>
          <declname>ij_dw</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Vec2" kindref="compound">Vec2</ref>&lt; int &gt; &amp;</type>
          <declname>ij_up</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/hydrology/flow_stream.cpp" line="14" column="6" bodyfile="HighMap/src/hydrology/flow_stream.cpp" bodystart="14" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a567abeb8b68a281411d811987a84ee42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hmap::is_monotonic</definition>
        <argsstring>(const std::vector&lt; float &gt; &amp;data)</argsstring>
        <name>is_monotonic</name>
        <qualifiedname>hmap::is_monotonic</qualifiedname>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/interpolate/interpolate1d.cpp" line="20" column="6" bodyfile="HighMap/src/interpolate/interpolate1d.cpp" bodystart="20" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ad2cd9e279b20e6621b1daca2d2b732bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hmap::find_last_index_smaller_than</definition>
        <argsstring>(const std::vector&lt; float &gt; &amp;vec, float threshold)</argsstring>
        <name>find_last_index_smaller_than</name>
        <qualifiedname>hmap::find_last_index_smaller_than</qualifiedname>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>float</type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/interpolate/interpolate_curve.cpp" line="12" column="5" bodyfile="HighMap/src/interpolate/interpolate_curve.cpp" bodystart="12" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1acc88d4cddcb41e8142b7fef4846e3454" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref></type>
        <definition>Array hmap::hypot</definition>
        <argsstring>(const Array &amp;array1, const Array &amp;array2)</argsstring>
        <name>hypot</name>
        <qualifiedname>hmap::hypot</qualifiedname>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array1</declname>
        </param>
        <param>
          <type>const <ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/math/math.cpp" line="147" column="7" bodyfile="HighMap/src/math/math.cpp" bodystart="147" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a2c98f2116e221df5f6684a7546bb233f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::helper_thinning</definition>
        <argsstring>(Array &amp;in, int iter)</argsstring>
        <name>helper_thinning</name>
        <qualifiedname>hmap::helper_thinning</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/morphology/morphology.cpp" line="103" column="6" bodyfile="HighMap/src/morphology/morphology.cpp" bodystart="103" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a5ce9334e0b274e48f7ba8bcaa9dd12a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hmap::cmp_path</definition>
        <argsstring>(std::pair&lt; float, std::vector&lt; int &gt; &gt; &amp;a, std::pair&lt; float, std::vector&lt; int &gt; &gt; &amp;b)</argsstring>
        <name>cmp_path</name>
        <qualifiedname>hmap::cmp_path</qualifiedname>
        <param>
          <type>std::pair&lt; float, std::vector&lt; int &gt; &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>std::pair&lt; float, std::vector&lt; int &gt; &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/operator/stitching_helpers.cpp" line="13" column="6" bodyfile="HighMap/src/operator/stitching_helpers.cpp" bodystart="13" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a36f7eca67d2fdc5dd03a63f8b1d7255e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::helper_flip_rot_transpose</definition>
        <argsstring>(Array &amp;array, bool do_flip_ud, bool do_flip_lr, bool do_rot90, bool do_transpose)</argsstring>
        <name>helper_flip_rot_transpose</name>
        <qualifiedname>hmap::helper_flip_rot_transpose</qualifiedname>
        <param>
          <type><ref refid="classhmap_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_flip_ud</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_flip_lr</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_rot90</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_transpose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/operator/stitching_helpers.cpp" line="115" column="6" bodyfile="HighMap/src/operator/stitching_helpers.cpp" bodystart="115" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1ac1fdc0ac0b6e1024faeaddcd30ebe2fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::reindex_vector</definition>
        <argsstring>(std::vector&lt; int &gt; &amp;v, std::vector&lt; size_t &gt; &amp;idx)</argsstring>
        <name>reindex_vector</name>
        <qualifiedname>hmap::reindex_vector</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; &amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/operator/vector_utils.cpp" line="39" column="6" declfile="HighMap/src/operator/vector_utils.cpp" declline="39" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a5cca080874e8af74fa03a3f0f0d2f307" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hmap::reindex_vector</definition>
        <argsstring>(std::vector&lt; float &gt; &amp;v, std::vector&lt; size_t &gt; &amp;idx)</argsstring>
        <name>reindex_vector</name>
        <qualifiedname>hmap::reindex_vector</qualifiedname>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; &amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/operator/vector_utils.cpp" line="40" column="6" declfile="HighMap/src/operator/vector_utils.cpp" declline="40" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1a0a359831aea68622813f65f4a989a75a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hmap::count_neighbors_to_fill</definition>
        <argsstring>(int i, int j, Mat&lt; int &gt; &amp;is_cell_done)</argsstring>
        <name>count_neighbors_to_fill</name>
        <qualifiedname>hmap::count_neighbors_to_fill</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="structhmap_1_1Mat" kindref="compound">Mat</ref>&lt; int &gt; &amp;</type>
          <declname>is_cell_done</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/synthesis/non_parameteric_sampling.cpp" line="15" column="5" bodyfile="HighMap/src/synthesis/non_parameteric_sampling.cpp" bodystart="15" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="namespacehmap_1aa7538088dbfe576e77ccbe14e9a6c9d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hmap::cmp_queue</definition>
        <argsstring>(std::pair&lt; int, std::pair&lt; int, int &gt; &gt; &amp;a, std::pair&lt; int, std::pair&lt; int, int &gt; &gt; &amp;b)</argsstring>
        <name>cmp_queue</name>
        <qualifiedname>hmap::cmp_queue</qualifiedname>
        <param>
          <type>std::pair&lt; int, std::pair&lt; int, int &gt; &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>std::pair&lt; int, std::pair&lt; int, int &gt; &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="HighMap/src/synthesis/non_parameteric_sampling.cpp" line="31" column="6" bodyfile="HighMap/src/synthesis/non_parameteric_sampling.cpp" bodystart="31" bodyend="35"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="HighMap/include/highmap/algebra.hpp" line="27" column="1"/>
  </compounddef>
</doxygen>
